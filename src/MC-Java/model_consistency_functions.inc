.//====================================================================
.//
.// File:      $RCSfile: model_consistency_functions.inc,v $
.// Version:   $Revision: 1.17 $
.// Modified:  $Date: 2013/01/10 23:16:26 $
.//
.// (c) Copyright 2005-2014 Mentor Graphics Corporation  All rights reserved.
.//
.//====================================================================
.//
.//====================================================================
.//
.// This archetype provides functions used to instrument the code
.// generated by MC-Java with model consistency checks
.// 
.function create_test_class
  .param inst_ref object
  .param inst_ref_set id_attrs
  .param boolean is_referring
  .//
  .//
  .invoke clsnam = get_class_name(object)
  .assign attr_clsnam = clsnam.body
  .assign clsnum = "${info.unique_num}"
  .assign attr_clsnum = clsnum
  .invoke clstnm = get_test_class_name();
  .invoke declares = create_test_class_declarations(id_attrs, is_referring)
  .assign attr_params = declares.params
 .//
    class ${clsnam.body}_test${clsnum}_c implements ${clstnm.body}
    {
	  ${clsnam.body}_test${clsnum}_c( ${declares.declares} ) {
	  ${declares.members}
	  }
	  ${declares.privates}
	  public boolean evaluate (Object candidate)
	  {
	      ${clsnam.body} selected = (${clsnam.body}) candidate;
	      boolean retval = false;
	      retval = ${declares.equals}
	      return retval;
	  }
    }
 .// 
.end function
.//
.//====================================================================
.//
.function create_test_class_declarations
  .param inst_ref_set id_attrs
  .param boolean is_referring
  .assign attr_declares = ""
  .assign attr_members = ""
  .assign attr_privates = ""
  .assign attr_equals = ""
  .assign attr_params = ""
  .for each id_attr in id_attrs
    .select one att_type related by id_attr->S_DT[R114]
    .if (att_type.Name == "same_as<Base_Attribute>")
      .select one att_type related by id_attr->O_RATTR[R106]->O_BATTR[R113]->O_ATTR[R106]->S_DT[R114]
    .end if
    .invoke att_decl = do_type(att_type)
    .select one refer_attr related by id_attr->O_RATTR[R106]->O_BATTR[R113]->O_ATTR[R106]
    .select any refattr related by id_attr->O_RATTR[R106]->O_REF[R108]->O_RTIDA[R111]->O_OIDA[R110]->O_ATTR[R105]
    .assign ptrnum = "${info.unique_num}"
    .assign attr_declares = attr_declares + "${att_decl.body}    p${ptrnum}"
    .if (not_last id_attrs)
      .assign attr_declares = attr_declares + ", "
    .end if
    .if (not_first id_attrs)
      .assign attr_members = "     " + attr_members
    .end if
    .assign attr_members = attr_members + "m_p${ptrnum} = p${ptrnum};"
    .if (not_last id_attrs)
      .assign attr_members = attr_members + " \n"
    .end if
    .assign attr_privates = attr_privates + "private ${att_decl.body}     m_p${ptrnum}; "
    .if ( ("$r{att_decl.body}" == "String") or (att_type.Name == "unique_id"))
      .if (is_referring)
        .assign attr_equals = attr_equals + "(selected.get$cr{refattr.Name}().equals(m_p${ptrnum}))"
      .else
        .assign attr_equals = attr_equals + "(selected.get$cr{id_attr.Name}().equals(m_p${ptrnum}))"
      .end if
    .else
      .if (is_referring)
        .assign attr_equals = attr_equals + "(selected.get$cr{refer_attr.Name}() == (m_p${ptrnum}))"
      .else
        .assign attr_equals = attr_equals + "(selected.get$cr{id_attr.Name}() == (m_p${ptrnum}))"
      .end if
    .end if
    .if (not_last id_attrs)
      .assign attr_equals = attr_equals + " & "
    .else
      .assign attr_equals = attr_equals + ";"
    .end if
    .assign attr_params = attr_params + "get$cr{id_attr.Name}()"
    .if (not_last id_attrs)
      .assign attr_params = attr_params + ", "
    .end if  
  .end for
.end function
.//
.//====================================================================
.//
.function create_test_class_parameters
  .param inst_ref_set id_attrs
  .param boolean usePrefix
  .assign attr_params = ""
  .for each id_attr in id_attrs
    .select one obj related by id_attr->O_OBJ[R102]
    .select any rto_attr related by id_attr->O_RATTR[R106]->O_REF[R108]->O_RTIDA[R111]->O_OIDA[R110]->O_ATTR[R105]
    .if ((empty rto_attr) or (usePrefix))
      .assign attr_params = attr_params + "get$cr{id_attr.Name}()"
    .else
      .assign attr_params = attr_params + "get$cr{rto_attr.Name}()"
    .end if
    .if (not_last id_attrs)
      .assign attr_params = attr_params + ", "
    .end if  
  .end for
.end function
.//
.//====================================================================
.//
.function create_test_class_print_params
  .param inst_ref_set id_attrs
  .select any print_attr from instances of O_ATTR
  .for each id_attr in id_attrs
    .select one att_type related by id_attr->S_DT[R114]
    .if (att_type.Name == "same_as<Base_Attribute>")
      .select one att_type related by id_attr->O_RATTR[R106]->O_BATTR[R113]->O_ATTR[R106]->S_DT[R114]
    .end if
    .invoke att_decl = do_type(att_type)
    .if ( first id_attrs )
+ \
    .end if
    .if ( "$r{att_decl.body}" == "String")
" ${id_attr.Name}: " + get$cr{id_attr.Name}() \
    .elif  ( "$r{att_decl.body}" == "int")
" ${id_attr.Name}: " + Integer.toString(get$cr{id_attr.Name}()) \
    .elif  ( "$r{att_decl.body}" == "long")
" ${id_attr.Name}: " + Long.toString(get$cr{id_attr.Name}()) \
    .elif  ( "$r{att_decl.body}" == "boolean")
" ${id_attr.Name}: " + Boolean.toString(get$cr{id_attr.Name}()) \
    .elif  ( "$r{att_decl.body}" == "unique_id")
" ${id_attr.Name}: " + get$cr{id_attr.Name}().toString() \
    .else
" ${id_attr.Name}: " + "Not Printable" \
    .end if
    .if (not_last id_attrs)
 + \
    .else
    .end if  
  .end for
.end function
.//
.//====================================================================
.//
.function create_test_class_select
  .param inst_ref object
  .param frag_ref class_body
  .param frag_ref select_params
  .param string arraynum
  .param string root_class
  .assign model_root = "modelRoot"
  .if ("$l{object.Descrip:PEI}" == "true")
    .assign model_root = "${root_class}.getDefaultInstance()"
  .end if
    $cr{object.Name}_c [] objs${arraynum} = 
    $cr{object.Name}_c.$cr{object.Name}Instances(${model_root}, new ${class_body.clsnam}_test${class_body.clsnum}_c(${select_params.params})) ;
.end function
.//
.//====================================================================
.//
.function create_test_class_test
  .param inst_ref object
  .param string arraynum
  .param string test_type
  .param string error_message
  .param string identifier_string
  .param string test_value
  .param frag_ref package
  .if ( test_type == "zero" )
    .if (test_value == "array")
    if ( (  (objs${arraynum}.length) == 0) )
    .elif (test_value == "int")
    if ( objs${arraynum} == 0 )
    .end if
  .elif (test_type == "greater_than_one")
    .if (test_value == "array")
    if ( (  (objs${arraynum}.length) > 1) )
    .elif (test_value == "int")
    if ( objs${arraynum} > 1 )
    .end if
  .elif (test_type == "not_equal_one")
    .if (test_value == "array" )
    if ( (  (objs${arraynum}.length) != 1) )
    .elif (test_value == "int")
    if ( objs${arraynum} != 1 )
    .end if
  .end if
  .assign error_header = "Consistency: Object: ${object.Name}:"
  .assign error_message = error_header + error_message
  .assign actual_value = ""
  .if (test_value == "array")
    .assign actual_value = "Integer.toString( objs${arraynum}.length ) "
  .elif (test_value == "int")
    .assign actual_value = "Integer.toString( objs${arraynum} ) "
  .end if
    {
.invoke test_error = create_test_class_error(error_message, actual_value, identifier_string, package, object)
${test_error.body}
    }
.end function
.//
.//====================================================================
.//
.function create_test_class_error
  .param string error_message
  .param string actual_value
  .param string identifier_string
  .param frag_ref package
  .param inst_ref object

.// When there is a large number of inconsitencies, turning off exceptions may be useful      Exception e = null;
  .if ( identifier_string == "" )
    .if (actual_value != "" )
      .if ( package.is_eclipse_plugin )
      if (${package.plugin_classname}.getDefault().isDebugging()){
          ${package.application_root_class}.log.println(ILogger.CONSISTENCY, "${object.Name}", //$$NON-NLS-1$$
           "${error_message}" //$$NON-NLS-1$$
           + "Actual Value: " + ${actual_value}); //$$NON-NLS-1$$
      }
      else {
          Exception e = new Exception();
          ${package.plugin_classname}.logError("${error_message}" //$$NON-NLS-1$$ 
          + "Actual Value: " //$$NON-NLS-1$$
          + ${actual_value} , e); 
      }
      .else
      System.out.println("${error_message}" //$$NON-NLS-1$$
       + "Actual Value: " + ${actual_value}); //$$NON-NLS-1$$
      .end if
    .else
      .if ( package.is_eclipse_plugin )
      if (${package.plugin_classname}.getDefault().isDebugging()){
          ${package.application_root_class}.log.println(ILogger.CONSISTENCY, "${object.Name}", //$$NON-NLS-1$$
           "${error_message}" ); //$$NON-NLS-1$$
      }
      else {
          Exception e = new Exception();
          ${package.plugin_classname}.logError("${error_message}" , e); //$$NON-NLS-1$$
      }
      .else
      System.out.println("${error_message}"); //$$NON-NLS-1$$
      .end if
    .end if
  .else
    .if (actual_value != "")
      .if ( package.is_eclipse_plugin )
      if (${package.plugin_classname}.getDefault().isDebugging()){
          ${package.application_root_class}.log.println(ILogger.CONSISTENCY, "${object.Name}", //$$NON-NLS-1$$
           "${error_message}" //$$NON-NLS-1$$
           + "Actual Value: " //$$NON-NLS-1$$ 
           + ${actual_value} ${identifier_string}); //$$NON-NLS-1$$
      }
      else {
          Exception e = new Exception();
          ${package.plugin_classname}.logError("${error_message}" //$$NON-NLS-1$$ 
          + "Actual Value: " //$$NON-NLS-1$$
          + ${actual_value} ${identifier_string}, e); //$$NON-NLS-1$$
      }
      .else
       System.out.println("${error_message}" //$$NON-NLS-1$$
        + "Actual Value: " //$$NON-NLS-1$$ 
        + ${actual_value} ${identifier_string});
      .end if
    .else
      .if ( package.is_eclipse_plugin )
      if (${package.plugin_classname}.getDefault().isDebugging()){
          ${package.application_root_class}.log.println(ILogger.CONSISTENCY, "${object.Name}", //$$NON-NLS-1$$
           "${error_message}" ${identifier_string}); //$$NON-NLS-1$$
      }
      else {
          Exception e = new Exception();
          ${package.plugin_classname}.logError("${error_message}" ${identifier_string}, e); //$$NON-NLS-1$$
      }
    .end if
      .else
      System.out.println("${error_message}" ${identifier_string}); //$$NON-NLS-1$$
      .end if
  .end if
      retval = false;
.end function
