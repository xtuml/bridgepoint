-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("cddd54d9-32e9-8933-d41c-0b86f38d2883",
	112,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("89ab2ee0-db7e-c1d7-396e-760545004a23",
	"cddd54d9-32e9-8933-d41c-0b86f38d2883",
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("89ab2ee0-db7e-c1d7-396e-760545004a23");
INSERT INTO GD_NCS
	VALUES ("89ab2ee0-db7e-c1d7-396e-760545004a23");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"89ab2ee0-db7e-c1d7-396e-760545004a23");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"89ab2ee0-db7e-c1d7-396e-760545004a23",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("89ab2ee0-db7e-c1d7-396e-760545004a23",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429",
	"cddd54d9-32e9-8933-d41c-0b86f38d2883",
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429");
INSERT INTO GD_NCS
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"18dfbdb4-e648-6e14-a468-46c9c1622429");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"18dfbdb4-e648-6e14-a468-46c9c1622429",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18dfbdb4-e648-6e14-a468-46c9c1622429",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346",
	"cddd54d9-32e9-8933-d41c-0b86f38d2883",
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346");
INSERT INTO GD_NCS
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"95aa9471-bb88-bbfe-9f8e-7e8067af0346");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"95aa9471-bb88-bbfe-9f8e-7e8067af0346",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95aa9471-bb88-bbfe-9f8e-7e8067af0346",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("cddd54d9-32e9-8933-d41c-0b86f38d2883",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("890e87fe-67d6-51c3-c137-598ec4bf5f08",
	112,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63");
INSERT INTO GD_NCS
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"78f8057a-4cd2-88dd-a29d-5731216bdc63");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"78f8057a-4cd2-88dd-a29d-5731216bdc63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78f8057a-4cd2-88dd-a29d-5731216bdc63",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO GD_NCS
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("083ce3df-2abe-d172-3105-5e3b25275928",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("490cb18d-582d-4b42-94f5-5ff1ac4e4959",
	1760.000000,
	1856.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_CON
	VALUES ("cba580c1-e3f2-4ca0-514e-4ef499301915",
	1888.000000,
	1440.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_CON
	VALUES ("0cd2c19f-4bd2-5bdc-74b8-4fdf9bdbd56f",
	1888.000000,
	1584.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_CON
	VALUES ("2c25e762-4fa4-3b07-2335-3cd6b75d867a",
	1888.000000,
	1728.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_CON
	VALUES ("e0d1959c-51ec-c829-6b2f-f4287a8bc504",
	1888.000000,
	1472.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO DIM_CON
	VALUES ("363d915b-51e7-ffbb-0b06-b55017b5efe9",
	1856.000000,
	1856.000000,
	"083ce3df-2abe-d172-3105-5e3b25275928");
INSERT INTO GD_GE
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b");
INSERT INTO GD_NCS
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"077f242a-1c87-c229-0f12-590f1393846b");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"077f242a-1c87-c229-0f12-590f1393846b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("077f242a-1c87-c229-0f12-590f1393846b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b0a7211c-8b4d-d6d4-dc70-2be365bcefdd",
	2112.000000,
	1440.000000,
	"077f242a-1c87-c229-0f12-590f1393846b");
INSERT INTO DIM_CON
	VALUES ("505b1cb3-60ec-ef31-6192-c13e93dccbd2",
	2112.000000,
	1472.000000,
	"077f242a-1c87-c229-0f12-590f1393846b");
INSERT INTO GD_GE
	VALUES ("0bc8b857-5874-4841-72e1-351e8862fd2d",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("0bc8b857-5874-4841-72e1-351e8862fd2d");
INSERT INTO GD_NCS
	VALUES ("0bc8b857-5874-4841-72e1-351e8862fd2d");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"0bc8b857-5874-4841-72e1-351e8862fd2d");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"0bc8b857-5874-4841-72e1-351e8862fd2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0bc8b857-5874-4841-72e1-351e8862fd2d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5cb84cb1-edd7-4654-f68c-308efaa1d11c",
	2112.000000,
	1584.000000,
	"0bc8b857-5874-4841-72e1-351e8862fd2d");
INSERT INTO GD_GE
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b");
INSERT INTO GD_NCS
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"c41ee70a-2172-e12d-397c-41497909ef1b");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"c41ee70a-2172-e12d-397c-41497909ef1b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c41ee70a-2172-e12d-397c-41497909ef1b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1b97a54a-4943-a171-f341-e43a6e30e029",
	2112.000000,
	1728.000000,
	"c41ee70a-2172-e12d-397c-41497909ef1b");
INSERT INTO GD_GE
	VALUES ("74da663e-f5d1-36f3-afe9-945d3eaeb399",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("74da663e-f5d1-36f3-afe9-945d3eaeb399");
INSERT INTO GD_NCS
	VALUES ("74da663e-f5d1-36f3-afe9-945d3eaeb399");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"74da663e-f5d1-36f3-afe9-945d3eaeb399");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"74da663e-f5d1-36f3-afe9-945d3eaeb399",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("74da663e-f5d1-36f3-afe9-945d3eaeb399",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO GD_NCS
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08420ad0-a5e5-0c8d-7e99-1d08b1010fe0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0e20c15c-e84a-3321-094f-59827ebe816c",
	1760.000000,
	1952.000000,
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO DIM_CON
	VALUES ("d2ca61bf-07a2-8b4b-904c-c22896e30cba",
	1712.000000,
	2320.000000,
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO DIM_CON
	VALUES ("1a5b371a-d8af-21cd-02ef-5c580f017570",
	1856.000000,
	1952.000000,
	"08420ad0-a5e5-0c8d-7e99-1d08b1010fe0");
INSERT INTO GD_GE
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048");
INSERT INTO GD_NCS
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"f17289e0-af77-c0c0-2371-ff42c3549048");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"f17289e0-af77-c0c0-2371-ff42c3549048",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f17289e0-af77-c0c0-2371-ff42c3549048",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fc3b13f7-7d9e-1594-1ae8-888825b67729",
	1712.000000,
	2432.000000,
	"f17289e0-af77-c0c0-2371-ff42c3549048");
INSERT INTO GD_GE
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524");
INSERT INTO GD_NCS
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"e3e3ec7d-c857-8e49-492e-66e08b485524");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"e3e3ec7d-c857-8e49-492e-66e08b485524",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e3e3ec7d-c857-8e49-492e-66e08b485524",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c5574bd6-2973-9052-9948-5b86e45ceaa0",
	1392.000000,
	1696.000000,
	"e3e3ec7d-c857-8e49-492e-66e08b485524");
INSERT INTO DIM_CON
	VALUES ("32e8ad51-3c4c-d469-da09-00137d431390",
	1552.000000,
	1696.000000,
	"e3e3ec7d-c857-8e49-492e-66e08b485524");
INSERT INTO GD_GE
	VALUES ("a5814191-b85a-9d84-43ae-4fce8b9ab773",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO GD_NCS
	VALUES ("a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"a5814191-b85a-9d84-43ae-4fce8b9ab773",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5814191-b85a-9d84-43ae-4fce8b9ab773",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c9eae0cf-5ef0-c3bf-9179-38522cf20e0a",
	1392.000000,
	1856.000000,
	"a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO DIM_CON
	VALUES ("c00c2d89-33e0-b8b4-7ddc-21a55850e619",
	1552.000000,
	1856.000000,
	"a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO DIM_CON
	VALUES ("fdbafcb9-4115-6c51-9b69-21e31b43f91c",
	1456.000000,
	2048.000000,
	"a5814191-b85a-9d84-43ae-4fce8b9ab773");
INSERT INTO GD_GE
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b");
INSERT INTO GD_NCS
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"6b623577-b93c-8b9d-3635-06ba0aef8b0b");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6b623577-b93c-8b9d-3635-06ba0aef8b0b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1b51832d-e015-3b2e-273e-bdd453881ec9",
	1456.000000,
	2160.000000,
	"6b623577-b93c-8b9d-3635-06ba0aef8b0b");
INSERT INTO GD_GE
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2");
INSERT INTO GD_NCS
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"b8ec0700-bfe5-4a44-f284-6e8916d5c2c2");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"b8ec0700-bfe5-4a44-f284-6e8916d5c2c2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8ec0700-bfe5-4a44-f284-6e8916d5c2c2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("91a5dd3b-0158-408d-79b3-dc577a96269c",
	1024.000000,
	1696.000000,
	"b8ec0700-bfe5-4a44-f284-6e8916d5c2c2");
INSERT INTO DIM_CON
	VALUES ("484ce62d-3782-bbfb-9008-846cda725c05",
	1200.000000,
	1696.000000,
	"b8ec0700-bfe5-4a44-f284-6e8916d5c2c2");
INSERT INTO GD_GE
	VALUES ("cc867255-765e-d032-17ab-281080f44805",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("cc867255-765e-d032-17ab-281080f44805");
INSERT INTO GD_NCS
	VALUES ("cc867255-765e-d032-17ab-281080f44805");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"cc867255-765e-d032-17ab-281080f44805");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"cc867255-765e-d032-17ab-281080f44805",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc867255-765e-d032-17ab-281080f44805",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("82a927d9-6ec4-6791-04dc-7731a42e9477",
	1024.000000,
	1856.000000,
	"cc867255-765e-d032-17ab-281080f44805");
INSERT INTO DIM_CON
	VALUES ("f9af3fcf-b8b2-574c-a1cd-be96f086cb09",
	1200.000000,
	1856.000000,
	"cc867255-765e-d032-17ab-281080f44805");
INSERT INTO DIM_CON
	VALUES ("51df5da6-2fc3-669f-0f39-3c799a4132ea",
	1104.000000,
	2064.000000,
	"cc867255-765e-d032-17ab-281080f44805");
INSERT INTO GD_GE
	VALUES ("607497c5-4cd4-35b4-fea5-7f29183231cf",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("607497c5-4cd4-35b4-fea5-7f29183231cf");
INSERT INTO GD_NCS
	VALUES ("607497c5-4cd4-35b4-fea5-7f29183231cf");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"607497c5-4cd4-35b4-fea5-7f29183231cf");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"607497c5-4cd4-35b4-fea5-7f29183231cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("607497c5-4cd4-35b4-fea5-7f29183231cf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("17bf0551-9c63-b61a-379c-9dfa6077b75d",
	1104.000000,
	2160.000000,
	"607497c5-4cd4-35b4-fea5-7f29183231cf");
INSERT INTO GD_GE
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	21,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f");
INSERT INTO GD_NCS
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"902f1673-d309-8b24-f730-684e2ea1533f");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"902f1673-d309-8b24-f730-684e2ea1533f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("902f1673-d309-8b24-f730-684e2ea1533f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9f56f2a2-469f-92a3-304e-407aa55d8531",
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9f56f2a2-469f-92a3-304e-407aa55d8531");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9f56f2a2-469f-92a3-304e-407aa55d8531",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9f56f2a2-469f-92a3-304e-407aa55d8531",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a6ec277c-92b5-4b72-133b-0072c56d4be7",
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a6ec277c-92b5-4b72-133b-0072c56d4be7");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"a6ec277c-92b5-4b72-133b-0072c56d4be7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a6ec277c-92b5-4b72-133b-0072c56d4be7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("89abc7b0-e136-9124-d0f7-f6a4a950f903",
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"89abc7b0-e136-9124-d0f7-f6a4a950f903");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"89abc7b0-e136-9124-d0f7-f6a4a950f903",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("89abc7b0-e136-9124-d0f7-f6a4a950f903",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("5052799e-0696-68e5-32d2-458dfcb6c36b",
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"00000000-0000-0000-0000-000000000000",
	"b062b1b0-2bea-2bb8-7513-1da8ac21d362",
	"19d6c24d-c5dc-0a2b-81d4-54299a9d8e82");
INSERT INTO DIM_WAY
	VALUES ("b062b1b0-2bea-2bb8-7513-1da8ac21d362",
	1760.000000,
	1952.000000,
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("19d6c24d-c5dc-0a2b-81d4-54299a9d8e82",
	1760.000000,
	1856.000000,
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"00000000-0000-0000-0000-000000000000",
	"b062b1b0-2bea-2bb8-7513-1da8ac21d362");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d4fcfe0c-2f9e-993e-01c2-a279e7a45b29",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0e20c15c-e84a-3321-094f-59827ebe816c",
	"490cb18d-582d-4b42-94f5-5ff1ac4e4959",
	"d4fcfe0c-2f9e-993e-01c2-a279e7a45b29");
INSERT INTO GD_GE
	VALUES ("86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a42c1084-76e7-50c9-d416-b6b37cb70fd1",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a42c1084-76e7-50c9-d416-b6b37cb70fd1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a42c1084-76e7-50c9-d416-b6b37cb70fd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a42c1084-76e7-50c9-d416-b6b37cb70fd1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"f55e7f65-4e12-3aba-bd0c-ed137df8be5a");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f55e7f65-4e12-3aba-bd0c-ed137df8be5a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("329ca0ef-5330-03b9-ea4c-dc8cbefd8c78",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"329ca0ef-5330-03b9-ea4c-dc8cbefd8c78");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"329ca0ef-5330-03b9-ea4c-dc8cbefd8c78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("329ca0ef-5330-03b9-ea4c-dc8cbefd8c78",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("1a92e7b0-9a7a-7cf2-2ded-a5b55355c65b",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"00000000-0000-0000-0000-000000000000",
	"e650dc4d-2241-70d6-5ffb-bdc96fd97dab",
	"7c4b2810-8a8d-75f1-0f9c-791d5116ee8d");
INSERT INTO DIM_WAY
	VALUES ("e650dc4d-2241-70d6-5ffb-bdc96fd97dab",
	1888.000000,
	1440.000000,
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7c4b2810-8a8d-75f1-0f9c-791d5116ee8d",
	2112.000000,
	1440.000000,
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"00000000-0000-0000-0000-000000000000",
	"e650dc4d-2241-70d6-5ffb-bdc96fd97dab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("86ad5a62-b25d-c5d0-1a99-30bcee45672e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("cba580c1-e3f2-4ca0-514e-4ef499301915",
	"b0a7211c-8b4d-d6d4-dc70-2be365bcefdd",
	"86ad5a62-b25d-c5d0-1a99-30bcee45672e");
INSERT INTO GD_GE
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7d4968bd-17d5-b209-0110-7ac51a8a8217",
	"c48c0b93-f622-4764-510f-c877495de02f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7d4968bd-17d5-b209-0110-7ac51a8a8217");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7d4968bd-17d5-b209-0110-7ac51a8a8217",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7d4968bd-17d5-b209-0110-7ac51a8a8217",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4c1aa79f-0475-b402-6cff-215a4fea1340",
	"c48c0b93-f622-4764-510f-c877495de02f",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"4c1aa79f-0475-b402-6cff-215a4fea1340");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"4c1aa79f-0475-b402-6cff-215a4fea1340",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4c1aa79f-0475-b402-6cff-215a4fea1340",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("faceb68a-0385-c0be-cb30-00922c14b29d",
	"c48c0b93-f622-4764-510f-c877495de02f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"faceb68a-0385-c0be-cb30-00922c14b29d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"faceb68a-0385-c0be-cb30-00922c14b29d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("faceb68a-0385-c0be-cb30-00922c14b29d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("aeebf27d-832b-b2ae-b5e5-b8153051eb65",
	"c48c0b93-f622-4764-510f-c877495de02f",
	"00000000-0000-0000-0000-000000000000",
	"ee886d19-6283-71fd-c309-a0e7a7ff37b4",
	"b0a9f451-3c6d-aba6-83fa-ee28af814f3f");
INSERT INTO DIM_WAY
	VALUES ("ee886d19-6283-71fd-c309-a0e7a7ff37b4",
	1888.000000,
	1584.000000,
	"c48c0b93-f622-4764-510f-c877495de02f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b0a9f451-3c6d-aba6-83fa-ee28af814f3f",
	2112.000000,
	1584.000000,
	"c48c0b93-f622-4764-510f-c877495de02f",
	"00000000-0000-0000-0000-000000000000",
	"ee886d19-6283-71fd-c309-a0e7a7ff37b4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c48c0b93-f622-4764-510f-c877495de02f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c48c0b93-f622-4764-510f-c877495de02f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0cd2c19f-4bd2-5bdc-74b8-4fdf9bdbd56f",
	"5cb84cb1-edd7-4654-f68c-308efaa1d11c",
	"c48c0b93-f622-4764-510f-c877495de02f");
INSERT INTO GD_GE
	VALUES ("0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("142c1adf-a7e4-f1e2-ddab-5e8efa2cee67",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"142c1adf-a7e4-f1e2-ddab-5e8efa2cee67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"142c1adf-a7e4-f1e2-ddab-5e8efa2cee67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("142c1adf-a7e4-f1e2-ddab-5e8efa2cee67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"299fa8d0-9bef-ce4f-28ce-d7a72d494f25");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("299fa8d0-9bef-ce4f-28ce-d7a72d494f25",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a5db299d-8f9c-2836-ec56-d7b1243db41a",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a5db299d-8f9c-2836-ec56-d7b1243db41a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a5db299d-8f9c-2836-ec56-d7b1243db41a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5db299d-8f9c-2836-ec56-d7b1243db41a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ca0f5a78-a999-df17-56d6-4783717d8662",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"00000000-0000-0000-0000-000000000000",
	"7114e330-ef05-ea7d-c628-ebfffa67cffc",
	"65b9a324-81f1-3498-61ff-82f430359aec");
INSERT INTO DIM_WAY
	VALUES ("7114e330-ef05-ea7d-c628-ebfffa67cffc",
	1888.000000,
	1728.000000,
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("65b9a324-81f1-3498-61ff-82f430359aec",
	2112.000000,
	1728.000000,
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"00000000-0000-0000-0000-000000000000",
	"7114e330-ef05-ea7d-c628-ebfffa67cffc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0cd26bff-26d9-e286-d8b9-32d809b66a90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0cd26bff-26d9-e286-d8b9-32d809b66a90",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2c25e762-4fa4-3b07-2335-3cd6b75d867a",
	"1b97a54a-4943-a171-f341-e43a6e30e029",
	"0cd26bff-26d9-e286-d8b9-32d809b66a90");
INSERT INTO GD_GE
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8bdd074d-b3f1-dc82-7feb-28c36bccf565",
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8bdd074d-b3f1-dc82-7feb-28c36bccf565");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8bdd074d-b3f1-dc82-7feb-28c36bccf565",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8bdd074d-b3f1-dc82-7feb-28c36bccf565",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"10fa79e1-1295-1174-be97-5cfc8bad1d3b");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10fa79e1-1295-1174-be97-5cfc8bad1d3b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2761c57e-8d93-c98c-71ba-92f1bb23b9cb",
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2761c57e-8d93-c98c-71ba-92f1bb23b9cb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2761c57e-8d93-c98c-71ba-92f1bb23b9cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2761c57e-8d93-c98c-71ba-92f1bb23b9cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0acdc7f5-14ae-e7ec-1eac-e1c2a0510197",
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"00000000-0000-0000-0000-000000000000",
	"39976937-3bcd-07a3-9f70-9bb0de9e2be0",
	"fe10edeb-278a-1ef2-61c0-c7f0d42f8d98");
INSERT INTO DIM_WAY
	VALUES ("39976937-3bcd-07a3-9f70-9bb0de9e2be0",
	1888.000000,
	1472.000000,
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fe10edeb-278a-1ef2-61c0-c7f0d42f8d98",
	2112.000000,
	1472.000000,
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"00000000-0000-0000-0000-000000000000",
	"39976937-3bcd-07a3-9f70-9bb0de9e2be0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8654d0f8-5419-6ce0-5b9f-f2c2405901f9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e0d1959c-51ec-c829-6b2f-f4287a8bc504",
	"505b1cb3-60ec-ef31-6192-c13e93dccbd2",
	"8654d0f8-5419-6ce0-5b9f-f2c2405901f9");
INSERT INTO GD_GE
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e8601fb5-4054-8247-345b-778fa857c104",
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e8601fb5-4054-8247-345b-778fa857c104");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e8601fb5-4054-8247-345b-778fa857c104",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e8601fb5-4054-8247-345b-778fa857c104",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("28d03cf7-81ba-d216-1f55-555fe4865a70",
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"28d03cf7-81ba-d216-1f55-555fe4865a70");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"28d03cf7-81ba-d216-1f55-555fe4865a70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("28d03cf7-81ba-d216-1f55-555fe4865a70",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6",
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99f9ea7c-7eff-2ba1-0c1c-fbf846ec48c6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ecb1127c-78a9-6030-8e5d-75d37c2c8211",
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	"00000000-0000-0000-0000-000000000000",
	"12e8c0d4-d35a-b4a9-25d9-8aca44bcbdef",
	"c4e8133b-652b-5970-674b-1c26bbb10000");
INSERT INTO DIM_WAY
	VALUES ("12e8c0d4-d35a-b4a9-25d9-8aca44bcbdef",
	1712.000000,
	2320.000000,
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c4e8133b-652b-5970-674b-1c26bbb10000",
	1712.000000,
	2432.000000,
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	"00000000-0000-0000-0000-000000000000",
	"12e8c0d4-d35a-b4a9-25d9-8aca44bcbdef");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8ecb79d6-12df-5a9b-929d-95c532692d30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8ecb79d6-12df-5a9b-929d-95c532692d30",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d2ca61bf-07a2-8b4b-904c-c22896e30cba",
	"fc3b13f7-7d9e-1594-1ae8-888825b67729",
	"8ecb79d6-12df-5a9b-929d-95c532692d30");
INSERT INTO GD_GE
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("858d1418-116c-3ff6-fcbd-239750a62b19",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"858d1418-116c-3ff6-fcbd-239750a62b19");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"858d1418-116c-3ff6-fcbd-239750a62b19",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("858d1418-116c-3ff6-fcbd-239750a62b19",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("19bafc69-6994-2ea0-50aa-48be53089d89",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"19bafc69-6994-2ea0-50aa-48be53089d89");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"19bafc69-6994-2ea0-50aa-48be53089d89",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("19bafc69-6994-2ea0-50aa-48be53089d89",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0de59bc5-c207-445d-883d-0c63428f9d88",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0de59bc5-c207-445d-883d-0c63428f9d88");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0de59bc5-c207-445d-883d-0c63428f9d88",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0de59bc5-c207-445d-883d-0c63428f9d88",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8eab82da-0d06-df01-df8f-3ed3ddc91835",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"00000000-0000-0000-0000-000000000000",
	"ba7d572f-8205-70ce-5c95-eaf174fa47f9",
	"9fda52ef-6c71-ac77-cb59-05a5585371ef");
INSERT INTO DIM_WAY
	VALUES ("ba7d572f-8205-70ce-5c95-eaf174fa47f9",
	1856.000000,
	1856.000000,
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9fda52ef-6c71-ac77-cb59-05a5585371ef",
	1856.000000,
	1952.000000,
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"00000000-0000-0000-0000-000000000000",
	"ba7d572f-8205-70ce-5c95-eaf174fa47f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3d28a1e4-1b5d-7c88-b08f-51a30129a2a7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("363d915b-51e7-ffbb-0b06-b55017b5efe9",
	"1a5b371a-d8af-21cd-02ef-5c580f017570",
	"3d28a1e4-1b5d-7c88-b08f-51a30129a2a7");
INSERT INTO GD_GE
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9878a3be-8266-7909-54fb-bc1ac9d04a37",
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9878a3be-8266-7909-54fb-bc1ac9d04a37");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9878a3be-8266-7909-54fb-bc1ac9d04a37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9878a3be-8266-7909-54fb-bc1ac9d04a37",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a051dcfa-10f3-cbe6-6fd7-ad59b5c72fc9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("efa63970-f66e-ad0f-1218-909301a5f75d",
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"efa63970-f66e-ad0f-1218-909301a5f75d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"efa63970-f66e-ad0f-1218-909301a5f75d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("efa63970-f66e-ad0f-1218-909301a5f75d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e4fe6ae3-6868-cb30-7e0f-915feeff0747",
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	"00000000-0000-0000-0000-000000000000",
	"b19afc9e-e3a9-5a9f-d299-682d3054f77e",
	"f691faac-6232-a382-6031-f85c6afc6f3a");
INSERT INTO DIM_WAY
	VALUES ("b19afc9e-e3a9-5a9f-d299-682d3054f77e",
	1392.000000,
	1696.000000,
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f691faac-6232-a382-6031-f85c6afc6f3a",
	1392.000000,
	1856.000000,
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	"00000000-0000-0000-0000-000000000000",
	"b19afc9e-e3a9-5a9f-d299-682d3054f77e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b09a66ce-eb45-a894-51ac-f071378f173c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b09a66ce-eb45-a894-51ac-f071378f173c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c5574bd6-2973-9052-9948-5b86e45ceaa0",
	"c9eae0cf-5ef0-c3bf-9179-38522cf20e0a",
	"b09a66ce-eb45-a894-51ac-f071378f173c");
INSERT INTO GD_GE
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1",
	"936009c8-9eca-9720-c69a-51851af31c07",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1dc43bdb-4fd4-ac6b-967a-bb906b3c29a1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1c769c44-00b3-c64b-62bd-76ed704cc578",
	"936009c8-9eca-9720-c69a-51851af31c07",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"1c769c44-00b3-c64b-62bd-76ed704cc578");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"1c769c44-00b3-c64b-62bd-76ed704cc578",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c769c44-00b3-c64b-62bd-76ed704cc578",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e",
	"936009c8-9eca-9720-c69a-51851af31c07",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bd7b3a6d-0dcb-576a-9d9f-8370a46ee88e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b9328e91-b56e-3508-183b-1649cc05a74c",
	"936009c8-9eca-9720-c69a-51851af31c07",
	"00000000-0000-0000-0000-000000000000",
	"66fe38d3-bd52-75ec-0825-ee81b0abe74b",
	"f21eb867-f8ae-efaa-4ece-f14e06fe0c72");
INSERT INTO DIM_WAY
	VALUES ("66fe38d3-bd52-75ec-0825-ee81b0abe74b",
	1552.000000,
	1696.000000,
	"936009c8-9eca-9720-c69a-51851af31c07",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f21eb867-f8ae-efaa-4ece-f14e06fe0c72",
	1552.000000,
	1856.000000,
	"936009c8-9eca-9720-c69a-51851af31c07",
	"00000000-0000-0000-0000-000000000000",
	"66fe38d3-bd52-75ec-0825-ee81b0abe74b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"936009c8-9eca-9720-c69a-51851af31c07",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("936009c8-9eca-9720-c69a-51851af31c07",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("32e8ad51-3c4c-d469-da09-00137d431390",
	"c00c2d89-33e0-b8b4-7ddc-21a55850e619",
	"936009c8-9eca-9720-c69a-51851af31c07");
INSERT INTO GD_GE
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("599be0f8-a1ef-db82-9931-3991cc4aca47",
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"599be0f8-a1ef-db82-9931-3991cc4aca47");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"599be0f8-a1ef-db82-9931-3991cc4aca47",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("599be0f8-a1ef-db82-9931-3991cc4aca47",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fee97219-9bb8-fa92-00bd-da8495f82676",
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fee97219-9bb8-fa92-00bd-da8495f82676");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fee97219-9bb8-fa92-00bd-da8495f82676",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fee97219-9bb8-fa92-00bd-da8495f82676",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e9f7d35c-b2ae-a9ba-789c-695bed784525",
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e9f7d35c-b2ae-a9ba-789c-695bed784525");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e9f7d35c-b2ae-a9ba-789c-695bed784525",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e9f7d35c-b2ae-a9ba-789c-695bed784525",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2da66692-6a75-5f23-3235-2836f7d3d562",
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"00000000-0000-0000-0000-000000000000",
	"49fdfff9-dbf2-14cc-835e-5fc1bab18b01",
	"6e43bcb9-a0e5-e2b6-28a8-5b68fa5f9ac6");
INSERT INTO DIM_WAY
	VALUES ("49fdfff9-dbf2-14cc-835e-5fc1bab18b01",
	1456.000000,
	2048.000000,
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6e43bcb9-a0e5-e2b6-28a8-5b68fa5f9ac6",
	1456.000000,
	2160.000000,
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"00000000-0000-0000-0000-000000000000",
	"49fdfff9-dbf2-14cc-835e-5fc1bab18b01");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2ae4b577-2136-a2a2-0ccd-50c4393a67f8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fdbafcb9-4115-6c51-9b69-21e31b43f91c",
	"1b51832d-e015-3b2e-273e-bdd453881ec9",
	"2ae4b577-2136-a2a2-0ccd-50c4393a67f8");
INSERT INTO GD_GE
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5",
	"571bb0b2-5984-7f7f-f616-985226a04514",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba6fe7b6-f9d0-d294-f70d-bda5a1f2b4d5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	"571bb0b2-5984-7f7f-f616-985226a04514",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"e7e22cad-ba21-df36-520e-c95b3db61389");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"e7e22cad-ba21-df36-520e-c95b3db61389",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e7e22cad-ba21-df36-520e-c95b3db61389",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4abb52ce-21d4-a278-dfe8-14cbba7ed8d3",
	"571bb0b2-5984-7f7f-f616-985226a04514",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4abb52ce-21d4-a278-dfe8-14cbba7ed8d3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4abb52ce-21d4-a278-dfe8-14cbba7ed8d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4abb52ce-21d4-a278-dfe8-14cbba7ed8d3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9eb1c5a5-ba63-617c-fdfc-308c36c2e553",
	"571bb0b2-5984-7f7f-f616-985226a04514",
	"00000000-0000-0000-0000-000000000000",
	"fef10376-f37f-7d1d-8d6e-ab931f6eca8d",
	"eb39f916-e4ce-2601-1088-8e616b5a5211");
INSERT INTO DIM_WAY
	VALUES ("fef10376-f37f-7d1d-8d6e-ab931f6eca8d",
	1024.000000,
	1696.000000,
	"571bb0b2-5984-7f7f-f616-985226a04514",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("eb39f916-e4ce-2601-1088-8e616b5a5211",
	1024.000000,
	1856.000000,
	"571bb0b2-5984-7f7f-f616-985226a04514",
	"00000000-0000-0000-0000-000000000000",
	"fef10376-f37f-7d1d-8d6e-ab931f6eca8d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"571bb0b2-5984-7f7f-f616-985226a04514",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("571bb0b2-5984-7f7f-f616-985226a04514",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("91a5dd3b-0158-408d-79b3-dc577a96269c",
	"82a927d9-6ec4-6791-04dc-7731a42e9477",
	"571bb0b2-5984-7f7f-f616-985226a04514");
INSERT INTO GD_GE
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c8a62c1-1263-d59a-15c3-ff775e653efc",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2c8a62c1-1263-d59a-15c3-ff775e653efc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2c8a62c1-1263-d59a-15c3-ff775e653efc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c8a62c1-1263-d59a-15c3-ff775e653efc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("201c296e-485d-da8e-5951-abb0343badc1",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"201c296e-485d-da8e-5951-abb0343badc1");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"201c296e-485d-da8e-5951-abb0343badc1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("201c296e-485d-da8e-5951-abb0343badc1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c3293ac3-30f4-7e23-b188-5a0f9a33e871",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c3293ac3-30f4-7e23-b188-5a0f9a33e871");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c3293ac3-30f4-7e23-b188-5a0f9a33e871",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c3293ac3-30f4-7e23-b188-5a0f9a33e871",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a4cc51fe-4e40-b8b4-73be-d60a9f4b8df8",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"00000000-0000-0000-0000-000000000000",
	"392da122-c060-993d-07b4-27dc5baf233a",
	"78b6f068-cd6c-e055-dd06-8eb4351055e0");
INSERT INTO DIM_WAY
	VALUES ("392da122-c060-993d-07b4-27dc5baf233a",
	1200.000000,
	1696.000000,
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("78b6f068-cd6c-e055-dd06-8eb4351055e0",
	1200.000000,
	1856.000000,
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"00000000-0000-0000-0000-000000000000",
	"392da122-c060-993d-07b4-27dc5baf233a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08c8674f-9f93-f4e9-d40a-6dc89537e3ca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("484ce62d-3782-bbfb-9008-846cda725c05",
	"f9af3fcf-b8b2-574c-a1cd-be96f086cb09",
	"08c8674f-9f93-f4e9-d40a-6dc89537e3ca");
INSERT INTO GD_GE
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	"890e87fe-67d6-51c3-c137-598ec4bf5f08",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	24,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("62037fdd-c42f-1674-f51d-5170e9c59d9e",
	"733301ab-c967-b343-ac41-48c37884fe79",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"62037fdd-c42f-1674-f51d-5170e9c59d9e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"62037fdd-c42f-1674-f51d-5170e9c59d9e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62037fdd-c42f-1674-f51d-5170e9c59d9e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2e85bc54-9d2e-cb31-e843-2b684697281e",
	"733301ab-c967-b343-ac41-48c37884fe79",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"2e85bc54-9d2e-cb31-e843-2b684697281e");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"2e85bc54-9d2e-cb31-e843-2b684697281e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2e85bc54-9d2e-cb31-e843-2b684697281e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c6ee5505-ff05-e597-4da8-a96d334056fa",
	"733301ab-c967-b343-ac41-48c37884fe79",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c6ee5505-ff05-e597-4da8-a96d334056fa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c6ee5505-ff05-e597-4da8-a96d334056fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c6ee5505-ff05-e597-4da8-a96d334056fa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dc5b9e15-780b-a7af-2f29-85c88b1ca78d",
	"733301ab-c967-b343-ac41-48c37884fe79",
	"00000000-0000-0000-0000-000000000000",
	"187946df-30b7-5594-845f-e215353495e8",
	"efda02d0-f451-0926-15e1-f8324e664d14");
INSERT INTO DIM_WAY
	VALUES ("187946df-30b7-5594-845f-e215353495e8",
	1104.000000,
	2064.000000,
	"733301ab-c967-b343-ac41-48c37884fe79",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("efda02d0-f451-0926-15e1-f8324e664d14",
	1104.000000,
	2160.000000,
	"733301ab-c967-b343-ac41-48c37884fe79",
	"00000000-0000-0000-0000-000000000000",
	"187946df-30b7-5594-845f-e215353495e8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"733301ab-c967-b343-ac41-48c37884fe79",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("733301ab-c967-b343-ac41-48c37884fe79",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("51df5da6-2fc3-669f-0f39-3c799a4132ea",
	"17bf0551-9c63-b61a-379c-9dfa6077b75d",
	"733301ab-c967-b343-ac41-48c37884fe79");
INSERT INTO DIM_DIA
	VALUES ("890e87fe-67d6-51c3-c137-598ec4bf5f08",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("5e6cc7f2-3284-fb66-539e-59825320243f",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"f2228e50-6bd1-9598-02ae-7f51defb49a8",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"be200624-30d5-d348-9648-b696c180ea95",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_BATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ATTR
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	"90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_OIDA
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO O_ID
	VALUES (2,
	"d53d0ef7-36b3-576d-0d53-6d7d4942444a");
INSERT INTO PE_PE
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d35abe68-761c-4805-6622-ec58904bb650",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"6a8eae6e-d574-7609-6008-2b15b1e1112b",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b13d524e-75cf-e2b2-d0a5-2c7ea47ea340",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_BATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ATTR
	VALUES ("4cd6642b-7b1a-8cd2-f164-e7ab7d51d6f6",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"b5fb9a6e-b745-06b2-4f85-99fb47c62331",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_OIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO O_ID
	VALUES (2,
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_ISM
	VALUES ("781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5");
INSERT INTO SM_SM
	VALUES ("781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_EVTDI
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66");
INSERT INTO SM_EVTDI
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c");
INSERT INTO SM_EVTDI
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"77a1ce5f-9a4d-adb1-584b-030c67832708");
INSERT INTO SM_EVTDI
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3");
INSERT INTO SM_LEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19309339-d791-2728-6d34-a7ddba63dc2d",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"19309339-d791-2728-6d34-a7ddba63dc2d");
INSERT INTO SM_AH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("171c28d1-9e02-36a8-58a4-0818b61cc903",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"171c28d1-9e02-36a8-58a4-0818b61cc903");
INSERT INTO SM_AH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"06bbc248-c7a1-6f90-527e-cb2216996743");
INSERT INTO SM_AH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49");
INSERT INTO SM_AH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("57f36afb-7cf6-2a15-0757-d78daaf78509",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"57f36afb-7cf6-2a15-0757-d78daaf78509");
INSERT INTO SM_AH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"989e680b-bc70-b1d8-985c-a034d0050e31");
INSERT INTO SM_AH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_NSTXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de");
INSERT INTO SM_AH
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14");
INSERT INTO SM_AH
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"0e3485bf-605f-4586-56d5-85120b150c9e");
INSERT INTO SM_AH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a");
INSERT INTO SM_AH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"650d8560-41cb-105b-9a25-bc5546ca0485");
INSERT INTO SM_AH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"54c573d1-aade-513b-dec9-05a9342535a9");
INSERT INTO SM_AH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280");
INSERT INTO SM_ACT
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	8,
	"781601c2-1cf6-05c5-a6d4-fae80a33a280",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"19309339-d791-2728-6d34-a7ddba63dc2d",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO GD_NCS
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"1411764e-4e7b-6b68-9c85-9db8c45907b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1411764e-4e7b-6b68-9c85-9db8c45907b3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c28a98ca-ae82-46bc-8e26-0f9b480d1936",
	2064.000000,
	1312.000000,
	"1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO DIM_CON
	VALUES ("75caa8b6-477d-665c-4a74-660d9e28fc64",
	1968.000000,
	1280.000000,
	"1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO DIM_CON
	VALUES ("4022b218-e2de-d695-89e1-94cdf835e6c0",
	1968.000000,
	1376.000000,
	"1411764e-4e7b-6b68-9c85-9db8c45907b3");
INSERT INTO GD_GE
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"171c28d1-9e02-36a8-58a4-0818b61cc903",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0");
INSERT INTO GD_NCS
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"7447030e-f67e-3698-55db-32edac7f81a0");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"7447030e-f67e-3698-55db-32edac7f81a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7447030e-f67e-3698-55db-32edac7f81a0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	2064.000000,
	1712.000000,
	"7447030e-f67e-3698-55db-32edac7f81a0");
INSERT INTO DIM_CON
	VALUES ("18a9614a-d7f9-6efb-4891-a5e71e87122e",
	1968.000000,
	1680.000000,
	"7447030e-f67e-3698-55db-32edac7f81a0");
INSERT INTO GD_GE
	VALUES ("92cdc9ff-e39c-5934-16f7-9afa8670e150",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"06bbc248-c7a1-6f90-527e-cb2216996743",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("92cdc9ff-e39c-5934-16f7-9afa8670e150");
INSERT INTO GD_NCS
	VALUES ("92cdc9ff-e39c-5934-16f7-9afa8670e150");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"92cdc9ff-e39c-5934-16f7-9afa8670e150");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"92cdc9ff-e39c-5934-16f7-9afa8670e150",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("92cdc9ff-e39c-5934-16f7-9afa8670e150",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6dfc83dd-5de0-037c-b889-0a0837a23c15",
	2320.000000,
	1280.000000,
	"92cdc9ff-e39c-5934-16f7-9afa8670e150");
INSERT INTO DIM_CON
	VALUES ("577c4281-669e-7db7-0865-4b8c0271057e",
	2320.000000,
	1376.000000,
	"92cdc9ff-e39c-5934-16f7-9afa8670e150");
INSERT INTO GD_GE
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"6d4f1520-ca7a-b9e6-ee09-fade6ff6eb49",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135");
INSERT INTO GD_NCS
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"b906f96d-cf60-215f-e23d-fbcce8b9d135");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"b906f96d-cf60-215f-e23d-fbcce8b9d135",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b906f96d-cf60-215f-e23d-fbcce8b9d135",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	2320.000000,
	1680.000000,
	"b906f96d-cf60-215f-e23d-fbcce8b9d135");
INSERT INTO GD_GE
	VALUES ("1a201332-8e33-3f16-6c63-8add1b3e6df4",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"57f36afb-7cf6-2a15-0757-d78daaf78509",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("1a201332-8e33-3f16-6c63-8add1b3e6df4");
INSERT INTO GD_NCS
	VALUES ("1a201332-8e33-3f16-6c63-8add1b3e6df4");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"1a201332-8e33-3f16-6c63-8add1b3e6df4");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"1a201332-8e33-3f16-6c63-8add1b3e6df4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1a201332-8e33-3f16-6c63-8add1b3e6df4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b5c5c149-cb1c-815f-befd-69060154607f",
	1968.000000,
	1472.000000,
	"1a201332-8e33-3f16-6c63-8add1b3e6df4");
INSERT INTO DIM_CON
	VALUES ("fac03486-07ad-43ab-a6b1-7468b2c491ad",
	1968.000000,
	1568.000000,
	"1a201332-8e33-3f16-6c63-8add1b3e6df4");
INSERT INTO GD_GE
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"989e680b-bc70-b1d8-985c-a034d0050e31",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e");
INSERT INTO GD_NCS
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"5464e623-c51f-46ba-584a-b0826d42b82e");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"5464e623-c51f-46ba-584a-b0826d42b82e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5464e623-c51f-46ba-584a-b0826d42b82e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1a986cb2-b0ab-3ebc-1780-686589e075e4",
	2320.000000,
	1472.000000,
	"5464e623-c51f-46ba-584a-b0826d42b82e");
INSERT INTO DIM_CON
	VALUES ("107f16e3-4ae4-086b-225b-4c2d0b9e746d",
	2320.000000,
	1568.000000,
	"5464e623-c51f-46ba-584a-b0826d42b82e");
INSERT INTO GD_GE
	VALUES ("84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("92f83875-4a0f-4d09-e1e9-05aa737e6592",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"92f83875-4a0f-4d09-e1e9-05aa737e6592");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"92f83875-4a0f-4d09-e1e9-05aa737e6592",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("92f83875-4a0f-4d09-e1e9-05aa737e6592",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"a24f6cbf-0b02-6f93-6120-ad9575eb8fc0");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a24f6cbf-0b02-6f93-6120-ad9575eb8fc0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6b2fd219-d81f-9710-8732-2d7de11d6304",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6b2fd219-d81f-9710-8732-2d7de11d6304");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6b2fd219-d81f-9710-8732-2d7de11d6304",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6b2fd219-d81f-9710-8732-2d7de11d6304",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a150dccc-b513-70da-2050-f1e488ba469f",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"4962e89c-3385-31d2-4c18-ea8f96dfe5e8",
	"06e510a6-4034-f8e4-7332-8095702928a4");
INSERT INTO GD_LS
	VALUES ("9353700a-6a2a-1283-9d83-8cfe85a17ab1",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"a150dccc-b513-70da-2050-f1e488ba469f",
	"06e510a6-4034-f8e4-7332-8095702928a4",
	"d974ce65-5543-bd07-fed2-25263735c653");
INSERT INTO GD_LS
	VALUES ("08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"9353700a-6a2a-1283-9d83-8cfe85a17ab1",
	"d974ce65-5543-bd07-fed2-25263735c653",
	"2dc5cc85-a104-6564-a1ee-ffbf6c36b740");
INSERT INTO GD_LS
	VALUES ("5cd96d8e-c8b1-27a8-f9d7-8cf73d1e2091",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"08bc8b7b-07c3-2909-7102-fd30f88bf7f3",
	"2dc5cc85-a104-6564-a1ee-ffbf6c36b740",
	"dbe33ba4-1d16-7219-02f8-a344501e75bb");
INSERT INTO DIM_WAY
	VALUES ("4962e89c-3385-31d2-4c18-ea8f96dfe5e8",
	2064.000000,
	1312.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("06e510a6-4034-f8e4-7332-8095702928a4",
	2128.000000,
	1312.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"4962e89c-3385-31d2-4c18-ea8f96dfe5e8");
INSERT INTO DIM_WAY
	VALUES ("d974ce65-5543-bd07-fed2-25263735c653",
	2128.000000,
	1216.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"06e510a6-4034-f8e4-7332-8095702928a4");
INSERT INTO DIM_WAY
	VALUES ("2dc5cc85-a104-6564-a1ee-ffbf6c36b740",
	1968.000000,
	1216.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"d974ce65-5543-bd07-fed2-25263735c653");
INSERT INTO DIM_WAY
	VALUES ("dbe33ba4-1d16-7219-02f8-a344501e75bb",
	1968.000000,
	1280.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000",
	"2dc5cc85-a104-6564-a1ee-ffbf6c36b740");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"84e04458-b87c-a413-28d6-0842e5a6c0ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("84e04458-b87c-a413-28d6-0842e5a6c0ca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c28a98ca-ae82-46bc-8e26-0f9b480d1936",
	"75caa8b6-477d-665c-4a74-660d9e28fc64",
	"84e04458-b87c-a413-28d6-0842e5a6c0ca");
INSERT INTO GD_GE
	VALUES ("21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d34a8fd0-9211-040b-0561-9870903c36ee",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d34a8fd0-9211-040b-0561-9870903c36ee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d34a8fd0-9211-040b-0561-9870903c36ee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d34a8fd0-9211-040b-0561-9870903c36ee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4ba85157-cf5f-9b26-a37d-b5d72993497a",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"4ba85157-cf5f-9b26-a37d-b5d72993497a");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"4ba85157-cf5f-9b26-a37d-b5d72993497a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4ba85157-cf5f-9b26-a37d-b5d72993497a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5c5272e7-4432-cad8-a82d-d07c628ce183",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5c5272e7-4432-cad8-a82d-d07c628ce183");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5c5272e7-4432-cad8-a82d-d07c628ce183",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5c5272e7-4432-cad8-a82d-d07c628ce183",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4ea1ed9d-3ade-2feb-baca-2ed4b86df5b8",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"aa9c71c3-ffe3-2820-9a6f-ec29e54cb889",
	"fa5aeceb-35f6-a42d-cb0f-d6e1a002b7c3");
INSERT INTO GD_LS
	VALUES ("92c304df-813b-91dd-f7c3-151b2a69aed7",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"4ea1ed9d-3ade-2feb-baca-2ed4b86df5b8",
	"fa5aeceb-35f6-a42d-cb0f-d6e1a002b7c3",
	"291fd0d4-264b-aeb1-509a-e0fa5da97e7c");
INSERT INTO GD_LS
	VALUES ("23a40782-938b-7291-a8d7-d76f1774b34b",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"92c304df-813b-91dd-f7c3-151b2a69aed7",
	"291fd0d4-264b-aeb1-509a-e0fa5da97e7c",
	"4bcb7ab2-9295-0068-d076-a510fa7ce884");
INSERT INTO GD_LS
	VALUES ("e7683a62-dc03-4102-eab0-e4e6ad01ce14",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"23a40782-938b-7291-a8d7-d76f1774b34b",
	"4bcb7ab2-9295-0068-d076-a510fa7ce884",
	"c8b5139f-560a-8616-0ddf-7b2bba0bce88");
INSERT INTO DIM_WAY
	VALUES ("aa9c71c3-ffe3-2820-9a6f-ec29e54cb889",
	2064.000000,
	1712.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("fa5aeceb-35f6-a42d-cb0f-d6e1a002b7c3",
	2192.000000,
	1712.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"aa9c71c3-ffe3-2820-9a6f-ec29e54cb889");
INSERT INTO DIM_WAY
	VALUES ("291fd0d4-264b-aeb1-509a-e0fa5da97e7c",
	2192.000000,
	1232.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"fa5aeceb-35f6-a42d-cb0f-d6e1a002b7c3");
INSERT INTO DIM_WAY
	VALUES ("4bcb7ab2-9295-0068-d076-a510fa7ce884",
	2320.000000,
	1232.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"291fd0d4-264b-aeb1-509a-e0fa5da97e7c");
INSERT INTO DIM_WAY
	VALUES ("c8b5139f-560a-8616-0ddf-7b2bba0bce88",
	2320.000000,
	1280.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000",
	"4bcb7ab2-9295-0068-d076-a510fa7ce884");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21176cc7-0ded-dcd6-6262-1ec3c049d929",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21176cc7-0ded-dcd6-6262-1ec3c049d929",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c36c00a5-a9bb-0b8e-bf2f-8a593ca83e5f",
	"6dfc83dd-5de0-037c-b889-0a0837a23c15",
	"21176cc7-0ded-dcd6-6262-1ec3c049d929");
INSERT INTO GD_GE
	VALUES ("f7fd8c56-135b-0b11-0905-250d54335cb8",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"a256916d-332b-8bb2-d4ff-eae907f0d71a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("f7fd8c56-135b-0b11-0905-250d54335cb8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8cf77c42-5394-8d76-58eb-fa3a15a6bb58",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8cf77c42-5394-8d76-58eb-fa3a15a6bb58");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8cf77c42-5394-8d76-58eb-fa3a15a6bb58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8cf77c42-5394-8d76-58eb-fa3a15a6bb58",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"10c08d68-cba9-d26c-1601-1b47c050757b");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"10c08d68-cba9-d26c-1601-1b47c050757b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("10c08d68-cba9-d26c-1601-1b47c050757b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f6506742-f685-a8b9-2bdf-46b27b9363ca",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f6506742-f685-a8b9-2bdf-46b27b9363ca");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f6506742-f685-a8b9-2bdf-46b27b9363ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f6506742-f685-a8b9-2bdf-46b27b9363ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b4f0dc3a-0cd5-3783-fd89-69631eaaeb95",
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"00000000-0000-0000-0000-000000000000",
	"bf7f24d9-5a2c-7196-bb0f-14a5a859f304",
	"ecb67020-ff56-106b-a7b4-81552268c08e");
INSERT INTO DIM_WAY
	VALUES ("bf7f24d9-5a2c-7196-bb0f-14a5a859f304",
	1968.000000,
	1376.000000,
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ecb67020-ff56-106b-a7b4-81552268c08e",
	1968.000000,
	1472.000000,
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"00000000-0000-0000-0000-000000000000",
	"bf7f24d9-5a2c-7196-bb0f-14a5a859f304");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7fd8c56-135b-0b11-0905-250d54335cb8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7fd8c56-135b-0b11-0905-250d54335cb8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4022b218-e2de-d695-89e1-94cdf835e6c0",
	"b5c5c149-cb1c-815f-befd-69060154607f",
	"f7fd8c56-135b-0b11-0905-250d54335cb8");
INSERT INTO GD_GE
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"0e3485bf-605f-4586-56d5-85120b150c9e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a8b650bd-e038-e965-dd53-8a47bcf18fc7",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a8b650bd-e038-e965-dd53-8a47bcf18fc7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a8b650bd-e038-e965-dd53-8a47bcf18fc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a8b650bd-e038-e965-dd53-8a47bcf18fc7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"ca6396a8-76b3-3d49-9830-04fc2fe09dd2");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ca6396a8-76b3-3d49-9830-04fc2fe09dd2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("08774b92-7bb0-e09c-9a7a-c5229530778a",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"08774b92-7bb0-e09c-9a7a-c5229530778a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"08774b92-7bb0-e09c-9a7a-c5229530778a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("08774b92-7bb0-e09c-9a7a-c5229530778a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("93ced479-6717-3ead-da31-8e2715d944e0",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"00000000-0000-0000-0000-000000000000",
	"170bfd45-0483-dd81-f2a1-c5913e8bf0a0",
	"a206694d-5576-6aba-3447-222c81b9ffe3");
INSERT INTO DIM_WAY
	VALUES ("170bfd45-0483-dd81-f2a1-c5913e8bf0a0",
	1968.000000,
	1568.000000,
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a206694d-5576-6aba-3447-222c81b9ffe3",
	1968.000000,
	1680.000000,
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"00000000-0000-0000-0000-000000000000",
	"170bfd45-0483-dd81-f2a1-c5913e8bf0a0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("501d3d4d-1c13-9ea0-c023-c86a77b4991e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fac03486-07ad-43ab-a6b1-7468b2c491ad",
	"18a9614a-d7f9-6efb-4891-a5e71e87122e",
	"501d3d4d-1c13-9ea0-c023-c86a77b4991e");
INSERT INTO GD_GE
	VALUES ("35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"54c573d1-aade-513b-dec9-05a9342535a9",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("18712907-f78c-a30c-a6c5-1ccb066f68e2",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"18712907-f78c-a30c-a6c5-1ccb066f68e2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"18712907-f78c-a30c-a6c5-1ccb066f68e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18712907-f78c-a30c-a6c5-1ccb066f68e2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("30d29761-1142-2be1-edda-0349f9ceff97",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"30d29761-1142-2be1-edda-0349f9ceff97");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"30d29761-1142-2be1-edda-0349f9ceff97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("30d29761-1142-2be1-edda-0349f9ceff97",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("934d66f6-cf50-869a-c29c-dbb26acb9d9d",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"934d66f6-cf50-869a-c29c-dbb26acb9d9d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"934d66f6-cf50-869a-c29c-dbb26acb9d9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("934d66f6-cf50-869a-c29c-dbb26acb9d9d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fe1abc9d-2c13-bfce-8c21-a391e6edaa6b",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"00000000-0000-0000-0000-000000000000",
	"720c470b-bddf-8f76-e498-c99761f67f77",
	"05e01b32-0164-2272-dd12-46f39e4a488b");
INSERT INTO DIM_WAY
	VALUES ("720c470b-bddf-8f76-e498-c99761f67f77",
	2320.000000,
	1376.000000,
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("05e01b32-0164-2272-dd12-46f39e4a488b",
	2320.000000,
	1472.000000,
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"00000000-0000-0000-0000-000000000000",
	"720c470b-bddf-8f76-e498-c99761f67f77");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("577c4281-669e-7db7-0865-4b8c0271057e",
	"1a986cb2-b0ab-3ebc-1780-686589e075e4",
	"35d0ac0e-d7cf-0ac7-c09c-4fb6176f3291");
INSERT INTO GD_GE
	VALUES ("12e41752-2cad-b2b0-0642-566353748235",
	"0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	"650d8560-41cb-105b-9a25-bc5546ca0485",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("12e41752-2cad-b2b0-0642-566353748235",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4c04bfc7-c49b-9fab-443b-8a21382d0f77",
	"12e41752-2cad-b2b0-0642-566353748235",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4c04bfc7-c49b-9fab-443b-8a21382d0f77");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4c04bfc7-c49b-9fab-443b-8a21382d0f77",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4c04bfc7-c49b-9fab-443b-8a21382d0f77",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a5c9cbb0-21a9-9d15-0906-06afd860e4f2",
	"12e41752-2cad-b2b0-0642-566353748235",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"a5c9cbb0-21a9-9d15-0906-06afd860e4f2");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"a5c9cbb0-21a9-9d15-0906-06afd860e4f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5c9cbb0-21a9-9d15-0906-06afd860e4f2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bff30cbb-eff2-0a46-4b25-ebb1f0d3d5cf",
	"12e41752-2cad-b2b0-0642-566353748235",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bff30cbb-eff2-0a46-4b25-ebb1f0d3d5cf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bff30cbb-eff2-0a46-4b25-ebb1f0d3d5cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bff30cbb-eff2-0a46-4b25-ebb1f0d3d5cf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("909cef1a-0130-b667-e5b7-2a35768c5f68",
	"12e41752-2cad-b2b0-0642-566353748235",
	"00000000-0000-0000-0000-000000000000",
	"cfc9c958-4e1d-71a0-f290-ce2d5cf1679d",
	"3f2b8bba-f794-2c0a-3edf-23f086949270");
INSERT INTO DIM_WAY
	VALUES ("cfc9c958-4e1d-71a0-f290-ce2d5cf1679d",
	2320.000000,
	1568.000000,
	"12e41752-2cad-b2b0-0642-566353748235",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3f2b8bba-f794-2c0a-3edf-23f086949270",
	2320.000000,
	1680.000000,
	"12e41752-2cad-b2b0-0642-566353748235",
	"00000000-0000-0000-0000-000000000000",
	"cfc9c958-4e1d-71a0-f290-ce2d5cf1679d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"12e41752-2cad-b2b0-0642-566353748235",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("12e41752-2cad-b2b0-0642-566353748235",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("107f16e3-4ae4-086b-225b-4c2d0b9e746d",
	"23dfc4ec-1ef8-6ea5-b963-bc3b71ce71c8",
	"12e41752-2cad-b2b0-0642-566353748235");
INSERT INTO DIM_DIA
	VALUES ("0abb0503-a82d-4e25-fcf3-21ea4f397faa",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("6529e378-ed05-186d-687c-2136905dcbf9",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("f64b8be7-7c94-1146-33c9-6b525c0b9014",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"b7f7b068-25f0-7f97-47b7-067b6080576e",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_BATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ATTR
	VALUES ("ee847cc0-be87-a5d1-6ef6-7123e865361f",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	"f64b8be7-7c94-1146-33c9-6b525c0b9014",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_OIDA
	VALUES ("b7f7b068-25f0-7f97-47b7-067b6080576e",
	"6529e378-ed05-186d-687c-2136905dcbf9",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO O_ID
	VALUES (2,
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_ISM
	VALUES ("933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"6529e378-ed05-186d-687c-2136905dcbf9");
INSERT INTO SM_SM
	VALUES ("933b58cb-9f11-0d02-4b43-79f202ffa35b",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_EVTDI
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72");
INSERT INTO SM_AH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	1,
	'',
	'');
INSERT INTO SM_STATE
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"02a1463d-a43e-ecc7-3993-a91501615408");
INSERT INTO SM_AH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'');
INSERT INTO SM_NSTXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"40da950f-092d-1954-f95d-150a1ea1275e");
INSERT INTO SM_AH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"87d7123c-9ec5-c389-2fda-613f981c3404");
INSERT INTO SM_AH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a");
INSERT INTO SM_AH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	"7985e41c-606c-12dd-f296-171a2171df48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28");
INSERT INTO SM_AH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b");
INSERT INTO SM_ACT
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	8,
	"933b58cb-9f11-0d02-4b43-79f202ffa35b",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("91e75e63-83c1-45e1-016a-1069eb035ba6",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"c80b28b8-bd2e-1dc4-5f02-28d889b2ea72",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO GD_NCS
	VALUES ("91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("91e75e63-83c1-45e1-016a-1069eb035ba6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8127da2f-f0f2-b57a-7796-a4d4cfc7f136",
	1888.000000,
	1328.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO DIM_CON
	VALUES ("7d85e0d3-2fcf-de14-ce21-7498565b9c9e",
	2016.000000,
	1328.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO DIM_CON
	VALUES ("4516c306-2456-95f8-6873-811bc4c7c335",
	2144.000000,
	1408.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO DIM_CON
	VALUES ("21f1423a-4579-c4d3-964b-f2b5687a90e6",
	1856.000000,
	1392.000000,
	"91e75e63-83c1-45e1-016a-1069eb035ba6");
INSERT INTO GD_GE
	VALUES ("a1241249-0e57-2f1f-5ea9-d433f7a77615",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"02a1463d-a43e-ecc7-3993-a91501615408",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO GD_NCS
	VALUES ("a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1241249-0e57-2f1f-5ea9-d433f7a77615",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b3828d25-e24b-133b-1c4e-7925974866f9",
	1920.000000,
	1056.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO DIM_CON
	VALUES ("bed07d06-618b-0255-62ec-f70b4a70be1a",
	2096.000000,
	1056.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO DIM_CON
	VALUES ("f60f269c-462c-b3a9-2993-65997c72bcfc",
	2144.000000,
	1120.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO DIM_CON
	VALUES ("1a97d850-521b-9837-c293-38478fae3463",
	1856.000000,
	1120.000000,
	"a1241249-0e57-2f1f-5ea9-d433f7a77615");
INSERT INTO GD_GE
	VALUES ("d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"40da950f-092d-1954-f95d-150a1ea1275e",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("703e7130-0450-cc6a-42e2-b9372bc532f0",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"703e7130-0450-cc6a-42e2-b9372bc532f0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"703e7130-0450-cc6a-42e2-b9372bc532f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("703e7130-0450-cc6a-42e2-b9372bc532f0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a9b6f57f-3464-26f5-c376-c0a2b1a19e20",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"a9b6f57f-3464-26f5-c376-c0a2b1a19e20");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"a9b6f57f-3464-26f5-c376-c0a2b1a19e20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a9b6f57f-3464-26f5-c376-c0a2b1a19e20",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d02d8b25-e3f8-5056-a228-272603681e7c",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d02d8b25-e3f8-5056-a228-272603681e7c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d02d8b25-e3f8-5056-a228-272603681e7c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d02d8b25-e3f8-5056-a228-272603681e7c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8bbbe725-1df6-0de5-2e00-20446e59817b",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000",
	"acccf0f4-85b9-a84a-7ea8-d95163abcc57",
	"2b161ca2-0f79-12d2-4356-088c704f0840");
INSERT INTO GD_LS
	VALUES ("51905b60-6518-de37-ea5f-57551467f0df",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"8bbbe725-1df6-0de5-2e00-20446e59817b",
	"2b161ca2-0f79-12d2-4356-088c704f0840",
	"6b4d069c-0a51-0540-abc2-e7849098b2e3");
INSERT INTO GD_LS
	VALUES ("48f6e06f-a14c-9371-5046-01ca7a266d49",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"51905b60-6518-de37-ea5f-57551467f0df",
	"6b4d069c-0a51-0540-abc2-e7849098b2e3",
	"429e2eeb-0c57-915f-235d-80412f827d3c");
INSERT INTO DIM_WAY
	VALUES ("acccf0f4-85b9-a84a-7ea8-d95163abcc57",
	1888.000000,
	1328.000000,
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2b161ca2-0f79-12d2-4356-088c704f0840",
	1888.000000,
	1296.000000,
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000",
	"acccf0f4-85b9-a84a-7ea8-d95163abcc57");
INSERT INTO DIM_WAY
	VALUES ("6b4d069c-0a51-0540-abc2-e7849098b2e3",
	2016.000000,
	1296.000000,
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000",
	"2b161ca2-0f79-12d2-4356-088c704f0840");
INSERT INTO DIM_WAY
	VALUES ("429e2eeb-0c57-915f-235d-80412f827d3c",
	2016.000000,
	1328.000000,
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000",
	"6b4d069c-0a51-0540-abc2-e7849098b2e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d20dbdd7-ba21-a492-c3fc-56ec092f4ace",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8127da2f-f0f2-b57a-7796-a4d4cfc7f136",
	"7d85e0d3-2fcf-de14-ce21-7498565b9c9e",
	"d20dbdd7-ba21-a492-c3fc-56ec092f4ace");
INSERT INTO GD_GE
	VALUES ("a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"87d7123c-9ec5-c389-2fda-613f981c3404",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("09396c07-68c3-198d-ca3b-c1d71a95719a",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"09396c07-68c3-198d-ca3b-c1d71a95719a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"09396c07-68c3-198d-ca3b-c1d71a95719a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09396c07-68c3-198d-ca3b-c1d71a95719a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d238cdd1-eca6-be05-9de2-2854b22c4a3a",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"d238cdd1-eca6-be05-9de2-2854b22c4a3a");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"d238cdd1-eca6-be05-9de2-2854b22c4a3a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d238cdd1-eca6-be05-9de2-2854b22c4a3a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4175d3f4-4685-bb1a-c150-0d495e19143c",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4175d3f4-4685-bb1a-c150-0d495e19143c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4175d3f4-4685-bb1a-c150-0d495e19143c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4175d3f4-4685-bb1a-c150-0d495e19143c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a1081854-e97c-60d8-dd33-1422d48415a1",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000",
	"f2eb7a4c-3465-630f-c329-e1f1a9058d24",
	"6bcbce39-ae35-6cc4-db94-83e3248441b7");
INSERT INTO GD_LS
	VALUES ("fdb3792f-7e3f-358a-8819-4bae27c54e03",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"a1081854-e97c-60d8-dd33-1422d48415a1",
	"6bcbce39-ae35-6cc4-db94-83e3248441b7",
	"5d58b7e7-fbdd-d56c-ade3-9ba3d0453113");
INSERT INTO GD_LS
	VALUES ("ac838c34-d06e-d1ac-aa9f-12e60b7c7901",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"fdb3792f-7e3f-358a-8819-4bae27c54e03",
	"5d58b7e7-fbdd-d56c-ade3-9ba3d0453113",
	"adf6dbc1-7ccd-5f3d-1e08-3e8b43ba1737");
INSERT INTO DIM_WAY
	VALUES ("f2eb7a4c-3465-630f-c329-e1f1a9058d24",
	1920.000000,
	1056.000000,
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6bcbce39-ae35-6cc4-db94-83e3248441b7",
	1920.000000,
	1008.000000,
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000",
	"f2eb7a4c-3465-630f-c329-e1f1a9058d24");
INSERT INTO DIM_WAY
	VALUES ("5d58b7e7-fbdd-d56c-ade3-9ba3d0453113",
	2096.000000,
	1008.000000,
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000",
	"6bcbce39-ae35-6cc4-db94-83e3248441b7");
INSERT INTO DIM_WAY
	VALUES ("adf6dbc1-7ccd-5f3d-1e08-3e8b43ba1737",
	2096.000000,
	1056.000000,
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000",
	"5d58b7e7-fbdd-d56c-ade3-9ba3d0453113");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a3e9059a-55d4-093e-b21a-0d4d305c029f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a3e9059a-55d4-093e-b21a-0d4d305c029f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b3828d25-e24b-133b-1c4e-7925974866f9",
	"bed07d06-618b-0255-62ec-f70b4a70be1a",
	"a3e9059a-55d4-093e-b21a-0d4d305c029f");
INSERT INTO GD_GE
	VALUES ("fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"79786b0c-2583-a95c-3b50-3c627a6a2a28",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("15b1f2ab-fbfc-5a89-6d13-d1276f2a2760",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"15b1f2ab-fbfc-5a89-6d13-d1276f2a2760");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"15b1f2ab-fbfc-5a89-6d13-d1276f2a2760",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("15b1f2ab-fbfc-5a89-6d13-d1276f2a2760",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1eeb2adb-9265-150e-d33f-53e16b0702a0",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"1eeb2adb-9265-150e-d33f-53e16b0702a0");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"1eeb2adb-9265-150e-d33f-53e16b0702a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1eeb2adb-9265-150e-d33f-53e16b0702a0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("676dfff5-eedf-64ef-aefd-871a3ba967cc",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"676dfff5-eedf-64ef-aefd-871a3ba967cc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"676dfff5-eedf-64ef-aefd-871a3ba967cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("676dfff5-eedf-64ef-aefd-871a3ba967cc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ef4f8e45-f7b0-6120-97fb-96e84db0dbe8",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000",
	"e8a9d52b-6f87-8e03-ab46-78065ad424dd",
	"5773e44b-2c4c-d75b-0396-595750f66fbb");
INSERT INTO GD_LS
	VALUES ("e637516e-7661-1de1-c7fa-2300ac097e15",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"ef4f8e45-f7b0-6120-97fb-96e84db0dbe8",
	"5773e44b-2c4c-d75b-0396-595750f66fbb",
	"595d5016-1b62-4d2b-7c7c-be6f2f4e54be");
INSERT INTO GD_LS
	VALUES ("01389c8b-981b-3675-6d3d-456befbcbbd7",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"e637516e-7661-1de1-c7fa-2300ac097e15",
	"595d5016-1b62-4d2b-7c7c-be6f2f4e54be",
	"c61947e5-fb51-c48e-fdad-bc6b900a3f89");
INSERT INTO DIM_WAY
	VALUES ("e8a9d52b-6f87-8e03-ab46-78065ad424dd",
	2144.000000,
	1408.000000,
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5773e44b-2c4c-d75b-0396-595750f66fbb",
	2240.000000,
	1408.000000,
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000",
	"e8a9d52b-6f87-8e03-ab46-78065ad424dd");
INSERT INTO DIM_WAY
	VALUES ("595d5016-1b62-4d2b-7c7c-be6f2f4e54be",
	2240.000000,
	1120.000000,
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000",
	"5773e44b-2c4c-d75b-0396-595750f66fbb");
INSERT INTO DIM_WAY
	VALUES ("c61947e5-fb51-c48e-fdad-bc6b900a3f89",
	2144.000000,
	1120.000000,
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000",
	"595d5016-1b62-4d2b-7c7c-be6f2f4e54be");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fc446f1a-d7d5-017e-ea1b-ce018690fc6d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("4516c306-2456-95f8-6873-811bc4c7c335",
	"f60f269c-462c-b3a9-2993-65997c72bcfc",
	"fc446f1a-d7d5-017e-ea1b-ce018690fc6d");
INSERT INTO GD_GE
	VALUES ("6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	"d050e693-f8f5-1446-254b-598c8cdb8c2a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3a5cc2a7-a726-1039-3b40-ad81aabf4338",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3a5cc2a7-a726-1039-3b40-ad81aabf4338");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3a5cc2a7-a726-1039-3b40-ad81aabf4338",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3a5cc2a7-a726-1039-3b40-ad81aabf4338",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2c94628e-232d-4257-c182-62be5f6a27ad",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"2c94628e-232d-4257-c182-62be5f6a27ad");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"2c94628e-232d-4257-c182-62be5f6a27ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2c94628e-232d-4257-c182-62be5f6a27ad",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a1b44c54-2f99-b830-a672-bfb2fc5434f5",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a1b44c54-2f99-b830-a672-bfb2fc5434f5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a1b44c54-2f99-b830-a672-bfb2fc5434f5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a1b44c54-2f99-b830-a672-bfb2fc5434f5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c46c4d6b-f0b7-a4a2-ad83-e8c54e237875",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000",
	"68c2267a-9786-fdf3-813f-d54f3cd7bf9c",
	"a31076ca-6c79-3d88-f188-db6386db2626");
INSERT INTO GD_LS
	VALUES ("01751fc8-d702-8735-0c55-77f572c491b2",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"c46c4d6b-f0b7-a4a2-ad83-e8c54e237875",
	"a31076ca-6c79-3d88-f188-db6386db2626",
	"58dafbe8-1b65-9906-8bb6-4a495658fbdd");
INSERT INTO GD_LS
	VALUES ("06f319fe-fe35-23ba-6915-572ca67b710a",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"01751fc8-d702-8735-0c55-77f572c491b2",
	"58dafbe8-1b65-9906-8bb6-4a495658fbdd",
	"6886f1ef-49c9-9653-9ac9-0876c861d616");
INSERT INTO DIM_WAY
	VALUES ("68c2267a-9786-fdf3-813f-d54f3cd7bf9c",
	1856.000000,
	1120.000000,
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a31076ca-6c79-3d88-f188-db6386db2626",
	1776.000000,
	1120.000000,
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000",
	"68c2267a-9786-fdf3-813f-d54f3cd7bf9c");
INSERT INTO DIM_WAY
	VALUES ("58dafbe8-1b65-9906-8bb6-4a495658fbdd",
	1776.000000,
	1392.000000,
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000",
	"a31076ca-6c79-3d88-f188-db6386db2626");
INSERT INTO DIM_WAY
	VALUES ("6886f1ef-49c9-9653-9ac9-0876c861d616",
	1856.000000,
	1392.000000,
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000",
	"58dafbe8-1b65-9906-8bb6-4a495658fbdd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6cc4953a-3b82-fc8b-f076-073350bb8d2c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1a97d850-521b-9837-c293-38478fae3463",
	"21f1423a-4579-c4d3-964b-f2b5687a90e6",
	"6cc4953a-3b82-fc8b-f076-073350bb8d2c");
INSERT INTO DIM_DIA
	VALUES ("84dab20b-7e46-b310-f1a1-7a2b8b4cc048",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_BATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ATTR
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("f8ac741f-e81c-75fe-e6a7-721e86942af5",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"7695bbaf-5f4d-4f46-3a0d-4621d0da66b7",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"80fde00a-1975-1181-0799-19d319814ba2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f8ac741f-e81c-75fe-e6a7-721e86942af5",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"951ad794-2873-d475-7cd7-c9e00e17e71d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"d78af3a9-3b82-a0fd-47cb-fa24b6dcf6b9",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"4cfb4cd8-c904-1c1f-6dc1-03a00ca667c8",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"5fa613f1-f692-0bb9-f3a6-cd5b467e292c",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"e2168d1b-0db5-7ec5-a761-3383b9b2203b",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("0d8ef56e-409f-8cc2-531f-316abac975cc",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"3dafe09e-7b01-cce5-5cb8-0ddc698fedeb",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"0d8ef56e-409f-8cc2-531f-316abac975cc",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	"8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("878ce09b-f153-84b6-4a68-4a11addd43dd",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"45723fab-a758-0dcb-4ec4-36ffbe95b2bb",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"11819529-d2ee-1362-b74f-48748c1ca662",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("4953388e-55f5-ecd5-7d4e-dd164baf3ed8",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	"878ce09b-f153-84b6-4a68-4a11addd43dd",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_OIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO O_ID
	VALUES (2,
	"47921f8f-082d-554a-e473-a26b90e9e1b8");
INSERT INTO PE_PE
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"24801b0c-27a4-11d2-8d50-aa1ada226943",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"80fde00a-1975-1181-0799-19d319814ba2",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11d0b125-877e-7584-80f0-85bcac5e64a7",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"fc4a3564-c576-99ad-d738-ce2e134dc98e",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"11b3b33a-863f-0583-331c-066d47b7e24d",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_BATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ATTR
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"50fc1111-665c-8a1b-06da-c6289edcd78a",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_OIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO O_ID
	VALUES (2,
	"226029a1-8595-49c1-3362-ff03e9b3ae3f");
INSERT INTO PE_PE
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2c4dfa33-317a-2057-4799-ca233db1e10a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef");
INSERT INTO O_TFR
	VALUES ("6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"3c55c927-841a-b2ef-2e4f-65509835d7e6");
INSERT INTO O_TPARM
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"2c4dfa33-317a-2057-4799-ca233db1e10a");
INSERT INTO O_TPARM
	VALUES ("9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("e46687fc-d696-59c0-16bf-f541d57a57d1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"fec823f3-30b7-8aec-c9b7-169afcf2e052");
INSERT INTO O_TPARM
	VALUES ("b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"1532eced-0f36-6463-4a58-51234289a64d");
INSERT INTO O_TPARM
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"5bf95f81-bb7c-8400-6836-f1339f7c917e");
INSERT INTO O_TPARM
	VALUES ("ba1f9437-707c-21dc-b0af-6152d8103224",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("1532eced-0f36-6463-4a58-51234289a64d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"e46687fc-d696-59c0-16bf-f541d57a57d1");
INSERT INTO O_TPARM
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"1532eced-0f36-6463-4a58-51234289a64d",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5");
INSERT INTO O_TPARM
	VALUES ("d09381b0-4a7b-4fd2-4f14-f812e97311db",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a");
INSERT INTO O_NBATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("71ec8e80-08af-8589-0172-cbee963c83a1",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("5473ca42-ff3d-8921-d889-e9a18871ede3",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"71ec8e80-08af-8589-0172-cbee963c83a1",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("15799752-721b-413b-9fed-b6332ef07f8f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"5473ca42-ff3d-8921-d889-e9a18871ede3",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("041bdb4d-d371-40fe-11de-ac9a36aa975d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"15799752-721b-413b-9fed-b6332ef07f8f",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"041bdb4d-d371-40fe-11de-ac9a36aa975d",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("74f77bac-5723-b9b4-f191-874a62d7a110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"6a88fca5-3e6e-6dae-9650-e58b6b4911d8",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("bf144f14-8ae8-1ec0-968f-c96132ad729a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"74f77bac-5723-b9b4-f191-874a62d7a110",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("3c47b51e-6e76-735e-6087-17d6e4698fc4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bf144f14-8ae8-1ec0-968f-c96132ad729a",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c47b51e-6e76-735e-6087-17d6e4698fc4",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"acc6975a-0c4a-aaff-99ec-0fbf102ba84c",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce0e773a-bec8-c5c0-441a-91f9c02e0d78",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fead1f11-9dcf-0a41-a2f5-acf1fd55c7f7",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("7c27111b-5601-8905-ba68-bebcb5c02057",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"d3929d8d-bce9-a55a-e726-71f8ecf997f4",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7c27111b-5601-8905-ba68-bebcb5c02057",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"eb93b9eb-78d5-6781-dce1-5b4fa26d1b8a",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("11c5b691-9923-5730-b39c-d2efc2a60069",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4e9575cf-d6f9-66da-bb31-8b5eb7fb8a00",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_BATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ATTR
	VALUES ("80785ddb-c1bf-72f4-caf0-6069104575c7",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"11c5b691-9923-5730-b39c-d2efc2a60069",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("28111606-8112-c6c3-8492-598c7d3de4a6",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"80785ddb-c1bf-72f4-caf0-6069104575c7",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	"adc56b61-419d-f174-634f-8845bff6308d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("ce920c66-93c6-5e2e-9802-e3be3c671874",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"28111606-8112-c6c3-8492-598c7d3de4a6",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"ce920c66-93c6-5e2e-9802-e3be3c671874",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"9d00ecc3-a01a-4bd2-6126-02609e61d8ca",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("87ea4870-c492-cdc0-e932-66dba42f6abd",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a09bf289-ccd2-e9bf-d8a3-b058257466dc",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"87ea4870-c492-cdc0-e932-66dba42f6abd",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("4d509b29-2b37-068b-6f48-01edbb921d02",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"2b5de8a5-ad3c-d612-49ae-b4ebc064fdd5",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"4d509b29-2b37-068b-6f48-01edbb921d02",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("19f8371a-e772-62ae-b3f9-de22f89c722c",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"3c64d10e-3f58-5dfb-cff3-b51bd0915110",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"22c96144-8305-abca-b854-591cdee5564f",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("22c96144-8305-abca-b854-591cdee5564f",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"19f8371a-e772-62ae-b3f9-de22f89c722c",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_OIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO O_ID
	VALUES (2,
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_ISM
	VALUES ("4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb");
INSERT INTO SM_SM
	VALUES ("4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_EVTDI
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c");
INSERT INTO SM_EVTDI
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67");
INSERT INTO SM_EVTDI
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82");
INSERT INTO SM_EVTDI
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"3600367e-0add-f558-0191-3db7429b77fc");
INSERT INTO SM_EVTDI
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7");
INSERT INTO SM_EVTDI
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"ce156462-1465-51f4-1a56-0e636e83effe");
INSERT INTO SM_EVTDI
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06");
INSERT INTO SM_EVTDI
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7");
INSERT INTO SM_EVTDI
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"1a0b32df-a648-2dc4-be32-c924c59b332c");
INSERT INTO SM_EVTDI
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726");
INSERT INTO SM_EVTDI
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"285ab600-087c-6767-ab4a-a92f5f89988a");
INSERT INTO SM_EVTDI
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"7a133f52-371a-6d89-995f-845ec5c9c51f");
INSERT INTO SM_EVTDI
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037");
INSERT INTO SM_EVTDI
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438");
INSERT INTO SM_EVTDI
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7");
INSERT INTO SM_EVTDI
	VALUES ("fdcd6a24-3dcf-1a4d-44c8-e9aafa15c86c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c");
INSERT INTO SM_EVTDI
	VALUES ("668a418f-509c-95d6-adf3-7a0b0b85f32c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"2a6fe068-9d45-bf33-593f-7dda41f692f2");
INSERT INTO SM_EVTDI
	VALUES ("2a6fe068-9d45-bf33-593f-7dda41f692f2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("19262542-efee-dfa5-f1ee-ae8a2ee50029",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"668a418f-509c-95d6-adf3-7a0b0b85f32c");
INSERT INTO SM_EVTDI
	VALUES ("dbbeb42d-8264-dc7d-5893-21789a4ff469",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"19262542-efee-dfa5-f1ee-ae8a2ee50029");
INSERT INTO SM_EVTDI
	VALUES ("d69d931a-ab14-b19a-8822-8d44b2ddd977",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"dbbeb42d-8264-dc7d-5893-21789a4ff469");
INSERT INTO SM_EVTDI
	VALUES ("2cfec34e-d69c-8772-2456-19b12b85f5e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f935da26-6602-ad1d-c751-1840ea176c62",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("614ad6d5-cf9f-c16d-a510-f699f72fd5d3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("82c8451b-c97e-5266-a12a-4a2dea331cb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"2cfec34e-d69c-8772-2456-19b12b85f5e0");
INSERT INTO SM_EVTDI
	VALUES ("deb936a4-b007-8c1e-5aea-f8ebf80e0661",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"f935da26-6602-ad1d-c751-1840ea176c62");
INSERT INTO SM_EVTDI
	VALUES ("f8060b52-33ff-f2ff-a3c2-5f336a27192b",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"614ad6d5-cf9f-c16d-a510-f699f72fd5d3");
INSERT INTO SM_LEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b06514dd-3680-9909-6d9c-d215d09740e5",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"b06514dd-3680-9909-6d9c-d215d09740e5");
INSERT INTO SM_AH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd");
INSERT INTO SM_AH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("66de3709-f47f-7936-40fb-b0d8e7303340",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"66de3709-f47f-7936-40fb-b0d8e7303340");
INSERT INTO SM_AH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e");
INSERT INTO SM_AH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2");
INSERT INTO SM_AH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_STATE
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8");
INSERT INTO SM_AH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("44d39b91-1d9d-73f9-217a-91556104673f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"44d39b91-1d9d-73f9-217a-91556104673f");
INSERT INTO SM_AH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e");
INSERT INTO SM_AH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("62732e5d-28b5-9f07-a940-5d67dd36859f",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"62732e5d-28b5-9f07-a940-5d67dd36859f");
INSERT INTO SM_AH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("53509702-0f88-6160-ffe2-15f189bfedc8",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"53509702-0f88-6160-ffe2-15f189bfedc8");
INSERT INTO SM_AH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f8088057-232b-66fb-0061-33e178e05cfc",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"f8088057-232b-66fb-0061-33e178e05cfc");
INSERT INTO SM_AH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a");
INSERT INTO SM_AH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2");
INSERT INTO SM_AH
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("34f33f82-96ae-a337-98df-f59d249b65ed",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"34f33f82-96ae-a337-98df-f59d249b65ed");
INSERT INTO SM_AH
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("20d4cebb-d756-0fca-c8ee-b55a7a981de4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6");
INSERT INTO SM_AH
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("41f79c56-f056-3986-d3df-03d4ffc4da45",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("81374f42-af06-0e04-abb9-f6643a9eaa65",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"81374f42-af06-0e04-abb9-f6643a9eaa65");
INSERT INTO SM_AH
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("ceb67e61-7e47-925b-4f46-37bb66861e62",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"fd31caa6-e766-7e79-f89d-6f233c353852");
INSERT INTO SM_AH
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("716a76e5-aeaa-29d8-4fcf-1d977816bda0",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a");
INSERT INTO SM_AH
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("c7bfa5ad-ef47-cc7f-eec9-dc3c5dd57874",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4");
INSERT INTO SM_AH
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("1d9a6f3f-0827-44f6-a6b8-3e7249b151c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"73641449-6e50-c4dc-893d-b010d8f1d724");
INSERT INTO SM_AH
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("24ffb703-af64-b9b0-c79a-9b6accaa39a7",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d");
INSERT INTO SM_AH
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("5c3055ee-1c30-e9e3-b914-cf0352326988",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a");
INSERT INTO SM_AH
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("5f3ff6f2-0242-4e0d-ad7c-59dcdcd857a4",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cdc6e879-7296-1184-cfe3-eff922b12e41");
INSERT INTO SM_AH
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("20142d37-134c-bdfb-f2c6-e3f6e8598b02",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"4e680752-57da-475b-d8c4-11963be191ba");
INSERT INTO SM_AH
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("cc0fd1d9-9894-0762-a44d-440e19c7e63a",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf");
INSERT INTO SM_AH
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("76d3f073-a52e-64d9-2108-b4b47b5c87c6",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f");
INSERT INTO SM_AH
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("34ed32b5-0d6c-c9a5-5b70-d7c47444037c",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2");
INSERT INTO SM_AH
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("b5e36aaa-9c14-2fa1-cbb5-c1fc20fd97aa",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba");
INSERT INTO SM_AH
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("7298ca08-c752-b4f5-783a-781f30def751",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe");
INSERT INTO SM_AH
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("8e773efa-5d35-5992-a44e-a0c53cc39d49",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356");
INSERT INTO SM_AH
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("4328c9b8-fd96-e041-aad5-e78ec6f213c5",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"262cf679-02e3-a7ce-b418-7f8e0211e719");
INSERT INTO SM_AH
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("7e01616f-ebc4-cb85-ab6d-c8342ff79def",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13");
INSERT INTO SM_AH
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43");
INSERT INTO SM_ACT
	VALUES ("dd48e27b-e094-b967-6ccf-cc713004a759",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("17cd2efb-57ff-5986-61a7-19712b3d926d",
	8,
	"4e7851c0-16ec-6e6e-ecc0-79326f80ed43",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("3291ad0c-8868-6565-9178-bd95731041c5",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"b06514dd-3680-9909-6d9c-d215d09740e5",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO GD_NCS
	VALUES ("3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"3291ad0c-8868-6565-9178-bd95731041c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3291ad0c-8868-6565-9178-bd95731041c5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("daf2d68a-0b85-b2fc-0205-c85142b804b8",
	752.000000,
	1408.000000,
	"3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO DIM_CON
	VALUES ("2d7e2684-f145-932b-50f0-021ac63839f4",
	784.000000,
	1360.000000,
	"3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO DIM_CON
	VALUES ("99484a22-1116-e5b9-8c75-8a0c44f90d7b",
	928.000000,
	1456.000000,
	"3291ad0c-8868-6565-9178-bd95731041c5");
INSERT INTO GD_GE
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"9842cf40-2a8c-cb2b-673b-e159c7987edd",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce");
INSERT INTO GD_NCS
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"111609ab-b9bf-19e9-0152-b610f1d586ce");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"111609ab-b9bf-19e9-0152-b610f1d586ce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("111609ab-b9bf-19e9-0152-b610f1d586ce",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ad2e803a-730d-05f5-6093-886e970b7794",
	2128.000000,
	1616.000000,
	"111609ab-b9bf-19e9-0152-b610f1d586ce");
INSERT INTO DIM_CON
	VALUES ("f9707bec-26d6-8343-77dd-7b4e3fdb4ba1",
	1712.000000,
	1568.000000,
	"111609ab-b9bf-19e9-0152-b610f1d586ce");
INSERT INTO GD_GE
	VALUES ("066f48e4-52b8-9020-0a04-046b821bbc67",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"66de3709-f47f-7936-40fb-b0d8e7303340",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("066f48e4-52b8-9020-0a04-046b821bbc67");
INSERT INTO GD_NCS
	VALUES ("066f48e4-52b8-9020-0a04-046b821bbc67");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"066f48e4-52b8-9020-0a04-046b821bbc67");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"066f48e4-52b8-9020-0a04-046b821bbc67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("066f48e4-52b8-9020-0a04-046b821bbc67",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1903b830-2058-cba0-8a8b-5e6fdcca915d",
	2128.000000,
	1760.000000,
	"066f48e4-52b8-9020-0a04-046b821bbc67");
INSERT INTO DIM_CON
	VALUES ("41e513f4-381f-d391-8a17-0c10ee5d7e13",
	2128.000000,
	1792.000000,
	"066f48e4-52b8-9020-0a04-046b821bbc67");
INSERT INTO GD_GE
	VALUES ("73c2d832-6d6b-0169-5570-de6aee16e4ca",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"8c95ab0c-adcb-adb4-d8d6-4f7d7ac70f8e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("73c2d832-6d6b-0169-5570-de6aee16e4ca");
INSERT INTO GD_NCS
	VALUES ("73c2d832-6d6b-0169-5570-de6aee16e4ca");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"73c2d832-6d6b-0169-5570-de6aee16e4ca");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"73c2d832-6d6b-0169-5570-de6aee16e4ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("73c2d832-6d6b-0169-5570-de6aee16e4ca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	2128.000000,
	1920.000000,
	"73c2d832-6d6b-0169-5570-de6aee16e4ca");
INSERT INTO DIM_CON
	VALUES ("bb028112-2d83-33e7-4d75-3f9a64573827",
	2128.000000,
	1952.000000,
	"73c2d832-6d6b-0169-5570-de6aee16e4ca");
INSERT INTO GD_GE
	VALUES ("328d991b-bd9c-eb57-e99a-615e06f8270d",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"7bf5a895-ffcd-88e9-2765-12b53ca642d2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("328d991b-bd9c-eb57-e99a-615e06f8270d");
INSERT INTO GD_NCS
	VALUES ("328d991b-bd9c-eb57-e99a-615e06f8270d");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"328d991b-bd9c-eb57-e99a-615e06f8270d");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"328d991b-bd9c-eb57-e99a-615e06f8270d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("328d991b-bd9c-eb57-e99a-615e06f8270d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb",
	2592.000000,
	1632.000000,
	"328d991b-bd9c-eb57-e99a-615e06f8270d");
INSERT INTO GD_GE
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"ffc4c4e4-39fe-1812-0376-186008fa5df8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0");
INSERT INTO GD_NCS
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"380162d1-3273-1aa2-2d56-a6c59ef8a2a0");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"380162d1-3273-1aa2-2d56-a6c59ef8a2a0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("380162d1-3273-1aa2-2d56-a6c59ef8a2a0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9025a19d-f3d4-eddb-c962-b987879b61f0",
	2128.000000,
	2048.000000,
	"380162d1-3273-1aa2-2d56-a6c59ef8a2a0");
INSERT INTO DIM_CON
	VALUES ("37ea0655-1936-c37c-5043-a71cc500480a",
	2128.000000,
	2080.000000,
	"380162d1-3273-1aa2-2d56-a6c59ef8a2a0");
INSERT INTO GD_GE
	VALUES ("1015e5b5-d29f-b7f8-6c0d-482d72d94e4f",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"44d39b91-1d9d-73f9-217a-91556104673f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("1015e5b5-d29f-b7f8-6c0d-482d72d94e4f");
INSERT INTO GD_NCS
	VALUES ("1015e5b5-d29f-b7f8-6c0d-482d72d94e4f");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"1015e5b5-d29f-b7f8-6c0d-482d72d94e4f");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"1015e5b5-d29f-b7f8-6c0d-482d72d94e4f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1015e5b5-d29f-b7f8-6c0d-482d72d94e4f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("eea5b9c2-fb02-29cc-2ef7-1aba74a39518",
	2400.000000,
	2080.000000,
	"1015e5b5-d29f-b7f8-6c0d-482d72d94e4f");
INSERT INTO DIM_CON
	VALUES ("e2a3042d-0849-3883-b251-e7f23a66e857",
	2608.000000,
	2016.000000,
	"1015e5b5-d29f-b7f8-6c0d-482d72d94e4f");
INSERT INTO GD_GE
	VALUES ("1530593c-6864-728a-ac7e-76e6fe29dcc2",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"a6d095bc-384d-5c44-e5c9-f26c6982921e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("1530593c-6864-728a-ac7e-76e6fe29dcc2");
INSERT INTO GD_NCS
	VALUES ("1530593c-6864-728a-ac7e-76e6fe29dcc2");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"1530593c-6864-728a-ac7e-76e6fe29dcc2");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"1530593c-6864-728a-ac7e-76e6fe29dcc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1530593c-6864-728a-ac7e-76e6fe29dcc2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7671de15-e99a-5868-39d7-de70aaa9cc96",
	2608.000000,
	1968.000000,
	"1530593c-6864-728a-ac7e-76e6fe29dcc2");
INSERT INTO DIM_CON
	VALUES ("12371b97-b406-eeb8-1d95-1f6a15065ec7",
	2608.000000,
	1872.000000,
	"1530593c-6864-728a-ac7e-76e6fe29dcc2");
INSERT INTO GD_GE
	VALUES ("09a5da3a-41f4-5996-0a24-ecf188da8b4d",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"62732e5d-28b5-9f07-a940-5d67dd36859f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("09a5da3a-41f4-5996-0a24-ecf188da8b4d");
INSERT INTO GD_NCS
	VALUES ("09a5da3a-41f4-5996-0a24-ecf188da8b4d");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"09a5da3a-41f4-5996-0a24-ecf188da8b4d");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"09a5da3a-41f4-5996-0a24-ecf188da8b4d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("09a5da3a-41f4-5996-0a24-ecf188da8b4d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("10e7a715-3813-f762-8711-7a2d6435d4da",
	2608.000000,
	1808.000000,
	"09a5da3a-41f4-5996-0a24-ecf188da8b4d");
INSERT INTO DIM_CON
	VALUES ("e9987261-2b65-868f-191d-dce391f19a8e",
	2592.000000,
	1712.000000,
	"09a5da3a-41f4-5996-0a24-ecf188da8b4d");
INSERT INTO GD_GE
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"53509702-0f88-6160-ffe2-15f189bfedc8",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787");
INSERT INTO GD_NCS
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"358cfba3-c134-08f9-41d3-6a546cc04787");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"358cfba3-c134-08f9-41d3-6a546cc04787",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("358cfba3-c134-08f9-41d3-6a546cc04787",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("8568e56e-56de-6a33-53c5-697934e32d6b",
	928.000000,
	1776.000000,
	"358cfba3-c134-08f9-41d3-6a546cc04787");
INSERT INTO DIM_CON
	VALUES ("928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	928.000000,
	1680.000000,
	"358cfba3-c134-08f9-41d3-6a546cc04787");
INSERT INTO GD_GE
	VALUES ("70de435b-5d21-50c5-8bb1-6a1f548a7e69",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"f8088057-232b-66fb-0061-33e178e05cfc",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("70de435b-5d21-50c5-8bb1-6a1f548a7e69");
INSERT INTO GD_NCS
	VALUES ("70de435b-5d21-50c5-8bb1-6a1f548a7e69");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"70de435b-5d21-50c5-8bb1-6a1f548a7e69");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"70de435b-5d21-50c5-8bb1-6a1f548a7e69",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("70de435b-5d21-50c5-8bb1-6a1f548a7e69",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("2fca1208-b857-3e63-562d-b30a2dfd804a",
	928.000000,
	1840.000000,
	"70de435b-5d21-50c5-8bb1-6a1f548a7e69");
INSERT INTO DIM_CON
	VALUES ("b73ae68d-f709-c73f-f045-aed2dc47c67d",
	928.000000,
	1936.000000,
	"70de435b-5d21-50c5-8bb1-6a1f548a7e69");
INSERT INTO GD_GE
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"cb78c7eb-12ed-04c2-1946-bbde5bdb763a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19");
INSERT INTO GD_NCS
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"b83d4a7c-f781-4533-1ab3-33644091ef19");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"b83d4a7c-f781-4533-1ab3-33644091ef19",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b83d4a7c-f781-4533-1ab3-33644091ef19",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d4040b25-2d16-d265-e491-e1672f4cc152",
	928.000000,
	2016.000000,
	"b83d4a7c-f781-4533-1ab3-33644091ef19");
INSERT INTO DIM_CON
	VALUES ("57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	1072.000000,
	2080.000000,
	"b83d4a7c-f781-4533-1ab3-33644091ef19");
INSERT INTO GD_GE
	VALUES ("3759692b-387d-d95d-e693-5f3ea0caf94a",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"0322e5dd-e05f-6d21-2ac2-12a4cfca51e2",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("3759692b-387d-d95d-e693-5f3ea0caf94a");
INSERT INTO GD_NCS
	VALUES ("3759692b-387d-d95d-e693-5f3ea0caf94a");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"3759692b-387d-d95d-e693-5f3ea0caf94a");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"3759692b-387d-d95d-e693-5f3ea0caf94a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3759692b-387d-d95d-e693-5f3ea0caf94a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0fe323d5-3d49-90cd-cc7a-d8e526a07297",
	928.000000,
	1616.000000,
	"3759692b-387d-d95d-e693-5f3ea0caf94a");
INSERT INTO DIM_CON
	VALUES ("fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15",
	928.000000,
	1536.000000,
	"3759692b-387d-d95d-e693-5f3ea0caf94a");
INSERT INTO GD_GE
	VALUES ("18f96ca4-3f2f-7afe-c109-a53cdd722dc6",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"34f33f82-96ae-a337-98df-f59d249b65ed",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("18f96ca4-3f2f-7afe-c109-a53cdd722dc6");
INSERT INTO GD_NCS
	VALUES ("18f96ca4-3f2f-7afe-c109-a53cdd722dc6");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"18f96ca4-3f2f-7afe-c109-a53cdd722dc6");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"18f96ca4-3f2f-7afe-c109-a53cdd722dc6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("18f96ca4-3f2f-7afe-c109-a53cdd722dc6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("58572e8e-8864-b1d9-156d-13ca49bd0137",
	1280.000000,
	1376.000000,
	"18f96ca4-3f2f-7afe-c109-a53cdd722dc6");
INSERT INTO DIM_CON
	VALUES ("c23535ad-2c25-fbb1-c091-511a9ff0daef",
	1424.000000,
	1456.000000,
	"18f96ca4-3f2f-7afe-c109-a53cdd722dc6");
INSERT INTO GD_GE
	VALUES ("d43254fb-ed0c-df9a-1180-67c4409dcbca",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"0a20bc1a-30bb-c32a-6f31-6baf1faeb3f6",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("d43254fb-ed0c-df9a-1180-67c4409dcbca");
INSERT INTO GD_NCS
	VALUES ("d43254fb-ed0c-df9a-1180-67c4409dcbca");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"d43254fb-ed0c-df9a-1180-67c4409dcbca");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"d43254fb-ed0c-df9a-1180-67c4409dcbca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d43254fb-ed0c-df9a-1180-67c4409dcbca",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4d05e2d6-7cfc-7c37-27af-7b0665be6471",
	1424.000000,
	1520.000000,
	"d43254fb-ed0c-df9a-1180-67c4409dcbca");
INSERT INTO DIM_CON
	VALUES ("e2950012-d614-2402-b66b-8d21b42b1888",
	1456.000000,
	1616.000000,
	"d43254fb-ed0c-df9a-1180-67c4409dcbca");
INSERT INTO GD_GE
	VALUES ("22d07923-0970-6099-2d7f-1c2bf7670412",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"81374f42-af06-0e04-abb9-f6643a9eaa65",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("22d07923-0970-6099-2d7f-1c2bf7670412");
INSERT INTO GD_NCS
	VALUES ("22d07923-0970-6099-2d7f-1c2bf7670412");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"22d07923-0970-6099-2d7f-1c2bf7670412");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"22d07923-0970-6099-2d7f-1c2bf7670412",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("22d07923-0970-6099-2d7f-1c2bf7670412",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5d9f611f-d2d0-6bbb-d0d0-0d68126da610",
	1456.000000,
	1680.000000,
	"22d07923-0970-6099-2d7f-1c2bf7670412");
INSERT INTO DIM_CON
	VALUES ("5470ed30-3458-27d2-28f9-790ed12ff821",
	1600.000000,
	1728.000000,
	"22d07923-0970-6099-2d7f-1c2bf7670412");
INSERT INTO GD_GE
	VALUES ("f9c38d5c-3de3-9769-1612-d7bea411149b",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"fd31caa6-e766-7e79-f89d-6f233c353852",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("35d1882a-d7b3-508f-c11f-68dbf20bd71d",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"35d1882a-d7b3-508f-c11f-68dbf20bd71d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"35d1882a-d7b3-508f-c11f-68dbf20bd71d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35d1882a-d7b3-508f-c11f-68dbf20bd71d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("966599fe-9050-b688-26da-63f2e1f164c5",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"966599fe-9050-b688-26da-63f2e1f164c5");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"966599fe-9050-b688-26da-63f2e1f164c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("966599fe-9050-b688-26da-63f2e1f164c5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6436c89a-baaf-6c40-ef9f-28b646333459",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6436c89a-baaf-6c40-ef9f-28b646333459");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6436c89a-baaf-6c40-ef9f-28b646333459",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6436c89a-baaf-6c40-ef9f-28b646333459",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e9fecae7-f40d-949e-a0df-60fbb4f3b3d0",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000",
	"40f4b088-19dd-6f54-be9a-80e90ebc4f34",
	"396dba46-58fb-1f23-5859-59b6432aed12");
INSERT INTO GD_LS
	VALUES ("1a036383-9509-dbc9-3810-4f1766f3105d",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"e9fecae7-f40d-949e-a0df-60fbb4f3b3d0",
	"396dba46-58fb-1f23-5859-59b6432aed12",
	"315d2b66-a213-8ad6-264d-1b2e6d832a5a");
INSERT INTO GD_LS
	VALUES ("ad8c6af3-58f7-9f9d-9787-d26c4b4adab3",
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"1a036383-9509-dbc9-3810-4f1766f3105d",
	"315d2b66-a213-8ad6-264d-1b2e6d832a5a",
	"4eec383a-ee6a-593f-4d2a-03148e2d6a24");
INSERT INTO DIM_WAY
	VALUES ("40f4b088-19dd-6f54-be9a-80e90ebc4f34",
	2128.000000,
	1616.000000,
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("396dba46-58fb-1f23-5859-59b6432aed12",
	2176.000000,
	1616.000000,
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000",
	"40f4b088-19dd-6f54-be9a-80e90ebc4f34");
INSERT INTO DIM_WAY
	VALUES ("315d2b66-a213-8ad6-264d-1b2e6d832a5a",
	2176.000000,
	1760.000000,
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000",
	"396dba46-58fb-1f23-5859-59b6432aed12");
INSERT INTO DIM_WAY
	VALUES ("4eec383a-ee6a-593f-4d2a-03148e2d6a24",
	2128.000000,
	1760.000000,
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000",
	"315d2b66-a213-8ad6-264d-1b2e6d832a5a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f9c38d5c-3de3-9769-1612-d7bea411149b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f9c38d5c-3de3-9769-1612-d7bea411149b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ad2e803a-730d-05f5-6093-886e970b7794",
	"1903b830-2058-cba0-8a8b-5e6fdcca915d",
	"f9c38d5c-3de3-9769-1612-d7bea411149b");
INSERT INTO GD_GE
	VALUES ("cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("66dedef9-4601-3066-9c60-263d2d414266",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"66dedef9-4601-3066-9c60-263d2d414266");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"66dedef9-4601-3066-9c60-263d2d414266",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("66dedef9-4601-3066-9c60-263d2d414266",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6a365f81-b999-4801-76ac-e3457de72e2e",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"6a365f81-b999-4801-76ac-e3457de72e2e");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"6a365f81-b999-4801-76ac-e3457de72e2e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a365f81-b999-4801-76ac-e3457de72e2e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("005ce0b0-c413-3844-b849-4db48589f354",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"005ce0b0-c413-3844-b849-4db48589f354");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"005ce0b0-c413-3844-b849-4db48589f354",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("005ce0b0-c413-3844-b849-4db48589f354",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e0afdeae-e274-6a4e-4a57-7aec8b470892",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000",
	"ee577588-5724-586d-5e78-b5cd04898eec",
	"c1260c43-e8be-3b4c-3b06-5b011a69d954");
INSERT INTO GD_LS
	VALUES ("d350aa02-29d0-8b64-6af8-d6525c1d3ede",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"e0afdeae-e274-6a4e-4a57-7aec8b470892",
	"c1260c43-e8be-3b4c-3b06-5b011a69d954",
	"e6862006-46e5-0b23-9b42-e5494e2fae72");
INSERT INTO GD_LS
	VALUES ("5100aea5-351c-9b0f-fcb3-60f28003d5f5",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"d350aa02-29d0-8b64-6af8-d6525c1d3ede",
	"e6862006-46e5-0b23-9b42-e5494e2fae72",
	"d570da21-a725-9173-8eb4-0581028ac767");
INSERT INTO DIM_WAY
	VALUES ("ee577588-5724-586d-5e78-b5cd04898eec",
	2128.000000,
	1792.000000,
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c1260c43-e8be-3b4c-3b06-5b011a69d954",
	2176.000000,
	1792.000000,
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000",
	"ee577588-5724-586d-5e78-b5cd04898eec");
INSERT INTO DIM_WAY
	VALUES ("e6862006-46e5-0b23-9b42-e5494e2fae72",
	2176.000000,
	1920.000000,
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000",
	"c1260c43-e8be-3b4c-3b06-5b011a69d954");
INSERT INTO DIM_WAY
	VALUES ("d570da21-a725-9173-8eb4-0581028ac767",
	2128.000000,
	1920.000000,
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000",
	"e6862006-46e5-0b23-9b42-e5494e2fae72");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb3bb9cc-b17f-1171-26f9-4088e7ecd467",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("41e513f4-381f-d391-8a17-0c10ee5d7e13",
	"1cfa99bb-1c38-b75b-0b52-4eb5dc1ca412",
	"cb3bb9cc-b17f-1171-26f9-4088e7ecd467");
INSERT INTO GD_GE
	VALUES ("165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd7988d2-8b21-6774-ee57-2657ee43596d",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fd7988d2-8b21-6774-ee57-2657ee43596d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fd7988d2-8b21-6774-ee57-2657ee43596d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd7988d2-8b21-6774-ee57-2657ee43596d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("33b1620a-1390-ef4b-b8e5-148dc1529021",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"33b1620a-1390-ef4b-b8e5-148dc1529021");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"33b1620a-1390-ef4b-b8e5-148dc1529021",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("33b1620a-1390-ef4b-b8e5-148dc1529021",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bfe473d4-0606-ffbc-b524-5cd11d86b851",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bfe473d4-0606-ffbc-b524-5cd11d86b851");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bfe473d4-0606-ffbc-b524-5cd11d86b851",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bfe473d4-0606-ffbc-b524-5cd11d86b851",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("48939b34-8e5b-1afa-b89d-c61a588b94d2",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000",
	"118e260b-e8d0-f1e5-83b1-a93b0c00cc10",
	"c3cbdd95-92e0-db2b-a3d6-34199cc49866");
INSERT INTO GD_LS
	VALUES ("382fdf97-5b35-0392-98af-e3122ab077c8",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"48939b34-8e5b-1afa-b89d-c61a588b94d2",
	"c3cbdd95-92e0-db2b-a3d6-34199cc49866",
	"3c416d7f-f0b8-1cd5-4e90-bc0767e1bcaf");
INSERT INTO GD_LS
	VALUES ("7d5366cc-3993-ab08-182a-3ecb0ce5bfcb",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"382fdf97-5b35-0392-98af-e3122ab077c8",
	"3c416d7f-f0b8-1cd5-4e90-bc0767e1bcaf",
	"c53a6ad5-6fbc-fdcb-50cc-940d049f73dc");
INSERT INTO DIM_WAY
	VALUES ("118e260b-e8d0-f1e5-83b1-a93b0c00cc10",
	2128.000000,
	1952.000000,
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c3cbdd95-92e0-db2b-a3d6-34199cc49866",
	2176.000000,
	1952.000000,
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000",
	"118e260b-e8d0-f1e5-83b1-a93b0c00cc10");
INSERT INTO DIM_WAY
	VALUES ("3c416d7f-f0b8-1cd5-4e90-bc0767e1bcaf",
	2176.000000,
	2048.000000,
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000",
	"c3cbdd95-92e0-db2b-a3d6-34199cc49866");
INSERT INTO DIM_WAY
	VALUES ("c53a6ad5-6fbc-fdcb-50cc-940d049f73dc",
	2128.000000,
	2048.000000,
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000",
	"3c416d7f-f0b8-1cd5-4e90-bc0767e1bcaf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("165a773a-398d-1d10-41f2-7a3d77d7a0f8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bb028112-2d83-33e7-4d75-3f9a64573827",
	"9025a19d-f3d4-eddb-c962-b987879b61f0",
	"165a773a-398d-1d10-41f2-7a3d77d7a0f8");
INSERT INTO GD_GE
	VALUES ("aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"73641449-6e50-c4dc-893d-b010d8f1d724",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a5e646f3-820c-ad17-b23b-2af4863adc11",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a5e646f3-820c-ad17-b23b-2af4863adc11");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a5e646f3-820c-ad17-b23b-2af4863adc11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5e646f3-820c-ad17-b23b-2af4863adc11",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1099b3b0-c761-c012-2f6a-002d207879f9",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"1099b3b0-c761-c012-2f6a-002d207879f9");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"1099b3b0-c761-c012-2f6a-002d207879f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1099b3b0-c761-c012-2f6a-002d207879f9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8669de4a-c17b-911e-40e7-6883ecd003a2",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8669de4a-c17b-911e-40e7-6883ecd003a2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8669de4a-c17b-911e-40e7-6883ecd003a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8669de4a-c17b-911e-40e7-6883ecd003a2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dd853834-9406-3019-5e37-00fc272d5251",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"00000000-0000-0000-0000-000000000000",
	"76a0f501-badb-d41f-806d-e9686ebe69c6",
	"4b363431-53b5-9f0f-f7b3-92022edc3190");
INSERT INTO DIM_WAY
	VALUES ("76a0f501-badb-d41f-806d-e9686ebe69c6",
	2128.000000,
	2080.000000,
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4b363431-53b5-9f0f-f7b3-92022edc3190",
	2400.000000,
	2080.000000,
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"00000000-0000-0000-0000-000000000000",
	"76a0f501-badb-d41f-806d-e9686ebe69c6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"aa9e718b-5f18-ece5-52e8-51cda6c61762",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("aa9e718b-5f18-ece5-52e8-51cda6c61762",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("37ea0655-1936-c37c-5043-a71cc500480a",
	"eea5b9c2-fb02-29cc-2ef7-1aba74a39518",
	"aa9e718b-5f18-ece5-52e8-51cda6c61762");
INSERT INTO GD_GE
	VALUES ("4597cd79-b1d5-77aa-5a36-a850d545e306",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"2edc4743-d19f-ed9c-55ae-ca54affc866d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("4597cd79-b1d5-77aa-5a36-a850d545e306",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("26a1720f-574f-7169-2992-9f854764f8ac",
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"26a1720f-574f-7169-2992-9f854764f8ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"26a1720f-574f-7169-2992-9f854764f8ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("26a1720f-574f-7169-2992-9f854764f8ac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8d01e3b5-b9a9-3077-53b5-230e8a7f34e4",
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"8d01e3b5-b9a9-3077-53b5-230e8a7f34e4");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"8d01e3b5-b9a9-3077-53b5-230e8a7f34e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8d01e3b5-b9a9-3077-53b5-230e8a7f34e4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f39749fc-f5af-f7df-4451-0a55637d7e1a",
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f39749fc-f5af-f7df-4451-0a55637d7e1a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f39749fc-f5af-f7df-4451-0a55637d7e1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f39749fc-f5af-f7df-4451-0a55637d7e1a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("25d45edc-dbb5-3826-06eb-9f8957bbbf5b",
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	"00000000-0000-0000-0000-000000000000",
	"1704c3d9-dbfb-6079-2300-0ccf718a4a16",
	"24fe7174-5e01-3746-534f-b4067543d3ca");
INSERT INTO DIM_WAY
	VALUES ("1704c3d9-dbfb-6079-2300-0ccf718a4a16",
	2608.000000,
	2016.000000,
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("24fe7174-5e01-3746-534f-b4067543d3ca",
	2608.000000,
	1968.000000,
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	"00000000-0000-0000-0000-000000000000",
	"1704c3d9-dbfb-6079-2300-0ccf718a4a16");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4597cd79-b1d5-77aa-5a36-a850d545e306",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4597cd79-b1d5-77aa-5a36-a850d545e306",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e2a3042d-0849-3883-b251-e7f23a66e857",
	"7671de15-e99a-5868-39d7-de70aaa9cc96",
	"4597cd79-b1d5-77aa-5a36-a850d545e306");
INSERT INTO GD_GE
	VALUES ("c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"58982c68-0b67-fb2a-d66b-84b6496fe03a",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("26c30f90-a394-2f11-fdaf-af464faa5b60",
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"26c30f90-a394-2f11-fdaf-af464faa5b60");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"26c30f90-a394-2f11-fdaf-af464faa5b60",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("26c30f90-a394-2f11-fdaf-af464faa5b60",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9d3aedae-ee1c-9588-f117-cde9aaff7c78",
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"9d3aedae-ee1c-9588-f117-cde9aaff7c78");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"9d3aedae-ee1c-9588-f117-cde9aaff7c78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9d3aedae-ee1c-9588-f117-cde9aaff7c78",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8a3eb4b3-3618-680e-5749-331ab66c23cf",
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8a3eb4b3-3618-680e-5749-331ab66c23cf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8a3eb4b3-3618-680e-5749-331ab66c23cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8a3eb4b3-3618-680e-5749-331ab66c23cf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("02b13062-43c8-7300-85c8-c590d537be55",
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"00000000-0000-0000-0000-000000000000",
	"36a67d70-642f-af18-f453-4dff0a8998c4",
	"721850f5-66be-ce90-e16a-3a033070d365");
INSERT INTO DIM_WAY
	VALUES ("36a67d70-642f-af18-f453-4dff0a8998c4",
	2608.000000,
	1872.000000,
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("721850f5-66be-ce90-e16a-3a033070d365",
	2608.000000,
	1808.000000,
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"00000000-0000-0000-0000-000000000000",
	"36a67d70-642f-af18-f453-4dff0a8998c4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c74ded7d-d459-887f-ff9d-e9977c69f9a1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("12371b97-b406-eeb8-1d95-1f6a15065ec7",
	"10e7a715-3813-f762-8711-7a2d6435d4da",
	"c74ded7d-d459-887f-ff9d-e9977c69f9a1");
INSERT INTO GD_GE
	VALUES ("2e25079e-a8be-a464-ea1c-e850c9b59792",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"cdc6e879-7296-1184-cfe3-eff922b12e41",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("2e25079e-a8be-a464-ea1c-e850c9b59792",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d2ae7b2d-1f8e-bca8-6b4c-22fa47d4d847",
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d2ae7b2d-1f8e-bca8-6b4c-22fa47d4d847");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d2ae7b2d-1f8e-bca8-6b4c-22fa47d4d847",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d2ae7b2d-1f8e-bca8-6b4c-22fa47d4d847",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("64acd397-cdcf-e957-5913-1773c761da2a",
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"64acd397-cdcf-e957-5913-1773c761da2a");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"64acd397-cdcf-e957-5913-1773c761da2a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("64acd397-cdcf-e957-5913-1773c761da2a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("38bab01e-d2b2-7fe9-ce1f-d684da1a45dd",
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"38bab01e-d2b2-7fe9-ce1f-d684da1a45dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"38bab01e-d2b2-7fe9-ce1f-d684da1a45dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("38bab01e-d2b2-7fe9-ce1f-d684da1a45dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("df60affc-4784-62e3-8ca2-bca0458b9846",
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	"00000000-0000-0000-0000-000000000000",
	"d24bafa2-2d62-b4e1-7a8c-0ee5a33aacf8",
	"72ab3d88-07bf-e0b0-0093-6eb76e87129f");
INSERT INTO DIM_WAY
	VALUES ("d24bafa2-2d62-b4e1-7a8c-0ee5a33aacf8",
	2592.000000,
	1712.000000,
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("72ab3d88-07bf-e0b0-0093-6eb76e87129f",
	2592.000000,
	1632.000000,
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	"00000000-0000-0000-0000-000000000000",
	"d24bafa2-2d62-b4e1-7a8c-0ee5a33aacf8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2e25079e-a8be-a464-ea1c-e850c9b59792",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2e25079e-a8be-a464-ea1c-e850c9b59792",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e9987261-2b65-868f-191d-dce391f19a8e",
	"8a6ebbf5-d2b5-37d0-18de-b1c7a11adceb",
	"2e25079e-a8be-a464-ea1c-e850c9b59792");
INSERT INTO GD_GE
	VALUES ("501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"4e680752-57da-475b-d8c4-11963be191ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8483d8d0-9b80-798d-ca4a-028597e5cb1a",
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8483d8d0-9b80-798d-ca4a-028597e5cb1a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8483d8d0-9b80-798d-ca4a-028597e5cb1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8483d8d0-9b80-798d-ca4a-028597e5cb1a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("44521025-a4a4-0318-65bc-b68faeb0cac3",
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"44521025-a4a4-0318-65bc-b68faeb0cac3");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"44521025-a4a4-0318-65bc-b68faeb0cac3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("44521025-a4a4-0318-65bc-b68faeb0cac3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1029b665-b122-4f72-d790-037f5c8d0967",
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1029b665-b122-4f72-d790-037f5c8d0967");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1029b665-b122-4f72-d790-037f5c8d0967",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1029b665-b122-4f72-d790-037f5c8d0967",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("425ee224-88ac-ad08-bc3a-701682503b14",
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"00000000-0000-0000-0000-000000000000",
	"31079e55-181a-9620-e83d-8596d8ff6227",
	"44e1b322-a0ea-2fff-7c88-2ac2621d1a8d");
INSERT INTO DIM_WAY
	VALUES ("31079e55-181a-9620-e83d-8596d8ff6227",
	928.000000,
	1776.000000,
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("44e1b322-a0ea-2fff-7c88-2ac2621d1a8d",
	928.000000,
	1840.000000,
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"00000000-0000-0000-0000-000000000000",
	"31079e55-181a-9620-e83d-8596d8ff6227");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("501a7a94-e955-3ca4-1e47-2e9f45ec45cc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8568e56e-56de-6a33-53c5-697934e32d6b",
	"2fca1208-b857-3e63-562d-b30a2dfd804a",
	"501a7a94-e955-3ca4-1e47-2e9f45ec45cc");
INSERT INTO GD_GE
	VALUES ("e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("823e45f2-9fb7-3a6a-92f2-d7c06b59f322",
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"823e45f2-9fb7-3a6a-92f2-d7c06b59f322");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"823e45f2-9fb7-3a6a-92f2-d7c06b59f322",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("823e45f2-9fb7-3a6a-92f2-d7c06b59f322",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("27d92000-6a7b-421b-dfa9-b17ab885b682",
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"27d92000-6a7b-421b-dfa9-b17ab885b682");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"27d92000-6a7b-421b-dfa9-b17ab885b682",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("27d92000-6a7b-421b-dfa9-b17ab885b682",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("afcf7417-5129-738a-0ed9-e25f73491767",
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"afcf7417-5129-738a-0ed9-e25f73491767");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"afcf7417-5129-738a-0ed9-e25f73491767",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("afcf7417-5129-738a-0ed9-e25f73491767",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("19084f83-8a4b-0c76-a361-706318d134a9",
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"00000000-0000-0000-0000-000000000000",
	"c638a65d-9dc0-0ec3-b43b-03582e122004",
	"86cf8ec0-17e5-cb88-9b1a-5d08f2d51d7a");
INSERT INTO DIM_WAY
	VALUES ("c638a65d-9dc0-0ec3-b43b-03582e122004",
	928.000000,
	1936.000000,
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("86cf8ec0-17e5-cb88-9b1a-5d08f2d51d7a",
	928.000000,
	2016.000000,
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"00000000-0000-0000-0000-000000000000",
	"c638a65d-9dc0-0ec3-b43b-03582e122004");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e29e2d65-e46e-55b1-fbe2-d45b99630e94",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b73ae68d-f709-c73f-f045-aed2dc47c67d",
	"d4040b25-2d16-d265-e491-e1672f4cc152",
	"e29e2d65-e46e-55b1-fbe2-d45b99630e94");
INSERT INTO GD_GE
	VALUES ("a41eb47a-c835-5299-908d-8c9a7179b87e",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"cf95098f-4252-ba65-3456-c9b4a1343e0f",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ba88a737-0b60-382a-cba0-90a4b2164d8c",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ba88a737-0b60-382a-cba0-90a4b2164d8c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ba88a737-0b60-382a-cba0-90a4b2164d8c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba88a737-0b60-382a-cba0-90a4b2164d8c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e27b87b3-2e4c-5533-ee3f-ba967ba9fc1a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("99680d35-8728-5d33-e505-e67e3ad3985b",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"99680d35-8728-5d33-e505-e67e3ad3985b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"99680d35-8728-5d33-e505-e67e3ad3985b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("99680d35-8728-5d33-e505-e67e3ad3985b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("11466150-5c56-0388-1b42-b1cd63580be1",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"d4c0747a-654b-5170-0bdb-106ddbfad1dc",
	"56bb738f-0cd4-24c4-64aa-510e30cbc69c");
INSERT INTO GD_LS
	VALUES ("bf803ed0-8dc3-be0b-3a63-ae30207e0470",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"11466150-5c56-0388-1b42-b1cd63580be1",
	"56bb738f-0cd4-24c4-64aa-510e30cbc69c",
	"60ce8c16-5bdb-2808-dbfd-f159e24f44ec");
INSERT INTO GD_LS
	VALUES ("b96255a4-8f62-e78a-39d7-35a7f68e6a22",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"bf803ed0-8dc3-be0b-3a63-ae30207e0470",
	"60ce8c16-5bdb-2808-dbfd-f159e24f44ec",
	"5f62e2ac-2e99-0bdf-b065-7eba1643f8d2");
INSERT INTO GD_LS
	VALUES ("18f90701-5167-e33f-784c-6697786766a4",
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"b96255a4-8f62-e78a-39d7-35a7f68e6a22",
	"5f62e2ac-2e99-0bdf-b065-7eba1643f8d2",
	"4708245f-3780-f212-fbb8-0dba34b785a9");
INSERT INTO DIM_WAY
	VALUES ("d4c0747a-654b-5170-0bdb-106ddbfad1dc",
	752.000000,
	1408.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("56bb738f-0cd4-24c4-64aa-510e30cbc69c",
	624.000000,
	1408.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"d4c0747a-654b-5170-0bdb-106ddbfad1dc");
INSERT INTO DIM_WAY
	VALUES ("60ce8c16-5bdb-2808-dbfd-f159e24f44ec",
	624.000000,
	1328.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"56bb738f-0cd4-24c4-64aa-510e30cbc69c");
INSERT INTO DIM_WAY
	VALUES ("5f62e2ac-2e99-0bdf-b065-7eba1643f8d2",
	784.000000,
	1328.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"60ce8c16-5bdb-2808-dbfd-f159e24f44ec");
INSERT INTO DIM_WAY
	VALUES ("4708245f-3780-f212-fbb8-0dba34b785a9",
	784.000000,
	1360.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000",
	"5f62e2ac-2e99-0bdf-b065-7eba1643f8d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a41eb47a-c835-5299-908d-8c9a7179b87e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a41eb47a-c835-5299-908d-8c9a7179b87e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("daf2d68a-0b85-b2fc-0205-c85142b804b8",
	"2d7e2684-f145-932b-50f0-021ac63839f4",
	"a41eb47a-c835-5299-908d-8c9a7179b87e");
INSERT INTO GD_GE
	VALUES ("4bdfd67c-2973-becb-bb30-0f240838783a",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("4bdfd67c-2973-becb-bb30-0f240838783a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c5dd68f8-870b-a264-7fb5-009ca04d4f80",
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c5dd68f8-870b-a264-7fb5-009ca04d4f80");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c5dd68f8-870b-a264-7fb5-009ca04d4f80",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c5dd68f8-870b-a264-7fb5-009ca04d4f80",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1211fafb-fde0-424b-ba9f-96069b19e345",
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"1211fafb-fde0-424b-ba9f-96069b19e345");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"1211fafb-fde0-424b-ba9f-96069b19e345",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1211fafb-fde0-424b-ba9f-96069b19e345",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f140c07d-f85b-c0c4-3a17-de3d74299de8",
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f140c07d-f85b-c0c4-3a17-de3d74299de8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f140c07d-f85b-c0c4-3a17-de3d74299de8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f140c07d-f85b-c0c4-3a17-de3d74299de8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("39b3e733-4e17-78da-f09c-28feb7f8f2d9",
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	"00000000-0000-0000-0000-000000000000",
	"eb5874fe-99b0-a7e2-8f17-695ec8c706fb",
	"682a3498-78ec-ade2-7f49-45d5aa4dd4d1");
INSERT INTO DIM_WAY
	VALUES ("eb5874fe-99b0-a7e2-8f17-695ec8c706fb",
	928.000000,
	1616.000000,
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("682a3498-78ec-ade2-7f49-45d5aa4dd4d1",
	928.000000,
	1680.000000,
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	"00000000-0000-0000-0000-000000000000",
	"eb5874fe-99b0-a7e2-8f17-695ec8c706fb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4bdfd67c-2973-becb-bb30-0f240838783a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4bdfd67c-2973-becb-bb30-0f240838783a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("0fe323d5-3d49-90cd-cc7a-d8e526a07297",
	"928901e8-c8a9-b5bc-527e-fb6a84ff9d0f",
	"4bdfd67c-2973-becb-bb30-0f240838783a");
INSERT INTO GD_GE
	VALUES ("eeedaf7b-894d-2467-854c-b90e2381924a",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("eeedaf7b-894d-2467-854c-b90e2381924a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2b7526f0-973e-061b-45f4-1d68475097ca",
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2b7526f0-973e-061b-45f4-1d68475097ca");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2b7526f0-973e-061b-45f4-1d68475097ca",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2b7526f0-973e-061b-45f4-1d68475097ca",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd",
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4f903d29-2be8-1c4b-8c0a-2332c1f7dcfd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3872a46a-bef9-8773-b966-af644b8aa2d1",
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3872a46a-bef9-8773-b966-af644b8aa2d1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3872a46a-bef9-8773-b966-af644b8aa2d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3872a46a-bef9-8773-b966-af644b8aa2d1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a1324588-9d9c-ff2e-c9f8-687f4100f03d",
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	"00000000-0000-0000-0000-000000000000",
	"72e56dd3-cc9e-9aae-cf86-ea128aa75b55",
	"49b4919e-03b0-d675-e8eb-b6ab646a0076");
INSERT INTO DIM_WAY
	VALUES ("72e56dd3-cc9e-9aae-cf86-ea128aa75b55",
	928.000000,
	1456.000000,
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("49b4919e-03b0-d675-e8eb-b6ab646a0076",
	928.000000,
	1536.000000,
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	"00000000-0000-0000-0000-000000000000",
	"72e56dd3-cc9e-9aae-cf86-ea128aa75b55");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eeedaf7b-894d-2467-854c-b90e2381924a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eeedaf7b-894d-2467-854c-b90e2381924a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("99484a22-1116-e5b9-8c75-8a0c44f90d7b",
	"fb2fe5f6-ca28-7f6a-d035-3c1de04f0e15",
	"eeedaf7b-894d-2467-854c-b90e2381924a");
INSERT INTO GD_GE
	VALUES ("102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("14fce057-ab15-0539-d9bd-48ac3d4d9584",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"14fce057-ab15-0539-d9bd-48ac3d4d9584");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"14fce057-ab15-0539-d9bd-48ac3d4d9584",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("14fce057-ab15-0539-d9bd-48ac3d4d9584",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c6aa82d1-5711-f287-8637-9216c2f94d20",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"c6aa82d1-5711-f287-8637-9216c2f94d20");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"c6aa82d1-5711-f287-8637-9216c2f94d20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c6aa82d1-5711-f287-8637-9216c2f94d20",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("096ef6a2-ddb2-f7e0-9bff-58b141cfa6e3",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"096ef6a2-ddb2-f7e0-9bff-58b141cfa6e3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"096ef6a2-ddb2-f7e0-9bff-58b141cfa6e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("096ef6a2-ddb2-f7e0-9bff-58b141cfa6e3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ecb2d94d-0731-a4df-58af-150fe26216a4",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000",
	"d52b83e6-f1ed-ca9e-be36-b0a294294222",
	"8f25e04f-fbcb-bc5f-9553-ae290cb18ca3");
INSERT INTO GD_LS
	VALUES ("5d8bf542-502d-5226-080b-bf0d77031464",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"ecb2d94d-0731-a4df-58af-150fe26216a4",
	"8f25e04f-fbcb-bc5f-9553-ae290cb18ca3",
	"1b2986ef-3f0e-0b82-683d-b0d58dffa613");
INSERT INTO GD_LS
	VALUES ("19ff92e3-f8e5-7462-c176-cc3553d2b048",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"5d8bf542-502d-5226-080b-bf0d77031464",
	"1b2986ef-3f0e-0b82-683d-b0d58dffa613",
	"b57bb837-befc-35e1-8528-0caaceb22e50");
INSERT INTO DIM_WAY
	VALUES ("d52b83e6-f1ed-ca9e-be36-b0a294294222",
	1072.000000,
	2080.000000,
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("8f25e04f-fbcb-bc5f-9553-ae290cb18ca3",
	1168.000000,
	2080.000000,
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000",
	"d52b83e6-f1ed-ca9e-be36-b0a294294222");
INSERT INTO DIM_WAY
	VALUES ("1b2986ef-3f0e-0b82-683d-b0d58dffa613",
	1168.000000,
	1376.000000,
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000",
	"8f25e04f-fbcb-bc5f-9553-ae290cb18ca3");
INSERT INTO DIM_WAY
	VALUES ("b57bb837-befc-35e1-8528-0caaceb22e50",
	1280.000000,
	1376.000000,
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000",
	"1b2986ef-3f0e-0b82-683d-b0d58dffa613");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("102f2025-bdcc-c02e-83e1-e62a0e8bebe2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("57359216-9f67-9a0a-c9a6-7c1ecbef4d1b",
	"58572e8e-8864-b1d9-156d-13ca49bd0137",
	"102f2025-bdcc-c02e-83e1-e62a0e8bebe2");
INSERT INTO GD_GE
	VALUES ("868a99a7-a74d-6784-272c-1ca1e5223e72",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"784504ea-ab07-1eac-c5e9-37e4a4b84356",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("868a99a7-a74d-6784-272c-1ca1e5223e72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f1c0da25-2003-bf17-2e38-c255ab89d436",
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f1c0da25-2003-bf17-2e38-c255ab89d436");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f1c0da25-2003-bf17-2e38-c255ab89d436",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f1c0da25-2003-bf17-2e38-c255ab89d436",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7a7a00ab-9109-9420-6820-17cfc0cfe2d4",
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"7a7a00ab-9109-9420-6820-17cfc0cfe2d4");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"7a7a00ab-9109-9420-6820-17cfc0cfe2d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7a7a00ab-9109-9420-6820-17cfc0cfe2d4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5e9493fe-d407-cd4b-2436-2709a2dd7aa6",
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5e9493fe-d407-cd4b-2436-2709a2dd7aa6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5e9493fe-d407-cd4b-2436-2709a2dd7aa6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5e9493fe-d407-cd4b-2436-2709a2dd7aa6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("301f65e0-acc6-68e5-05af-655eb04ca396",
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	"00000000-0000-0000-0000-000000000000",
	"c41c1b51-eac3-1564-a410-91848cdac748",
	"be9a0d8f-a4b8-3540-4744-390c6db07c1a");
INSERT INTO DIM_WAY
	VALUES ("c41c1b51-eac3-1564-a410-91848cdac748",
	1424.000000,
	1456.000000,
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("be9a0d8f-a4b8-3540-4744-390c6db07c1a",
	1424.000000,
	1520.000000,
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	"00000000-0000-0000-0000-000000000000",
	"c41c1b51-eac3-1564-a410-91848cdac748");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"868a99a7-a74d-6784-272c-1ca1e5223e72",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("868a99a7-a74d-6784-272c-1ca1e5223e72",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c23535ad-2c25-fbb1-c091-511a9ff0daef",
	"4d05e2d6-7cfc-7c37-27af-7b0665be6471",
	"868a99a7-a74d-6784-272c-1ca1e5223e72");
INSERT INTO GD_GE
	VALUES ("977e062c-fe61-f4ca-645d-bae7569017b0",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"262cf679-02e3-a7ce-b418-7f8e0211e719",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("977e062c-fe61-f4ca-645d-bae7569017b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4acea9a4-5ef8-22fd-e53f-c067d8c13262",
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"4acea9a4-5ef8-22fd-e53f-c067d8c13262");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4acea9a4-5ef8-22fd-e53f-c067d8c13262",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4acea9a4-5ef8-22fd-e53f-c067d8c13262",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bc8fb196-47fa-2288-e555-dcba13640ffa",
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"bc8fb196-47fa-2288-e555-dcba13640ffa");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"bc8fb196-47fa-2288-e555-dcba13640ffa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bc8fb196-47fa-2288-e555-dcba13640ffa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cd3fd80f-ac01-c4af-b572-cc8046374f5e",
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cd3fd80f-ac01-c4af-b572-cc8046374f5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cd3fd80f-ac01-c4af-b572-cc8046374f5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd3fd80f-ac01-c4af-b572-cc8046374f5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b3770411-e742-2f3e-976e-dd245d60085f",
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	"00000000-0000-0000-0000-000000000000",
	"0fbad222-8709-f816-7875-3e865f484c17",
	"18ef237f-a20d-1568-f0a1-e0bf3d17df93");
INSERT INTO DIM_WAY
	VALUES ("0fbad222-8709-f816-7875-3e865f484c17",
	1456.000000,
	1616.000000,
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("18ef237f-a20d-1568-f0a1-e0bf3d17df93",
	1456.000000,
	1680.000000,
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	"00000000-0000-0000-0000-000000000000",
	"0fbad222-8709-f816-7875-3e865f484c17");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"977e062c-fe61-f4ca-645d-bae7569017b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("977e062c-fe61-f4ca-645d-bae7569017b0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("e2950012-d614-2402-b66b-8d21b42b1888",
	"5d9f611f-d2d0-6bbb-d0d0-0d68126da610",
	"977e062c-fe61-f4ca-645d-bae7569017b0");
INSERT INTO GD_GE
	VALUES ("b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"17cd2efb-57ff-5986-61a7-19712b3d926d",
	"7d77c1bc-3502-17f9-db93-6a04522cbc13",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1c30dd9f-b5b4-3988-3c7c-17209dd773db",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1c30dd9f-b5b4-3988-3c7c-17209dd773db");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c30dd9f-b5b4-3988-3c7c-17209dd773db",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c30dd9f-b5b4-3988-3c7c-17209dd773db",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e46e7ace-9b67-a2e1-fcdb-37d1976d15e7",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"e46e7ace-9b67-a2e1-fcdb-37d1976d15e7");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"e46e7ace-9b67-a2e1-fcdb-37d1976d15e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e46e7ace-9b67-a2e1-fcdb-37d1976d15e7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7b6d9375-9ff6-ee59-141b-ffcfd8f94305",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7b6d9375-9ff6-ee59-141b-ffcfd8f94305");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7b6d9375-9ff6-ee59-141b-ffcfd8f94305",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7b6d9375-9ff6-ee59-141b-ffcfd8f94305",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e1a7abd7-1386-2cc7-3807-f0c3483c90e6",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000",
	"99397ce9-16e6-1a8f-09f5-ad2907083bbd",
	"7543b45c-15c4-b956-c6ae-b8444eaf06a5");
INSERT INTO GD_LS
	VALUES ("18cfa86e-d506-9584-162f-5c60a5a0b333",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"e1a7abd7-1386-2cc7-3807-f0c3483c90e6",
	"7543b45c-15c4-b956-c6ae-b8444eaf06a5",
	"70936bf8-afc0-2bd5-602d-6199013f61a0");
INSERT INTO GD_LS
	VALUES ("bc55786d-b7d3-9c31-dc10-4b24f7b53d23",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"18cfa86e-d506-9584-162f-5c60a5a0b333",
	"70936bf8-afc0-2bd5-602d-6199013f61a0",
	"968f038f-a87c-d063-87f9-e52dcd085c52");
INSERT INTO DIM_WAY
	VALUES ("99397ce9-16e6-1a8f-09f5-ad2907083bbd",
	1600.000000,
	1728.000000,
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("7543b45c-15c4-b956-c6ae-b8444eaf06a5",
	1648.000000,
	1728.000000,
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000",
	"99397ce9-16e6-1a8f-09f5-ad2907083bbd");
INSERT INTO DIM_WAY
	VALUES ("70936bf8-afc0-2bd5-602d-6199013f61a0",
	1648.000000,
	1568.000000,
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000",
	"7543b45c-15c4-b956-c6ae-b8444eaf06a5");
INSERT INTO DIM_WAY
	VALUES ("968f038f-a87c-d063-87f9-e52dcd085c52",
	1712.000000,
	1568.000000,
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000",
	"70936bf8-afc0-2bd5-602d-6199013f61a0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5470ed30-3458-27d2-28f9-790ed12ff821",
	"f9707bec-26d6-8343-77dd-7b4e3fdb4ba1",
	"b330aa56-7e06-8f6f-3ea6-d81ca2e8dcd1");
INSERT INTO DIM_DIA
	VALUES ("17cd2efb-57ff-5986-61a7-19712b3d926d",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_BATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ATTR
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"3fada4f9-1878-6dd7-1906-5914adad93cc",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("3fada4f9-1878-6dd7-1906-5914adad93cc",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"4a3279f8-a91f-56ff-eda9-af36e35c2279",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_OIDA
	VALUES ("4a3279f8-a91f-56ff-eda9-af36e35c2279",
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO O_ID
	VALUES (2,
	"76dd3e65-ce27-7483-c058-ea3ce0b16fbc");
INSERT INTO PE_PE
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_BATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ATTR
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"f5f57f5e-d91e-e8e2-1864-b49204340583",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("b7979066-d39c-7d74-2a9c-fe70783adc4d",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"5ddf32dc-5e48-37bb-3edc-ab1ee42808aa",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_OIDA
	VALUES ("f5f57f5e-d91e-e8e2-1864-b49204340583",
	"89bd3ddc-220e-59d9-128d-384c8758d6ed",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO O_ID
	VALUES (2,
	"89bd3ddc-220e-59d9-128d-384c8758d6ed");
INSERT INTO PE_PE
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_BATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ATTR
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("d5561ac6-abf8-eae6-cc8c-5770b39b5332",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_OIDA
	VALUES ("5b344dcd-dac6-90df-6b64-11146dfe9ab7",
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO O_ID
	VALUES (2,
	"37d7cb85-ed9c-12d2-80d8-146bb2c0b1da");
INSERT INTO PE_PE
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_BATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ATTR
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d35abe68-761c-4805-6622-ec58904bb650",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("ac41f78c-bf20-3716-942e-d02f0d05f339",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"5cf88885-59d8-3195-ae35-135d1c796b97",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("d904a561-2f2a-08fc-c059-479eb1e72fe1",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"ac41f78c-bf20-3716-942e-d02f0d05f339",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"546af508-6644-720b-b9b9-0c2296469456",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("546af508-6644-720b-b9b9-0c2296469456",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d904a561-2f2a-08fc-c059-479eb1e72fe1",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_OIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO O_ID
	VALUES (2,
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35");
INSERT INTO PE_PE
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_BATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ATTR
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"6281fd6a-984d-f963-d287-24c4b8696965",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_OIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO O_ID
	VALUES (2,
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a");
INSERT INTO PE_PE
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("db15a1f3-97b7-8e2e-310f-24660457e73d",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("18167654-c3d7-dcb9-eb04-63978bd2964c",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"db15a1f3-97b7-8e2e-310f-24660457e73d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"18167654-c3d7-dcb9-eb04-63978bd2964c",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"517a9f99-7459-25a7-4609-2e1f9f5c1dda",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_BATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ATTR
	VALUES ("e8b4a37d-bee3-b9c2-64e7-3c15aad664e1",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"0302a6ef-07ab-c2dc-cd44-8aa4ee370951",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_OIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO O_ID
	VALUES (2,
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_ISM
	VALUES ("5f898319-6709-43dd-e411-d62d5b29c32b",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa");
INSERT INTO SM_SM
	VALUES ("5f898319-6709-43dd-e411-d62d5b29c32b",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_EVTDI
	VALUES ("dc941269-2256-0660-884e-7d5a2f582d1d",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ed46ca60-d19a-efb1-e730-129a702d308e",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"dc941269-2256-0660-884e-7d5a2f582d1d");
INSERT INTO SM_EVTDI
	VALUES ("74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("2e822a91-20bb-2eff-0b72-bff89b8d78d9",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("61b30634-6c3f-48f3-adec-67ff83b6c9e0",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'tfalse',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("c7f0d3f0-e3f2-f62c-2753-92973dcb24d6",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"74eb5380-80d0-f6c3-a4b5-7ca5ddb7054a");
INSERT INTO SM_EVTDI
	VALUES ("7ada4c8c-fe54-8082-acfd-5deb709f4dc1",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"2e822a91-20bb-2eff-0b72-bff89b8d78d9");
INSERT INTO SM_EVTDI
	VALUES ("51673811-f9dc-1523-9ec1-8acc34c29def",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	'ttrue',
	'',
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"61b30634-6c3f-48f3-adec-67ff83b6c9e0");
INSERT INTO SM_LEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546");
INSERT INTO SM_AH
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("2f0f85e9-2700-5245-0dc6-e43cb8c107df",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7");
INSERT INTO SM_AH
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("a94ca778-b6a6-c284-0609-e388eb673d25",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4");
INSERT INTO SM_AH
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("3f3193ac-6c0f-4e97-0c37-ffa659ffcf27",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e");
INSERT INTO SM_AH
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("fc6ed29c-5ba8-0dde-8730-78f7f73a14bf",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9");
INSERT INTO SM_AH
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("88afca6b-8a78-fe8f-4514-9f3c1a15b772",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_STATE
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a");
INSERT INTO SM_AH
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("bbe32523-9872-e4eb-93d5-89b4c2d02554",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091");
INSERT INTO SM_AH
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("c7f5303c-3c3e-2b8c-d390-28c85f70b013",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"0d33209d-819b-d9d4-c071-879715aa4ad5");
INSERT INTO SM_AH
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("79c2ce6b-ba68-b91f-a28e-089df8daa0e7",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"074f9794-c854-36f8-7fbe-953d45cd09da");
INSERT INTO SM_AH
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("3c8cf23b-0510-eb6e-a642-ac3e73928b75",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d");
INSERT INTO SM_AH
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("666fff98-7a9f-75fb-7705-0dffaafcae4b",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4");
INSERT INTO SM_AH
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("c5b34c36-a9b2-9a32-45ae-03a1cee07e82",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6");
INSERT INTO SM_AH
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5f898319-6709-43dd-e411-d62d5b29c32b");
INSERT INTO SM_ACT
	VALUES ("6216018b-e5df-ec9d-2d04-2abbcc1ddb9e",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	8,
	"5f898319-6709-43dd-e411-d62d5b29c32b",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("e09b873b-9e35-ce5b-0def-31a490b9a8f8",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"fe2c1d5c-e9aa-19d9-5397-ebe748f5c546",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO GD_NCS
	VALUES ("e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"e09b873b-9e35-ce5b-0def-31a490b9a8f8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e09b873b-9e35-ce5b-0def-31a490b9a8f8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5da61356-552f-9e29-47df-e7e5a591304d",
	1872.000000,
	1296.000000,
	"e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO DIM_CON
	VALUES ("87653efc-6941-9e2f-a4b4-e6d37c41ac97",
	1824.000000,
	1264.000000,
	"e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO DIM_CON
	VALUES ("fa36c161-3d04-7659-c926-c9afec32b80d",
	1792.000000,
	1344.000000,
	"e09b873b-9e35-ce5b-0def-31a490b9a8f8");
INSERT INTO GD_GE
	VALUES ("1ce2eb8e-5021-51f5-b10c-2c81cacf186d",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"369250b7-b070-e2c7-a88f-fd29caeee7b7",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("1ce2eb8e-5021-51f5-b10c-2c81cacf186d");
INSERT INTO GD_NCS
	VALUES ("1ce2eb8e-5021-51f5-b10c-2c81cacf186d");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"1ce2eb8e-5021-51f5-b10c-2c81cacf186d");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"1ce2eb8e-5021-51f5-b10c-2c81cacf186d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1ce2eb8e-5021-51f5-b10c-2c81cacf186d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("efac1e86-25b5-ae49-7129-35167aed6a09",
	1792.000000,
	1456.000000,
	"1ce2eb8e-5021-51f5-b10c-2c81cacf186d");
INSERT INTO DIM_CON
	VALUES ("76d10a5a-490b-5f57-015d-c2c9394d6fa9",
	1792.000000,
	1536.000000,
	"1ce2eb8e-5021-51f5-b10c-2c81cacf186d");
INSERT INTO GD_GE
	VALUES ("e4b292b2-a3d6-41ac-16bd-7182f0fda788",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"111fd4f6-f9af-ca6c-0f36-c9cac085d0a4",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("e4b292b2-a3d6-41ac-16bd-7182f0fda788");
INSERT INTO GD_NCS
	VALUES ("e4b292b2-a3d6-41ac-16bd-7182f0fda788");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"e4b292b2-a3d6-41ac-16bd-7182f0fda788");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"e4b292b2-a3d6-41ac-16bd-7182f0fda788",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e4b292b2-a3d6-41ac-16bd-7182f0fda788",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f3fb82ad-fab3-79bf-5dbf-9b077cb63690",
	1792.000000,
	1648.000000,
	"e4b292b2-a3d6-41ac-16bd-7182f0fda788");
INSERT INTO DIM_CON
	VALUES ("b1e6513a-b442-8775-8220-fdeb6be4cc44",
	1872.000000,
	1696.000000,
	"e4b292b2-a3d6-41ac-16bd-7182f0fda788");
INSERT INTO GD_GE
	VALUES ("6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"9d9a0ab4-31c0-a01e-7ea3-85d3f0085f6e",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54");
INSERT INTO GD_NCS
	VALUES ("6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a9b189f0-d19d-08bd-936a-c175b31462c8",
	2096.000000,
	1360.000000,
	"6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54");
INSERT INTO DIM_CON
	VALUES ("7a04ed76-b266-c03f-2716-8d8fcd65a5f4",
	2096.000000,
	1296.000000,
	"6d679e59-bf0d-5a9b-c00f-5e5b02f1bb54");
INSERT INTO GD_GE
	VALUES ("585c7dc4-2c14-4ebc-691c-54d392410f87",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"7bdc584a-4f77-8dab-8456-4def4dd6e6d9",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("585c7dc4-2c14-4ebc-691c-54d392410f87");
INSERT INTO GD_NCS
	VALUES ("585c7dc4-2c14-4ebc-691c-54d392410f87");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"585c7dc4-2c14-4ebc-691c-54d392410f87");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"585c7dc4-2c14-4ebc-691c-54d392410f87",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("585c7dc4-2c14-4ebc-691c-54d392410f87",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad",
	2096.000000,
	1456.000000,
	"585c7dc4-2c14-4ebc-691c-54d392410f87");
INSERT INTO DIM_CON
	VALUES ("16c865e5-0bc7-d67c-7ad2-564d67f7a302",
	2096.000000,
	1536.000000,
	"585c7dc4-2c14-4ebc-691c-54d392410f87");
INSERT INTO GD_GE
	VALUES ("0ad23a9f-b056-d6b1-9808-d6a535e5274a",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"b99fcff7-7910-98b4-13b4-48497fa24a4a",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("0ad23a9f-b056-d6b1-9808-d6a535e5274a");
INSERT INTO GD_NCS
	VALUES ("0ad23a9f-b056-d6b1-9808-d6a535e5274a");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"0ad23a9f-b056-d6b1-9808-d6a535e5274a");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"0ad23a9f-b056-d6b1-9808-d6a535e5274a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0ad23a9f-b056-d6b1-9808-d6a535e5274a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("11df28f9-1db0-9565-d329-8ea513feb1bf",
	2096.000000,
	1648.000000,
	"0ad23a9f-b056-d6b1-9808-d6a535e5274a");
INSERT INTO GD_GE
	VALUES ("a745737a-0cec-93a9-868b-26f67954c9ba",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7559f2ad-8f76-1a15-5f26-e09c6d3c1ec8",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7559f2ad-8f76-1a15-5f26-e09c6d3c1ec8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7559f2ad-8f76-1a15-5f26-e09c6d3c1ec8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7559f2ad-8f76-1a15-5f26-e09c6d3c1ec8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5d476259-f766-be4a-cef0-30f73acef9fb",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"5d476259-f766-be4a-cef0-30f73acef9fb");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"5d476259-f766-be4a-cef0-30f73acef9fb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5d476259-f766-be4a-cef0-30f73acef9fb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7ae2cd0a-0071-03ba-f1aa-dca2b148abe4",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7ae2cd0a-0071-03ba-f1aa-dca2b148abe4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7ae2cd0a-0071-03ba-f1aa-dca2b148abe4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7ae2cd0a-0071-03ba-f1aa-dca2b148abe4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("4839180d-861f-43db-aad9-b11122741192",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"dd91ab5b-0ba2-f914-f585-66ea7c415ab9",
	"c8adb308-588c-da07-b9f7-e23b78593216");
INSERT INTO GD_LS
	VALUES ("11297581-54ed-769e-c746-98532c00444b",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"4839180d-861f-43db-aad9-b11122741192",
	"c8adb308-588c-da07-b9f7-e23b78593216",
	"30ad4860-bfaa-778b-59ff-e5173315f084");
INSERT INTO GD_LS
	VALUES ("34c4cb62-05b9-91fa-032d-0ff220b6120c",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"11297581-54ed-769e-c746-98532c00444b",
	"30ad4860-bfaa-778b-59ff-e5173315f084",
	"2c1a192f-6a9f-8125-e522-c9fd6db676b0");
INSERT INTO GD_LS
	VALUES ("1852b631-23bb-be6d-475d-076eda9b64f1",
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"34c4cb62-05b9-91fa-032d-0ff220b6120c",
	"2c1a192f-6a9f-8125-e522-c9fd6db676b0",
	"b32660a0-3f7e-afc5-3ec3-1eeea1e17ade");
INSERT INTO DIM_WAY
	VALUES ("dd91ab5b-0ba2-f914-f585-66ea7c415ab9",
	1872.000000,
	1296.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c8adb308-588c-da07-b9f7-e23b78593216",
	1920.000000,
	1296.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"dd91ab5b-0ba2-f914-f585-66ea7c415ab9");
INSERT INTO DIM_WAY
	VALUES ("30ad4860-bfaa-778b-59ff-e5173315f084",
	1920.000000,
	1216.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"c8adb308-588c-da07-b9f7-e23b78593216");
INSERT INTO DIM_WAY
	VALUES ("2c1a192f-6a9f-8125-e522-c9fd6db676b0",
	1824.000000,
	1216.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"30ad4860-bfaa-778b-59ff-e5173315f084");
INSERT INTO DIM_WAY
	VALUES ("b32660a0-3f7e-afc5-3ec3-1eeea1e17ade",
	1824.000000,
	1264.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000",
	"2c1a192f-6a9f-8125-e522-c9fd6db676b0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a745737a-0cec-93a9-868b-26f67954c9ba",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a745737a-0cec-93a9-868b-26f67954c9ba",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5da61356-552f-9e29-47df-e7e5a591304d",
	"87653efc-6941-9e2f-a4b4-e6d37c41ac97",
	"a745737a-0cec-93a9-868b-26f67954c9ba");
INSERT INTO GD_GE
	VALUES ("43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"074f9794-c854-36f8-7fbe-953d45cd09da",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("87a0f536-cfd4-ba8d-29e9-c4b279ec51fd",
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"87a0f536-cfd4-ba8d-29e9-c4b279ec51fd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"87a0f536-cfd4-ba8d-29e9-c4b279ec51fd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("87a0f536-cfd4-ba8d-29e9-c4b279ec51fd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b58fabba-ae01-1b95-05f7-9de02033f7dd",
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"b58fabba-ae01-1b95-05f7-9de02033f7dd");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"b58fabba-ae01-1b95-05f7-9de02033f7dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b58fabba-ae01-1b95-05f7-9de02033f7dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1332a733-1cb3-9570-cb54-d2350596f15f",
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1332a733-1cb3-9570-cb54-d2350596f15f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1332a733-1cb3-9570-cb54-d2350596f15f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1332a733-1cb3-9570-cb54-d2350596f15f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("43fd6c20-5308-59c5-9e42-beb82ae543f5",
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"00000000-0000-0000-0000-000000000000",
	"86fba957-d6e3-e0e7-3375-6afb91ceb893",
	"0aefe6bc-883a-f464-ca0d-fda0fb4b64ae");
INSERT INTO DIM_WAY
	VALUES ("86fba957-d6e3-e0e7-3375-6afb91ceb893",
	1792.000000,
	1344.000000,
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0aefe6bc-883a-f464-ca0d-fda0fb4b64ae",
	1792.000000,
	1456.000000,
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"00000000-0000-0000-0000-000000000000",
	"86fba957-d6e3-e0e7-3375-6afb91ceb893");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("43f1bf02-af1f-a0f1-63bd-dd993f43560f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fa36c161-3d04-7659-c926-c9afec32b80d",
	"efac1e86-25b5-ae49-7129-35167aed6a09",
	"43f1bf02-af1f-a0f1-63bd-dd993f43560f");
INSERT INTO GD_GE
	VALUES ("872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e30540f6-33bb-ebda-eeaa-a3b12d1ad935",
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e30540f6-33bb-ebda-eeaa-a3b12d1ad935");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e30540f6-33bb-ebda-eeaa-a3b12d1ad935",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e30540f6-33bb-ebda-eeaa-a3b12d1ad935",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0fd16793-f523-9bb5-67fa-2eb0ce926158",
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"0fd16793-f523-9bb5-67fa-2eb0ce926158");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"0fd16793-f523-9bb5-67fa-2eb0ce926158",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0fd16793-f523-9bb5-67fa-2eb0ce926158",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ab5928bd-7870-68bc-2c38-e038bcaf097a",
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ab5928bd-7870-68bc-2c38-e038bcaf097a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ab5928bd-7870-68bc-2c38-e038bcaf097a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ab5928bd-7870-68bc-2c38-e038bcaf097a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fe549960-b627-0a2c-8ae3-0004d2b53d72",
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"00000000-0000-0000-0000-000000000000",
	"38abeb22-8643-f991-5f75-c76d04328e50",
	"c9309b93-cf24-7708-516a-83baf7ba7c17");
INSERT INTO DIM_WAY
	VALUES ("38abeb22-8643-f991-5f75-c76d04328e50",
	1792.000000,
	1536.000000,
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c9309b93-cf24-7708-516a-83baf7ba7c17",
	1792.000000,
	1648.000000,
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"00000000-0000-0000-0000-000000000000",
	"38abeb22-8643-f991-5f75-c76d04328e50");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"872f7ff4-592f-6dd5-7606-5c56d79f055e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("872f7ff4-592f-6dd5-7606-5c56d79f055e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("76d10a5a-490b-5f57-015d-c2c9394d6fa9",
	"f3fb82ad-fab3-79bf-5dbf-9b077cb63690",
	"872f7ff4-592f-6dd5-7606-5c56d79f055e");
INSERT INTO GD_GE
	VALUES ("4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6a661265-f5cc-088c-4f5d-adf610d06da9",
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6a661265-f5cc-088c-4f5d-adf610d06da9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6a661265-f5cc-088c-4f5d-adf610d06da9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6a661265-f5cc-088c-4f5d-adf610d06da9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6092865b-7491-8428-28d0-38b57cb721c0",
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"6092865b-7491-8428-28d0-38b57cb721c0");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"6092865b-7491-8428-28d0-38b57cb721c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6092865b-7491-8428-28d0-38b57cb721c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a5f92947-b01a-3bd4-c63f-d0a66d5e2ad7",
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a5f92947-b01a-3bd4-c63f-d0a66d5e2ad7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a5f92947-b01a-3bd4-c63f-d0a66d5e2ad7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5f92947-b01a-3bd4-c63f-d0a66d5e2ad7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b8df05e6-c6ef-e004-41ce-d1628615f3a6",
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"00000000-0000-0000-0000-000000000000",
	"90eae1a7-22ef-5237-c097-57522c21990e",
	"3638c633-41aa-c2cc-0959-902920b32d0d");
INSERT INTO DIM_WAY
	VALUES ("90eae1a7-22ef-5237-c097-57522c21990e",
	2096.000000,
	1360.000000,
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3638c633-41aa-c2cc-0959-902920b32d0d",
	2096.000000,
	1456.000000,
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"00000000-0000-0000-0000-000000000000",
	"90eae1a7-22ef-5237-c097-57522c21990e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4563d03a-2df9-bcbc-9760-9e14d01a6311",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4563d03a-2df9-bcbc-9760-9e14d01a6311",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a9b189f0-d19d-08bd-936a-c175b31462c8",
	"5efbb9d4-4c1d-7c59-dbc6-af3ba7a0b9ad",
	"4563d03a-2df9-bcbc-9760-9e14d01a6311");
INSERT INTO GD_GE
	VALUES ("2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3e2b05c2-3d02-0d8b-1a58-70245607b8f9",
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3e2b05c2-3d02-0d8b-1a58-70245607b8f9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3e2b05c2-3d02-0d8b-1a58-70245607b8f9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3e2b05c2-3d02-0d8b-1a58-70245607b8f9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7e9977a3-c33e-1a8f-9953-aba39ed911d6",
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"7e9977a3-c33e-1a8f-9953-aba39ed911d6");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"7e9977a3-c33e-1a8f-9953-aba39ed911d6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7e9977a3-c33e-1a8f-9953-aba39ed911d6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1f252f25-c4cc-01e6-83d7-30f6ccd7840a",
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1f252f25-c4cc-01e6-83d7-30f6ccd7840a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1f252f25-c4cc-01e6-83d7-30f6ccd7840a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f252f25-c4cc-01e6-83d7-30f6ccd7840a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2d0fe33e-d326-9668-7e45-135e3de5fa09",
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"00000000-0000-0000-0000-000000000000",
	"9eab3ec4-26f7-7d6e-89e0-89c0049abb01",
	"10fb9471-0776-212c-ae17-7d5a23276c0f");
INSERT INTO DIM_WAY
	VALUES ("9eab3ec4-26f7-7d6e-89e0-89c0049abb01",
	2096.000000,
	1536.000000,
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("10fb9471-0776-212c-ae17-7d5a23276c0f",
	2096.000000,
	1648.000000,
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"00000000-0000-0000-0000-000000000000",
	"9eab3ec4-26f7-7d6e-89e0-89c0049abb01");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2d9f1eac-6ccc-0523-c58d-ae3a716db23e",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("16c865e5-0bc7-d67c-7ad2-564d67f7a302",
	"11df28f9-1db0-9565-d329-8ea513feb1bf",
	"2d9f1eac-6ccc-0523-c58d-ae3a716db23e");
INSERT INTO GD_GE
	VALUES ("d7e12b89-ecb8-f469-f962-839b068a33a9",
	"38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	"0d33209d-819b-d9d4-c071-879715aa4ad5",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("17fbd794-633f-a60d-e2a4-be2fd1548e8f",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"17fbd794-633f-a60d-e2a4-be2fd1548e8f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17fbd794-633f-a60d-e2a4-be2fd1548e8f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17fbd794-633f-a60d-e2a4-be2fd1548e8f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("db00bd80-4e46-28c5-8191-23288895034a",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"db00bd80-4e46-28c5-8191-23288895034a");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"db00bd80-4e46-28c5-8191-23288895034a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("db00bd80-4e46-28c5-8191-23288895034a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("364fee2f-a573-dfda-b4b1-47fddf847e68",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"364fee2f-a573-dfda-b4b1-47fddf847e68");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"364fee2f-a573-dfda-b4b1-47fddf847e68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("364fee2f-a573-dfda-b4b1-47fddf847e68",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2b946d1d-21d8-8548-ab7d-c6df0a710421",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"33ced991-3ebd-400d-2885-081b0f61c1e1",
	"c00afe74-558c-cadf-8688-7ee00d7c120e");
INSERT INTO GD_LS
	VALUES ("ef6cf703-439b-c82b-664f-f8f5f18122ca",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"2b946d1d-21d8-8548-ab7d-c6df0a710421",
	"c00afe74-558c-cadf-8688-7ee00d7c120e",
	"ab5c0812-ad64-8e28-2ab2-193e3923e7cc");
INSERT INTO GD_LS
	VALUES ("b8f7ec67-5720-81b6-2bcc-ad9923a1c342",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"ef6cf703-439b-c82b-664f-f8f5f18122ca",
	"ab5c0812-ad64-8e28-2ab2-193e3923e7cc",
	"9d42bf25-3d7d-9463-56c0-c8ff34748810");
INSERT INTO GD_LS
	VALUES ("f36a0f39-ff72-f679-df61-65f4f7cb0a35",
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"b8f7ec67-5720-81b6-2bcc-ad9923a1c342",
	"9d42bf25-3d7d-9463-56c0-c8ff34748810",
	"2adee6c3-e398-a20d-2d24-d8c91dc03cc6");
INSERT INTO DIM_WAY
	VALUES ("33ced991-3ebd-400d-2885-081b0f61c1e1",
	1872.000000,
	1696.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c00afe74-558c-cadf-8688-7ee00d7c120e",
	1968.000000,
	1696.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"33ced991-3ebd-400d-2885-081b0f61c1e1");
INSERT INTO DIM_WAY
	VALUES ("ab5c0812-ad64-8e28-2ab2-193e3923e7cc",
	1968.000000,
	1248.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"c00afe74-558c-cadf-8688-7ee00d7c120e");
INSERT INTO DIM_WAY
	VALUES ("9d42bf25-3d7d-9463-56c0-c8ff34748810",
	2096.000000,
	1248.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"ab5c0812-ad64-8e28-2ab2-193e3923e7cc");
INSERT INTO DIM_WAY
	VALUES ("2adee6c3-e398-a20d-2d24-d8c91dc03cc6",
	2096.000000,
	1296.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000",
	"9d42bf25-3d7d-9463-56c0-c8ff34748810");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7e12b89-ecb8-f469-f962-839b068a33a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7e12b89-ecb8-f469-f962-839b068a33a9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b1e6513a-b442-8775-8220-fdeb6be4cc44",
	"7a04ed76-b266-c03f-2716-8d8fcd65a5f4",
	"d7e12b89-ecb8-f469-f962-839b068a33a9");
INSERT INTO DIM_DIA
	VALUES ("38fc9ba1-0375-fe6d-7153-f933b58d9f6c",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_BATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ATTR
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("02a6af0f-5e07-5df5-adca-c863af9c8e81",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("3be90946-54fc-5e5a-7864-544a9e840a8e",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"02a6af0f-5e07-5df5-adca-c863af9c8e81",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("acd4233c-9242-4aa2-f164-a3c2ab6e0fac",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"3be90946-54fc-5e5a-7864-544a9e840a8e",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_OIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO O_ID
	VALUES (2,
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73");
INSERT INTO PE_PE
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_BATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ATTR
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4af751e0-065f-944b-738c-c44aa3cde0a8",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_OIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO O_ID
	VALUES (2,
	"49b8a183-8eb8-e487-d095-f42598fda7d3");
INSERT INTO PE_PE
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1e6c89ff-f941-7c51-013e-1dc86807a023",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_BATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ATTR
	VALUES ("2ff88cd2-2b4e-a585-4e33-5e27e012aa84",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	"58f7272d-c26a-c488-d369-32224ccdd58b",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_OIDA
	VALUES ("58f7272d-c26a-c488-d369-32224ccdd58b",
	"1e6c89ff-f941-7c51-013e-1dc86807a023",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO O_ID
	VALUES (2,
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_ISM
	VALUES ("036135e3-244a-485a-2f76-aa207125c90f",
	"1e6c89ff-f941-7c51-013e-1dc86807a023");
INSERT INTO SM_SM
	VALUES ("036135e3-244a-485a-2f76-aa207125c90f",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("036135e3-244a-485a-2f76-aa207125c90f");
INSERT INTO SM_LEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"893d2440-c506-0df1-bcd8-ee40e22c920f");
INSERT INTO SM_AH
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"036135e3-244a-485a-2f76-aa207125c90f");
INSERT INTO SM_ACT
	VALUES ("ad708723-b288-e81a-31fc-b6fd52d8eccc",
	"036135e3-244a-485a-2f76-aa207125c90f",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'');
INSERT INTO SM_NSTXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303");
INSERT INTO SM_AH
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"036135e3-244a-485a-2f76-aa207125c90f");
INSERT INTO SM_ACT
	VALUES ("d9b4be29-1e41-5c8c-32ad-44f1d972ab53",
	"036135e3-244a-485a-2f76-aa207125c90f",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"036135e3-244a-485a-2f76-aa207125c90f",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("05bf503a-d2b2-923a-bc44-e1b3fcc5cfab",
	8,
	"036135e3-244a-485a-2f76-aa207125c90f",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("6685cf48-b299-2c3d-bcdb-36a0d7cd56ec",
	"05bf503a-d2b2-923a-bc44-e1b3fcc5cfab",
	"893d2440-c506-0df1-bcd8-ee40e22c920f",
	41,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("6685cf48-b299-2c3d-bcdb-36a0d7cd56ec");
INSERT INTO GD_NCS
	VALUES ("6685cf48-b299-2c3d-bcdb-36a0d7cd56ec");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"6685cf48-b299-2c3d-bcdb-36a0d7cd56ec");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"6685cf48-b299-2c3d-bcdb-36a0d7cd56ec",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6685cf48-b299-2c3d-bcdb-36a0d7cd56ec",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3ca9d8b3-894b-b567-3166-249cf1b1f770",
	2240.000000,
	1296.000000,
	"6685cf48-b299-2c3d-bcdb-36a0d7cd56ec");
INSERT INTO DIM_CON
	VALUES ("48a6fca6-968f-2828-5ff2-814537099057",
	2176.000000,
	1248.000000,
	"6685cf48-b299-2c3d-bcdb-36a0d7cd56ec");
INSERT INTO GD_GE
	VALUES ("78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"05bf503a-d2b2-923a-bc44-e1b3fcc5cfab",
	"42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	42,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bc2425aa-aa0f-bff9-cc21-268a4c0a1d68",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"bc2425aa-aa0f-bff9-cc21-268a4c0a1d68");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"bc2425aa-aa0f-bff9-cc21-268a4c0a1d68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bc2425aa-aa0f-bff9-cc21-268a4c0a1d68",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ca639b9d-71a1-7b00-760a-2b1e338029a6",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"ca639b9d-71a1-7b00-760a-2b1e338029a6");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"ca639b9d-71a1-7b00-760a-2b1e338029a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ca639b9d-71a1-7b00-760a-2b1e338029a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8282aba6-01f0-3916-6155-eedc8c2b7616",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8282aba6-01f0-3916-6155-eedc8c2b7616");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8282aba6-01f0-3916-6155-eedc8c2b7616",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8282aba6-01f0-3916-6155-eedc8c2b7616",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("47721d53-c488-fe30-06b0-82e411da6292",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"fa39a5f5-5076-431e-7fe5-69548924364f",
	"a9bf7b02-4528-bd6b-fa9e-0aaf9909f541");
INSERT INTO GD_LS
	VALUES ("0e675371-3743-7504-f358-28e930bd5123",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"47721d53-c488-fe30-06b0-82e411da6292",
	"a9bf7b02-4528-bd6b-fa9e-0aaf9909f541",
	"9992df81-b40d-9f57-5bd1-a696a5e4f699");
INSERT INTO GD_LS
	VALUES ("349df4f4-5446-8b2b-418c-f02ebc93a0c8",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"0e675371-3743-7504-f358-28e930bd5123",
	"9992df81-b40d-9f57-5bd1-a696a5e4f699",
	"fe527d5b-323a-ae3b-e354-abbb5464cf00");
INSERT INTO GD_LS
	VALUES ("3c8dbfc2-0b5a-77e6-bb30-cefdac388082",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"349df4f4-5446-8b2b-418c-f02ebc93a0c8",
	"fe527d5b-323a-ae3b-e354-abbb5464cf00",
	"a2467abe-9de9-57e6-f415-285ba8116867");
INSERT INTO DIM_WAY
	VALUES ("fa39a5f5-5076-431e-7fe5-69548924364f",
	2240.000000,
	1296.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a9bf7b02-4528-bd6b-fa9e-0aaf9909f541",
	2320.000000,
	1296.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"fa39a5f5-5076-431e-7fe5-69548924364f");
INSERT INTO DIM_WAY
	VALUES ("9992df81-b40d-9f57-5bd1-a696a5e4f699",
	2320.000000,
	1200.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"a9bf7b02-4528-bd6b-fa9e-0aaf9909f541");
INSERT INTO DIM_WAY
	VALUES ("fe527d5b-323a-ae3b-e354-abbb5464cf00",
	2176.000000,
	1200.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"9992df81-b40d-9f57-5bd1-a696a5e4f699");
INSERT INTO DIM_WAY
	VALUES ("a2467abe-9de9-57e6-f415-285ba8116867",
	2176.000000,
	1248.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000",
	"fe527d5b-323a-ae3b-e354-abbb5464cf00");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"78fd589c-d3b8-2b50-42b5-43d54cc84909",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("78fd589c-d3b8-2b50-42b5-43d54cc84909",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ca9d8b3-894b-b567-3166-249cf1b1f770",
	"48a6fca6-968f-2828-5ff2-814537099057",
	"78fd589c-d3b8-2b50-42b5-43d54cc84909");
INSERT INTO DIM_DIA
	VALUES ("05bf503a-d2b2-923a-bc44-e1b3fcc5cfab",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("25978d20-cb0f-39be-b5d6-1e525901dbae");
INSERT INTO R_PART
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("47d9c39f-1f3a-f4a0-7656-92a0b8f13433",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("4434b8c2-62cd-02e4-8271-e2ffa316c758",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("350d2bf9-9645-077d-d93c-9fdc6b0ed969",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("076f5dab-39e1-6926-b521-ba06f0c790f6",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("97cee472-2e50-7195-74b3-bb36d4da2a04",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a7c2b921-9da7-b221-61ff-7d41ab0c247f",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("a1177025-3929-3edb-7d0e-df9e89492a37",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("1a564168-a2e9-41ae-d31c-8c10def2b395",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("bc9dbdb4-2492-1090-5bc2-0d289b206342",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO O_RTIDA
	VALUES ("40bc5372-18e1-9d7a-9826-711ca7e3db47",
	"47921f8f-082d-554a-e473-a26b90e9e1b8",
	0,
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612");
INSERT INTO R_RTO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	0);
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"372f7ad8-e7f3-b8e3-5184-115687871612",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9");
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"25978d20-cb0f-39be-b5d6-1e525901dbae",
	"cfe272ca-4283-938d-c941-1cb80c6d35a9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("fe9946c5-ed7c-2ed6-37c9-e896d3a29932");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"db49e71d-0dee-550f-a922-b30ac8d361b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"fe9946c5-ed7c-2ed6-37c9-e896d3a29932",
	"7f03b7d3-9777-13ff-faac-528ae6643bd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1f5f87bc-2a9d-28c3-2f51-bdc91114a118");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"23362b4b-de59-df84-7eeb-3f5165750202",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f");
INSERT INTO R_OIR
	VALUES ("37d7cb85-ed9c-12d2-80d8-146bb2c0b1da",
	"1f5f87bc-2a9d-28c3-2f51-bdc91114a118",
	"6d4558a4-88ae-71ed-0dc9-c102aa63503f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7b55c826-c95e-086c-b33e-106fbdbdf22f");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"5c946c1a-5ffb-74e2-42cf-afab37d2849c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e");
INSERT INTO R_OIR
	VALUES ("76dd3e65-ce27-7483-c058-ea3ce0b16fbc",
	"7b55c826-c95e-086c-b33e-106fbdbdf22f",
	"084c910b-ea58-912a-7353-1cda5c0ece3e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("dd07f00b-ea86-c8e6-4113-4cedb1c03100");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"ff650d4b-85ba-ea3c-356a-eadcd2f0808c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d");
INSERT INTO R_OIR
	VALUES ("89bd3ddc-220e-59d9-128d-384c8758d6ed",
	"dd07f00b-ea86-c8e6-4113-4cedb1c03100",
	"c1010505-9287-83d8-7a1d-fcb1062ce46d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("49151922-d35c-104b-dd0e-d6c6c2b6c6dd");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"145977af-a605-53dc-67d0-523f68958d00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("3fae6c58-5b2e-7a86-7630-c6c9135299aa",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("b137e20d-fdad-f663-4aa5-95eca0ab84b2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("f55f2904-eabe-3d9e-b6f5-759cadb74bf7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("fc4a3564-c576-99ad-d738-ce2e134dc98e",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11b3b33a-863f-0583-331c-066d47b7e24d",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("11d0b125-877e-7584-80f0-85bcac5e64a7",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("80fde00a-1975-1181-0799-19d319814ba2",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("50fc1111-665c-8a1b-06da-c6289edcd78a",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("1e77a936-d480-80d5-2bb1-2446ba1e91b3",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO O_RTIDA
	VALUES ("24801b0c-27a4-11d2-8d50-aa1ada226943",
	"226029a1-8595-49c1-3362-ff03e9b3ae3f",
	0,
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78");
INSERT INTO R_RTO
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	0);
INSERT INTO R_OIR
	VALUES ("226029a1-8595-49c1-3362-ff03e9b3ae3f",
	"49151922-d35c-104b-dd0e-d6c6c2b6c6dd",
	"9971ff2e-ebc2-7ec7-82e9-eedf16a35e78",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("18fcaec9-9922-f752-6391-77763be8b1cb");
INSERT INTO R_PART
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ade5b96d-7039-736d-26dd-570b8389401d",
	"30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	0,
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3");
INSERT INTO R_RTO
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	0);
INSERT INTO R_OIR
	VALUES ("30557813-ab8e-ebe9-af44-3c55d45d9bbb",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"190f6558-c27b-9657-8ac8-15e9f7be86b3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581");
INSERT INTO R_OIR
	VALUES ("47921f8f-082d-554a-e473-a26b90e9e1b8",
	"18fcaec9-9922-f752-6391-77763be8b1cb",
	"b2e2ec8b-dea4-27ff-bf04-36a5ef39a581",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("cb2ccf26-fc90-2543-da09-5c968e1db3de");
INSERT INTO R_FORM
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6");
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"ccf70a38-daf9-138f-229a-d539eead1ec6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4d3db84b-1f4d-aaa6-e7b1-54c5fdbe741e",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO O_RTIDA
	VALUES ("5cf88885-59d8-3195-ae35-135d1c796b97",
	"7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	0,
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb");
INSERT INTO R_RTO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	0);
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"cb2ccf26-fc90-2543-da09-5c968e1db3de",
	"8ef4d601-e7fd-00c7-cce9-ab7942e4fceb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("d0c5a6ef-14b5-f428-0555-3259bc6dcd19");
INSERT INTO R_PART
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	0,
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99");
INSERT INTO R_RTO
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	0);
INSERT INTO R_OIR
	VALUES ("60bf4981-85b2-d561-4f8c-a83c3205cdc5",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"53ecd13f-5a18-e009-f37e-4d00cc943a99",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"d0c5a6ef-14b5-f428-0555-3259bc6dcd19",
	"8718f67e-1427-6471-bb23-360a7ff64490",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("7de8fae5-0afe-cf5a-315f-03192fcd80bc");
INSERT INTO R_FORM
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960");
INSERT INTO R_OIR
	VALUES ("7c6cf8d6-5c07-45cd-58c0-2cd9f01aac35",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"d6b7451d-2f26-5d8f-7ceb-911d25c59960",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("a409b9ec-ea0b-5ba6-649f-e80ffb87031c",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO O_RTIDA
	VALUES ("6281fd6a-984d-f963-d287-24c4b8696965",
	"b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	0,
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826");
INSERT INTO R_RTO
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	0);
INSERT INTO R_OIR
	VALUES ("b20bb79e-da83-67c0-43ca-6a8aab7f4d4a",
	"7de8fae5-0afe-cf5a-315f-03192fcd80bc",
	"b15c758a-e852-d3b7-368c-45b43b3e1826",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("f778cf6f-ad60-2d3c-e026-c0725b5292bf");
INSERT INTO R_FORM
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac");
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"12e4e6ff-22c0-1870-1168-57551556f0ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("bcea28d4-88b5-f230-e55e-2f1d2e1d1926",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO O_RTIDA
	VALUES ("43e895fc-cc1b-0fe1-8abf-d7ef0c9b10df",
	"3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	0,
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4");
INSERT INTO R_RTO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	0);
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"f778cf6f-ad60-2d3c-e026-c0725b5292bf",
	"707287a5-c35b-e22f-7537-2c582e2fcad4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1eeb1cbc-481f-827b-d0b5-0a9763dc52ea");
INSERT INTO R_PART
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("359b56d2-80e5-9014-e822-7a8143d26491",
	"49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	0,
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235");
INSERT INTO R_RTO
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	0);
INSERT INTO R_OIR
	VALUES ("49d6aea6-c71b-15b3-b919-41ce4c8cfeaa",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"70054206-7dbc-c3f5-9370-b2276758b235",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"1eeb1cbc-481f-827b-d0b5-0a9763dc52ea",
	"22d47560-b904-1ecb-2823-fa6adbb028c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	1,
	"82bdba89-5c4a-655b-00b0-3a234d6b8796",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690");
INSERT INTO R_FORM
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d");
INSERT INTO R_OIR
	VALUES ("3cb455d4-131b-4aff-c82a-6ada7e90fd73",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"ed9c4f46-9c5a-f4d9-dc4f-8a20f2cec12d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4af751e0-065f-944b-738c-c44aa3cde0a8",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO O_RTIDA
	VALUES ("79855c61-83ec-92fa-d755-cd213e44c0bd",
	"49b8a183-8eb8-e487-d095-f42598fda7d3",
	0,
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9");
INSERT INTO R_RTO
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	0);
INSERT INTO R_OIR
	VALUES ("49b8a183-8eb8-e487-d095-f42598fda7d3",
	"4aea4c72-2e03-6a5c-e6bb-3d9fd39ea690",
	"30ac0fbd-d346-d68a-b3a8-b78ef1ee92d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("cbe85b09-8b50-1ae8-c389-e3af4b572b10",
	112,
	"49c9e6f1-1aa6-f2e5-bfed-7c8ac6c0f6bd",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("cbe85b09-8b50-1ae8-c389-e3af4b572b10",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	1,
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	"50642553-6a49-751c-68da-981eb9cfa6bf",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	112,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("6b6cef79-a056-5de3-2fc4-735fad7e0aa5",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	"16bcd859-2dc0-5548-9dec-0cda91abf583",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("6b6cef79-a056-5de3-2fc4-735fad7e0aa5");
INSERT INTO GD_NCS
	VALUES ("6b6cef79-a056-5de3-2fc4-735fad7e0aa5");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"6b6cef79-a056-5de3-2fc4-735fad7e0aa5");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"6b6cef79-a056-5de3-2fc4-735fad7e0aa5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6b6cef79-a056-5de3-2fc4-735fad7e0aa5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("cf3193a2-9d23-f0d9-7109-60d3a6ee7a20",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	"4c39b4f9-523d-8cc3-5126-d0bde9640322",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("cf3193a2-9d23-f0d9-7109-60d3a6ee7a20");
INSERT INTO GD_NCS
	VALUES ("cf3193a2-9d23-f0d9-7109-60d3a6ee7a20");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"cf3193a2-9d23-f0d9-7109-60d3a6ee7a20");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"cf3193a2-9d23-f0d9-7109-60d3a6ee7a20",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cf3193a2-9d23-f0d9-7109-60d3a6ee7a20",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("6898636b-f886-4da4-c9d1-eaf19e4f66f2",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	"a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("6898636b-f886-4da4-c9d1-eaf19e4f66f2");
INSERT INTO GD_NCS
	VALUES ("6898636b-f886-4da4-c9d1-eaf19e4f66f2");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"6898636b-f886-4da4-c9d1-eaf19e4f66f2");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"6898636b-f886-4da4-c9d1-eaf19e4f66f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6898636b-f886-4da4-c9d1-eaf19e4f66f2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("527691f5-96d4-9c68-d0f5-91bab86fbd96",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	"ce87aa8d-1bb4-01ea-0916-96321b55867c",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("527691f5-96d4-9c68-d0f5-91bab86fbd96");
INSERT INTO GD_NCS
	VALUES ("527691f5-96d4-9c68-d0f5-91bab86fbd96");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"527691f5-96d4-9c68-d0f5-91bab86fbd96");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"527691f5-96d4-9c68-d0f5-91bab86fbd96",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("527691f5-96d4-9c68-d0f5-91bab86fbd96",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("f110c605-42a6-583c-0c5d-0138d2ed1b4c",
	"f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	"bc4d8a5f-8892-bff5-cf51-68bad811491a",
	51,
	0,
	'org.xtuml.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("f110c605-42a6-583c-0c5d-0138d2ed1b4c");
INSERT INTO GD_NCS
	VALUES ("f110c605-42a6-583c-0c5d-0138d2ed1b4c");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"f110c605-42a6-583c-0c5d-0138d2ed1b4c");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"f110c605-42a6-583c-0c5d-0138d2ed1b4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f110c605-42a6-583c-0c5d-0138d2ed1b4c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("f85e52f4-c57a-bbc1-b8ca-7fa2d25a28f1",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("16bcd859-2dc0-5548-9dec-0cda91abf583",
	"ba5eda7a-def5-0000-0000-000000000001",
	0);
INSERT INTO PE_PE
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("4c39b4f9-523d-8cc3-5126-d0bde9640322",
	"ba5eda7a-def5-0000-0000-000000000002",
	0);
INSERT INTO PE_PE
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("a0d52a76-634b-efb9-81bb-7788fddeaa8d",
	"ba5eda7a-def5-0000-0000-000000000003",
	0);
INSERT INTO PE_PE
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("ce87aa8d-1bb4-01ea-0916-96321b55867c",
	"ba5eda7a-def5-0000-0000-000000000004",
	0);
INSERT INTO PE_PE
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	1,
	"3081ac1f-32b0-54e5-d82d-7b14dfc61b97",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("bc4d8a5f-8892-bff5-cf51-68bad811491a",
	"ba5eda7a-def5-0000-0000-000000000005",
	0);
INSERT INTO PE_PE
	VALUES ("8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("b319dcab-dc71-6bed-6e7d-ef1f65a4132c",
	"57bc8aa5-50dc-9cfa-c186-c1a56418c801",
	"8ec96f63-8109-31e0-16cc-9a76f4ccf482",
	108,
	0,
	'org.xtuml.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("b319dcab-dc71-6bed-6e7d-ef1f65a4132c");
INSERT INTO GD_NCS
	VALUES ("b319dcab-dc71-6bed-6e7d-ef1f65a4132c");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"b319dcab-dc71-6bed-6e7d-ef1f65a4132c");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"b319dcab-dc71-6bed-6e7d-ef1f65a4132c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b319dcab-dc71-6bed-6e7d-ef1f65a4132c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("50642553-6a49-751c-68da-981eb9cfa6bf",
	'org.xtuml.bp.io.mdl.test',
	1,
	'../org.xtuml.bp.io.mdl.test.xtuml');
