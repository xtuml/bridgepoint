-- root-types-contained: Package_c
-- BP 7.1 content: StreamData syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ex1',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	112,
	"53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1');
INSERT INTO GD_GE
	VALUES ("2f876284-13d1-f729-3625-7d34b0a605e3",
	"fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_SHP
	VALUES ("2f876284-13d1-f729-3625-7d34b0a605e3");
INSERT INTO GD_NCS
	VALUES ("2f876284-13d1-f729-3625-7d34b0a605e3");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"2f876284-13d1-f729-3625-7d34b0a605e3");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1344.000000,
	"2f876284-13d1-f729-3625-7d34b0a605e3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f876284-13d1-f729-3625-7d34b0a605e3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("882ac08a-d03a-f57b-2e42-f4acc69c55c5",
	"fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_SHP
	VALUES ("882ac08a-d03a-f57b-2e42-f4acc69c55c5");
INSERT INTO GD_NCS
	VALUES ("882ac08a-d03a-f57b-2e42-f4acc69c55c5");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"882ac08a-d03a-f57b-2e42-f4acc69c55c5");
INSERT INTO DIM_GE
	VALUES (2240.000000,
	1568.000000,
	"882ac08a-d03a-f57b-2e42-f4acc69c55c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("882ac08a-d03a-f57b-2e42-f4acc69c55c5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a157f5ee-7fed-3591-c7af-ed11d27c65b7",
	"fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	"a9c338d5-2dc5-d146-4de0-0bf11cb8a24e",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::External Entities');
INSERT INTO GD_SHP
	VALUES ("a157f5ee-7fed-3591-c7af-ed11d27c65b7");
INSERT INTO GD_NCS
	VALUES ("a157f5ee-7fed-3591-c7af-ed11d27c65b7");
INSERT INTO DIM_ND
	VALUES (160.000000,
	96.000000,
	"a157f5ee-7fed-3591-c7af-ed11d27c65b7");
INSERT INTO DIM_GE
	VALUES (2064.000000,
	1568.000000,
	"a157f5ee-7fed-3591-c7af-ed11d27c65b7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a157f5ee-7fed-3591-c7af-ed11d27c65b7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("fe041589-14b3-ac4b-a5ed-3bbeae197cf5",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("7516aa72-1b6a-f610-ef70-2de192c2b769",
	1,
	"53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'ex',
	'',
	1);
INSERT INTO GD_MD
	VALUES ("11df4de2-694f-8659-ed9a-17314671f1f2",
	112,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	108,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex');
INSERT INTO GD_GE
	VALUES ("b4adc635-90e3-49bb-22fe-97797ba3ab97",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"0145c467-517a-31e2-8e26-fce57532eea1",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init');
INSERT INTO GD_SHP
	VALUES ("b4adc635-90e3-49bb-22fe-97797ba3ab97");
INSERT INTO GD_NCS
	VALUES ("b4adc635-90e3-49bb-22fe-97797ba3ab97");
INSERT INTO DIM_ND
	VALUES (224.000000,
	144.000000,
	"b4adc635-90e3-49bb-22fe-97797ba3ab97");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1216.000000,
	"b4adc635-90e3-49bb-22fe-97797ba3ab97",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b4adc635-90e3-49bb-22fe-97797ba3ab97",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("6e0b6cab-49fa-378c-284d-1809124a086b",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test');
INSERT INTO GD_SHP
	VALUES ("6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO GD_NCS
	VALUES ("6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_ND
	VALUES (240.000000,
	464.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1392.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6e0b6cab-49fa-378c-284d-1809124a086b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d07522c0-e942-4ccf-20d4-d90b58b8920f",
	1760.000000,
	1856.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_CON
	VALUES ("964edf66-e600-a260-8f1b-e9aa26f6debb",
	1888.000000,
	1440.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_CON
	VALUES ("6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	1888.000000,
	1584.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_CON
	VALUES ("a64472bc-b662-7a86-dff1-43a7f6b23337",
	1888.000000,
	1728.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_CON
	VALUES ("709624c2-424c-e716-60b6-68615b621231",
	1888.000000,
	1472.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO DIM_CON
	VALUES ("9923bb9b-7a59-1fda-220c-56aea9e1632d",
	1856.000000,
	1856.000000,
	"6e0b6cab-49fa-378c-284d-1809124a086b");
INSERT INTO GD_GE
	VALUES ("68b80b0b-9997-a979-9505-17d1cdcea934",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::No Instances');
INSERT INTO GD_SHP
	VALUES ("68b80b0b-9997-a979-9505-17d1cdcea934");
INSERT INTO GD_NCS
	VALUES ("68b80b0b-9997-a979-9505-17d1cdcea934");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"68b80b0b-9997-a979-9505-17d1cdcea934");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1392.000000,
	"68b80b0b-9997-a979-9505-17d1cdcea934",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68b80b0b-9997-a979-9505-17d1cdcea934",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	2112.000000,
	1440.000000,
	"68b80b0b-9997-a979-9505-17d1cdcea934");
INSERT INTO DIM_CON
	VALUES ("31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	2112.000000,
	1472.000000,
	"68b80b0b-9997-a979-9505-17d1cdcea934");
INSERT INTO GD_GE
	VALUES ("034f706a-f341-e98f-bc33-900e46c48a1f",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::One Instance');
INSERT INTO GD_SHP
	VALUES ("034f706a-f341-e98f-bc33-900e46c48a1f");
INSERT INTO GD_NCS
	VALUES ("034f706a-f341-e98f-bc33-900e46c48a1f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"034f706a-f341-e98f-bc33-900e46c48a1f");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1520.000000,
	"034f706a-f341-e98f-bc33-900e46c48a1f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("034f706a-f341-e98f-bc33-900e46c48a1f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c768cc03-fd74-debb-bd62-5942f5ec99c8",
	2112.000000,
	1584.000000,
	"034f706a-f341-e98f-bc33-900e46c48a1f");
INSERT INTO GD_GE
	VALUES ("8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Many Instances');
INSERT INTO GD_SHP
	VALUES ("8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f");
INSERT INTO GD_NCS
	VALUES ("8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f");
INSERT INTO DIM_ND
	VALUES (192.000000,
	112.000000,
	"8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f");
INSERT INTO DIM_GE
	VALUES (2112.000000,
	1664.000000,
	"8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("830d48b4-c6f3-e870-517a-5c88d0e30b55",
	2112.000000,
	1728.000000,
	"8fa148f4-a3d4-e0b1-d5e0-c3f34e6e200f");
INSERT INTO GD_GE
	VALUES ("72714108-a2e4-ade8-bdd1-3d4ec15b3e31",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Any Object');
INSERT INTO GD_SHP
	VALUES ("72714108-a2e4-ade8-bdd1-3d4ec15b3e31");
INSERT INTO GD_NCS
	VALUES ("72714108-a2e4-ade8-bdd1-3d4ec15b3e31");
INSERT INTO DIM_ND
	VALUES (192.000000,
	160.000000,
	"72714108-a2e4-ade8-bdd1-3d4ec15b3e31");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1216.000000,
	"72714108-a2e4-ade8-bdd1-3d4ec15b3e31",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("72714108-a2e4-ade8-bdd1-3d4ec15b3e31",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("56d714ba-a8de-37e7-0a82-06da2fe193fc",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test Object B');
INSERT INTO GD_SHP
	VALUES ("56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO GD_NCS
	VALUES ("56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO DIM_ND
	VALUES (272.000000,
	368.000000,
	"56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	1952.000000,
	"56d714ba-a8de-37e7-0a82-06da2fe193fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("56d714ba-a8de-37e7-0a82-06da2fe193fc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a1cbf1a2-9b53-a38e-7325-822cc3d36d52",
	1760.000000,
	1952.000000,
	"56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO DIM_CON
	VALUES ("da3415b5-74ec-ba05-0a51-d5b276af662d",
	1712.000000,
	2320.000000,
	"56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO DIM_CON
	VALUES ("fd3ca5f2-c03f-c1e9-5b00-0e6f244758aa",
	1856.000000,
	1952.000000,
	"56d714ba-a8de-37e7-0a82-06da2fe193fc");
INSERT INTO GD_GE
	VALUES ("c8418eb5-a171-e43f-879d-f55f1161a6aa",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test Object C');
INSERT INTO GD_SHP
	VALUES ("c8418eb5-a171-e43f-879d-f55f1161a6aa");
INSERT INTO GD_NCS
	VALUES ("c8418eb5-a171-e43f-879d-f55f1161a6aa");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"c8418eb5-a171-e43f-879d-f55f1161a6aa");
INSERT INTO DIM_GE
	VALUES (1648.000000,
	2432.000000,
	"c8418eb5-a171-e43f-879d-f55f1161a6aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c8418eb5-a171-e43f-879d-f55f1161a6aa",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c56ff6b2-15b5-5680-b909-b28dd237747e",
	1712.000000,
	2432.000000,
	"c8418eb5-a171-e43f-879d-f55f1161a6aa");
INSERT INTO GD_GE
	VALUES ("068fe878-c5a2-03d7-e8b0-52bdbfb2d901",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("068fe878-c5a2-03d7-e8b0-52bdbfb2d901");
INSERT INTO GD_NCS
	VALUES ("068fe878-c5a2-03d7-e8b0-52bdbfb2d901");
INSERT INTO DIM_ND
	VALUES (272.000000,
	160.000000,
	"068fe878-c5a2-03d7-e8b0-52bdbfb2d901");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1536.000000,
	"068fe878-c5a2-03d7-e8b0-52bdbfb2d901",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("068fe878-c5a2-03d7-e8b0-52bdbfb2d901",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("7c52f76a-8e33-b1c6-6403-4d0c48958387",
	1392.000000,
	1696.000000,
	"068fe878-c5a2-03d7-e8b0-52bdbfb2d901");
INSERT INTO DIM_CON
	VALUES ("ea62a909-262f-23e4-9018-0726ba88c2d8",
	1552.000000,
	1696.000000,
	"068fe878-c5a2-03d7-e8b0-52bdbfb2d901");
INSERT INTO GD_GE
	VALUES ("ceb8867c-2390-f542-78d1-0ed798a5b8ae",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Other Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO GD_NCS
	VALUES ("ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO DIM_ND
	VALUES (256.000000,
	192.000000,
	"ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO DIM_GE
	VALUES (1344.000000,
	1856.000000,
	"ceb8867c-2390-f542-78d1-0ed798a5b8ae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ceb8867c-2390-f542-78d1-0ed798a5b8ae",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("21530e7a-9b0c-8e71-4704-cf2dfed55259",
	1392.000000,
	1856.000000,
	"ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO DIM_CON
	VALUES ("1c66461e-80a3-d65a-2782-cde62d3d770b",
	1552.000000,
	1856.000000,
	"ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO DIM_CON
	VALUES ("2053aaf9-1615-f5b5-0524-eec5bddb4f2f",
	1456.000000,
	2048.000000,
	"ceb8867c-2390-f542-78d1-0ed798a5b8ae");
INSERT INTO GD_GE
	VALUES ("11d72265-677f-744f-4d76-b919f8939ed9",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Third Boolean Expression Test');
INSERT INTO GD_SHP
	VALUES ("11d72265-677f-744f-4d76-b919f8939ed9");
INSERT INTO GD_NCS
	VALUES ("11d72265-677f-744f-4d76-b919f8939ed9");
INSERT INTO DIM_ND
	VALUES (240.000000,
	160.000000,
	"11d72265-677f-744f-4d76-b919f8939ed9");
INSERT INTO DIM_GE
	VALUES (1360.000000,
	2160.000000,
	"11d72265-677f-744f-4d76-b919f8939ed9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("11d72265-677f-744f-4d76-b919f8939ed9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("abd3826d-365a-051f-d3fc-286cdd54022b",
	1456.000000,
	2160.000000,
	"11d72265-677f-744f-4d76-b919f8939ed9");
INSERT INTO GD_GE
	VALUES ("a6c20c90-1767-6142-b11e-30d4a73b563a",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"1666303f-be65-bcfc-c61a-60015487b986",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test');
INSERT INTO GD_SHP
	VALUES ("a6c20c90-1767-6142-b11e-30d4a73b563a");
INSERT INTO GD_NCS
	VALUES ("a6c20c90-1767-6142-b11e-30d4a73b563a");
INSERT INTO DIM_ND
	VALUES (304.000000,
	160.000000,
	"a6c20c90-1767-6142-b11e-30d4a73b563a");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1536.000000,
	"a6c20c90-1767-6142-b11e-30d4a73b563a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a6c20c90-1767-6142-b11e-30d4a73b563a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a818f0b5-e1fd-1b33-0293-0699b14fa5a7",
	1024.000000,
	1696.000000,
	"a6c20c90-1767-6142-b11e-30d4a73b563a");
INSERT INTO DIM_CON
	VALUES ("bbcd0744-8522-6eda-6fe1-f0e09a098918",
	1200.000000,
	1696.000000,
	"a6c20c90-1767-6142-b11e-30d4a73b563a");
INSERT INTO GD_GE
	VALUES ("79f7890a-4b01-5818-3a4a-0b853e6b35cf",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Other Boolean Test');
INSERT INTO GD_SHP
	VALUES ("79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO GD_NCS
	VALUES ("79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO DIM_ND
	VALUES (320.000000,
	208.000000,
	"79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1856.000000,
	"79f7890a-4b01-5818-3a4a-0b853e6b35cf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("79f7890a-4b01-5818-3a4a-0b853e6b35cf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a74c3672-93e4-f886-1940-bb9ef22536c2",
	1024.000000,
	1856.000000,
	"79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO DIM_CON
	VALUES ("b4bde186-7078-543c-8c9e-18a7cacc6870",
	1200.000000,
	1856.000000,
	"79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO DIM_CON
	VALUES ("d9cb2c1f-24eb-e98d-25fb-9e126e4027df",
	1104.000000,
	2064.000000,
	"79f7890a-4b01-5818-3a4a-0b853e6b35cf");
INSERT INTO GD_GE
	VALUES ("5125ebd0-6d0e-5d24-b48b-5a809d664061",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Third Boolean Test');
INSERT INTO GD_SHP
	VALUES ("5125ebd0-6d0e-5d24-b48b-5a809d664061");
INSERT INTO GD_NCS
	VALUES ("5125ebd0-6d0e-5d24-b48b-5a809d664061");
INSERT INTO DIM_ND
	VALUES (288.000000,
	176.000000,
	"5125ebd0-6d0e-5d24-b48b-5a809d664061");
INSERT INTO DIM_GE
	VALUES (976.000000,
	2160.000000,
	"5125ebd0-6d0e-5d24-b48b-5a809d664061",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5125ebd0-6d0e-5d24-b48b-5a809d664061",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c5e8551b-7a6f-8644-9a93-1d4712944ddb",
	1104.000000,
	2160.000000,
	"5125ebd0-6d0e-5d24-b48b-5a809d664061");
INSERT INTO GD_GE
	VALUES ("35795c3a-be54-2438-e32f-1282f80e1bbc",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"1826943a-44b0-77e8-35db-8512aceeb99d",
	21,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance');
INSERT INTO GD_SHP
	VALUES ("35795c3a-be54-2438-e32f-1282f80e1bbc");
INSERT INTO GD_NCS
	VALUES ("35795c3a-be54-2438-e32f-1282f80e1bbc");
INSERT INTO DIM_ND
	VALUES (256.000000,
	160.000000,
	"35795c3a-be54-2438-e32f-1282f80e1bbc");
INSERT INTO DIM_GE
	VALUES (960.000000,
	1312.000000,
	"35795c3a-be54-2438-e32f-1282f80e1bbc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("35795c3a-be54-2438-e32f-1282f80e1bbc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("5600aed4-4661-60e1-4c1b-593caa5add12",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R1');
INSERT INTO GD_CON
	VALUES ("5600aed4-4661-60e1-4c1b-593caa5add12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1248048d-8fe3-84a3-40fd-3748b6c05f88",
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1248048d-8fe3-84a3-40fd-3748b6c05f88");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1248048d-8fe3-84a3-40fd-3748b6c05f88",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1248048d-8fe3-84a3-40fd-3748b6c05f88",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8984f1c3-3d56-e4b7-1754-55319ae2f287",
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"8984f1c3-3d56-e4b7-1754-55319ae2f287");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1888.000000,
	"8984f1c3-3d56-e4b7-1754-55319ae2f287",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8984f1c3-3d56-e4b7-1754-55319ae2f287",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ac9845f1-a205-bd4f-408c-ca99bdf6a251",
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ac9845f1-a205-bd4f-408c-ca99bdf6a251");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ac9845f1-a205-bd4f-408c-ca99bdf6a251",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ac9845f1-a205-bd4f-408c-ca99bdf6a251",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("1231b1cb-6737-401b-4742-5faddc0b5441",
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	"00000000-0000-0000-0000-000000000000",
	"e38bdd2c-fc96-409e-9d6b-37852a7e5231",
	"d850d23a-0aef-7e3c-f246-3adcb70ee28c");
INSERT INTO DIM_WAY
	VALUES ("e38bdd2c-fc96-409e-9d6b-37852a7e5231",
	1760.000000,
	1952.000000,
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d850d23a-0aef-7e3c-f246-3adcb70ee28c",
	1760.000000,
	1856.000000,
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	"00000000-0000-0000-0000-000000000000",
	"e38bdd2c-fc96-409e-9d6b-37852a7e5231");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5600aed4-4661-60e1-4c1b-593caa5add12",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5600aed4-4661-60e1-4c1b-593caa5add12",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a1cbf1a2-9b53-a38e-7325-822cc3d36d52",
	"d07522c0-e942-4ccf-20d4-d90b58b8920f",
	"5600aed4-4661-60e1-4c1b-593caa5add12");
INSERT INTO GD_GE
	VALUES ("a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R2');
INSERT INTO GD_CON
	VALUES ("a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5c0eb111-e2b9-89ee-1a12-8f9a84e1c80e",
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5c0eb111-e2b9-89ee-1a12-8f9a84e1c80e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5c0eb111-e2b9-89ee-1a12-8f9a84e1c80e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5c0eb111-e2b9-89ee-1a12-8f9a84e1c80e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e37dad6d-3103-e38f-4ef3-5e14cf184e90",
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"e37dad6d-3103-e38f-4ef3-5e14cf184e90");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1408.000000,
	"e37dad6d-3103-e38f-4ef3-5e14cf184e90",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e37dad6d-3103-e38f-4ef3-5e14cf184e90",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e659f803-6779-3b69-9b8a-f15b2d99dab1",
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e659f803-6779-3b69-9b8a-f15b2d99dab1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e659f803-6779-3b69-9b8a-f15b2d99dab1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e659f803-6779-3b69-9b8a-f15b2d99dab1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("64be1837-6be9-299b-1750-54ac53fe86be",
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"00000000-0000-0000-0000-000000000000",
	"0d7a090a-0803-bfae-d431-92a417dd65ac",
	"93fd7a18-9657-1ad4-0ff8-14952ea3ca05");
INSERT INTO DIM_WAY
	VALUES ("0d7a090a-0803-bfae-d431-92a417dd65ac",
	1888.000000,
	1440.000000,
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("93fd7a18-9657-1ad4-0ff8-14952ea3ca05",
	2112.000000,
	1440.000000,
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"00000000-0000-0000-0000-000000000000",
	"0d7a090a-0803-bfae-d431-92a417dd65ac");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a5f8f94e-3e86-0d6f-d549-fdf9735ec16a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("964edf66-e600-a260-8f1b-e9aa26f6debb",
	"4c03fc97-d0bd-08d4-9a8a-590e2fde3204",
	"a5f8f94e-3e86-0d6f-d549-fdf9735ec16a");
INSERT INTO GD_GE
	VALUES ("0f0ea111-974d-3271-296c-5b80d04bcd21",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R3');
INSERT INTO GD_CON
	VALUES ("0f0ea111-974d-3271-296c-5b80d04bcd21",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b3510fa6-9234-afc6-cdf9-6de91846cecd",
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b3510fa6-9234-afc6-cdf9-6de91846cecd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b3510fa6-9234-afc6-cdf9-6de91846cecd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b3510fa6-9234-afc6-cdf9-6de91846cecd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cbd6f75b-2331-b200-c66d-a69a7f1dd804",
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"cbd6f75b-2331-b200-c66d-a69a7f1dd804");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1552.000000,
	"cbd6f75b-2331-b200-c66d-a69a7f1dd804",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cbd6f75b-2331-b200-c66d-a69a7f1dd804",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("660155be-9e3d-e248-e378-0df2b1c99b48",
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"660155be-9e3d-e248-e378-0df2b1c99b48");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"660155be-9e3d-e248-e378-0df2b1c99b48",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("660155be-9e3d-e248-e378-0df2b1c99b48",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b4c7e04d-3793-c086-9d05-50053265754c",
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	"00000000-0000-0000-0000-000000000000",
	"38fa819a-d4fa-0347-2077-7d0dce41c052",
	"ea169984-2ad4-9a7c-40d5-af74272636c8");
INSERT INTO DIM_WAY
	VALUES ("38fa819a-d4fa-0347-2077-7d0dce41c052",
	1888.000000,
	1584.000000,
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ea169984-2ad4-9a7c-40d5-af74272636c8",
	2112.000000,
	1584.000000,
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	"00000000-0000-0000-0000-000000000000",
	"38fa819a-d4fa-0347-2077-7d0dce41c052");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0f0ea111-974d-3271-296c-5b80d04bcd21",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0f0ea111-974d-3271-296c-5b80d04bcd21",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6f5613cf-d4a2-2f26-2694-572c14a13eaa",
	"c768cc03-fd74-debb-bd62-5942f5ec99c8",
	"0f0ea111-974d-3271-296c-5b80d04bcd21");
INSERT INTO GD_GE
	VALUES ("71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R4');
INSERT INTO GD_CON
	VALUES ("71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb0ae077-0039-6b20-3064-a8a2adf71ad8",
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb0ae077-0039-6b20-3064-a8a2adf71ad8");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb0ae077-0039-6b20-3064-a8a2adf71ad8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb0ae077-0039-6b20-3064-a8a2adf71ad8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a4fe940f-b078-ff1c-8d10-2560a6fb6d06",
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a4fe940f-b078-ff1c-8d10-2560a6fb6d06");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1696.000000,
	"a4fe940f-b078-ff1c-8d10-2560a6fb6d06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a4fe940f-b078-ff1c-8d10-2560a6fb6d06",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("430c1240-b362-da56-1df9-8c1e358ccac7",
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"430c1240-b362-da56-1df9-8c1e358ccac7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"430c1240-b362-da56-1df9-8c1e358ccac7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("430c1240-b362-da56-1df9-8c1e358ccac7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b6c3c321-400f-acfb-dc4e-b93f6b30a40f",
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"00000000-0000-0000-0000-000000000000",
	"005241ee-1b07-5b1e-8a7d-a70d57a8c4bd",
	"91c45969-b790-8718-fbcc-f4173c9e11de");
INSERT INTO DIM_WAY
	VALUES ("005241ee-1b07-5b1e-8a7d-a70d57a8c4bd",
	1888.000000,
	1728.000000,
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("91c45969-b790-8718-fbcc-f4173c9e11de",
	2112.000000,
	1728.000000,
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"00000000-0000-0000-0000-000000000000",
	"005241ee-1b07-5b1e-8a7d-a70d57a8c4bd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("71fba1e8-4cac-45d7-d031-9a1a72cd8dd6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a64472bc-b662-7a86-dff1-43a7f6b23337",
	"830d48b4-c6f3-e870-517a-5c88d0e30b55",
	"71fba1e8-4cac-45d7-d031-9a1a72cd8dd6");
INSERT INTO GD_GE
	VALUES ("f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R5');
INSERT INTO GD_CON
	VALUES ("f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("85fa998c-539d-0b52-fdbb-a2600dd23d3d",
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"85fa998c-539d-0b52-fdbb-a2600dd23d3d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"85fa998c-539d-0b52-fdbb-a2600dd23d3d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85fa998c-539d-0b52-fdbb-a2600dd23d3d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a38c11db-ee7c-fc07-e3b1-c35995ef2360",
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	3,
	-7.000000,
	-7.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a38c11db-ee7c-fc07-e3b1-c35995ef2360");
INSERT INTO DIM_GE
	VALUES (1968.000000,
	1440.000000,
	"a38c11db-ee7c-fc07-e3b1-c35995ef2360",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a38c11db-ee7c-fc07-e3b1-c35995ef2360",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("62264c8b-7a72-25d4-2ea5-00675f86ee32",
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"62264c8b-7a72-25d4-2ea5-00675f86ee32");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"62264c8b-7a72-25d4-2ea5-00675f86ee32",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62264c8b-7a72-25d4-2ea5-00675f86ee32",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a888642c-d229-536b-0a3d-a28db25bedb5",
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"00000000-0000-0000-0000-000000000000",
	"e5579f99-99a4-59e9-6987-3d49e22fca66",
	"524f68b3-aeaf-77bf-02ee-033f8b1c3a81");
INSERT INTO DIM_WAY
	VALUES ("e5579f99-99a4-59e9-6987-3d49e22fca66",
	1888.000000,
	1472.000000,
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("524f68b3-aeaf-77bf-02ee-033f8b1c3a81",
	2112.000000,
	1472.000000,
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"00000000-0000-0000-0000-000000000000",
	"e5579f99-99a4-59e9-6987-3d49e22fca66");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f24bb398-55e6-303e-e4a9-ab8a64bb493f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("709624c2-424c-e716-60b6-68615b621231",
	"31b02a5f-3781-1711-76ac-5b4a258bc2b2",
	"f24bb398-55e6-303e-e4a9-ab8a64bb493f");
INSERT INTO GD_GE
	VALUES ("9e200963-b761-464a-0866-d905ea50b873",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R6');
INSERT INTO GD_CON
	VALUES ("9e200963-b761-464a-0866-d905ea50b873",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("978e8c10-c087-93ce-f3ad-ce171283c483",
	"9e200963-b761-464a-0866-d905ea50b873",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"978e8c10-c087-93ce-f3ad-ce171283c483");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"978e8c10-c087-93ce-f3ad-ce171283c483",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("978e8c10-c087-93ce-f3ad-ce171283c483",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("83e34716-62f0-2060-3884-4856dbddbd74",
	"9e200963-b761-464a-0866-d905ea50b873",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"83e34716-62f0-2060-3884-4856dbddbd74");
INSERT INTO DIM_GE
	VALUES (1696.000000,
	2344.000000,
	"83e34716-62f0-2060-3884-4856dbddbd74",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("83e34716-62f0-2060-3884-4856dbddbd74",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cfc221ae-5316-863a-ac36-2c9d54681dbc",
	"9e200963-b761-464a-0866-d905ea50b873",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cfc221ae-5316-863a-ac36-2c9d54681dbc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cfc221ae-5316-863a-ac36-2c9d54681dbc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cfc221ae-5316-863a-ac36-2c9d54681dbc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("bfa840d3-19d5-801b-bd06-522d2573b919",
	"9e200963-b761-464a-0866-d905ea50b873",
	"00000000-0000-0000-0000-000000000000",
	"07e41ecd-26f5-c2c4-abd2-ed7d9671fb3f",
	"842b1c26-39ef-30d1-06c1-ec6e4cff0fda");
INSERT INTO DIM_WAY
	VALUES ("07e41ecd-26f5-c2c4-abd2-ed7d9671fb3f",
	1712.000000,
	2320.000000,
	"9e200963-b761-464a-0866-d905ea50b873",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("842b1c26-39ef-30d1-06c1-ec6e4cff0fda",
	1712.000000,
	2432.000000,
	"9e200963-b761-464a-0866-d905ea50b873",
	"00000000-0000-0000-0000-000000000000",
	"07e41ecd-26f5-c2c4-abd2-ed7d9671fb3f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9e200963-b761-464a-0866-d905ea50b873",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9e200963-b761-464a-0866-d905ea50b873",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("da3415b5-74ec-ba05-0a51-d5b276af662d",
	"c56ff6b2-15b5-5680-b909-b28dd237747e",
	"9e200963-b761-464a-0866-d905ea50b873");
INSERT INTO GD_GE
	VALUES ("b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R8');
INSERT INTO GD_CON
	VALUES ("b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("def80184-7a96-613d-63a6-10aa2bf0d251",
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"def80184-7a96-613d-63a6-10aa2bf0d251");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"def80184-7a96-613d-63a6-10aa2bf0d251",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("def80184-7a96-613d-63a6-10aa2bf0d251",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9b92e2a1-6a53-f481-1d88-7783ccc7aefb",
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"9b92e2a1-6a53-f481-1d88-7783ccc7aefb");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1888.000000,
	"9b92e2a1-6a53-f481-1d88-7783ccc7aefb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b92e2a1-6a53-f481-1d88-7783ccc7aefb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5be95753-543a-3060-6e5a-426d57acef04",
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5be95753-543a-3060-6e5a-426d57acef04");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5be95753-543a-3060-6e5a-426d57acef04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5be95753-543a-3060-6e5a-426d57acef04",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6f94457c-8b58-af37-3dc1-a3ee44adade3",
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"00000000-0000-0000-0000-000000000000",
	"ae00e7e8-a241-b092-8c3e-e423fbc845df",
	"4c419fed-6786-ef9f-c1f9-a05289894cad");
INSERT INTO DIM_WAY
	VALUES ("ae00e7e8-a241-b092-8c3e-e423fbc845df",
	1856.000000,
	1856.000000,
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4c419fed-6786-ef9f-c1f9-a05289894cad",
	1856.000000,
	1952.000000,
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"00000000-0000-0000-0000-000000000000",
	"ae00e7e8-a241-b092-8c3e-e423fbc845df");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b72c468c-0bad-c2ee-61c4-a02772c4f053",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b72c468c-0bad-c2ee-61c4-a02772c4f053",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("9923bb9b-7a59-1fda-220c-56aea9e1632d",
	"fd3ca5f2-c03f-c1e9-5b00-0e6f244758aa",
	"b72c468c-0bad-c2ee-61c4-a02772c4f053");
INSERT INTO GD_GE
	VALUES ("e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R9');
INSERT INTO GD_CON
	VALUES ("e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("51b042f7-447e-3d5a-d62c-16e51e065c8a",
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"51b042f7-447e-3d5a-d62c-16e51e065c8a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"51b042f7-447e-3d5a-d62c-16e51e065c8a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("51b042f7-447e-3d5a-d62c-16e51e065c8a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("483f3287-b641-c967-6e66-d48a434c02b9",
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	3,
	14.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"483f3287-b641-c967-6e66-d48a434c02b9");
INSERT INTO DIM_GE
	VALUES (1390.000000,
	1749.000000,
	"483f3287-b641-c967-6e66-d48a434c02b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("483f3287-b641-c967-6e66-d48a434c02b9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b63c723c-6290-b324-5f63-65413c07feee",
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"b63c723c-6290-b324-5f63-65413c07feee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"b63c723c-6290-b324-5f63-65413c07feee",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b63c723c-6290-b324-5f63-65413c07feee",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("eecac180-9415-d32f-d8c0-59f0980c76ec",
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"00000000-0000-0000-0000-000000000000",
	"a3c69c99-c3f0-8ef4-4158-eeb6668995ff",
	"77b20090-99cf-cb0f-f449-825af5bdca3a");
INSERT INTO DIM_WAY
	VALUES ("a3c69c99-c3f0-8ef4-4158-eeb6668995ff",
	1392.000000,
	1696.000000,
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("77b20090-99cf-cb0f-f449-825af5bdca3a",
	1392.000000,
	1856.000000,
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"00000000-0000-0000-0000-000000000000",
	"a3c69c99-c3f0-8ef4-4158-eeb6668995ff");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e7d4e22e-6c0d-6a64-90d9-05afd6c352c3",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7c52f76a-8e33-b1c6-6403-4d0c48958387",
	"21530e7a-9b0c-8e71-4704-cf2dfed55259",
	"e7d4e22e-6c0d-6a64-90d9-05afd6c352c3");
INSERT INTO GD_GE
	VALUES ("982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R10');
INSERT INTO GD_CON
	VALUES ("982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e86bcb50-34c0-72c8-44b3-99cc748fd22c",
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e86bcb50-34c0-72c8-44b3-99cc748fd22c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e86bcb50-34c0-72c8-44b3-99cc748fd22c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e86bcb50-34c0-72c8-44b3-99cc748fd22c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("dacc6914-cc12-ace8-f550-fe038256a108",
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	3,
	16.000000,
	3.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"dacc6914-cc12-ace8-f550-fe038256a108");
INSERT INTO DIM_GE
	VALUES (1552.000000,
	1756.000000,
	"dacc6914-cc12-ace8-f550-fe038256a108",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("dacc6914-cc12-ace8-f550-fe038256a108",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("54a1fa0e-7f23-b9ff-2712-a5506322de65",
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"54a1fa0e-7f23-b9ff-2712-a5506322de65");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"54a1fa0e-7f23-b9ff-2712-a5506322de65",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("54a1fa0e-7f23-b9ff-2712-a5506322de65",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("09cf4845-b943-e207-d69e-98cb65d6a84e",
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"00000000-0000-0000-0000-000000000000",
	"b7dc50f7-8a9f-cd09-e30c-43d0d5b45025",
	"dee77f64-710f-e8c2-e84e-b535280b4fae");
INSERT INTO DIM_WAY
	VALUES ("b7dc50f7-8a9f-cd09-e30c-43d0d5b45025",
	1552.000000,
	1696.000000,
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("dee77f64-710f-e8c2-e84e-b535280b4fae",
	1552.000000,
	1856.000000,
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"00000000-0000-0000-0000-000000000000",
	"b7dc50f7-8a9f-cd09-e30c-43d0d5b45025");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("982e3f6a-2fad-00c4-03dc-f5b08b39f7be",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ea62a909-262f-23e4-9018-0726ba88c2d8",
	"1c66461e-80a3-d65a-2782-cde62d3d770b",
	"982e3f6a-2fad-00c4-03dc-f5b08b39f7be");
INSERT INTO GD_GE
	VALUES ("4976ab94-4e13-e799-b2a5-47754b1b974a",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R11');
INSERT INTO GD_CON
	VALUES ("4976ab94-4e13-e799-b2a5-47754b1b974a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a78e8da3-ef57-a74c-0e76-87dc9b0f4e67",
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a78e8da3-ef57-a74c-0e76-87dc9b0f4e67");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a78e8da3-ef57-a74c-0e76-87dc9b0f4e67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a78e8da3-ef57-a74c-0e76-87dc9b0f4e67",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8e776d9d-c902-c350-b2ab-b4227f931e3f",
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8e776d9d-c902-c350-b2ab-b4227f931e3f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8e776d9d-c902-c350-b2ab-b4227f931e3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8e776d9d-c902-c350-b2ab-b4227f931e3f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a3d1a10b-f80f-6e69-91f4-0dbca6249be3",
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a3d1a10b-f80f-6e69-91f4-0dbca6249be3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a3d1a10b-f80f-6e69-91f4-0dbca6249be3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a3d1a10b-f80f-6e69-91f4-0dbca6249be3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f314bd0e-d470-b58b-4858-6737f2d64a88",
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	"00000000-0000-0000-0000-000000000000",
	"fe4c077a-d994-1109-d3a8-b077cb906cd3",
	"90959954-0514-114d-9558-4d8f43520e67");
INSERT INTO DIM_WAY
	VALUES ("fe4c077a-d994-1109-d3a8-b077cb906cd3",
	1456.000000,
	2048.000000,
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("90959954-0514-114d-9558-4d8f43520e67",
	1456.000000,
	2160.000000,
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	"00000000-0000-0000-0000-000000000000",
	"fe4c077a-d994-1109-d3a8-b077cb906cd3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4976ab94-4e13-e799-b2a5-47754b1b974a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4976ab94-4e13-e799-b2a5-47754b1b974a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("2053aaf9-1615-f5b5-0524-eec5bddb4f2f",
	"abd3826d-365a-051f-d3fc-286cdd54022b",
	"4976ab94-4e13-e799-b2a5-47754b1b974a");
INSERT INTO GD_GE
	VALUES ("50c7ce38-2093-89b2-4277-3efe4552c515",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R12');
INSERT INTO GD_CON
	VALUES ("50c7ce38-2093-89b2-4277-3efe4552c515",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fc4b38dd-7023-f4a4-2b5b-daf63b51ddab",
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fc4b38dd-7023-f4a4-2b5b-daf63b51ddab");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fc4b38dd-7023-f4a4-2b5b-daf63b51ddab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fc4b38dd-7023-f4a4-2b5b-daf63b51ddab",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("506c916f-762d-c09b-6584-08b31d5b186b",
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	3,
	18.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"506c916f-762d-c09b-6584-08b31d5b186b");
INSERT INTO DIM_GE
	VALUES (1026.000000,
	1761.000000,
	"506c916f-762d-c09b-6584-08b31d5b186b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("506c916f-762d-c09b-6584-08b31d5b186b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6d1b1a07-2022-cd1f-c93c-742330a9e172",
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6d1b1a07-2022-cd1f-c93c-742330a9e172");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6d1b1a07-2022-cd1f-c93c-742330a9e172",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6d1b1a07-2022-cd1f-c93c-742330a9e172",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fedc4586-1ef9-fc9a-1de3-1f7c4095d389",
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	"00000000-0000-0000-0000-000000000000",
	"25cf7845-937f-4546-0e62-24ac1c767645",
	"57d4ffa6-dcc2-32a9-425d-fcbc2eb290d2");
INSERT INTO DIM_WAY
	VALUES ("25cf7845-937f-4546-0e62-24ac1c767645",
	1024.000000,
	1696.000000,
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("57d4ffa6-dcc2-32a9-425d-fcbc2eb290d2",
	1024.000000,
	1856.000000,
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	"00000000-0000-0000-0000-000000000000",
	"25cf7845-937f-4546-0e62-24ac1c767645");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"50c7ce38-2093-89b2-4277-3efe4552c515",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("50c7ce38-2093-89b2-4277-3efe4552c515",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a818f0b5-e1fd-1b33-0293-0699b14fa5a7",
	"a74c3672-93e4-f886-1940-bb9ef22536c2",
	"50c7ce38-2093-89b2-4277-3efe4552c515");
INSERT INTO GD_GE
	VALUES ("e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R13');
INSERT INTO GD_CON
	VALUES ("e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("828ac059-eebc-f944-6827-59899386f163",
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"828ac059-eebc-f944-6827-59899386f163");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"828ac059-eebc-f944-6827-59899386f163",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("828ac059-eebc-f944-6827-59899386f163",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a662e833-fb56-686a-9927-08fd695aa66d",
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	3,
	10.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"a662e833-fb56-686a-9927-08fd695aa66d");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1760.000000,
	"a662e833-fb56-686a-9927-08fd695aa66d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a662e833-fb56-686a-9927-08fd695aa66d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("383665c8-dbf2-3bb4-496e-0e864e2105f5",
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"383665c8-dbf2-3bb4-496e-0e864e2105f5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"383665c8-dbf2-3bb4-496e-0e864e2105f5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("383665c8-dbf2-3bb4-496e-0e864e2105f5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("fd0c6e73-022d-64c4-5674-2e894886c9b4",
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"00000000-0000-0000-0000-000000000000",
	"c4bb24a6-88b2-c5ca-a867-042c97cf6e2c",
	"a3e5495c-ec0f-7a82-413c-8df2f6939715");
INSERT INTO DIM_WAY
	VALUES ("c4bb24a6-88b2-c5ca-a867-042c97cf6e2c",
	1200.000000,
	1696.000000,
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a3e5495c-ec0f-7a82-413c-8df2f6939715",
	1200.000000,
	1856.000000,
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"00000000-0000-0000-0000-000000000000",
	"c4bb24a6-88b2-c5ca-a867-042c97cf6e2c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e009e342-c3a2-fb07-e3ae-e82346fb6ad2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("bbcd0744-8522-6eda-6fe1-f0e09a098918",
	"b4bde186-7078-543c-8c9e-18a7cacc6870",
	"e009e342-c3a2-fb07-e3ae-e82346fb6ad2");
INSERT INTO GD_GE
	VALUES ("2fb463d1-39d5-5171-ebec-ff197b290e00",
	"11df4de2-694f-8659-ed9a-17314671f1f2",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	24,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::R14');
INSERT INTO GD_CON
	VALUES ("2fb463d1-39d5-5171-ebec-ff197b290e00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3dbe27e8-36cf-1d70-aaf0-59d44c5c00bf",
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3dbe27e8-36cf-1d70-aaf0-59d44c5c00bf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3dbe27e8-36cf-1d70-aaf0-59d44c5c00bf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3dbe27e8-36cf-1d70-aaf0-59d44c5c00bf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0e3d87fe-21ce-3f34-6ef8-7f03237ae862",
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	3,
	21.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (50.000000,
	30.000000,
	"0e3d87fe-21ce-3f34-6ef8-7f03237ae862");
INSERT INTO DIM_GE
	VALUES (1109.000000,
	2098.000000,
	"0e3d87fe-21ce-3f34-6ef8-7f03237ae862",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0e3d87fe-21ce-3f34-6ef8-7f03237ae862",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9dab5850-9b4a-2041-6ffb-72899e763c5e",
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9dab5850-9b4a-2041-6ffb-72899e763c5e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9dab5850-9b4a-2041-6ffb-72899e763c5e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9dab5850-9b4a-2041-6ffb-72899e763c5e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("dda3901b-d196-ab01-ec2f-edeb8cfdaef6",
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	"00000000-0000-0000-0000-000000000000",
	"fd3cc79e-5713-d9ae-0a9a-d2cb6131769f",
	"b7ff896b-09b5-ede1-602f-c1b0bcfd7d5f");
INSERT INTO DIM_WAY
	VALUES ("fd3cc79e-5713-d9ae-0a9a-d2cb6131769f",
	1104.000000,
	2064.000000,
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b7ff896b-09b5-ede1-602f-c1b0bcfd7d5f",
	1104.000000,
	2160.000000,
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	"00000000-0000-0000-0000-000000000000",
	"fd3cc79e-5713-d9ae-0a9a-d2cb6131769f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2fb463d1-39d5-5171-ebec-ff197b290e00",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2fb463d1-39d5-5171-ebec-ff197b290e00",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("d9cb2c1f-24eb-e98d-25fb-9e126e4027df",
	"c5e8551b-7a6f-8644-9a93-1d4712944ddb",
	"2fb463d1-39d5-5171-ebec-ff197b290e00");
INSERT INTO DIM_DIA
	VALUES ("11df4de2-694f-8659-ed9a-17314671f1f2",
	'',
	0.433884,
	707.000000,
	1216.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1aff2446-ae86-fa24-e0ce-afd00574a372",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1aff2446-ae86-fa24-e0ce-afd00574a372",
	'Any Object',
	8,
	'AO',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("5e6cc7f2-3284-fb66-539e-59825320243f",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation AO::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("f2228e50-6bd1-9598-02ae-7f51defb49a8",
	"5e6cc7f2-3284-fb66-539e-59825320243f",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"00000000-0000-0000-0000-000000000000",
	'ao_id',
	'',
	'',
	'ao_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	'b',
	'',
	'',
	'b',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("b243aea3-7f76-54e6-9dcf-022365a6e156",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"1abaa67a-6790-7d12-6bbd-6c896f90ecf0",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("894ef6cf-6024-ed13-cc94-85b694333c5b",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"b243aea3-7f76-54e6-9dcf-022365a6e156",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"894ef6cf-6024-ed13-cc94-85b694333c5b",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_BATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ATTR
	VALUES ("951ad794-2873-d475-7cd7-c9e00e17e71d",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	"aa8548e2-470a-b46f-14f2-d59dbdb38ca2",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_OIDA
	VALUES ("6677d4a6-76bd-34bb-d740-6dfa7f61ff49",
	"1aff2446-ae86-fa24-e0ce-afd00574a372",
	0,
	'ao_id');
INSERT INTO O_ID
	VALUES (1,
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO O_ID
	VALUES (2,
	"1aff2446-ae86-fa24-e0ce-afd00574a372");
INSERT INTO PE_PE
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	'Boolean Expression Test',
	15,
	'BET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_BATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_ATTR
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_BATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_ATTR
	VALUES ("ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_BATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_ATTR
	VALUES ("5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"ad8e527f-7f8a-b1d3-17a2-a8ece2a813be",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	"91bec1df-39c9-c5f1-5d5c-0281aa5a027d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'bfalse',
	'R9');
INSERT INTO O_RATTR
	VALUES ("989cd201-f183-fd27-1734-0db7efb14e23",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("989cd201-f183-fd27-1734-0db7efb14e23",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"5b26dfa4-7f92-b09b-2dc0-59c0d0870334",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	"770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"598ad041-3b07-8dbb-6be3-6b1375dcb092",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Other Boolean Expression Test',
	'btrue',
	'R9');
INSERT INTO O_RATTR
	VALUES ("ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"989cd201-f183-fd27-1734-0db7efb14e23",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_BATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_ATTR
	VALUES ("8fee6254-b6ab-a206-a6ba-2f8dbb47ce1b",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	"ceb9e9a9-0bd6-56a8-01d7-f6f2f29488cb",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_OIDA
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO O_ID
	VALUES (2,
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO SM_ISM
	VALUES ("65b797f8-2546-df88-8de7-b8e7117ca625",
	"4328620f-7230-a48a-b68e-8a14e65195e9");
INSERT INTO SM_SM
	VALUES ("65b797f8-2546-df88-8de7-b8e7117ca625",
	'',
	5);
INSERT INTO SM_MOORE
	VALUES ("65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_EVTDI
	VALUES ("d42d0b33-c8f4-b99a-b65e-841ca7167ef9",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("1cbad8d4-1757-74e2-59a6-e0ab1eb0f1c4",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"d42d0b33-c8f4-b99a-b65e-841ca7167ef9");
INSERT INTO SM_EVTDI
	VALUES ("71421373-fa85-5450-1273-ca7c22587198",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3602de48-8140-cc67-2675-a2013de83641",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("320f74de-d278-f5bf-13c3-f7461da6bdb8",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("5ce8b495-4ab6-ab3a-be3e-a65f2ffee97c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"71421373-fa85-5450-1273-ca7c22587198");
INSERT INTO SM_EVTDI
	VALUES ("35406479-3e37-9a1a-34fc-87e955bb1a47",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"3602de48-8140-cc67-2675-a2013de83641");
INSERT INTO SM_EVTDI
	VALUES ("dc637563-b7cd-649a-faab-16ab0aaddbd3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"320f74de-d278-f5bf-13c3-f7461da6bdb8");
INSERT INTO SM_LEVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'BET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'BET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'BET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'BET4',
	'');
INSERT INTO SM_STATE
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e85b013-5007-89e2-0969-5e66fc0e2395",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"3e85b013-5007-89e2-0969-5e66fc0e2395");
INSERT INTO SM_AH
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("f761e7eb-7543-dcc4-dbdd-eb56ff47a2de",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'LOG::LogInfo(message:"Starting and test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 and temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 and temp2 ;
if ( t2 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t3 = temp2 and temp1 ;
if ( t3 == false )
  LOG::LogSuccess(message:" and local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( false )") ;
end if;
 
assign t4 = temp2 and temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" and local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" and local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 and false ;
if ( t9 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 and true ;
if ( t10 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t11 = temp2 and false ;
if ( t11 == false )
  LOG::LogSuccess(message:" and local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( false )") ;
end if;
 
assign t12 = temp2 and true ;
if ( t12 == true )
  LOG::LogSuccess(message:" and local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" and local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35");
INSERT INTO SM_AH
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("32c76343-c5b3-f7ce-6fb9-6d5f5a7a5c14",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and test") ;

//generate event to commence next test
generate BET3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1");
INSERT INTO SM_AH
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("0e3485bf-605f-4586-56d5-85120b150c9e",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'LOG::LogInfo(message:"Starting or test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    local existing
assign t1 = temp1 or temp1 ;
if ( t1 == false )
  LOG::LogSuccess(message:" or local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( false )") ;
end if;
 
assign t2 = temp1 or temp2 ;
if ( t2 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t3 = temp2 or temp1 ;
if ( t3 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
assign t4 = temp2 or temp2 ;
if ( t4 == true )
  LOG::LogSuccess(message:" or local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:" or local_existing local_existing ( true )") ;
end if;
 
  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of OBET;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of OBET;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->OBET[R9];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->OBET[R10];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->OBET[R10];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c22abf22-ddf4-6652-febb-47c93b9980a1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"c22abf22-ddf4-6652-febb-47c93b9980a1");
INSERT INTO SM_AH
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("a256916d-332b-8bb2-d4ff-eae907f0d71a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'
//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf");
INSERT INTO SM_AH
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("650d8560-41cb-105b-9a25-bc5546ca0485",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a");
INSERT INTO SM_AH
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("54c573d1-aade-513b-dec9-05a9342535a9",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	1,
	'// 1.3
// set my logging instance

assign temp1 = false;
assign temp2 = true;

select any saf from instances of OBET;
select many smfs from instances of OBET;
select one sor related by self->OBET[R9];
select any sar related by self->OBET[R10];
select many smrs related by self->OBET[R10];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate BET4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_NSTXN
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	"36bc36ec-860b-d595-4652-c35b8a6c0d66",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"b259479f-1956-e363-c395-911bb8c35cd3");
INSERT INTO SM_AH
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("40da950f-092d-1954-f95d-150a1ea1275e",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b259479f-1956-e363-c395-911bb8c35cd3",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"db83a381-9221-2e5c-d358-f8bb5bfa17a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8");
INSERT INTO SM_AH
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("87d7123c-9ec5-c389-2fda-613f981c3404",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"3aee7789-2566-d5ea-0a55-3334b0129fef");
INSERT INTO SM_AH
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("d050e693-f8f5-1446-254b-598c8cdb8c2a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("3aee7789-2566-d5ea-0a55-3334b0129fef",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	"339b9b95-7dc8-1dd3-1f94-67e4179b7d6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9");
INSERT INTO SM_AH
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("79786b0c-2583-a95c-3b50-3c627a6a2a28",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("eaac6632-6d55-e896-91ec-bf34c27c07e9",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"7ff18bc9-dd83-a426-7399-3138989126a6");
INSERT INTO SM_AH
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("fd31caa6-e766-7e79-f89d-6f233c353852",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7ff18bc9-dd83-a426-7399-3138989126a6",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"c22abf22-ddf4-6652-febb-47c93b9980a1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	"77a1ce5f-9a4d-adb1-584b-030c67832708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"7985e41c-606c-12dd-f296-171a2171df48");
INSERT INTO SM_AH
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"65b797f8-2546-df88-8de7-b8e7117ca625");
INSERT INTO SM_ACT
	VALUES ("3f8bf9ce-83b8-e625-b6be-03ca73a5014a",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7985e41c-606c-12dd-f296-171a2171df48",
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("f4cf9676-627f-377f-f54c-1745ba69153b",
	8,
	"65b797f8-2546-df88-8de7-b8e7117ca625",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("47d1af19-579c-8220-aed6-19e8438c68c0",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"3e85b013-5007-89e2-0969-5e66fc0e2395",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO GD_NCS
	VALUES ("47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1280.000000,
	"47d1af19-579c-8220-aed6-19e8438c68c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("47d1af19-579c-8220-aed6-19e8438c68c0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("9372331a-0e56-fef6-06c7-c3142dfa05be",
	2064.000000,
	1312.000000,
	"47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO DIM_CON
	VALUES ("d51808fc-cb0a-ac81-9a65-87854a56c7ef",
	1968.000000,
	1280.000000,
	"47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO DIM_CON
	VALUES ("72178949-1eec-b98b-20a8-2aae51787da5",
	1968.000000,
	1376.000000,
	"47d1af19-579c-8220-aed6-19e8438c68c0");
INSERT INTO GD_GE
	VALUES ("c8142988-f682-88dc-e478-83f1e4e18d08",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"89c3ffc3-5311-a448-3694-9f1d87d71a35",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("c8142988-f682-88dc-e478-83f1e4e18d08");
INSERT INTO GD_NCS
	VALUES ("c8142988-f682-88dc-e478-83f1e4e18d08");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"c8142988-f682-88dc-e478-83f1e4e18d08");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1680.000000,
	"c8142988-f682-88dc-e478-83f1e4e18d08",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c8142988-f682-88dc-e478-83f1e4e18d08",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("791bf50e-6283-7a24-71da-0ec0e125c02c",
	2064.000000,
	1712.000000,
	"c8142988-f682-88dc-e478-83f1e4e18d08");
INSERT INTO DIM_CON
	VALUES ("e715d1f5-5ade-8aa3-bf40-3b0f8028b5c0",
	1968.000000,
	1680.000000,
	"c8142988-f682-88dc-e478-83f1e4e18d08");
INSERT INTO GD_GE
	VALUES ("185a242a-8461-2f4f-084b-e1d4d147e198",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"70c29f67-ffcd-c81f-5836-0a1b9fe3ffa1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("185a242a-8461-2f4f-084b-e1d4d147e198");
INSERT INTO GD_NCS
	VALUES ("185a242a-8461-2f4f-084b-e1d4d147e198");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"185a242a-8461-2f4f-084b-e1d4d147e198");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1280.000000,
	"185a242a-8461-2f4f-084b-e1d4d147e198",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("185a242a-8461-2f4f-084b-e1d4d147e198",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("100c234d-b2c9-b43c-9aa7-b36805f475ba",
	2320.000000,
	1280.000000,
	"185a242a-8461-2f4f-084b-e1d4d147e198");
INSERT INTO DIM_CON
	VALUES ("c8a3959b-e4c7-7039-2433-1a2a7de583bf",
	2320.000000,
	1376.000000,
	"185a242a-8461-2f4f-084b-e1d4d147e198");
INSERT INTO GD_GE
	VALUES ("620fb290-d1ab-74b4-5f8b-9e279df55546",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"c22abf22-ddf4-6652-febb-47c93b9980a1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("620fb290-d1ab-74b4-5f8b-9e279df55546");
INSERT INTO GD_NCS
	VALUES ("620fb290-d1ab-74b4-5f8b-9e279df55546");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"620fb290-d1ab-74b4-5f8b-9e279df55546");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1680.000000,
	"620fb290-d1ab-74b4-5f8b-9e279df55546",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("620fb290-d1ab-74b4-5f8b-9e279df55546",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f9386921-bcf9-d419-47ab-58b6d5933198",
	2320.000000,
	1680.000000,
	"620fb290-d1ab-74b4-5f8b-9e279df55546");
INSERT INTO GD_GE
	VALUES ("6c22d1dc-4077-17ee-03a3-c0a10b08999c",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"5a4780cd-8012-878a-2d72-90231a8f5eaf",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("6c22d1dc-4077-17ee-03a3-c0a10b08999c");
INSERT INTO GD_NCS
	VALUES ("6c22d1dc-4077-17ee-03a3-c0a10b08999c");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"6c22d1dc-4077-17ee-03a3-c0a10b08999c");
INSERT INTO DIM_GE
	VALUES (1872.000000,
	1472.000000,
	"6c22d1dc-4077-17ee-03a3-c0a10b08999c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c22d1dc-4077-17ee-03a3-c0a10b08999c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4655c6d4-1397-e321-3c31-9283dd5298c5",
	1968.000000,
	1472.000000,
	"6c22d1dc-4077-17ee-03a3-c0a10b08999c");
INSERT INTO DIM_CON
	VALUES ("6606a71c-2664-4ffb-6c89-c46449b9dc88",
	1968.000000,
	1568.000000,
	"6c22d1dc-4077-17ee-03a3-c0a10b08999c");
INSERT INTO GD_GE
	VALUES ("fd100625-51ae-0492-ce3a-d810f01d2a5c",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"fc6255fd-8f88-8578-2188-dbd8f9d6a99a",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("fd100625-51ae-0492-ce3a-d810f01d2a5c");
INSERT INTO GD_NCS
	VALUES ("fd100625-51ae-0492-ce3a-d810f01d2a5c");
INSERT INTO DIM_ND
	VALUES (192.000000,
	96.000000,
	"fd100625-51ae-0492-ce3a-d810f01d2a5c");
INSERT INTO DIM_GE
	VALUES (2224.000000,
	1472.000000,
	"fd100625-51ae-0492-ce3a-d810f01d2a5c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd100625-51ae-0492-ce3a-d810f01d2a5c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("39f2d72d-e7f3-f90a-c8b6-4bb6d56a1fd3",
	2320.000000,
	1472.000000,
	"fd100625-51ae-0492-ce3a-d810f01d2a5c");
INSERT INTO DIM_CON
	VALUES ("ffd1e085-1153-372a-ee24-2a2d0e36a82e",
	2320.000000,
	1568.000000,
	"fd100625-51ae-0492-ce3a-d810f01d2a5c");
INSERT INTO GD_GE
	VALUES ("6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"b259479f-1956-e363-c395-911bb8c35cd3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET1: Start and test');
INSERT INTO GD_CON
	VALUES ("6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ca66a9c7-6cc0-bc88-3185-75bdbedb9570",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ca66a9c7-6cc0-bc88-3185-75bdbedb9570");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ca66a9c7-6cc0-bc88-3185-75bdbedb9570",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ca66a9c7-6cc0-bc88-3185-75bdbedb9570",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6fab8751-40e4-e6d8-868f-275a7a3cd33f",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	3,
	-77.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	34.000000,
	"6fab8751-40e4-e6d8-868f-275a7a3cd33f");
INSERT INTO DIM_GE
	VALUES (1994.000000,
	1189.000000,
	"6fab8751-40e4-e6d8-868f-275a7a3cd33f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6fab8751-40e4-e6d8-868f-275a7a3cd33f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e750ca66-ff8d-f004-1014-849f868e908a",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e750ca66-ff8d-f004-1014-849f868e908a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e750ca66-ff8d-f004-1014-849f868e908a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e750ca66-ff8d-f004-1014-849f868e908a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f19fd55d-a259-a9a1-9010-180f6644ee01",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"4f84a743-fa33-c293-1e42-db5409e87897",
	"691ef6b8-ae76-9c73-b4f8-b855ec32c4c3");
INSERT INTO GD_LS
	VALUES ("c8362829-2ced-fb7a-51b1-9021b08c13bb",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"f19fd55d-a259-a9a1-9010-180f6644ee01",
	"691ef6b8-ae76-9c73-b4f8-b855ec32c4c3",
	"e081685b-be64-3a01-4f85-0b73cb4297f7");
INSERT INTO GD_LS
	VALUES ("c1d6c246-0f7a-3fc2-429d-b2eca3222db3",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"c8362829-2ced-fb7a-51b1-9021b08c13bb",
	"e081685b-be64-3a01-4f85-0b73cb4297f7",
	"a2df9542-46aa-36ae-0c9c-a1370a0f59ee");
INSERT INTO GD_LS
	VALUES ("a5fe4f57-5091-3dfb-c8c7-58685862c2e1",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"c1d6c246-0f7a-3fc2-429d-b2eca3222db3",
	"a2df9542-46aa-36ae-0c9c-a1370a0f59ee",
	"d2a4cc87-5a8b-0d68-5638-296ec5665cd0");
INSERT INTO DIM_WAY
	VALUES ("4f84a743-fa33-c293-1e42-db5409e87897",
	2064.000000,
	1312.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("691ef6b8-ae76-9c73-b4f8-b855ec32c4c3",
	2128.000000,
	1312.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"4f84a743-fa33-c293-1e42-db5409e87897");
INSERT INTO DIM_WAY
	VALUES ("e081685b-be64-3a01-4f85-0b73cb4297f7",
	2128.000000,
	1216.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"691ef6b8-ae76-9c73-b4f8-b855ec32c4c3");
INSERT INTO DIM_WAY
	VALUES ("a2df9542-46aa-36ae-0c9c-a1370a0f59ee",
	1968.000000,
	1216.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"e081685b-be64-3a01-4f85-0b73cb4297f7");
INSERT INTO DIM_WAY
	VALUES ("d2a4cc87-5a8b-0d68-5638-296ec5665cd0",
	1968.000000,
	1280.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000",
	"a2df9542-46aa-36ae-0c9c-a1370a0f59ee");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("9372331a-0e56-fef6-06c7-c3142dfa05be",
	"d51808fc-cb0a-ac81-9a65-87854a56c7ef",
	"6974f84f-fda0-4efc-3b1f-0f1d0bfea4b1");
INSERT INTO GD_GE
	VALUES ("fa3d34aa-d364-5695-f645-2130c4193dfd",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"2ff7ddb4-e437-5e64-fa1f-8a4fbcacd7b8",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 2::BET3: Start or test');
INSERT INTO GD_CON
	VALUES ("fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3321b2ff-6265-5366-5e21-124a4e1f80cb",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3321b2ff-6265-5366-5e21-124a4e1f80cb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3321b2ff-6265-5366-5e21-124a4e1f80cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3321b2ff-6265-5366-5e21-124a4e1f80cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5f30df3b-b45b-52b0-970a-15d31d0cd3c0",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	3,
	155.000000,
	-202.000000);
INSERT INTO DIM_ND
	VALUES (205.000000,
	41.000000,
	"5f30df3b-b45b-52b0-970a-15d31d0cd3c0");
INSERT INTO DIM_GE
	VALUES (2331.000000,
	1231.000000,
	"5f30df3b-b45b-52b0-970a-15d31d0cd3c0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5f30df3b-b45b-52b0-970a-15d31d0cd3c0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("16d0e1eb-49c8-d558-ea5d-9e93911e1be9",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"16d0e1eb-49c8-d558-ea5d-9e93911e1be9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"16d0e1eb-49c8-d558-ea5d-9e93911e1be9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("16d0e1eb-49c8-d558-ea5d-9e93911e1be9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("3cf70ddc-784e-719b-0b75-f7e6aa7e1bd8",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"aa8ab15a-8fae-1f4c-699e-a16b8578ed46",
	"6b914a32-085d-0154-f3bc-bccb629c964f");
INSERT INTO GD_LS
	VALUES ("b5649f05-a700-ee45-6100-90c1d5854e1c",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"3cf70ddc-784e-719b-0b75-f7e6aa7e1bd8",
	"6b914a32-085d-0154-f3bc-bccb629c964f",
	"6be484c5-d717-6282-e66e-7ef475246da0");
INSERT INTO GD_LS
	VALUES ("31ce9cb8-c64c-2558-6ce5-d4776ee1867b",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"b5649f05-a700-ee45-6100-90c1d5854e1c",
	"6be484c5-d717-6282-e66e-7ef475246da0",
	"e50e72da-8b30-043b-657f-b717e35ce498");
INSERT INTO GD_LS
	VALUES ("23fa03fd-8acd-3d2c-59b0-13aecb8b4de4",
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"31ce9cb8-c64c-2558-6ce5-d4776ee1867b",
	"e50e72da-8b30-043b-657f-b717e35ce498",
	"4001cfce-b24d-ade8-ac83-26124ea940ac");
INSERT INTO DIM_WAY
	VALUES ("aa8ab15a-8fae-1f4c-699e-a16b8578ed46",
	2064.000000,
	1712.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("6b914a32-085d-0154-f3bc-bccb629c964f",
	2192.000000,
	1712.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"aa8ab15a-8fae-1f4c-699e-a16b8578ed46");
INSERT INTO DIM_WAY
	VALUES ("6be484c5-d717-6282-e66e-7ef475246da0",
	2192.000000,
	1232.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"6b914a32-085d-0154-f3bc-bccb629c964f");
INSERT INTO DIM_WAY
	VALUES ("e50e72da-8b30-043b-657f-b717e35ce498",
	2320.000000,
	1232.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"6be484c5-d717-6282-e66e-7ef475246da0");
INSERT INTO DIM_WAY
	VALUES ("4001cfce-b24d-ade8-ac83-26124ea940ac",
	2320.000000,
	1280.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000",
	"e50e72da-8b30-043b-657f-b717e35ce498");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fa3d34aa-d364-5695-f645-2130c4193dfd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fa3d34aa-d364-5695-f645-2130c4193dfd",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("791bf50e-6283-7a24-71da-0ec0e125c02c",
	"100c234d-b2c9-b43c-9aa7-b36805f475ba",
	"fa3d34aa-d364-5695-f645-2130c4193dfd");
INSERT INTO GD_GE
	VALUES ("ba364714-5da4-6816-75bd-d837365d8140",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"eaac6632-6d55-e896-91ec-bf34c27c07e9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1a::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("ba364714-5da4-6816-75bd-d837365d8140",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d40c393d-438e-ea7e-ffce-2e5ea87a01d4",
	"ba364714-5da4-6816-75bd-d837365d8140",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d40c393d-438e-ea7e-ffce-2e5ea87a01d4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d40c393d-438e-ea7e-ffce-2e5ea87a01d4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d40c393d-438e-ea7e-ffce-2e5ea87a01d4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("29678f1b-5bd5-a7ee-b90b-9b6f48304bb8",
	"ba364714-5da4-6816-75bd-d837365d8140",
	3,
	-247.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (270.000000,
	40.000000,
	"29678f1b-5bd5-a7ee-b90b-9b6f48304bb8");
INSERT INTO DIM_GE
	VALUES (1705.000000,
	1407.000000,
	"29678f1b-5bd5-a7ee-b90b-9b6f48304bb8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("29678f1b-5bd5-a7ee-b90b-9b6f48304bb8",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1e240358-dc5a-f0e1-ca8b-35b2e382c6ad",
	"ba364714-5da4-6816-75bd-d837365d8140",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1e240358-dc5a-f0e1-ca8b-35b2e382c6ad");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1e240358-dc5a-f0e1-ca8b-35b2e382c6ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1e240358-dc5a-f0e1-ca8b-35b2e382c6ad",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("921610d2-f115-c628-c47e-0d624d039844",
	"ba364714-5da4-6816-75bd-d837365d8140",
	"00000000-0000-0000-0000-000000000000",
	"074dbf49-d098-5ffa-9f46-2c4d1e7cc6a7",
	"4640d59a-f7ef-1f76-a925-cdd6c047610d");
INSERT INTO DIM_WAY
	VALUES ("074dbf49-d098-5ffa-9f46-2c4d1e7cc6a7",
	1968.000000,
	1376.000000,
	"ba364714-5da4-6816-75bd-d837365d8140",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4640d59a-f7ef-1f76-a925-cdd6c047610d",
	1968.000000,
	1472.000000,
	"ba364714-5da4-6816-75bd-d837365d8140",
	"00000000-0000-0000-0000-000000000000",
	"074dbf49-d098-5ffa-9f46-2c4d1e7cc6a7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ba364714-5da4-6816-75bd-d837365d8140",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ba364714-5da4-6816-75bd-d837365d8140",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("72178949-1eec-b98b-20a8-2aae51787da5",
	"4655c6d4-1397-e321-3c31-9283dd5298c5",
	"ba364714-5da4-6816-75bd-d837365d8140");
INSERT INTO GD_GE
	VALUES ("140e45cb-c8a0-700b-36f4-9889f1518035",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"3aee7789-2566-d5ea-0a55-3334b0129fef",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::And test 1b::BET2: Continue and test');
INSERT INTO GD_CON
	VALUES ("140e45cb-c8a0-700b-36f4-9889f1518035",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ab472b2a-82f3-8dbd-b089-9b413d8bc427",
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"ab472b2a-82f3-8dbd-b089-9b413d8bc427");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ab472b2a-82f3-8dbd-b089-9b413d8bc427",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ab472b2a-82f3-8dbd-b089-9b413d8bc427",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3206726b-b11a-493d-5e0f-0e55afdc33a3",
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	3,
	-257.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (279.000000,
	44.000000,
	"3206726b-b11a-493d-5e0f-0e55afdc33a3");
INSERT INTO DIM_GE
	VALUES (1695.000000,
	1610.000000,
	"3206726b-b11a-493d-5e0f-0e55afdc33a3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3206726b-b11a-493d-5e0f-0e55afdc33a3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fbf19a82-2141-39db-b542-6b4c14a5a07e",
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fbf19a82-2141-39db-b542-6b4c14a5a07e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fbf19a82-2141-39db-b542-6b4c14a5a07e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fbf19a82-2141-39db-b542-6b4c14a5a07e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("05199465-70e5-b730-febc-ced01416e8b4",
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	"00000000-0000-0000-0000-000000000000",
	"8288fe78-a293-8e87-1599-4791a652b1d0",
	"9e33caf8-97cf-a132-b7b5-663bac975423");
INSERT INTO DIM_WAY
	VALUES ("8288fe78-a293-8e87-1599-4791a652b1d0",
	1968.000000,
	1568.000000,
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9e33caf8-97cf-a132-b7b5-663bac975423",
	1968.000000,
	1680.000000,
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	"00000000-0000-0000-0000-000000000000",
	"8288fe78-a293-8e87-1599-4791a652b1d0");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"140e45cb-c8a0-700b-36f4-9889f1518035",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("140e45cb-c8a0-700b-36f4-9889f1518035",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6606a71c-2664-4ffb-6c89-c46449b9dc88",
	"e715d1f5-5ade-8aa3-bf40-3b0f8028b5c0",
	"140e45cb-c8a0-700b-36f4-9889f1518035");
INSERT INTO GD_GE
	VALUES ("f4569005-640f-1761-7576-b5f43bcb9d85",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"7985e41c-606c-12dd-f296-171a2171df48",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1a::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("f4569005-640f-1761-7576-b5f43bcb9d85",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2112ff83-4389-a5d6-50f4-d85d1b79a359",
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2112ff83-4389-a5d6-50f4-d85d1b79a359");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2112ff83-4389-a5d6-50f4-d85d1b79a359",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2112ff83-4389-a5d6-50f4-d85d1b79a359",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b42a61ba-1f13-8708-8116-2253960c6ac4",
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	49.000000,
	"b42a61ba-1f13-8708-8116-2253960c6ac4");
INSERT INTO DIM_GE
	VALUES (2304.000000,
	1408.000000,
	"b42a61ba-1f13-8708-8116-2253960c6ac4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b42a61ba-1f13-8708-8116-2253960c6ac4",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("84d115c8-3631-db9a-97ec-760138922d17",
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"84d115c8-3631-db9a-97ec-760138922d17");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"84d115c8-3631-db9a-97ec-760138922d17",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("84d115c8-3631-db9a-97ec-760138922d17",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("b9062cd4-72f3-eac4-4d07-c1f5b65dc12c",
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	"00000000-0000-0000-0000-000000000000",
	"3ee1eec5-b99f-d486-8f5e-9589d7d3d55a",
	"d06125b1-edfd-f090-c340-e14d082d76d2");
INSERT INTO DIM_WAY
	VALUES ("3ee1eec5-b99f-d486-8f5e-9589d7d3d55a",
	2320.000000,
	1376.000000,
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("d06125b1-edfd-f090-c340-e14d082d76d2",
	2320.000000,
	1472.000000,
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	"00000000-0000-0000-0000-000000000000",
	"3ee1eec5-b99f-d486-8f5e-9589d7d3d55a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f4569005-640f-1761-7576-b5f43bcb9d85",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f4569005-640f-1761-7576-b5f43bcb9d85",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("c8a3959b-e4c7-7039-2433-1a2a7de583bf",
	"39f2d72d-e7f3-f90a-c8b6-4bb6d56a1fd3",
	"f4569005-640f-1761-7576-b5f43bcb9d85");
INSERT INTO GD_GE
	VALUES ("d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"f4cf9676-627f-377f-f54c-1745ba69153b",
	"7ff18bc9-dd83-a426-7399-3138989126a6",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Boolean Expression Test::Instance State Machine::Or test 1b::BET4: Continue or test');
INSERT INTO GD_CON
	VALUES ("d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("38c5ab37-9e73-1bff-e722-a23dab15cdf9",
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"38c5ab37-9e73-1bff-e722-a23dab15cdf9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"38c5ab37-9e73-1bff-e722-a23dab15cdf9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("38c5ab37-9e73-1bff-e722-a23dab15cdf9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f06e7667-024e-7be8-4429-453cedb0cdc2",
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	3,
	9.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (241.000000,
	48.000000,
	"f06e7667-024e-7be8-4429-453cedb0cdc2");
INSERT INTO DIM_GE
	VALUES (2313.000000,
	1601.000000,
	"f06e7667-024e-7be8-4429-453cedb0cdc2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f06e7667-024e-7be8-4429-453cedb0cdc2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1d3932d2-e263-43fd-5d2c-8306daead498",
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1d3932d2-e263-43fd-5d2c-8306daead498");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1d3932d2-e263-43fd-5d2c-8306daead498",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1d3932d2-e263-43fd-5d2c-8306daead498",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("285a4d95-27da-20d0-9a91-8946d55dd11b",
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"00000000-0000-0000-0000-000000000000",
	"8f7b3570-9ed6-cc12-f5a7-325c03d1220c",
	"de5a8660-614e-e5fc-ba73-64e798c61b1e");
INSERT INTO DIM_WAY
	VALUES ("8f7b3570-9ed6-cc12-f5a7-325c03d1220c",
	2320.000000,
	1568.000000,
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("de5a8660-614e-e5fc-ba73-64e798c61b1e",
	2320.000000,
	1680.000000,
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"00000000-0000-0000-0000-000000000000",
	"8f7b3570-9ed6-cc12-f5a7-325c03d1220c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d1f1559d-408f-4e22-cae6-5c33bfdeda04",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ffd1e085-1153-372a-ee24-2a2d0e36a82e",
	"f9386921-bcf9-d419-47ab-58b6d5933198",
	"d1f1559d-408f-4e22-cae6-5c33bfdeda04");
INSERT INTO DIM_DIA
	VALUES ("f4cf9676-627f-377f-f54c-1745ba69153b",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1826943a-44b0-77e8-35db-8512aceeb99d",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1826943a-44b0-77e8-35db-8512aceeb99d",
	'Event Instance',
	21,
	'EV',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_BATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_ATTR
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"1826943a-44b0-77e8-35db-8512aceeb99d",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_BATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_ATTR
	VALUES ("3753592a-8926-f5c0-8141-f5aab60b273a",
	"1826943a-44b0-77e8-35db-8512aceeb99d",
	"11819529-d2ee-1362-b74f-48748c1ca662",
	'shutdown_count',
	'',
	'',
	'shutdown_count',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_BATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_ATTR
	VALUES ("adc56b61-419d-f174-634f-8845bff6308d",
	"1826943a-44b0-77e8-35db-8512aceeb99d",
	"3753592a-8926-f5c0-8141-f5aab60b273a",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_OIDA
	VALUES ("11819529-d2ee-1362-b74f-48748c1ca662",
	"1826943a-44b0-77e8-35db-8512aceeb99d",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO O_ID
	VALUES (2,
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO SM_ISM
	VALUES ("5ee18060-7952-417b-2a03-e3c73037bc8e",
	"1826943a-44b0-77e8-35db-8512aceeb99d");
INSERT INTO SM_SM
	VALUES ("5ee18060-7952-417b-2a03-e3c73037bc8e",
	'',
	7);
INSERT INTO SM_MOORE
	VALUES ("5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_EVTDI
	VALUES ("228c0169-6e61-2427-0093-40cd9d2b073f",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	'message',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_LEVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Event Instance',
	0,
	'',
	'EV1',
	'');
INSERT INTO SM_LEVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000",
	2,
	'shutdown',
	0,
	'',
	'EV2',
	'');
INSERT INTO SM_STATE
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000",
	'dummy',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13");
INSERT INTO SM_AH
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("a3e25bf1-7639-e01a-cde7-3fbe241a8af4",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	1,
	'',
	'');
INSERT INTO SM_STATE
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000",
	'shutdown',
	2,
	0);
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8");
INSERT INTO SM_AH
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("73641449-6e50-c4dc-893d-b010d8f1d724",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	1,
	'self.shutdown_count = self.shutdown_count - 1;

if ( self.shutdown_count == 0 )
  bridge ARCH::shutdown();
end if;',
	'');
INSERT INTO SM_NSTXN
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9");
INSERT INTO SM_AH
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("2edc4743-d19f-ed9c-55ae-ca54affc866d",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c");
INSERT INTO SM_AH
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("58982c68-0b67-fb2a-d66b-84b6496fe03a",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"f84d8846-a155-5b36-10fa-5caca3bda9d3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"6454a5de-2886-d6c1-fb18-beb471f43a49");
INSERT INTO SM_AH
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("cdc6e879-7296-1184-cfe3-eff922b12e41",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("6454a5de-2886-d6c1-fb18-beb471f43a49",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	"2e9a3dd3-9482-dc17-de93-e4ce596eac35",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f");
INSERT INTO SM_AH
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"5ee18060-7952-417b-2a03-e3c73037bc8e");
INSERT INTO SM_ACT
	VALUES ("4e680752-57da-475b-d8c4-11963be191ba",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	8,
	"5ee18060-7952-417b-2a03-e3c73037bc8e",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("3503d072-1682-b721-d611-bbc1dd19b978",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"4ce11644-bcb1-1dab-f4bb-1be90be3af13",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy');
INSERT INTO GD_SHP
	VALUES ("3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO GD_NCS
	VALUES ("3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1328.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3503d072-1682-b721-d611-bbc1dd19b978",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("46722c75-c9ab-7161-af3d-3b9ade2e8130",
	1888.000000,
	1328.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO DIM_CON
	VALUES ("ae656e81-cdee-b877-cb53-0cf50906170d",
	2016.000000,
	1328.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO DIM_CON
	VALUES ("3ce98dde-8434-ac7b-0fec-8240ab0d58a4",
	2144.000000,
	1408.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO DIM_CON
	VALUES ("6108e2d1-0f30-685a-8796-f18594b701ee",
	1856.000000,
	1392.000000,
	"3503d072-1682-b721-d611-bbc1dd19b978");
INSERT INTO GD_GE
	VALUES ("413463b6-f2bd-e16a-c96e-490f52e8a299",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"f4d455ae-a833-7d5a-ae87-e1e91a986ae8",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown');
INSERT INTO GD_SHP
	VALUES ("413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO GD_NCS
	VALUES ("413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO DIM_ND
	VALUES (288.000000,
	128.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO DIM_GE
	VALUES (1856.000000,
	1056.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("413463b6-f2bd-e16a-c96e-490f52e8a299",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f34f425e-7100-b483-160a-d3447ec0678b",
	1920.000000,
	1056.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO DIM_CON
	VALUES ("d9997cd1-d60e-a25f-42b0-babeb69ba9dd",
	2096.000000,
	1056.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO DIM_CON
	VALUES ("2af04523-be45-68b2-fc59-45e007afe13f",
	2144.000000,
	1120.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO DIM_CON
	VALUES ("f14751c4-ef90-1ab1-95d2-1b880dbbfb64",
	1856.000000,
	1120.000000,
	"413463b6-f2bd-e16a-c96e-490f52e8a299");
INSERT INTO GD_GE
	VALUES ("0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"6d40d992-e1f6-be1b-6d43-d8fac093dbb9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("57edeb6a-ce9c-00d4-ca3d-664cd0320e2e",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"57edeb6a-ce9c-00d4-ca3d-664cd0320e2e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"57edeb6a-ce9c-00d4-ca3d-664cd0320e2e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("57edeb6a-ce9c-00d4-ca3d-664cd0320e2e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("95f5000a-0d08-4790-3987-d3972d701f22",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	3,
	-7.000000,
	-28.000000);
INSERT INTO DIM_ND
	VALUES (284.000000,
	59.000000,
	"95f5000a-0d08-4790-3987-d3972d701f22");
INSERT INTO DIM_GE
	VALUES (1920.000000,
	1243.000000,
	"95f5000a-0d08-4790-3987-d3972d701f22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95f5000a-0d08-4790-3987-d3972d701f22",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1b42c7a-71ad-ea03-bd37-d43190ab915e",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1b42c7a-71ad-ea03-bd37-d43190ab915e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1b42c7a-71ad-ea03-bd37-d43190ab915e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1b42c7a-71ad-ea03-bd37-d43190ab915e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("f723a535-85c9-ef71-24d1-6601b776d566",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000",
	"c71fb9c1-b9ee-55f8-7be7-5dfddc681f92",
	"c8d7f625-4d86-ade1-73e5-9357820a01b9");
INSERT INTO GD_LS
	VALUES ("c2ffaeb7-7710-f537-8004-51b34b84c9a9",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"f723a535-85c9-ef71-24d1-6601b776d566",
	"c8d7f625-4d86-ade1-73e5-9357820a01b9",
	"0f74ef8f-08bb-bdee-50dd-69efa1287fde");
INSERT INTO GD_LS
	VALUES ("b0fff850-9662-3d04-7681-bbf1e9ab3914",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"c2ffaeb7-7710-f537-8004-51b34b84c9a9",
	"0f74ef8f-08bb-bdee-50dd-69efa1287fde",
	"d5f709b5-7c1c-93bb-36da-1daea70d9995");
INSERT INTO DIM_WAY
	VALUES ("c71fb9c1-b9ee-55f8-7be7-5dfddc681f92",
	1888.000000,
	1328.000000,
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c8d7f625-4d86-ade1-73e5-9357820a01b9",
	1888.000000,
	1296.000000,
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000",
	"c71fb9c1-b9ee-55f8-7be7-5dfddc681f92");
INSERT INTO DIM_WAY
	VALUES ("0f74ef8f-08bb-bdee-50dd-69efa1287fde",
	2016.000000,
	1296.000000,
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000",
	"c8d7f625-4d86-ade1-73e5-9357820a01b9");
INSERT INTO DIM_WAY
	VALUES ("d5f709b5-7c1c-93bb-36da-1daea70d9995",
	2016.000000,
	1328.000000,
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000",
	"0f74ef8f-08bb-bdee-50dd-69efa1287fde");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0b02d980-d858-6c98-a1fb-4e88a84cd7eb",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("46722c75-c9ab-7161-af3d-3b9ade2e8130",
	"ae656e81-cdee-b877-cb53-0cf50906170d",
	"0b02d980-d858-6c98-a1fb-4e88a84cd7eb");
INSERT INTO GD_GE
	VALUES ("98819bfe-804e-103c-3764-682c990f4297",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"8cc660e3-82d2-f962-5097-9ea7ebae6d5c",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("88c5d6c1-754b-33aa-6b15-310d9eef3330",
	"98819bfe-804e-103c-3764-682c990f4297",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"88c5d6c1-754b-33aa-6b15-310d9eef3330");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"88c5d6c1-754b-33aa-6b15-310d9eef3330",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("88c5d6c1-754b-33aa-6b15-310d9eef3330",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5df47548-1ba0-9842-3f2c-2bfda36ca8c1",
	"98819bfe-804e-103c-3764-682c990f4297",
	3,
	0.000000,
	-29.000000);
INSERT INTO DIM_ND
	VALUES (144.000000,
	44.000000,
	"5df47548-1ba0-9842-3f2c-2bfda36ca8c1");
INSERT INTO DIM_GE
	VALUES (1983.000000,
	954.000000,
	"5df47548-1ba0-9842-3f2c-2bfda36ca8c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5df47548-1ba0-9842-3f2c-2bfda36ca8c1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f81d62dc-7b45-5ae7-fc04-e7fb25572a70",
	"98819bfe-804e-103c-3764-682c990f4297",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f81d62dc-7b45-5ae7-fc04-e7fb25572a70");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f81d62dc-7b45-5ae7-fc04-e7fb25572a70",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f81d62dc-7b45-5ae7-fc04-e7fb25572a70",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2ef38bda-1899-7d43-662f-5100a826a9b3",
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000",
	"86b61835-90ad-a347-c0a7-3efdca2f4660",
	"b7ea540d-a362-8b33-3b9f-5b611446393f");
INSERT INTO GD_LS
	VALUES ("428fdb37-1f88-d23d-9694-2201d967abe7",
	"98819bfe-804e-103c-3764-682c990f4297",
	"2ef38bda-1899-7d43-662f-5100a826a9b3",
	"b7ea540d-a362-8b33-3b9f-5b611446393f",
	"df3de1b4-0ecc-f6fc-baf5-f048d1b853d2");
INSERT INTO GD_LS
	VALUES ("c9782c3b-cde4-2027-5088-368cd5662f72",
	"98819bfe-804e-103c-3764-682c990f4297",
	"428fdb37-1f88-d23d-9694-2201d967abe7",
	"df3de1b4-0ecc-f6fc-baf5-f048d1b853d2",
	"79a03902-bf6c-6220-a379-a576965cdf72");
INSERT INTO DIM_WAY
	VALUES ("86b61835-90ad-a347-c0a7-3efdca2f4660",
	1920.000000,
	1056.000000,
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("b7ea540d-a362-8b33-3b9f-5b611446393f",
	1920.000000,
	1008.000000,
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000",
	"86b61835-90ad-a347-c0a7-3efdca2f4660");
INSERT INTO DIM_WAY
	VALUES ("df3de1b4-0ecc-f6fc-baf5-f048d1b853d2",
	2096.000000,
	1008.000000,
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000",
	"b7ea540d-a362-8b33-3b9f-5b611446393f");
INSERT INTO DIM_WAY
	VALUES ("79a03902-bf6c-6220-a379-a576965cdf72",
	2096.000000,
	1056.000000,
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000",
	"df3de1b4-0ecc-f6fc-baf5-f048d1b853d2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"98819bfe-804e-103c-3764-682c990f4297",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("98819bfe-804e-103c-3764-682c990f4297",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f34f425e-7100-b483-160a-d3447ec0678b",
	"d9997cd1-d60e-a25f-42b0-babeb69ba9dd",
	"98819bfe-804e-103c-3764-682c990f4297");
INSERT INTO GD_GE
	VALUES ("531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"32ff36b2-7a67-0cc3-9d16-b9a90070f64f",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::dummy::EV2: shutdown');
INSERT INTO GD_CON
	VALUES ("531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("97f8924c-4361-9326-3e07-75e1f82b8968",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"97f8924c-4361-9326-3e07-75e1f82b8968");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"97f8924c-4361-9326-3e07-75e1f82b8968",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("97f8924c-4361-9326-3e07-75e1f82b8968",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6da894ef-0389-2ced-4aaa-9da191b62f7d",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	3,
	23.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (134.000000,
	42.000000,
	"6da894ef-0389-2ced-4aaa-9da191b62f7d");
INSERT INTO DIM_GE
	VALUES (2247.000000,
	1247.000000,
	"6da894ef-0389-2ced-4aaa-9da191b62f7d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6da894ef-0389-2ced-4aaa-9da191b62f7d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("07ecac07-2fea-99e4-3d29-9ede45ba29ed",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"07ecac07-2fea-99e4-3d29-9ede45ba29ed");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"07ecac07-2fea-99e4-3d29-9ede45ba29ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("07ecac07-2fea-99e4-3d29-9ede45ba29ed",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ae6f814a-25fd-2313-d399-37a47d7d795b",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000",
	"5c0d968e-82a6-4225-8253-6d374507415d",
	"0fac3081-dc26-4693-f715-f7e0e1a54101");
INSERT INTO GD_LS
	VALUES ("268ffeb4-9b3f-0976-0fa4-530b0a971df6",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"ae6f814a-25fd-2313-d399-37a47d7d795b",
	"0fac3081-dc26-4693-f715-f7e0e1a54101",
	"22c21c46-7e65-f605-9860-d13825730227");
INSERT INTO GD_LS
	VALUES ("62a36a86-eeb7-0498-ed66-beb95adf2b59",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"268ffeb4-9b3f-0976-0fa4-530b0a971df6",
	"22c21c46-7e65-f605-9860-d13825730227",
	"b7eeecd3-3765-6d5a-7061-920ed0462a32");
INSERT INTO DIM_WAY
	VALUES ("5c0d968e-82a6-4225-8253-6d374507415d",
	2144.000000,
	1408.000000,
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0fac3081-dc26-4693-f715-f7e0e1a54101",
	2240.000000,
	1408.000000,
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000",
	"5c0d968e-82a6-4225-8253-6d374507415d");
INSERT INTO DIM_WAY
	VALUES ("22c21c46-7e65-f605-9860-d13825730227",
	2240.000000,
	1120.000000,
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000",
	"0fac3081-dc26-4693-f715-f7e0e1a54101");
INSERT INTO DIM_WAY
	VALUES ("b7eeecd3-3765-6d5a-7061-920ed0462a32",
	2144.000000,
	1120.000000,
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000",
	"22c21c46-7e65-f605-9860-d13825730227");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("531f1801-3eba-2c4f-eb38-16b78acb5eb6",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3ce98dde-8434-ac7b-0fec-8240ab0d58a4",
	"2af04523-be45-68b2-fc59-45e007afe13f",
	"531f1801-3eba-2c4f-eb38-16b78acb5eb6");
INSERT INTO GD_GE
	VALUES ("3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	"6454a5de-2886-d6c1-fb18-beb471f43a49",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Event Instance::Instance State Machine::shutdown::EV1: Event Instance');
INSERT INTO GD_CON
	VALUES ("3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d230d87c-8cd7-2951-aeaa-2ebf6573c2a7",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d230d87c-8cd7-2951-aeaa-2ebf6573c2a7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d230d87c-8cd7-2951-aeaa-2ebf6573c2a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d230d87c-8cd7-2951-aeaa-2ebf6573c2a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2cdedbcd-3d4d-681d-eddc-5def9039803f",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	3,
	18.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (136.000000,
	44.000000,
	"2cdedbcd-3d4d-681d-eddc-5def9039803f");
INSERT INTO DIM_GE
	VALUES (1778.000000,
	1237.000000,
	"2cdedbcd-3d4d-681d-eddc-5def9039803f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2cdedbcd-3d4d-681d-eddc-5def9039803f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("120aaf61-7fa5-f7a9-736a-5c5f81b5ef16",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"120aaf61-7fa5-f7a9-736a-5c5f81b5ef16");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"120aaf61-7fa5-f7a9-736a-5c5f81b5ef16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("120aaf61-7fa5-f7a9-736a-5c5f81b5ef16",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("75f44a05-9efa-87c3-ff81-c961edb11811",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000",
	"c2a84c2e-8fad-cd61-e5f9-976226ebf930",
	"ea69c645-82b2-b1a6-1a1d-7ab2c91faef5");
INSERT INTO GD_LS
	VALUES ("5c5d2d9b-d34a-cc26-bc31-18191ac86c2c",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"75f44a05-9efa-87c3-ff81-c961edb11811",
	"ea69c645-82b2-b1a6-1a1d-7ab2c91faef5",
	"a17a712c-11a4-948d-b674-e53ff731cc11");
INSERT INTO GD_LS
	VALUES ("5898f507-03a7-a1d6-8521-7f5e805b1657",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"5c5d2d9b-d34a-cc26-bc31-18191ac86c2c",
	"a17a712c-11a4-948d-b674-e53ff731cc11",
	"ca9348e5-46fc-ef5d-3bb9-1b0cf4f5d97a");
INSERT INTO DIM_WAY
	VALUES ("c2a84c2e-8fad-cd61-e5f9-976226ebf930",
	1856.000000,
	1120.000000,
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ea69c645-82b2-b1a6-1a1d-7ab2c91faef5",
	1776.000000,
	1120.000000,
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000",
	"c2a84c2e-8fad-cd61-e5f9-976226ebf930");
INSERT INTO DIM_WAY
	VALUES ("a17a712c-11a4-948d-b674-e53ff731cc11",
	1776.000000,
	1392.000000,
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000",
	"ea69c645-82b2-b1a6-1a1d-7ab2c91faef5");
INSERT INTO DIM_WAY
	VALUES ("ca9348e5-46fc-ef5d-3bb9-1b0cf4f5d97a",
	1856.000000,
	1392.000000,
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000",
	"a17a712c-11a4-948d-b674-e53ff731cc11");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3fd46a4c-8993-c964-bcb8-a6098a63cb93",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f14751c4-ef90-1ab1-95d2-1b880dbbfb64",
	"6108e2d1-0f30-685a-8796-f18594b701ee",
	"3fd46a4c-8993-c964-bcb8-a6098a63cb93");
INSERT INTO DIM_DIA
	VALUES ("6ed7c821-e37f-c9fa-abc7-b33dc4557975",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	'Expression Test Object B',
	12,
	'ETOB',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"00000000-0000-0000-0000-000000000000",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_BATTR
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ATTR
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	"b5b5bb76-35aa-7542-3f75-1ddd3af43a17",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R8');
INSERT INTO O_RATTR
	VALUES ("144d12fb-7e88-d1fb-53aa-424716231706",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("144d12fb-7e88-d1fb-53aa-424716231706",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"44594cf1-a3ca-c481-7ce3-cabe9d0ac38d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'etoc_id',
	'R6');
INSERT INTO O_RATTR
	VALUES ("a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'etoc_id');
INSERT INTO O_ATTR
	VALUES ("a03c3f93-7906-d9ec-c231-9da2ea71de99",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"144d12fb-7e88-d1fb-53aa-424716231706",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"ccce8115-d43e-7de7-3359-7eca850c7ead",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"7decd51e-cb05-c3b8-e00f-c03ff3a8c3f8",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'btrue',
	'R6');
INSERT INTO O_RATTR
	VALUES ("6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"a03c3f93-7906-d9ec-c231-9da2ea71de99",
	'r6btrue',
	'',
	'r6',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"da58c8b4-e115-bda5-ef6c-931b9c201031",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	"e2472006-ef20-b196-1d44-b01a92f2211f",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'bfalse',
	'R6');
INSERT INTO O_RATTR
	VALUES ("c9a07dee-437c-ad45-d4da-33b893d485c8",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("c9a07dee-437c-ad45-d4da-33b893d485c8",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"6f9cac5f-d145-2003-3c68-d84bc896ad7f",
	'r6bfalse',
	'',
	'r6',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"57086d91-2c4b-df6d-f626-e9ee3b83db7c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'r',
	'R6');
INSERT INTO O_RATTR
	VALUES ("2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"c9a07dee-437c-ad45-d4da-33b893d485c8",
	'r6r',
	'',
	'r6',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	"1f62272b-3139-3cb6-c224-693f0bc22185",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	's',
	'R6');
INSERT INTO O_RATTR
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("973dbe08-33fa-a285-2845-2c8684a3fb11",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"2ccd5696-7ac7-25f4-5be6-b71dfc46c6e3",
	'r6s',
	'',
	'r6',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"c6ca4bce-887f-805a-2422-cb8534463eb6",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	"b06e6426-e587-6bcd-733b-30386a92a82c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'u',
	'R6');
INSERT INTO O_RATTR
	VALUES ("e0c89490-70ea-71e1-db27-031f50b642d4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("e0c89490-70ea-71e1-db27-031f50b642d4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"973dbe08-33fa-a285-2845-2c8684a3fb11",
	'r6u',
	'',
	'r6',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"7734bddb-7442-e149-9954-439287ef0f4a",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"bcac5850-1cfa-f535-32f6-13538f0a85fd",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'd',
	'R6');
INSERT INTO O_RATTR
	VALUES ("44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"e0c89490-70ea-71e1-db27-031f50b642d4",
	'r6d',
	'',
	'r6',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"56385d49-43e3-c23e-5f47-f820a34b873e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	't',
	'R6');
INSERT INTO O_RATTR
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"44c3dc13-bcb9-8e9c-b58e-badcbb1af8e9",
	'r6t',
	'',
	'r6',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"2650dd30-4375-af91-8693-ce8c8d57016b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'tim',
	'R6');
INSERT INTO O_RATTR
	VALUES ("56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"acac9317-23a1-95d7-41a4-e6f4f347ccf1",
	'r6tim',
	'',
	'r6',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"25efb86d-6612-1018-8acb-f77147ecf0e8",
	"5b55fc44-2d46-d665-6f87-618adb002bfb",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object C',
	'ev',
	'R6');
INSERT INTO O_RATTR
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("25efb86d-6612-1018-8acb-f77147ecf0e8",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"56579ffb-8fdb-490d-7d0b-97cc1d2e611e",
	'r6ev',
	'',
	'r6',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_OIDA
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'etob_id');
INSERT INTO O_OIDA
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	's');
INSERT INTO O_ID
	VALUES (1,
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO O_ID
	VALUES (2,
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d");
INSERT INTO PE_PE
	VALUES ("f27d150f-5992-e53c-b782-8a0d207beecf",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("f27d150f-5992-e53c-b782-8a0d207beecf",
	'Expression Test Object C',
	13,
	'ETOC',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"00000000-0000-0000-0000-000000000000",
	'etoc_id',
	'',
	'',
	'etoc_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"ccce8115-d43e-7de7-3359-7eca850c7ead",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"da58c8b4-e115-bda5-ef6c-931b9c201031",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"c6ca4bce-887f-805a-2422-cb8534463eb6",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"7734bddb-7442-e149-9954-439287ef0f4a",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_BATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ATTR
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	"988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_OIDA
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	's');
INSERT INTO O_OIDA
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'ev');
INSERT INTO O_OIDA
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'd');
INSERT INTO O_OIDA
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'u');
INSERT INTO O_OIDA
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	't');
INSERT INTO O_OIDA
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'r');
INSERT INTO O_OIDA
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'tim');
INSERT INTO O_OIDA
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	'etoc_id');
INSERT INTO O_ID
	VALUES (1,
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO O_ID
	VALUES (2,
	"f27d150f-5992-e53c-b782-8a0d207beecf");
INSERT INTO PE_PE
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	'Expression Test',
	3,
	'ET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("92851ea0-e968-8852-3977-05c80e689712",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'no_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::no_parm_ret_void should not have been translated.");
',
	1,
	'',
	"b5d290fe-631e-9036-2fac-36d33583d0ff");
INSERT INTO O_TFR
	VALUES ("9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'i_parm_ret_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_i should not have been translated.");
return param.i;',
	1,
	'',
	"0e284941-c030-3774-95ef-053390cb4782");
INSERT INTO O_TPARM
	VALUES ("2c4e70ce-7e26-c00c-86df-cb0d0ed6af85",
	"9e1cd40a-6950-f6c2-74a8-fc8a5f710081",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("21f9c83c-5d29-cdd6-3825-1696153c01bb",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'r_parm_ret_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'LOG::LogFailure(message:"Operation ET::r_parm_ret_r should not have been translated.");
return param.r;',
	1,
	'',
	"92851ea0-e968-8852-3977-05c80e689712");
INSERT INTO O_TPARM
	VALUES ("be200624-30d5-d348-9648-b696c180ea95",
	"21f9c83c-5d29-cdd6-3825-1696153c01bb",
	'r',
	"ba5eda7a-def5-0000-0000-000000000003",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'b_parm_ret_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'LOG::LogFailure(message:"Operation ET::b_parm_ret_b should not have been translated.");
return param.b;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("76ace3b7-9333-cfa2-e7e7-3ca1a75c2ea9",
	"b9095bd1-c52b-bad3-aad2-3e64d425eb1e",
	'b',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("879d19f9-1ecd-9004-d179-1280d2b32a6e",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	's_parm_ret_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'LOG::LogFailure(message:"Operation ET::s_parm_ret_s should not have been translated.");
return param.s;',
	1,
	'',
	"21f9c83c-5d29-cdd6-3825-1696153c01bb");
INSERT INTO O_TPARM
	VALUES ("90b4ec41-7a43-5fa7-4576-b48c3e51e620",
	"879d19f9-1ecd-9004-d179-1280d2b32a6e",
	's',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("ba1f9437-707c-21dc-b0af-6152d8103224",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'u_parm_ret_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'LOG::LogFailure(message:"Operation ET::u_parm_ret_u should not have been translated.");
return param.u;',
	1,
	'',
	"d09381b0-4a7b-4fd2-4f14-f812e97311db");
INSERT INTO O_TPARM
	VALUES ("f3716951-41eb-0058-f792-b6bb11cd041a",
	"ba1f9437-707c-21dc-b0af-6152d8103224",
	'u',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0e284941-c030-3774-95ef-053390cb4782",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'd_parm_ret_d',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'LOG::LogFailure(message:"Operation ET::d_parm_ret_d should not have been translated.");
return param.d;',
	1,
	'',
	"b9095bd1-c52b-bad3-aad2-3e64d425eb1e");
INSERT INTO O_TPARM
	VALUES ("d35abe68-761c-4805-6622-ec58904bb650",
	"0e284941-c030-3774-95ef-053390cb4782",
	'd',
	"ba5eda7a-def5-0000-0000-00000000000e",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("d09381b0-4a7b-4fd2-4f14-f812e97311db",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	't_parm_ret_t',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'LOG::LogFailure(message:"Operation ET::t_parm_ret_t should not have been translated.");
return param.t;',
	1,
	'',
	"879d19f9-1ecd-9004-d179-1280d2b32a6e");
INSERT INTO O_TPARM
	VALUES ("5731a408-b0d9-e43c-5a20-bcc9ce92a73e",
	"d09381b0-4a7b-4fd2-4f14-f812e97311db",
	't',
	"ba5eda7a-def5-0000-0000-000000000010",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("b5d290fe-631e-9036-2fac-36d33583d0ff",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'i_parm_ret_void',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'LOG::LogFailure(message:"Operation ET::i_parm_ret_void should not have been translated.");',
	1,
	'',
	"9e1cd40a-6950-f6c2-74a8-fc8a5f710081");
INSERT INTO O_TPARM
	VALUES ("6a8eae6e-d574-7609-6008-2b15b1e1112b",
	"b5d290fe-631e-9036-2fac-36d33583d0ff",
	'i',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("29f74a5b-fcf1-53c9-feb8-9ea34c5e3b80",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	'waitOneSec',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	1,
	'',
	"ba1f9437-707c-21dc-b0af-6152d8103224");
INSERT INTO O_NBATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"00000000-0000-0000-0000-000000000000",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("684076c7-a2d3-be88-66ff-b7481115f804",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"8ca4e67c-d9ba-ea2d-6855-dd300826b5d1",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("012785f1-36c8-ba79-1c2f-35e33f32ee40",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"684076c7-a2d3-be88-66ff-b7481115f804",
	'i',
	'',
	'',
	'i',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("1c6e4e05-9a57-8267-b621-28a6cb4da292",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"012785f1-36c8-ba79-1c2f-35e33f32ee40",
	'r',
	'',
	'',
	'r',
	0,
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("dc6947ac-d33d-7048-bd97-232710b93e96",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"1c6e4e05-9a57-8267-b621-28a6cb4da292",
	'd',
	'',
	'',
	'd',
	0,
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"dc6947ac-d33d-7048-bd97-232710b93e96",
	'u',
	'',
	'',
	'u',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("38adcac6-84e1-dc89-98ff-0edee32865f3",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("38adcac6-84e1-dc89-98ff-0edee32865f3",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("38adcac6-84e1-dc89-98ff-0edee32865f3",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"bd1acf6e-e8e6-46c9-9b64-272d3b5b77ed",
	's',
	'',
	'',
	's',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"38adcac6-84e1-dc89-98ff-0edee32865f3",
	't',
	'',
	'',
	't',
	0,
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("1674e145-2ea0-7680-7186-958c54b8419f",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("1674e145-2ea0-7680-7186-958c54b8419f",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("1674e145-2ea0-7680-7186-958c54b8419f",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"419b7f76-6dfa-f359-4e15-08b301b3e7a2",
	'tim',
	'',
	'',
	'tim',
	0,
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("d44d4c61-01ed-33cd-a609-3756268333de",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("d44d4c61-01ed-33cd-a609-3756268333de",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("d44d4c61-01ed-33cd-a609-3756268333de",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"1674e145-2ea0-7680-7186-958c54b8419f",
	'ev',
	'',
	'',
	'ev',
	0,
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"d44d4c61-01ed-33cd-a609-3756268333de",
	'log_id',
	'',
	'',
	'log_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"888d7a07-9f82-6fad-3fdb-5af2c45afe74",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("6ced82e3-f53d-39ee-666d-63b10c07ed28",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"52c72186-a863-2c6f-bd5b-2d47f5e4f360",
	'my_b',
	'',
	'',
	'my_b',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"6ced82e3-f53d-39ee-666d-63b10c07ed28",
	'my_i',
	'',
	'',
	'my_i',
	0,
	"2c989ba8-f0da-5e56-46cf-06a2a7c1b6ac",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"69dcc395-2a33-1e70-a5e7-f9806e4b9404",
	'my_r',
	'',
	'',
	'my_r',
	0,
	"e67ffa5f-2ae4-d156-e190-c8ecd2a0f5db",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("4824d4fb-7902-b0e9-32ea-7a418861a863",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("4824d4fb-7902-b0e9-32ea-7a418861a863",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("4824d4fb-7902-b0e9-32ea-7a418861a863",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"a92fbbc9-a5a0-f7d1-ee40-6a679b3b1164",
	'my_s',
	'',
	'',
	'my_s',
	0,
	"861b22fc-9407-ee4e-ce52-2199f47e3ce8",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("2d83d263-22d1-cd33-b351-097b49f6d09b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_BATTR
	VALUES ("2d83d263-22d1-cd33-b351-097b49f6d09b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ATTR
	VALUES ("2d83d263-22d1-cd33-b351-097b49f6d09b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"4824d4fb-7902-b0e9-32ea-7a418861a863",
	'my_u',
	'',
	'',
	'my_u',
	0,
	"b04a89b5-0eca-1678-aaea-137214f5d9a6",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"b10b197a-d973-859d-fe91-71588fee3321",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'etob_id',
	'R1');
INSERT INTO O_RATTR
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'etob_id');
INSERT INTO O_ATTR
	VALUES ("1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"2d83d263-22d1-cd33-b351-097b49f6d09b",
	'etob_id',
	'',
	'',
	'etob_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"968e1cad-ef5d-3411-d3dd-66e45fdc2e80",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'btrue',
	'R1');
INSERT INTO O_RATTR
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("cf36702f-b276-7fda-3f2d-abcf77209ad3",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"1c56708e-a313-7ca5-5d96-5d1ee6c1fe59",
	'r1btrue',
	'',
	'r1',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"f676b389-0874-7ee7-2e04-c83e8e718308",
	"ef4095b5-d93f-175b-157a-c4c45199fe91",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'bfalse',
	'R1');
INSERT INTO O_RATTR
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("f676b389-0874-7ee7-2e04-c83e8e718308",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"cf36702f-b276-7fda-3f2d-abcf77209ad3",
	'r1bfalse',
	'',
	'r1',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"0257293a-c610-33d0-961c-38c3e1d07895",
	"6285ee46-8c13-728a-e11d-16d51800214e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'r',
	'R1');
INSERT INTO O_RATTR
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'r');
INSERT INTO O_ATTR
	VALUES ("0257293a-c610-33d0-961c-38c3e1d07895",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"f676b389-0874-7ee7-2e04-c83e8e718308",
	'r1r',
	'',
	'r1',
	'r',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"9fcd02d4-1b8b-0046-d650-787e82d22386",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	's',
	'R1');
INSERT INTO O_RATTR
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	's');
INSERT INTO O_ATTR
	VALUES ("99e9ca65-b88e-e920-9601-e9de152e4ab1",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"0257293a-c610-33d0-961c-38c3e1d07895",
	'r1s',
	'',
	'r1',
	's',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"50b670b1-2d1d-8625-76e2-e35753fd1678",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'u',
	'R1');
INSERT INTO O_RATTR
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'u');
INSERT INTO O_ATTR
	VALUES ("de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"99e9ca65-b88e-e920-9601-e9de152e4ab1",
	'r1u',
	'',
	'r1',
	'u',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"bcf06e4a-5409-7333-0252-9499c9e8150e",
	"c9a9c243-5ff9-883b-80d5-a7c8382e965b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'd',
	'R1');
INSERT INTO O_RATTR
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'd');
INSERT INTO O_ATTR
	VALUES ("bcf06e4a-5409-7333-0252-9499c9e8150e",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"de4c4040-b4d8-8dd0-e1f6-cc648576c11b",
	'r1d',
	'',
	'r1',
	'd',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"18264137-d16c-5d7c-561d-02186cae1d56",
	"36730d4d-8453-99e0-6f66-02e86b7b7e14",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	't',
	'R1');
INSERT INTO O_RATTR
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	't');
INSERT INTO O_ATTR
	VALUES ("18264137-d16c-5d7c-561d-02186cae1d56",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"bcf06e4a-5409-7333-0252-9499c9e8150e",
	'r1t',
	'',
	'r1',
	't',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"9540e3db-f00c-d7f3-1476-89c2599510f4",
	"6a3f577c-0633-98ee-31e6-a1c9843b882b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'tim',
	'R1');
INSERT INTO O_RATTR
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'tim');
INSERT INTO O_ATTR
	VALUES ("9540e3db-f00c-d7f3-1476-89c2599510f4",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"18264137-d16c-5d7c-561d-02186cae1d56",
	'r1tim',
	'',
	'r1',
	'tim',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"5669a790-b8d1-3ed2-adc1-a15c5748685b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test Object B',
	'ev',
	'R1');
INSERT INTO O_RATTR
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	1,
	'ev');
INSERT INTO O_ATTR
	VALUES ("8b0ce55c-dcd0-fe78-9fe2-2c531cd75838",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	"9540e3db-f00c-d7f3-1476-89c2599510f4",
	'r1ev',
	'',
	'r1',
	'ev',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_OIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	'et_id');
INSERT INTO O_ID
	VALUES (1,
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO O_ID
	VALUES (2,
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO SM_ISM
	VALUES ("835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"9ce314cf-ef10-05bc-3fc1-07055c886174");
INSERT INTO SM_SM
	VALUES ("835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'',
	4);
INSERT INTO SM_MOORE
	VALUES ("835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_EVTDI
	VALUES ("8de012c7-1eac-33ac-20f5-b855fca9b1dc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"8eb676f7-794d-49ca-675e-a952cbeee2b1");
INSERT INTO SM_EVTDI
	VALUES ("62f734fa-09a5-f6ec-3293-84d7e94f3809",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("292fddd2-fd1c-40a4-2f64-b2651ef87e01",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"8de012c7-1eac-33ac-20f5-b855fca9b1dc");
INSERT INTO SM_EVTDI
	VALUES ("a6bb37b1-56f7-548b-ccb8-0e721bb4c639",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"292fddd2-fd1c-40a4-2f64-b2651ef87e01");
INSERT INTO SM_EVTDI
	VALUES ("f974e3e7-aada-5144-7e99-59015ca18609",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"53f3a2a0-b67d-7643-b289-078c1df60ad2");
INSERT INTO SM_EVTDI
	VALUES ("95bc1cbf-700f-3724-17d6-f6075c91725e",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'my_b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f9b76cf6-7f53-cd6d-daeb-154a730cc06f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'my_i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"95bc1cbf-700f-3724-17d6-f6075c91725e");
INSERT INTO SM_EVTDI
	VALUES ("e15fdb25-1e9a-34a4-b088-d23e01397b40",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'my_r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"f9b76cf6-7f53-cd6d-daeb-154a730cc06f");
INSERT INTO SM_EVTDI
	VALUES ("81338e04-5546-2f5b-942c-32c4fbbcdbbe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'my_s',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"e15fdb25-1e9a-34a4-b088-d23e01397b40");
INSERT INTO SM_EVTDI
	VALUES ("ec484440-6ae1-fa12-c3ea-b1ef666a8d7b",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'my_u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"81338e04-5546-2f5b-942c-32c4fbbcdbbe");
INSERT INTO SM_EVTDI
	VALUES ("ef055728-1abe-5400-459e-3e561261fd3e",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"a6bb37b1-56f7-548b-ccb8-0e721bb4c639");
INSERT INTO SM_EVTDI
	VALUES ("53f3a2a0-b67d-7643-b289-078c1df60ad2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"b4a0dbd1-25c6-4e5f-243a-a67226b836a6");
INSERT INTO SM_EVTDI
	VALUES ("ac159d2b-52a5-5605-efc9-9ace882da668",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tint1',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("cc8a7370-a8a9-5c8a-4749-51b1318d59c1",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tint2',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"ac159d2b-52a5-5605-efc9-9ace882da668");
INSERT INTO SM_EVTDI
	VALUES ("9c09d2a9-543a-40bc-b5c1-34a9b5a9c07c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'treal1',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"cc8a7370-a8a9-5c8a-4749-51b1318d59c1");
INSERT INTO SM_EVTDI
	VALUES ("c8560c7f-3f99-e2d4-4eed-0426fad503a7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'treal2',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"9c09d2a9-543a-40bc-b5c1-34a9b5a9c07c");
INSERT INTO SM_EVTDI
	VALUES ("792fe774-69e5-c629-d9f7-75bb1ad3b111",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'd',
	'',
	"ba5eda7a-def5-0000-0000-00000000000e",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b4a0dbd1-25c6-4e5f-243a-a67226b836a6",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ts',
	'',
	"ba5eda7a-def5-0000-0000-000000000010",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"bfa1cf00-d1ba-53e1-8044-01caded9c8f8");
INSERT INTO SM_EVTDI
	VALUES ("bfa1cf00-d1ba-53e1-8044-01caded9c8f8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tim',
	'',
	"ba5eda7a-def5-0000-0000-00000000000f",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"ef055728-1abe-5400-459e-3e561261fd3e");
INSERT INTO SM_EVTDI
	VALUES ("8eb676f7-794d-49ca-675e-a952cbeee2b1",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ev',
	'',
	"ba5eda7a-def5-0000-0000-00000000000a",
	'',
	"3600367e-0add-f558-0191-3db7429b77fc",
	"792fe774-69e5-c629-d9f7-75bb1ad3b111");
INSERT INTO SM_EVTDI
	VALUES ("c31ea8e2-a225-c2fa-958a-059b426ffb1b",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'i',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"b10f7d2d-a3ed-ce04-cfb0-77057be886e1");
INSERT INTO SM_EVTDI
	VALUES ("b10f7d2d-a3ed-ce04-cfb0-77057be886e1",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'b',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("b5174271-06c0-6284-6671-04ddb49587c5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'r',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	'',
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"c31ea8e2-a225-c2fa-958a-059b426ffb1b");
INSERT INTO SM_EVTDI
	VALUES ("4e9b5eaa-6afe-c3d4-61a8-574ce50bde21",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	's',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"b5174271-06c0-6284-6671-04ddb49587c5");
INSERT INTO SM_EVTDI
	VALUES ("0532ea50-5753-a4f7-59c0-12401c13a28a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'u',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"4e9b5eaa-6afe-c3d4-61a8-574ce50bde21");
INSERT INTO SM_EVTDI
	VALUES ("f76bd060-fa91-8f51-3cf5-9870fc560a9c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("ec8715b1-f40d-a9f3-22e3-da4b4989fe82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("8792f8a0-1e96-dfe1-cd23-3d99cb1c2b23",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'tfalse',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("d43a1ef6-30fa-39f5-e67c-e2d5ec210301",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"f76bd060-fa91-8f51-3cf5-9870fc560a9c");
INSERT INTO SM_EVTDI
	VALUES ("bb20ccde-00a0-83bf-1ef7-f6045cda5120",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"ec8715b1-f40d-a9f3-22e3-da4b4989fe82");
INSERT INTO SM_EVTDI
	VALUES ("98668044-8949-ce3c-c773-64a5c513abfc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	'ttrue',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"8792f8a0-1e96-dfe1-cd23-3d99cb1c2b23");
INSERT INTO SM_LEVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start Expression Test',
	0,
	'',
	'ET1',
	'');
INSERT INTO SM_LEVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Run F3 Binary Ops',
	0,
	'',
	'ET2',
	'');
INSERT INTO SM_LEVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Run F15 Values',
	0,
	'',
	'ET3',
	'');
INSERT INTO SM_LEVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Run F16 Transformers',
	0,
	'',
	'ET4',
	'');
INSERT INTO SM_LEVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	5,
	'Run F17 Timestamp and F18 Date Operators',
	0,
	'',
	'ET5',
	'');
INSERT INTO SM_LEVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	6,
	'Run F1 and F2 for User Defined Types',
	0,
	'',
	'ET6',
	'');
INSERT INTO SM_LEVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	7,
	'Run F3 through F14 for User Defined Types',
	0,
	'',
	'ET7',
	'');
INSERT INTO SM_LEVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	8,
	'Run F15 for User Defined Types',
	0,
	'',
	'ET8',
	'');
INSERT INTO SM_LEVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	9,
	'Shut Down',
	0,
	'',
	'ET9',
	'');
INSERT INTO SM_LEVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	10,
	'Start not_empty test',
	0,
	'',
	'ET10',
	'');
INSERT INTO SM_LEVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	11,
	'Start cardinality test',
	0,
	'',
	'ET11',
	'');
INSERT INTO SM_LEVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	12,
	'Start empty test',
	0,
	'',
	'ET12',
	'');
INSERT INTO SM_LEVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	13,
	'Start not test',
	0,
	'',
	'ET13',
	'');
INSERT INTO SM_LEVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	14,
	'Start subtract test',
	0,
	'',
	'ET14',
	'');
INSERT INTO SM_LEVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	15,
	'Start assign test',
	0,
	'',
	'ET15',
	'');
INSERT INTO SM_LEVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	16,
	'Start and test',
	0,
	'',
	'ET16',
	'');
INSERT INTO SM_LEVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	17,
	'Start or test',
	0,
	'',
	'ET17',
	'');
INSERT INTO SM_STATE
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Starting Expression Test F1 and F2',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1");
INSERT INTO SM_AH
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("34a5e6e0-847a-50f3-ef23-f85efff5bdcf",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting Expression Test F1 and F2") ;

//BEGIN EX.F.1
//check defaults

if (self.bfalse != FALSE)
  LOG::LogFailure(message:"EX.F.1: b default") ;
else
  LOG::LogSuccess(message:"EX.F.1: b default") ;
end if;

if (self.i != 0)
  LOG::LogFailure(message:"EX.F.1: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1: i default") ; 
end if;

//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.1: r default") real;

if (self.s != "")
  LOG::LogFailure(message:"EX.F.1: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1: s default") ;
end if;

//END EX.F.1

//BEGIN EX.F.2
//check integer assign

assign self.i = 10;
if (self.i == 10)
  LOG::LogSuccess(message:"EX.F.2: self.i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.i assign") ;  
end if;

//check real assign
assign self.r = 3.14;
//generate LOGREAL1:''Log Real''(r:3.14,message:"EX.F.2: r assigned to") real;
//generate LOGREAL1:''Log Real''(r:self.r,message:"EX.F.2: r assigned is") real;

//check bool assign
assign self.bfalse = TRUE;
if (self.bfalse == TRUE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;
assign self.bfalse = FALSE;
if (self.bfalse == FALSE)
  LOG::LogSuccess(message:"EX.F.2: self.b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.b assign") ;  
end if;

//check string assign
assign self.s = "String";
if (self.s == "String")
  LOG::LogSuccess(message:"EX.F.2: self.s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2: self.s assign") ;  
end if;

LOG::LogInfo(message:"Finished Expression Test F1 and F2") ;

//generate event to commence Operations test
generate ET13:''Start not test''(tfalse:FALSE, ttrue:TRUE) to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Run F3 through F14 Binary Operations',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e");
INSERT INTO SM_AH
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("cf95098f-4252-ba65-3456-c9b4a1343e0f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'
LOG::LogInfo(message:"Running F3 through F14 Binary Operations") ;

//BEGIN EX.F.3
// boolean and, or, ==, and !=

//and
assign b1 = TRUE;
assign b2 = FALSE;
if (b1 and b2)
  LOG::LogFailure(message:"EX.F.3 boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean and") ;
end if;

// or
if (b1 or b2)
  LOG::LogSuccess(message:"EX.F.3 boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean or") ;
end if;

//==
if (b1 == b2)
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
end if;

//!=
if (b1 != b2)
  LOG::LogSuccess(message:"EX.F.3 boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3 boolean ==") ;
end if;
//END EX.F.3

//BEGIN EX.F.4
// integer + - * / %

// +
assign i1 = 5;
assign i2 = -6;
assign i3 = i1 + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4 integer +") ;
else
  LOG::LogFailure(message:"EX.F.4 integer +") ;
end if;
//- 
assign i4 = i1 - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4 integer -") ;
else
  LOG::LogFailure(message:"EX.F.4 integer -") ;
end if;
// *
assign i5 = i1*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4 integer *") ;
else
  LOG::LogFailure(message:"EX.F.4 integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/i1;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4 integer /") ;
else
  LOG::LogFailure(message:"EX.F.4 integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%i1;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4 integer %") ;
else
  LOG::LogFailure(message:"EX.F.4 integer %") ;
end if;
//END EX.F.4

//BEGIN EX.F.5
// integer  < <= == != >= >

assign j1 = 12;
assign j2 = 6;
assign j3 = 6;
// <
if (j2 < j1)
  LOG::LogSuccess(message:"EX.F.5 integer <") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <") ;
end if;
// <=
if (j2 <= j3)
  LOG::LogSuccess(message:"EX.F.5 integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer <=") ;
end if;
//==
if (j2 == j3)
  LOG::LogSuccess(message:"EX.F.5 integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5 integer ==") ;
end if;
//!=
if (j2 != j1)
  LOG::LogSuccess(message:"EX.F.5 integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer !=") ;
end if;
//>=
if (j1 >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >=") ;
end if;
//>
if (j1 > j2)
  LOG::LogSuccess(message:"EX.F.5 integer >") ;
else
  LOG::LogFailure(message:"EX.F.5 integer >") ;
end if;
//END EX.F.5

//BEGIN EX.F.6
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = i1 + r1;
LOG::LogReal(r:r3,message:"EX.F.6 int real + : r should be -1.0") ;

//- 
assign r4 = i1 - r1;
LOG::LogReal(r:r4,message:"EX.F.6 int real - : r should be 11.0") ;

// *
assign r5 = i1*r1;
LOG::LogReal(r:r5,message:"EX.F.6 int real * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = i10/r2;
LOG::LogReal(r:r6,message:"EX.F.6 int real / : r should be 2.0") ;

//END EX.F.6

//BEGIN EX.F.7
//  < <= == != >= > int as left operand, real as right, and bool result

assign k1 = 12;
assign s1 = 6.0;
assign s2 = 12.0;
assign k2 = 6;

// <
if (k2 < s2)
  LOG::LogSuccess(message:"EX.F.7 int real <") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <") ;
end if;

// <=
if (k2 <= s1)
  LOG::LogSuccess(message:"EX.F.7 int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real <=") ;
end if;

//==
if (k2 == s1)
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7 int real ==") ;
end if;

//!=
if (k1 != s1)
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7 int real !=") ;
end if;

//>=
if (k1 >= s1)
  LOG::LogSuccess(message:"EX.F.7 int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (k1 > s1)
  LOG::LogSuccess(message:"EX.F.7 int real >") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >") ;
end if;
//END EX.F.7

//BEGIN EX.F.8
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign i1 = 5;
assign r1 = -6.0;
assign r3 = r1 + i1;
LOG::LogReal(r:r3,message:"EX.F.8 real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - i1;
LOG::LogReal(r:r4,message:"EX.F.8 real int - : r should be -11.0") ;

// *
assign r5 = r1*i1;
LOG::LogReal(r:r5,message:"EX.F.8 real int * : r should be -30.0") ;

// /
assign i10 = 4;
assign r2 = 2.0;
assign r6 = r2/i10;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8

//BEGIN EX.F.9
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign k1 = 6;
assign k2 = 12;
assign s2 = 6.0;

// <
if (s2 < k2)
  LOG::LogSuccess(message:"EX.F.9 real int <") ;
else
  LOG::LogFailure(message:"EX.F.9 real int <") ;
end if;

// <=
if (s1 <= k2)
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9 real int <=") ;
end if;

//==
if (s2 == k1)
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9 real int ==") ;
end if;

//!=
if (s1 != k1)
  LOG::LogSuccess(message:"EX.F.9 real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int !=") ;
end if;

//>=
if (s1 >= k1)
  LOG::LogSuccess(message:"EX.F.9 real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >=") ;
end if;

//>
if (s1 > k1)
  LOG::LogSuccess(message:"EX.F.9 real int >") ;
else
  LOG::LogFailure(message:"EX.F.9 real int >") ;
end if;

//END EX.F.9

//BEGIN EX.F.10
// real + - * / 

// +
assign r1 = 5.0;
assign r2 = -6.0;
assign r3 = r1 + r2;
LOG::LogReal(r:r3,message:"EX.F.10 real real + : r should be -1.0") ;

//- 
assign r4 = r1 - r2;
LOG::LogReal(r:r4,message:"EX.F.10 real real - : r should be 11.0") ;

// *
assign r5 = r1*r2;
LOG::LogReal(r:r5,message:"EX.F.10 real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/r1;
LOG::LogReal(r:r7,message:"EX.F.10 real real / : r should be 2.0") ;

//END EX.F.10


//BEGIN EX.F.11
// real  < <= == != >= >

assign r1 = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
// <
if (r2 < r1)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11 real <") ;
end if;
// <=
if (r2 <= r1)
  LOG::LogSuccess(message:"EX.F.11 real <=") ;
else
  LOG::LogFailure(message:"EX.F.11 real <=") ;
end if;
//==
if (r2 == r3)
  LOG::LogInfo(message:"EX.F.11 real ==") ;
else
  LOG::LogInfo(message:"EX.F.11 real ==") ;
end if;
//!=
if (r2 != r1)
  LOG::LogSuccess(message:"EX.F.11 real !=") ;
else
  LOG::LogFailure(message:"EX.F.11 real !=") ;
end if;
//>=
if (r1 >= r2)
  LOG::LogSuccess(message:"EX.F.11 real >=") ;
else
  LOG::LogFailure(message:"EX.F.11 real >=") ;
end if;
//>
if (r1 > r2)
  LOG::LogSuccess(message:"EX.F.11 real >") ;
else
  LOG::LogFailure(message:"EX.F.11 real >") ;
end if;
//END EX.F.11

//BEGIN EX.F.12
// string string +
assign str1 = "Hello";
assign str2 = "World";
assign str3 = str1+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12 string +") ;
else
  LOG::LogFailure(message:"EX.F.12 string +") ;
end if;
//END EX.F.12

//BEGIN EX.F.13
//string < <= == != >= >
assign str1 = "a";
assign str2 = "b";
assign str3 = "b";
// <
if (str1 < str2)
  LOG::LogSuccess(message:"EX.F.13 string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (str2 <= str3)
  LOG::LogSuccess(message:"EX.F.13 string <=") ;
else
  LOG::LogFailure(message:"EX.F.13 string <=") ;
end if;
// ==
if (str3 == str2)
  LOG::LogSuccess(message:"EX.F.13 string ==") ;
else
  LOG::LogFailure(message:"EX.F.13 string ==") ;
end if;
// !=
if (str3 != str1)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13 string !=") ;
end if;
// >=
if (str3 >= str1)
  LOG::LogSuccess(message:"EX.F.13 string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str3 > str1)
  LOG::LogSuccess(message:"EX.F.13 string >") ;
else
  LOG::LogFailure(message:"EX.F.13 string >") ;
end if;
if (str3 < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13 string < quoted") ;
end if;
//END EX.F.13

//BEGIN EX.F.14
// unique_id == !=
assign u = self.et_id;
if (u == self.et_id)
  LOG::LogSuccess(message:"EX.F.14 unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14 unique ==") ;
end if;

select any oi from instances of OI;
if (self.u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14 unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14 unique !=") ;
end if;
//END EX.F.14

LOG::LogInfo(message:"Finished F3 through F14 Binary Operations") ;

generate ET3:''Run F15 Values''(b:TRUE) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Run F15 values',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d");
INSERT INTO SM_AH
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("9fa007f1-541d-0bc4-3c0f-4aa0d489a4a2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'// Test all of the data items.
// Data items can be literals, object attributes, received event data items, 
// and transient variables.

LOG::LogInfo(message:"Running F15 values") ;

// Literals and Transient

assign str1 = "Hello";
if (str1 == "Hello")
  LOG::LogSuccess(message:"EX.F.15 left transient, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left transient, right literal") ;
end if;

if ("Hello" == str1)
  LOG::LogSuccess(message:"EX.F.15 left literal, right transient") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right transient") ;
end if;

// Object Attributes

assign self.i = 23;
if (self.i  == 23)
  LOG::LogSuccess(message:"EX.F.15 left self.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left self.attr, right literal") ;
end if;

if (23== self.i)
  LOG::LogSuccess(message:"EX.F.15 left literal, right self.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right self.attr") ;
end if;

create object instance ao of AO;
assign ao.b = FALSE;
if (ao.b == FALSE)
  LOG::LogSuccess(message:"EX.F.15 left other.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;
if (FALSE == ao.b)
  LOG::LogSuccess(message:"EX.F.15 left literal, right other.attr") ;
else 
  LOG::LogFailure(message:"EX.F.15 left literal, right other.attr") ;
end if;

// Received Event 
if (rcvd_evt.b == TRUE)
  LOG::LogSuccess(message:"EX.F.15 left rcvd_evt.attr, right literal") ;
else 
  LOG::LogFailure(message:"EX.F.15 left other.attr, right literal") ;
end if;

if (TRUE == rcvd_evt.b )
  LOG::LogSuccess(message:"EX.F.15  left literal, right rcvd_evt.attr") ;
else 
 LOG::LogFailure(message:"EX.F.15  left literal, right rcvd_evt.attr") ; 
end if;

// Use id attr as an rval
assign this_id = self.et_id;

// use ref attr as an rval
create object instance my_etob of ETOB;
assign my_etob.etob_id = 2;
relate self to my_etob across R1;
assign my_etob_id = self.etob_id * 100;

// use transient from select as an rval
create object instance of ETOB;
select many etobs from instances of ETOB;
for each e_etob in etobs
  assign my_etob = e_etob;
end for;


LOG::LogInfo(message:"Finished F15 values") ;

assign self.i=42;
assign self.r=3.14;
assign self.bfalse=TRUE;
assign self.s="Hello";
generate ET4:''Run F16 Transformers''(i:self.i, r:self.r, b:self.bfalse,s:self.s,u:self.u) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Run F16 Transformers',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60");
INSERT INTO SM_AH
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("cdd13c86-54db-7f68-6857-5ca99f29f6ba",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'
LOG::LogInfo(message:"Running F16 Transformers") ;

// assign predetermined return values.  These will be the values that the coded 
// transforms use as return vals.

assign i_parm_ret_i_val = 42;
assign self.i = i_parm_ret_i_val;
assign r_parm_ret_r_val = 3.14;
assign b_parm_ret_b_val = TRUE;
assign s_parm_ret_s_val = "Hello";
assign u_parm_ret_u_val = rcvd_evt.u; //self.et_id
 
create object instance ao of AO;
assign ao.b = TRUE;

// no_parm_ret_void 
transform ET::no_parm_ret_void();

// i_parm_ret_void
transform ET::i_parm_ret_void(i:self.i);

// i_parm_ret_i
// use sefl.attr as parameter
transform i1 =  ET::i_parm_ret_i(i:self.i);
if (i1 == i_parm_ret_i_val )
  LOG::LogSuccess(message:"EX.F.16 i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 i_parm_ret_i") ;
end if;

// r_parm_ret_r
// use transient as parameter
assign r1 = 3.14;
transform r2 =  ET::r_parm_ret_r(r:r1);
LOG::LogReal(r:r2,message:"EX.F.16: r_parm_ret_r - r should be 3.14");

// b_parm_ret_b
// use attr of other object as parameter
transform b1 =  ET::b_parm_ret_b(b:ao.b);
if (b1 == b_parm_ret_b_val )
  LOG::LogSuccess(message:"EX.F.16 b_parm_ret_b") ;
else 
  LOG::LogFailure(message:"EX.F.16 b_parm_ret_b") ;
end if;

// s_parm_ret_s
// use literal as parm
transform s1 =  ET::s_parm_ret_s(s:"Hello");
if (s1 == s_parm_ret_s_val )
  LOG::LogSuccess(message:"EX.F.16 s_parm_ret_s") ;
else 
  LOG::LogFailure(message:"EX.F.16 s_parm_ret_s") ;
end if;

// u_parm_ret_u
// use received event as parm
transform u1 =  ET::u_parm_ret_u(u:rcvd_evt.u);
if (u1 == u_parm_ret_u_val )
  LOG::LogSuccess(message:"EX.F.16 u_parm_ret_u") ;
else 
  LOG::LogFailure(message:"EX.F.16 u_parm_ret_u") ;
end if;

// d_parm_ret_d

bridge d1 = TIM::create_date(second:30,minute:56,hour:19,day:3,month:1,year:1966);
LOG::LogDate(d:d1,message:"EX.F.16 d_parm_ret_d - d initial value");

bridge t1 = TIM::current_clock();
LOG::LogTime(t:t1,message:"EX.F.16 t_parm_ret_t - t initial value");


transform d2 = ET::d_parm_ret_d(d:d1);
LOG::LogDate(d:d2,message:"EX.F.16 d_parm_ret_d - d ret value");

// t_parm_ret_t

transform t2 = ET::t_parm_ret_t(t:t1);
LOG::LogTime(t:t2,message:"EX.F.16 t_parm_ret_t - t ret value");

// run a simple transform of another object
transform i3 = AO::i_parm_ret_i(i:24);

if (i3 == 24 )
  LOG::LogSuccess(message:"EX.F.16 other obj i_parm_ret_i") ;
else 
  LOG::LogFailure(message:"EX.F.16 other obj i_parm_ret_i") ;
end if;

LOG::LogInfo(message:"Finished F16 Transformers") ;

generate ET5:''Run F17 Timestamp and F18 Date Operators''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Shutting Down',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82");
INSERT INTO SM_AH
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ff6f1b48-36d8-488e-f7ea-8a35c8743cbe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"a1test_exconfig Expression Test Complete") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
',
	'');
INSERT INTO SM_STATE
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Runnning F17 Timestamp and F18 Date Operators',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("364da495-bb86-2167-9bb5-cfd1580e2c98",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"364da495-bb86-2167-9bb5-cfd1580e2c98");
INSERT INTO SM_AH
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("784504ea-ab07-1eac-c5e9-37e4a4b84356",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'
// BEGIN EX.F.17

bridge t1 = TIM::current_clock();

LOG::LogInfo(message:"Starting EX.F.17 and EX.F.18 Test") ;

assign t3 = t1;

transform ET::waitOneSec();
bridge t2 = TIM::current_clock();

if (t1== t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp == timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp == timestamp") ;
end if;

if (t1!= t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp != timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp != timestamp") ;
end if;

if (t1<  t2)
  LOG::LogSuccess(message:"EX.F.17: timestamp < timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp < timestamp") ;
end if;

if (t1<= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp <= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp <= timestamp") ;
end if;

if (t2 > t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp > timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp > timestamp") ;
end if;

if (t1>= t3)
  LOG::LogSuccess(message:"EX.F.17: timestamp >= timestamp") ;
else
  LOG::LogFailure(message:"EX.F.17: timestamp >= timestamp") ;
end if;

// END EX.F.17

// BEGIN EX.F.18

LOG::LogInfo(message:"Starting EX.F.18 Testing Date operators") ;


bridge d1 = TIM::current_date();
assign d4 = d1;
bridge d2 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1910);
bridge d3 = TIM::create_date(second:10,minute:10,hour:10,day:10,month:10,year:1911);

if (d1== d4)
  LOG::LogSuccess(message:"EX.F.18: date == date") ;
else
  LOG::LogFailure(message:"EX.F.18: date == date") ;
end if;

if (d2 != d3)
  LOG::LogSuccess(message:"EX.F.18: date != date") ;
else
  LOG::LogFailure(message:"EX.F.18: date != date") ;
end if;

if (d3<  d1)
  LOG::LogSuccess(message:"EX.F.18: date < date") ;
else
  LOG::LogFailure(message:"EX.F.18: date < date") ;
end if;

if (d1<= d4)
  LOG::LogSuccess(message:"EX.F.18: date <= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date <= date") ;
end if;

if (d1> d2)
  LOG::LogSuccess(message:"EX.F.18: date > date") ;
else
  LOG::LogFailure(message:"EX.F.18: date > date") ;
end if;

if (d1>= d4)
  LOG::LogSuccess(message:"EX.F.18: date >= date") ;
else
  LOG::LogFailure(message:"EX.F.18: date >= date") ;
end if;

LOG::LogInfo(message:"Test EX.F.17 and EX.F.18 complete") ;
generate ET6:''Run F1 and F2 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Running F1 and F2 for User Defined Types',
	7,
	0);
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d4ff2114-0b19-0230-b090-1a1b336e6257",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"d4ff2114-0b19-0230-b090-1a1b336e6257");
INSERT INTO SM_AH
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("262cf679-02e3-a7ce-b418-7f8e0211e719",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'
LOG::LogInfo(message:"Expression Test F1 and F2 for User Defined Types") ;

//BEGIN EX.F.1_UDT
//check defaults

if (self.my_b != FALSE)
  LOG::LogFailure(message:"EX.F.1_UDT: my_b default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: my_b default") ;
end if;

if (self.my_i != 0)
  LOG::LogFailure(message:"EX.F.1_UDT: i default") ;
else 
   LOG::LogSuccess(message:"EX.F.1_UDT: i default") ; 
end if;
LOG::LogReal(r:self.r,message:"EX.F.1_UDT: r default");

if (self.my_s != "")
  LOG::LogFailure(message:"EX.F.1_UDT: s default") ;
else
  LOG::LogSuccess(message:"EX.F.1_UDT: s default") ;
end if;

//END EX.F.1_UDT

//BEGIN EX.F.2_UDT
//check integer assign

assign self.my_i = 10;
if (self.my_i == 10)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_i assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_i assign") ;  
end if;

//check real assign
assign self.my_r = 3.14;
LOG::LogReal(r:3.14,message:"EX.F.2_UDT: my_r assigned to") ;
LOG::LogReal(r:self.my_r,message:"EX.F.2_UDT: my_r assigned is");

//check bool assign
assign self.my_b = TRUE;
if (self.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_b assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_b assign") ;  
end if;

//check string assign
assign self.my_s = "String";
if (self.my_s == "String")
  LOG::LogSuccess(message:"EX.F.2_UDT: self.my_s assign") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: self.my_s assign") ;  
end if;

// check unary not
assign self.my_b = FALSE;
if (not self.my_b)
  LOG::LogSuccess(message:"EX.F.2_UDT: unary not") ;  
else
  LOG::LogFailure(message:"EX.F.2_UDT: unary not") ;  
end if;  

LOG::LogInfo(message:"Finished F1 and F2 for User Defined Types") ;


//generate event to commence Binary Operations test
generate ET7:''Run F3 through F14 for User Defined Types''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Running F3 through F14 for User Defined Types',
	8,
	0);
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11");
INSERT INTO SM_AH
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("7d77c1bc-3502-17f9-db93-6a04522cbc13",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Running F3 through F14 for User Defined Types") ;

//BEGIN EX.F.3_UDT
// boolean and, or, ==, and !=

//and
assign self.my_b = TRUE;
assign b2 = FALSE;
if (self.my_b and b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean and") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean and") ;
end if;

// or
if (self.my_b or b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean or") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean or") ;
end if;

//==
if (self.my_b == b2)
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
end if;

//!=
if (self.my_b != b2)
  LOG::LogSuccess(message:"EX.F.3_UDT boolean ==") ;
else
  LOG::LogFailure(message:"EX.F.3_UDT boolean ==") ;
end if;
//END EX.F.3_UDT

//BEGIN EX.F.4_UDT
// integer + - * / %

// +
assign self.my_i = 5;
assign i2 = -6;
assign i3 = self.my_i + i2;
if (i3 == -1)
  LOG::LogSuccess(message:"EX.F.4_UDT integer +") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer +") ;
end if;
//- 
assign i4 = self.my_i - i2;
if (i4 == 11)
  LOG::LogSuccess(message:"EX.F.4_UDT integer -") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer -") ;
end if;
// *
assign i5 = self.my_i*i2;
if (i5 == -30)
  LOG::LogSuccess(message:"EX.F.4_UDT integer *") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer *") ;
end if;
// /
assign i6 = 10;
assign i7 = i6/self.my_i;
if (i7 == 2)
  LOG::LogSuccess(message:"EX.F.4_UDT integer /") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer /") ;
end if;
// %
assign i8 = 13;
assign i9 = i8%self.my_i;
if (i9 == 3)
  LOG::LogSuccess(message:"EX.F.4_UDT integer %") ;
else
  LOG::LogFailure(message:"EX.F.4_UDT integer %") ;
end if;
//END EX.F.4_UDT

//BEGIN EX.F.5_UDT
// integer  < <= == != >= >

assign self.my_i = 12;
assign j2 = 6;
assign j3 = 12;
// <
if (j2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <") ;
end if;
// <=
if (j2 <= self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer <=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer <=") ;
end if;
//==
if (self.my_i == j3)
  LOG::LogSuccess(message:"EX.F.5_UDT integer ==") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer ==") ;
end if;
//!=
if (j2 != self.my_i)
  LOG::LogSuccess(message:"EX.F.5_UDT integer !=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer !=") ;
end if;
//>=
if (self.my_i >= j2)
  LOG::LogSuccess(message:"EX.F.5 integer >=") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >=") ;
end if;
//>
if (self.my_i > j2)
  LOG::LogSuccess(message:"EX.F.5_UDT integer >") ;
else
  LOG::LogFailure(message:"EX.F.5_UDT integer >") ;
end if;
//END EX.F.5_UDT

//BEGIN EX.F.6_UDT
//  + - * /  with int as left operand, real as right operand, and real as result
// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = self.my_i + r1;
LOG::LogReal(r:r3,message:"EX.F.6_UDT int real + : r should be -1.0") ;

//- 
assign r4 = self.my_i - r1;
LOG::LogReal(r:r4,message:"EX.F.6_UDT int real - : r should be 11.0") ;

// *
assign r5 = self.my_i*r1;
LOG::LogReal(r:r5,message:"EX.F.6_UDT int real * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = self.my_i/r2;
LOG::LogReal(r:r6,message:"EX.F.6_UDT int real / : r should be 2.0") ;

//END EX.F.6_UDT

//BEGIN EX.F.7_UDT
//  < <= == != >= > int as left operand, real as right, and bool result

assign s1 = 6.0;
assign s2 = 12.0;
assign self.my_i = 6;

// <
if (self.my_i < s2)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <") ;
end if;

// <=
if (self.my_i <= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real <=") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real <=") ;
end if;

//==
if (self.my_i == s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real ==") ;
end if;

assign self.my_i=12;
//!=
if (self.my_i != s1)
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
else
  LOG::LogInfo(message:"EX.F.7_UDT int real !=") ;
end if;

//>=
if (self.my_i >= s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >=") ;
else
  LOG::LogFailure(message:"EX.F.7 int real >=") ;
end if;
//>
if (self.my_i > s1)
  LOG::LogSuccess(message:"EX.F.7_UDT int real >") ;
else
  LOG::LogFailure(message:"EX.F.7_UDT int real >") ;
end if;
//END EX.F.7_UDT

//BEGIN EX.F.8_UDT
//  + - * /  with real as left operand, int as right operand, and real as result

// +
assign self.my_i = 5;
assign r1 = -6.0;
assign r3 = r1 + self.my_i;
LOG::LogReal(r:r3,message:"EX.F.8_UDT real int  + : r should be -1.0") ;

//- 
assign r4 = r1 - self.my_i;
LOG::LogReal(r:r4,message:"EX.F.8_UDT real int - : r should be -11.0") ;

// *
assign r5 = r1*self.my_i;
LOG::LogReal(r:r5,message:"EX.F.8_UDT real int * : r should be -30.0") ;

// /
assign self.my_i = 4;
assign r2 = 2.0;
assign r6 = r2/self.my_i;
LOG::LogReal(r:r6,message:"EX.F.8 real int  / : r should be 0.5") ;

//END EX.F.8_UDT

//BEGIN EX.F.9_UDT
//  < <= == != >= > real as left operand, int as right, and bool result

assign s1 = 12.0;
assign self.my_i = 12;
assign s2 = 6.0;

// <
if (s2 < self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int <") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int <") ;
end if;

// <=
if (s1 <= self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int <=") ;
end if;

assign self.my_i = 6;

//==
if (s2 == self.my_i)
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
else
  LOG::LogInfo(message:"EX.F.9_UDT real int ==") ;
end if;

//!=
if (s1 != self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int !=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int !=") ;
end if;

//>=
if (s1 >= self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >=") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >=") ;
end if;

//>
if (s1 > self.my_i)
  LOG::LogSuccess(message:"EX.F.9_UDT real int >") ;
else
  LOG::LogFailure(message:"EX.F.9_UDT real int >") ;
end if;

//END EX.F.9_UDT

//BEGIN EX.F.10_UDT
// real + - * / 

// +
assign self.my_r = 5.0;
assign r2 = -6.0;
assign r3 = self.my_r + r2;
LOG::LogReal(r:r3,message:"EX.F.10_UDT real real + : r should be -1.0") ;

//- 
assign r4 = self.my_r - r2;
LOG::LogReal(r:r4,message:"EX.F.10_UDT real real - : r should be 11.0") ;

// *
assign r5 = self.my_r*r2;
LOG::LogReal(r:r5,message:"EX.F.10_UDT real real * : r should be -30.0") ;

// /
assign r6 = 10.0;
assign r7 = r6/self.my_r;
LOG::LogReal(r:r7,message:"EX.F.10_UDT real real / : r should be 2.0") ;

//END EX.F.10_UDT


//BEGIN EX.F.11_UDT
// real  < <= == != >= >

assign self.my_r = 12.0;
assign r2 = 6.0;
assign r3 = 6.0;
assign r4=12.0;
// <
if (r2 < self.my_r)
  LOG::LogSuccess(message:"EX.F.11 real <") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <") ;
end if;
// <=
if (r2 <= self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real <=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real <=") ;
end if;
//==
if (self.my_r == r4)
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
else
  LOG::LogInfo(message:"EX.F.11_UDT real ==") ;
end if;
//!=
if (r2 != self.my_r)
  LOG::LogSuccess(message:"EX.F.11_UDT real !=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real !=") ;
end if;
//>=
if (self.my_r >= r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >=") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >=") ;
end if;
//>
if (self.my_r > r2)
  LOG::LogSuccess(message:"EX.F.11_UDT real >") ;
else
  LOG::LogFailure(message:"EX.F.11_UDT real >") ;
end if;
//END EX.F.11_UDT

//BEGIN EX.F.12_UDT
// string string +
assign self.my_s = "Hello";
assign str2 = "World";
assign str3 = self.my_s+str2;
if (str3 == "HelloWorld")
  LOG::LogSuccess(message:"EX.F.12_UDT string +") ;
else
  LOG::LogFailure(message:"EX.F.12_UDT string +") ;
end if;
//END EX.F.12_UDT

//BEGIN EX.F.13_UDT
//string < <= == != >= >
assign self.my_s = "a";
assign str2 = "b";
assign str3 = "a";
// <
if (self.my_s < str2)
  LOG::LogSuccess(message:"EX.F.13_UDT string <") ;
else
  LOG::LogFailure(message:"EX.F.13 string <") ;
end if;
// <=
if (self.my_s <= str3)
  LOG::LogSuccess(message:"EX.F.13_UDT string <=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string <=") ;
end if;
// ==
if (str3 == self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string ==") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string ==") ;
end if;
// !=
if (str2 != self.my_s)
  LOG::LogSuccess(message:"EX.F.13 string !=") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string !=") ;
end if;
// >=
if (str2 >= self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >=") ;
else
  LOG::LogFailure(message:"EX.F.13 string >=") ;
end if;
// >
if (str2 > self.my_s)
  LOG::LogSuccess(message:"EX.F.13_UDT string >") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string >") ;
end if;
if (self.my_s < "c")
  LOG::LogSuccess(message:"EX.F.13 string < quoted") ;
else
  LOG::LogFailure(message:"EX.F.13_UDT string < quoted") ;
end if;
//END EX.F.13_UDT

//BEGIN EX.F.14_UDT
// unique_id == !=
assign self.my_u = self.u;
if (self.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.14_UDT unique ==") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique ==") ;
end if;

select any oi from instances of OI;
if (self.my_u != oi.oi_id)
  LOG::LogSuccess(message:"EX.F.14_UDT unique !=") ;
else
  LOG::LogFailure(message:"EX.F.14_UDT unique !=") ;
end if;
//END EX.F.14_UDT

LOG::LogInfo(message:"Finished F3 through F14 for User Defined Types") ;

generate ET8:''Run F15 for User Defined Types''(my_b:TRUE,my_i:42,my_r:3.14,my_s:"Hello",my_u:self.u) to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Running F15 for User Defined Types',
	9,
	0);
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8");
INSERT INTO SM_AH
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("8d3d1fba-de33-a5f4-13c7-ca1fbe6e5091",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Running F15 for User Defined Types") ;

// Received Event 
if (rcvd_evt.my_b == TRUE)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_b") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_b") ;
end if;

if (rcvd_evt.my_i == 42)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_i") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_i") ;
end if;

LOG::LogReal(message:"EX.F.15_UDT rcvd_evt.attr r",r:rcvd_evt.my_r) ; 

if (rcvd_evt.my_s == "Hello")
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_s") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_s") ;
end if;

if (rcvd_evt.my_u == self.u)
  LOG::LogSuccess(message:"EX.F.15_UDT  rcvd_evt.attr my_u") ;
else 
  LOG::LogFailure(message:"EX.F.15_UDT rcvd_evt.attr my_u") ;
end if;

generate ET9:''Shut Down''() to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing empty operator',
	10,
	0);
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f1f4d914-105b-53ad-b3c3-202de165f703",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"f1f4d914-105b-53ad-b3c3-202de165f703");
INSERT INTO SM_AH
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("0d33209d-819b-d9d4-c071-879715aa4ad5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting Expression Test empty operator") ;

//empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = empty saf0;
if (t1 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (true)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = empty saf1;
if (t2 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any from (false)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = empty smf0;
if (t3 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (true)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = empty smf1;
if ( t4 == FALSE )
  LOG::LogSuccess(message:"EX.F.2: empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty many from (false)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = empty sar0;
if (t5 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (true)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = empty sar1;
if (t6 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty any related (false)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = empty sor0;
if (t7 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = empty sor1;
if (t8 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = empty smr0;
if (t9 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (true)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = empty smr1;
if (t10 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: empty one related (false)") ;  
end if;

//generate event to commence next test
generate ET10:''Start not_empty test''() to self;',
	'');
INSERT INTO SM_STATE
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing not_empty operator',
	11,
	0);
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("cad87477-03ab-6030-c3f3-0ca0252ba153",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"cad87477-03ab-6030-c3f3-0ca0252ba153");
INSERT INTO SM_AH
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("074f9794-c854-36f8-7fbe-953d45cd09da",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not_empty operator") ;

//not_empty operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = not_empty saf0;
if (t1 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (false)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = not_empty saf1;
if (t2 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any from (true)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = not_empty smf0;
if (t3 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (false)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = not_empty smf1;
if ( t4 == TRUE )
  LOG::LogSuccess(message:"EX.F.2: not_empty many from (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty many from (true)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = not_empty sar0;
if (t5 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (false)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = not_empty sar1;
if (t6 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty any related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty any related (true)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = not_empty sor0;
if (t7 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = not_empty sor1;
if (t8 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = not_empty smr0;
if (t9 == FALSE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (false)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (false)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = not_empty smr1;
if (t10 == TRUE)
  LOG::LogSuccess(message:"EX.F.2: not_empty one related (true)") ;  
else
  LOG::LogFailure(message:"EX.F.2: not_empty one related (true)") ;  
end if;

//generate event to commence next test
generate ET11:''Start cardinality test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing cardinality operator',
	12,
	0);
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed");
INSERT INTO SM_AH
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ddc29b70-eecb-11e9-eb31-a98dd7dfef2d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting Expression Test cardinality operator") ;

// cardinality operation
  // local existing (saf)
    // inst_ref(Object)
select any saf0 from instances of NOI;
assign t1 = cardinality saf0;
if (t1 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (0)") ;  
end if;

select any saf1 from instances of OI;
assign t2 = cardinality saf1;
if (t2 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any from (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any from (1)") ;  
end if;

  // local existing (smf)
    // inst_ref_set(Object)
select many smf0 from instances of NOI;
assign t3 = cardinality smf0;
if (t3 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (0)") ;  
end if;

select many smf1 from instances of MI;
assign t4 = cardinality smf1;
if ( t4 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality many from (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality many from (2)") ;  
end if;


  // local existing (sar)
    // inst_ref(Object)
select any sar0 related by self->NOI[R2];
assign t5 = cardinality sar0;
if (t5 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (0)") ;  
end if;

select any sar1 related by self->MI[R4];
assign t6 = cardinality sar1;
if (t6 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality any related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality any related (1)") ;  
end if;

  // local existing (sor)
    // inst_ref(Object)
select one sor0 related by self->NOI[R5];
assign t7 = cardinality sor0;
if (t7 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select one sor1 related by self->OI[R3];
assign t8 = cardinality sor1;
if (t8 == 1)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (1)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (1)") ;  
end if;

  // local existing (smr)
    // inst_ref_set(Object)
select many smr0 related by self->NOI[R2];
assign t9 = cardinality smr0;
if (t9 == 0)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (0)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (0)") ;  
end if;

select many smr1 related by self->MI[R4];
assign t10 = cardinality smr1;
if (t10 == 2)
  LOG::LogSuccess(message:"EX.F.2: cardinality one related (2)") ;  
else
  LOG::LogFailure(message:"EX.F.2: cardinality one related (2)") ;  
end if;

// generate event to commence next test
generate ET14:''Start subtract test''( tint1:17, tint2:13, treal1:2.781828, treal2:11.2) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing not operator',
	13,
	0);
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("43175404-e206-cc41-a98d-aeb8192090da",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"43175404-e206-cc41-a98d-aeb8192090da");
INSERT INTO SM_AH
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("a29fdda1-5cd2-d79e-2a19-8384dff593e4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting Expression Test not operator") ;

//not operation
  // local existing 
assign tfalse = false;
assign ttrue = true;
assign t1 = not tfalse;
if (t1 == TRUE)
  LOG::LogSuccess(message:"not local existing (true)") ;  
else
  LOG::LogFailure(message:"not local existing (true)") ;  
end if;

assign t2 = not ttrue;
if (t2 == FALSE)
  LOG::LogSuccess(message:"not local existing (false)") ;
else
  LOG::LogFailure(message:"not local existing (false)") ;
end if;

  // rcvd_evt
assign t3 = not rcvd_evt.tfalse;
if (t3 == TRUE)
  LOG::LogSuccess(message:"not rcvd_evt (true)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (true)") ;
end if;  
 
assign t4 = not rcvd_evt.ttrue;
if (t4 == FALSE)
  LOG::LogSuccess(message:"not rcvd_evt (false)") ;
else
  LOG::LogFailure(message:"not rcvd_evt (false)") ;
end if;
 
  // constant 
assign t5 = not FALSE;
if (t5 == TRUE)
  LOG::LogSuccess(message:"not constant (true)") ;
else
  LOG::LogFailure(message:"not constant (true)") ;
end if;  
 
assign t6 = not TRUE;
if (t6 == FALSE)
  LOG::LogSuccess(message:"not constant (false)") ;
else
  LOG::LogFailure(message:"not constant (false)") ;
end if;
 
  // self.attribute
assign t7 = not self.bfalse;
if (t7 == TRUE)
  LOG::LogSuccess(message:"not self.attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.attribute (true)") ;
end if; 
 
assign t8 = not self.btrue;
if (t8 == FALSE)
  LOG::LogSuccess(message:"not self.attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.attribute (false)") ;
end if;
 
  // self.referential attribute
assign t9 = not self.r1bfalse;
if (t9 == TRUE)
  LOG::LogSuccess(message:"not self.referential attribute (true)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (true)") ;
end if; 
 
assign t10 = not self.r1btrue;
if (t10 == FALSE)
  LOG::LogSuccess(message:"not self.referential attribute (false)") ;
else 
  LOG::LogFailure(message:"not self.referential attribute (false)") ;
end if;

  // other.attribute (saf)
select any saf1 from instances of ETOB;
assign t11 = not saf1.bfalse;
if (t11 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (true)") ;
end if;
 
assign t12 = not saf1.btrue;
if (t12 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (saf) (false)") ;
end if;
 
  // other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  assign t13 = not smf.bfalse;
  if (t13 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (true)") ;
  end if;
 
  assign t14 = not smf.btrue;
  if (t14 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smf) (false)") ;
  end if;
end for;
 
  // other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t15 = not sar1.bfalse;
if (t15 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (true)") ;
end if;
 
assign t16 = not sar1.btrue;
if (t16 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sar) (false)") ;
end if;

  // other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t17 = not sor1.bfalse;
if (t17 == TRUE)
  LOG::LogSuccess(message:"not other.attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (true)") ;
end if;
 
assign t18 = not sor1.btrue;
if (t18 == FALSE)
  LOG::LogSuccess(message:"not other.attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.attribute (sor) (false)") ;
end if;


  // other.attribute (smr)
select many smr1 from instances of ETOB;
for each smr in smr1
  assign t19 = not smr.bfalse;
  if (t19 == TRUE)
    LOG::LogSuccess(message:"not other.attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (true)") ;
  end if;
 
  assign t20 = not smr.btrue;
  if (t20 == FALSE)
    LOG::LogSuccess(message:"not other.attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.attribute (smr) (false)") ;
  end if;
end for;

  // other.referential attribute (saf)
assign t21 = not saf1.r6bfalse;
if (t21 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (true)") ;
end if;
 
assign t22 = not saf1.r6btrue;
if (t22 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (saf) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (saf) (false)") ;
end if;
 
  // other.referential attribute (smf)
for each smf in smf1
  assign t23 = not smf.r6bfalse;
  if (t23 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (true)") ;
  end if;
 
  assign t24 = not smf.r6btrue;
  if (t24 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smf) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smf) (false)") ;
  end if;
end for;

  // other.referential attribute (sar)
assign t25 = not sar1.r6bfalse;
if (t25 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (true)") ;
end if;
 
assign t26 = not sar1.r6btrue;
if (t26 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sar) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sar) (false)") ;
end if;

  // other.referential attribute (sor)
assign t27 = not sor1.r6bfalse;
if (t27 == TRUE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (true)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (true)") ;
end if;
 
assign t28 = not sor1.r6btrue;
if (t28 == FALSE)
  LOG::LogSuccess(message:"not other.referential attribute (sor) (false)") ;
else
  LOG::LogFailure(message:"not other.referential attribute (sor) (false)") ;
end if;

  // other.referential attribute (smr)
for each smr in smr1
  assign t29 = not smr.r6bfalse;
  if (t29 == TRUE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (true)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (true)") ;
  end if;
 
  assign t30 = not smr.r6btrue;
  if (t30 == FALSE)
    LOG::LogSuccess(message:"not other.referential attribute (smr) (false)") ;
  else
    LOG::LogFailure(message:"not other.referential attribute (smr) (false)") ;
  end if;
end for;

 
LOG::LogInfo(message:"Finished Expression Test not operator") ;

//generate event to commence next test
generate ET12:''Start empty test''() to self;
',
	'');
INSERT INTO SM_STATE
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing subtraction operator',
	14,
	0);
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2");
INSERT INTO SM_AH
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("9a4d225a-f77a-10c1-490a-4b9ecd091fb6",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting subtract test") ;
select any event_instance from instances of EV;
//subtraction (-) operation
// perform each test combination with the following types:
     // integer integer
     // integer real
     // real integer
     // real real

  // local existing    local existing
assign temp1 = 13;
assign temp2 = 7;
assign temp3 = 2.4;
assign temp4 = 23.7;
assign t1 = temp1 - temp2 ;
if ( t1 == 6 )
  LOG::LogSuccess(message:" subtract local_existing local_existing ( 6 )") ;
else
  LOG::LogFailure(message:" subtract local_existing local_existing ( 6 )") ;
end if;
 
assign t2 = temp1 - temp3 ;
LOG::LogReal(r: t2 , message:" subtract local_existing local_existing ( 10.6 )") ;
 
assign t3 = temp3 - temp2 ;
LOG::LogReal(r: t3 , message:" subtract local_existing local_existing ( -4.6 )") ;
 
assign t4 = temp4 - temp3 ;
LOG::LogReal(r: t4 , message:" subtract local_existing local_existing ( 21.3 )") ;
 
  // local existing    rcvd_evt
// assume
// rcvd_evt.tint1 = 17
// rcvd_evt.treal1 = 2.781828
assign t5 = temp1 - rcvd_evt.tint1 ;
if ( t5 == -4 )
  LOG::LogSuccess(message:" subtract local_existing rcvd_evt ( -4 )") ;
else
  LOG::LogFailure(message:" subtract local_existing rcvd_evt ( -4 )") ;
end if;
 
assign t6 = temp1 - rcvd_evt.treal1 ;
LOG::LogReal(r: t6 , message:" subtract local_existing rcvd_evt ( 10.218172 )") ;
 
assign t7 = temp3 - rcvd_evt.tint1 ;
LOG::LogReal(r: t7 , message:" subtract local_existing rcvd_evt ( -14.6 )") ;
 
assign t8 = temp4 - rcvd_evt.treal1 ;
LOG::LogReal(r: t8 , message:" subtract local_existing rcvd_evt ( 20.918172 )") ;
 
  // local existing    constant
assign t9 = temp1 - 3 ;
if ( t9 == 10 )
  LOG::LogSuccess(message:" subtract local_existing constant ( 10 )") ;
else
  LOG::LogFailure(message:" subtract local_existing constant ( 10 )") ;
end if;
 
assign t10 = temp1 - 3.14 ;
LOG::LogReal(r: t10 , message:" subtract local_existing constant ( 9.86 )") ;
 
assign t11 = temp3 - 5.6 ;
LOG::LogReal(r: t11 , message:" subtract local_existing constant ( -3.2 )") ;
 
assign t12 = temp4 - 16.9 ;
LOG::LogReal(r: t12 , message:" subtract local_existing constant ( 6.8 )") ;
 
  // local existing    self.attribute
// assume self.i = 10
// assume self.r = 3.14
assign t13 = temp1 - self.i ;
if ( t13 == 3 )
  LOG::LogSuccess(message:" subtract local_existing self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.attribute ( 3 )") ;
end if;
 
assign t14 = temp1 - self.r ;
LOG::LogReal(r: t14 , message:" subtract local_existing self.attribute ( 9.86 )") ;
 
assign t15 = temp3 - self.i ;
LOG::LogReal(r: t15 , message:" subtract local_existing self.attribute ( -7.6 )") ;
 
assign t16 = temp4 - self.r ;
LOG::LogReal(r: t16 , message:" subtract local_existing self.attribute ( 20.56 )") ;
 
  // local existing    self.referential attribute
assign t17 = temp1 - self.etob_id ;
if ( t17 == 11 )
  LOG::LogSuccess(message:" subtract local_existing self.referential_attribute ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing self.referential_attribute ( 11 )") ;
end if;
 
assign t18 = temp1 - self.r1r ;
LOG::LogReal(r: t18 , message:" subtract local_existing self.referential_attribute ( 10.8282 )") ;
 
assign t19 = temp3 - self.etob_id ;
LOG::LogReal(r: t19 , message:" subtract local_existing self.referential_attribute ( 0.4 )") ;
 
assign t20 = temp4 - self.r1r ;
LOG::LogReal(r: t20 , message:" subtract local_existing self.referential_attribute ( 21.5282 )") ;
 
  // local existing    other.attribute (saf)
select any saf1 from instances of ETOB;
assign t21 = temp1 - saf1.etob_id ;
if ( t21 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(saf) ( 11 )") ;
end if;
 
assign t22 = temp1 - saf1.r ;
LOG::LogReal(r: t22 , message:" subtract local_existing other.attribute(saf) ( 10.8282 )") ;
 
assign t23 = temp3 - saf1.etob_id ;
LOG::LogReal(r: t23 , message:" subtract local_existing other.attribute(saf) ( 0.4 )") ;
 
assign t24 = temp4 - saf1.r ;
LOG::LogReal(r: t24 , message:" subtract local_existing other.attribute(saf) ( 21.5282 )") ;
 
  // local existing    other.attribute (smf)
select many smf1 from instances of ETOB;
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t25 = temp1 - smf.etob_id ;
if ( t25 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smf) ( 11 )") ;
end if;
 
assign t26 = temp1 - smf.r ;
LOG::LogReal(r: t26 , message:" subtract local_existing other.attribute(smf) ( 10.8282 )") ;
 
assign t27 = temp3 - smf.etob_id ;
LOG::LogReal(r: t27 , message:" subtract local_existing other.attribute(smf) ( 0.4 )") ;
 
assign t28 = temp4 - smf.r ;
LOG::LogReal(r: t28 , message:" subtract local_existing other.attribute(smf) ( 21.5282 )") ;
 
  // only do this once
  end if;
end for;
  // local existing    other.attribute (sor)
select one sor1 related by self->ETOB[R1];
assign t29 = temp1 - sor1.etob_id ;
if ( t29 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sor) ( 11 )") ;
end if;
 
assign t30 = temp1 - sor1.r ;
LOG::LogReal(r: t30 , message:" subtract local_existing other.attribute(sor) ( 10.8282 )") ;
 
assign t31 = temp3 - sor1.etob_id ;
LOG::LogReal(r: t31 , message:" subtract local_existing other.attribute(sor) ( 0.4 )") ;
 
assign t32 = temp4 - sor1.r ;
LOG::LogReal(r: t32 , message:" subtract local_existing other.attribute(sor) ( 21.5282 )") ;
 
  // local existing    other.attribute (sar)
select any sar1 related by self->ETOB[R8];
assign t33 = temp1 - sar1.etob_id ;
if ( t33 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(sar) ( 11 )") ;
end if;
 
assign t34 = temp1 - sar1.r ;
LOG::LogReal(r: t34 , message:" subtract local_existing other.attribute(sar) ( 10.8282 )") ;
 
assign t35 = temp3 - sar1.etob_id ;
LOG::LogReal(r: t35 , message:" subtract local_existing other.attribute(sar) ( 0.4 )") ;
 
assign t36 = temp4 - sar1.r ;
LOG::LogReal(r: t36 , message:" subtract local_existing other.attribute(sar) ( 21.5282 )") ;
 
  // local existing    other.attribute (smr)
select many smr1 related by self->ETOB[R8];
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t37 = temp1 - smr.etob_id ;
if ( t37 == 11 )
  LOG::LogSuccess(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.attribute(smr) ( 11 )") ;
end if;
 
assign t38 = temp1 - smr.r ;
LOG::LogReal(r: t38 , message:" subtract local_existing other.attribute(smr) ( 10.8282 )") ;
 
assign t39 = temp3 - smr.etob_id ;
LOG::LogReal(r: t39 , message:" subtract local_existing other.attribute(smr) ( 0.4 )") ;
 
assign t40 = temp4 - smr.r ;
LOG::LogReal(r: t40 , message:" subtract local_existing other.attribute(smr) ( 21.5282 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 - saf1.etoc_id ;
if ( t41 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(saf) ( 9 )") ;
end if;
 
assign t42 = temp1 - saf1.r6r ;
LOG::LogReal(r: t42 , message:" subtract local_existing other.referential_attribute(saf) ( 1.689 )") ;
 
assign t43 = temp3 - saf1.etoc_id ;
LOG::LogReal(r: t43 , message:" subtract local_existing other.referential_attribute(saf) ( -1.6 )") ;
 
assign t44 = temp4 - saf1.r6r ;
LOG::LogReal(r: t44 , message:" subtract local_existing other.referential_attribute(saf) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smf)
for each smf in smf1
  if ( smf.etob_id == 2 )
assign t45 = temp1 - smf.etoc_id ;
if ( t45 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smf) ( 9 )") ;
end if;
 
assign t46 = temp1 - smf.r6r ;
LOG::LogReal(r: t46 , message:" subtract local_existing other.referential_attribute(smf) ( 1.689 )") ;
 
assign t47 = temp3 - smf.etoc_id ;
LOG::LogReal(r: t47 , message:" subtract local_existing other.referential_attribute(smf) ( -1.6 )") ;
 
assign t48 = temp4 - smf.r6r ;
LOG::LogReal(r: t48 , message:" subtract local_existing other.referential_attribute(smf) ( 12.389 )") ;
 
  end if;
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 - sor1.etoc_id ;
if ( t49 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sor) ( 9 )") ;
end if;
 
assign t50 = temp1 - sor1.r6r ;
LOG::LogReal(r: t50 , message:" subtract local_existing other.referential_attribute(sor) ( 1.689 )") ;
 
assign t51 = temp3 - sor1.etoc_id ;
LOG::LogReal(r: t51 , message:" subtract local_existing other.referential_attribute(sor) ( -1.6 )") ;
 
assign t52 = temp4 - sor1.r6r ;
LOG::LogReal(r: t52 , message:" subtract local_existing other.referential_attribute(sor) ( 12.389 )") ;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 - sar1.etoc_id ;
if ( t53 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(sar) ( 9 )") ;
end if;
 
assign t54 = temp1 - sar1.r6r ;
LOG::LogReal(r: t54 , message:" subtract local_existing other.referential_attribute(sar) ( 1.689 )") ;
 
assign t55 = temp3 - sar1.etoc_id ;
LOG::LogReal(r: t55 , message:" subtract local_existing other.referential_attribute(sar) ( -1.6 )") ;
 
assign t56 = temp4 - sar1.r6r ;
LOG::LogReal(r: t56 , message:" subtract local_existing other.referential_attribute(sar) ( 12.389 )") ;
 
  // local existing    other.referential attribute (smr)
for each smr in smr1
  if ( smr.etob_id == 2 )
assign t57 = temp1 - smr.etoc_id ;
if ( t57 == 9 )
  LOG::LogSuccess(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
else
  LOG::LogFailure(message:" subtract local_existing other.referential_attribute(smr) ( 9 )") ;
end if;
 
assign t58 = temp1 - smr.r6r ;
LOG::LogReal(r: t58 , message:" subtract local_existing other.referential_attribute(smr) ( 1.689 )") ;
 
assign t59 = temp3 - smr.etoc_id ;
LOG::LogReal(r: t59 , message:" subtract local_existing other.referential_attribute(smr) ( -1.6 )") ;
 
assign t60 = temp4 - smr.r6r ;
LOG::LogReal(r: t60 , message:" subtract local_existing other.referential_attribute(smr) ( 12.389 )") ;
 
  end if;
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tint1 - temp1 ;
if ( t61 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt local_existing ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt local_existing ( 4 )") ;
end if;
 
assign t62 = rcvd_evt.tint1 - temp3 ;
LOG::LogReal(r: t62 , message:" subtract rcvd_evt local_existing ( 14.6 )") ;
 
assign t63 = rcvd_evt.treal1 - temp1 ;
LOG::LogReal(r: t63 , message:" subtract rcvd_evt local_existing ( -10.218172 )") ;
 
assign t64 = rcvd_evt.treal1 - temp3 ;
LOG::LogReal(r: t64 , message:" subtract rcvd_evt local_existing ( 0.381828 )") ;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tint1 - rcvd_evt.tint2 ;
if ( t65 == 4 )
  LOG::LogSuccess(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt rcvd_evt ( 4 )") ;
end if;
 
assign t66 = rcvd_evt.tint1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t66 , message:" subtract rcvd_evt rcvd_evt ( 5.8 )") ;
 
assign t67 = rcvd_evt.treal1 - rcvd_evt.tint2 ;
LOG::LogReal(r: t67 , message:" subtract rcvd_evt rcvd_evt ( -10.218172 )") ;
 
assign t68 = rcvd_evt.treal1 - rcvd_evt.treal2 ;
LOG::LogReal(r: t68 , message:" subtract rcvd_evt rcvd_evt ( -8.418172 )") ;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tint1 - 1 ;
if ( t69 == 16 )
  LOG::LogSuccess(message:" subtract rcvd_evt constant ( 16 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt constant ( 16 )") ;
end if;
 
assign t70 = rcvd_evt.tint1 - 1.0 ;
LOG::LogReal(r: t70 , message:" subtract rcvd_evt constant ( 16.0 )") ;
 
assign t71 = rcvd_evt.treal1 - 1 ;
LOG::LogReal(r: t71 , message:" subtract rcvd_evt constant ( 1.781828 )") ;
 
assign t72 = rcvd_evt.treal1 - 0.5 ;
LOG::LogReal(r: t72 , message:" subtract rcvd_evt constant ( 2.281828 )") ;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tint1 - self.i ;
if ( t73 == 7 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.attribute ( 7 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.attribute ( 7 )") ;
end if;
 
assign t74 = rcvd_evt.tint1 - self.r ;
LOG::LogReal(r: t74 , message:" subtract rcvd_evt self.attribute ( 13.86 )") ;
 
assign t75 = rcvd_evt.treal1 - self.i ;
LOG::LogReal(r: t75 , message:" subtract rcvd_evt self.attribute ( -7.218172 )") ;
 
assign t76 = rcvd_evt.treal1 - self.r ;
LOG::LogReal(r: t76 , message:" subtract rcvd_evt self.attribute ( -0.358172 )") ;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tint1 - self.etob_id ;
if ( t77 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt self.referential_attribute ( 15 )") ;
end if;
 
assign t78 = rcvd_evt.tint1 - self.r1r ;
LOG::LogReal(r: t78 , message:" subtract rcvd_evt self.referential_attribute ( 14.8282 )") ;
 
assign t79 = rcvd_evt.treal1 - self.etob_id ;
LOG::LogReal(r: t79 , message:" subtract rcvd_evt self.referential_attribute ( 0.781828 )") ;
 
assign t80 = rcvd_evt.treal1 - self.r1r ;
LOG::LogReal(r: t80 , message:" subtract rcvd_evt self.referential_attribute ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tint1 - saf1.etob_id ;
if ( t81 == 15 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.attribute(saf) ( 15 )") ;
end if;
 
assign t82 = rcvd_evt.tint1 - saf1.r ;
LOG::LogReal(r: t82 , message:" subtract rcvd_evt other.attribute(saf) ( 14.8282 )") ;
 
assign t83 = rcvd_evt.treal1 - saf1.etob_id ;
LOG::LogReal(r: t83 , message:" subtract rcvd_evt other.attribute(saf) ( 0.781828 )") ;
 
assign t84 = rcvd_evt.treal1 - saf1.r ;
LOG::LogReal(r: t84 , message:" subtract rcvd_evt other.attribute(saf) ( 0.610028 )") ;
 
  // rcvd_evt    other.attribute (smf)
  // rcvd_evt    other.attribute (sor)
  // rcvd_evt    other.attribute (sar)
  // rcvd_evt    other.attribute (smr)
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tint1 - saf1.etoc_id ;
if ( t101 == 13 )
  LOG::LogSuccess(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
else
  LOG::LogFailure(message:" subtract rcvd_evt other.referential_attribute(saf) ( 13 )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
  // rcvd_evt    other.referential attribute (sor)
  // rcvd_evt    other.referential attribute (sar)
  // rcvd_evt    other.referential attribute (smr)
  // constant    local existing
assign t121 = 27 - temp1 ;
if ( t121 == 14 )
  LOG::LogSuccess(message:" subtract constant local_existing ( 14 )") ;
else
  LOG::LogFailure(message:" subtract constant local_existing ( 14 )") ;
end if;
 
  // constant    rcvd_evt
assign t126 = 27 - rcvd_evt.treal2 ;
LOG::LogReal(r: t126 , message:" subtract constant rcvd_evt ( 15.8 )") ;
 
  // constant    constant
assign t131 = 14.3 - 5 ;
LOG::LogReal(r: t131 , message:" subtract constant constant ( 9.3 )") ;
 
  // constant    self.attribute
assign t136 = 14.3 - self.r ;
LOG::LogReal(r: t136 , message:" subtract constant self.attribute ( 11.16 )") ;
 
  // constant    self.referential attribute
assign t137 = 27 - self.etob_id ;
if ( t137 == 25 )
  LOG::LogSuccess(message:" subtract constant self.referential_attribute ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant self.referential_attribute ( 25 )") ;
end if;
 
  // constant    other.attribute (saf)
assign t141 = 27 - saf1.etob_id ;
if ( t141 == 25 )
  LOG::LogSuccess(message:" subtract constant other.attribute(saf) ( 25 )") ;
else
  LOG::LogFailure(message:" subtract constant other.attribute(saf) ( 25 )") ;
end if;
 
  // constant    other.attribute (smf)
  // constant    other.attribute (sor)
  // constant    other.attribute (sar)
  // constant    other.attribute (smr)
  // constant    other.referential attribute (saf)
assign t161 = 27 - saf1.etoc_id ;
if ( t161 == 23 )
  LOG::LogSuccess(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
else
  LOG::LogFailure(message:" subtract constant other.referential_attribute(saf) ( 23 )") ;
end if;
 
  // constant    other.referential attribute (smf)
  // constant    other.referential attribute (sor)
  // constant    other.referential attribute (sar)
  // constant    other.referential attribute (smr)
  // self.attribute    local existing
assign t181 = self.i - temp1 ;
if ( t181 == -3 )
  LOG::LogSuccess(message:" subtract self.attribute local_existing ( -3 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute local_existing ( -3 )") ;
end if;
 
  // self.attribute    rcvd_evt
assign t186 = self.i - rcvd_evt.treal2 ;
LOG::LogReal(r: t186 , message:" subtract self.attribute rcvd_evt ( -1.2 )") ;
 
  // self.attribute    constant
assign t191 = self.r - 2 ;
LOG::LogReal(r: t191 , message:" subtract self.attribute constant ( 1.14 )") ;
 
  // self.attribute    self.attribute
assign t196 = self.i - self.r ;
LOG::LogReal(r: t196 , message:" subtract self.attribute self.attribute ( 6.86 )") ;
 
  // self.attribute    self.referential attribute
assign t197 = self.i - self.etob_id ;
if ( t197 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute self.referential_attribute ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.i - saf1.etob_id ;
if ( t201 == 8 )
  LOG::LogSuccess(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.attribute(saf) ( 8 )") ;
end if;
 
  // self.attribute    other.attribute (smf)
  // self.attribute    other.attribute (sor)
  // self.attribute    other.attribute (sar)
  // self.attribute    other.attribute (smr)
  // self.attribute    other.referential attribute (saf)
assign t221 = self.i - saf1.etoc_id ;
if ( t221 == 6 )
  LOG::LogSuccess(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
else
  LOG::LogFailure(message:" subtract self.attribute other.referential_attribute(saf) ( 6 )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
  // self.attribute    other.referential attribute (sor)
  // self.attribute    other.referential attribute (sar)
  // self.attribute    other.referential attribute (smr)
  // self.referential attribute    local existing
assign t241 = self.etob_id - temp1 ;
if ( t241 == -11 )
  LOG::LogSuccess(message:" subtract self.referential_attribute local_existing ( -11 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute local_existing ( -11 )") ;
end if;
 
  // self.referential attribute    rcvd_evt
assign t246 = self.etob_id - rcvd_evt.treal2 ;
LOG::LogReal(r: t246 , message:" subtract self.referential_attribute rcvd_evt ( -9.2 )") ;
 
  // self.referential attribute    constant
assign t251 = self.r1r - 2 ;
LOG::LogReal(r: t251 , message:" subtract self.referential_attribute constant ( 0.1718 )") ;
 
  // self.referential attribute    self.attribute
assign t256 = self.r1r - self.r ;
LOG::LogReal(r: t256 , message:" subtract self.referential_attribute self.attribute ( -0.9682 )") ;
 
  // self.referential attribute    self.referential attribute
assign t258 = self.etob_id - self.r1r ;
LOG::LogReal(r: t258 , message:" subtract self.referential_attribute self.referential_attribute ( -0.1718 )") ;
 
  // self.referential attribute    other.attribute (saf)
assign t261 = self.etob_id - saf1.etob_id ;
if ( t261 == 0 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.attribute(saf) ( 0 )") ;
end if;
 
  // self.referential attribute    other.attribute (smf)
  // self.referential attribute    other.attribute (sor)
  // self.referential attribute    other.attribute (sar)
  // self.referential attribute    other.attribute (smr)
  // self.referential attribute    other.referential attribute (saf)
assign t281 = self.etob_id - saf1.etoc_id ;
if ( t281 == -2 )
  LOG::LogSuccess(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
else
  LOG::LogFailure(message:" subtract self.referential_attribute other.referential_attribute(saf) ( -2 )") ;
end if;
 
  // self.referential attribute    other.referential attribute (smf)
  // self.referential attribute    other.referential attribute (sor)
  // self.referential attribute    other.referential attribute (sar)
  // self.referential attribute    other.referential attribute (smr)
  // other.attribute (saf)    local existing
  // other.attribute (saf)    rcvd_evt
  // other.attribute (saf)    constant
  // other.attribute (saf)    self.attribute
  // other.attribute (saf)    self.referential attribute
  // other.attribute (saf)    other.attribute (saf)
  // other.attribute (saf)    other.attribute (smf)
  // other.attribute (saf)    other.attribute (sor)
  // other.attribute (saf)    other.attribute (sar)
  // other.attribute (saf)    other.attribute (smr)
  // other.attribute (saf)    other.referential attribute (saf)
  // other.attribute (saf)    other.referential attribute (smf)
  // other.attribute (saf)    other.referential attribute (sor)
  // other.attribute (saf)    other.referential attribute (sar)
  // other.attribute (saf)    other.referential attribute (smr)
  // other.attribute (smf)    local existing
  // other.attribute (smf)    rcvd_evt
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    rcvd_evt
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    rcvd_evt
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    rcvd_evt
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
  // other.referential attribute (saf)    rcvd_evt
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    rcvd_evt
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    rcvd_evt
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    rcvd_evt
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    rcvd_evt
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed subtract test") ;

//generate event to commence next test
bridge d = TIM::current_date();
bridge ts = TIM::current_clock();
create event instance evinst of EV1:''Event Instance''(message:"timer event 1.2")  to event_instance;
bridge tim = TIM::timer_start ( microseconds:1000000, event_inst:evinst);
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: d, ts: ts, tim:tim, ev:evinst) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Testing assign',
	15,
	0);
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EIGN
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("37447b80-b406-0e4e-7887-c4e39e84f62f",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"37447b80-b406-0e4e-7887-c4e39e84f62f");
INSERT INTO SM_AH
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("42a487c0-edd1-525b-10fc-9c9c8d5d5303",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'LOG::LogInfo(message:"Starting assign test") ;
select any event_instance from instances of EV;
// Assign operation

  // boolean
assign t1 = true;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_initial constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( true )") ;
end if;
 
assign t2 = false;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_initial constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( false )") ;
end if;
 
  // integer
assign t3 = 5;
if ( t3 == 5 )
  LOG::LogSuccess(message:"assign local_initial constant ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( 5 )") ;
end if;
 
  // real
assign t4 = 16.98;
LOG::LogInfo( message:"assign local_initial constant ( 16.98 )") ;
 
  // string
assign t5 = "hissy";
if ( t5 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial constant ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial constant ( hissy )") ;
end if;

  // boolean
assign t6 = t1;
if ( t6 == true )
  LOG::LogSuccess(message:"assign local_initial local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( true )") ;
end if;
 
assign t7 = t2;
if ( t7 == false )
  LOG::LogSuccess(message:"assign local_initial local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( false )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 5 )
  LOG::LogSuccess(message:"assign local_initial local_existing ( 5 )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( 5 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_initial local_existing ( 16.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "hissy" )
  LOG::LogSuccess(message:"assign local_initial local_existing ( hissy )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( hissy )") ;
end if;

// unique_id
assign temp_unique_id = self.u;
assign t11 = temp_unique_id;
if ( t11 == self.u )
  LOG::LogSuccess(message:"assign local_initial local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( self.u )") ;
end if;
 
  // date
bridge temp_date = TIM::create_date(second:30, minute:56, hour:19, day:3, month:1, year:1966);
assign t12 = temp_date;
LOG::LogDate(d:t12, message:"assign local_initial local_existing ( 3/1/1996 19:56:30 )");

  // timestamp
bridge temp_timestamp = TIM::current_clock();
assign t13 = temp_timestamp;
LOG::LogTime(t:t13, message:"assign local_initial local_existing ( )");

  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event")to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t14 = temp_timer;
if ( t14 == temp_timer )
  LOG::LogSuccess(message:"assign local_initial local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t15 = ev_inst1;
LOG::LogInfo( message:"assign local_initial local_existing ( LOG1(timer event) )") ;

  // inst_ref<Object>
select any none from instances of NOI;
assign t16 = none;
if ( t16 == none )
  LOG::LogSuccess(message:"assign local_initial local_existing ( none )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( none )") ;
end if;
 
select any inst from instances of OI;
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_initial local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_initial local_existing ( inst )") ;
end if;

// This is a special test case to verify that usage of 
// local variables of type inst_ref<Object> generate code
// without any error messages.  See the bp issue 659. 
assign t17b = self;
relate t17 to t17b across R3;
unrelate t17b from t17 across R3;

  // boolean
assign t19 = rcvd_evt.ttrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( true )") ;
end if;
 
assign t20 = rcvd_evt.tfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( false )") ;
end if;
 
  // integer
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( fit )") ;
end if;

  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_initial rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst<Event>
assign t28 = rcvd_evt.ev;
LOG::LogInfo( message:"assign local_initial rcvd_evt ( LOG1(timer event) )") ;

  // boolean
assign t29 = self.bfalse;
if ( t29 == false )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( false )") ;
end if;
 
assign t30 = self.btrue;
if ( t30 == true )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( true )") ;
end if;
 
  // integer
assign t31 = self.i;
if ( t31 == 10 )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( 10 )") ;
end if;
 
  // real
assign t32 = self.r;
LOG::LogInfo( message:"assign local_initial self.attribute ( 3.14 )") ;
 
  // string
assign t33 = self.s;
if ( t33 == "String" )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( String )") ;
end if;

  // unique_id
assign t34 = self.u;
if ( t34 == self.u )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.u )") ;
end if;
 
  // date
bridge self.d = TIM::create_date(second:31, minute:51, hour:18, day:4, month:4, year:1970);
assign t35 = self.d;
LOG::LogDate(d:t35, message:"assign local_initial self.attribute ( 4/4/1970 18:51:31 )");

  // timestamp
assign t36a = self.t;
LOG::LogTime(t:t36a, message:"assign local_initial self.attribute ( 0 )");
bridge self.t = TIM::current_clock();
assign t36b = self.t;
LOG::LogTime(t:t36b, message:"assign local_initial self.attribute ( current_time )") ;

  // inst_ref<Timer>
create event instance temp_ev of EV1:''Event Instance''(message:"timer event") to event_instance;
assign self.ev = temp_ev;
bridge self.tim = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign t37 = self.tim;
if ( t37 == self.tim )
  LOG::LogSuccess(message:"assign local_initial self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t38 = self.ev;
LOG::LogInfo( message:"assign local_initial self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t39 = self.r1btrue;
if ( t39 == true )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( true )") ;
end if;
 
assign t40 = self.r1bfalse;
if ( t40 == false )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( false )") ;
end if;
 
  // integer
assign t41 = self.etob_id;
if ( t41 == 2 )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t42 = self.r1r;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t43 = self.r1s;
if ( t43 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t44 = self.r1u;
if ( t44 == self.r1u )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t45 = self.r1d;
LOG::LogDate(d:t45, message:"assign local_initial self.referential_attribute ( 8/9/1991 13:07:17 )");

  // timestamp
assign t46 = self.r1t;
LOG::LogTime(t:t46, message:"assign local_initial self.referential_attribute ( 0 )");

  // inst_ref<Timer>
assign t47 = self.r1tim;
if ( t47 == self.r1tim )
  LOG::LogSuccess(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_initial self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t48 = self.r1ev;
LOG::LogInfo( message:"assign local_initial self.referential_attribute ( LOG1(timer event) )") ;

select any saf from instances of ETOB;
  // boolean
assign t49 = saf.btrue;
if ( t49 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( true )") ;
end if;
 
assign t50 = saf.bfalse;
if ( t50 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign t51 = saf.etob_id;
if ( t51 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t52 = saf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t53 = saf.s;
if ( t53 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t54 = saf.u;
if ( t54 == saf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t55 = saf.d;
LOG::LogDate(d:t55, message:"assign local_initial other.attribute(saf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t56 = saf.t;
LOG::LogTime(t:t56, message:"assign local_initial other.attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t57 = saf.tim;
if ( t57 == saf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t58 = saf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(saf) ( LOG1(timer event) )") ;

select many smfs from instances of ETOB;
for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t59 = smf.btrue;
if ( t59 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( true )") ;
end if;
 
assign t60 = smf.bfalse;
if ( t60 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t61 = smf.etob_id;
if ( t61 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t62 = smf.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t63 = smf.s;
if ( t63 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t64 = smf.u;
if ( t64 == smf.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t65 = smf.d;
LOG::LogDate(d:t65, message:"assign local_initial other.attribute(smf) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t66 = smf.t;
LOG::LogTime(t:t66, message:"assign local_initial other.attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t67 = smf.tim;
if ( t67 == smf.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign t68 = smf.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smf) ( LOG1(timer event) )") ;

  end if;
end for;

select one sor related by self->ETOB[R1];
  // boolean
assign t69 = sor.btrue;
if ( t69 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( true )") ;
end if;
 
assign t70 = sor.bfalse;
if ( t70 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( false )") ;
end if;
 
  // integer
assign t71 = sor.etob_id;
if ( t71 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( 2 )") ;
end if;
 
  // real
assign t72 = sor.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( 2.1718 )") ;
 
  // string
assign t73 = sor.s;
if ( t73 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( etob1 string )") ;
end if;
  // unique_id
assign t74 = sor.u;
if ( t74 == sor.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.u )") ;
end if;
 
  // date
assign t75 = sor.d;
LOG::LogDate(d:t75, message:"assign local_initial other.attribute(sor) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t76 = sor.t;
LOG::LogTime(t:t76, message:"assign local_initial other.attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t77 = sor.tim;
if ( t77 == sor.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sor) ( sor.tim )") ;
end if;
 
  // inst<Event>
assign t78 = sor.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sor) ( LOG1(timer event) )") ;

select any sar related by self->ETOB[R8];
  // boolean
assign t79 = sar.btrue;
if ( t79 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( true )") ;
end if;
 
assign t80 = sar.bfalse;
if ( t80 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( false )") ;
end if;
 
  // integer
assign t81 = sar.etob_id;
if ( t81 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( 2 )") ;
end if;
 
  // real
assign t82 = sar.r;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( 2.1718 )") ;
 
  // string
assign t83 = sar.s;
if ( t83 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( etob1 string )") ;
end if;
  // unique_id
assign t84 = sar.u;
if ( t84 == sar.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.u )") ;
end if;
 
  // date
assign t85 = sar.d;
LOG::LogDate(d:t85, message:"assign local_initial other.attribute(sar) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t86 = sar.t;
LOG::LogTime(t:t86, message:"assign local_initial other.attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t87 = sar.tim;
if ( t87 == sar.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(sar) ( sar.tim )") ;
end if;
 
  // inst<Event>
assign t88 = sar.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(sar) ( LOG1(timer event) )") ;

select many smrs related by self->ETOB[R8];
for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t89 = smr.btrue;
if ( t89 == true )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( true )") ;
end if;
 
assign t90 = smr.bfalse;
if ( t90 == false )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( false )") ;
end if;
 
  // integer
assign t91 = smr.etob_id;
if ( t91 == 2 )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( 2 )") ;
end if;
 
  // real
assign t92 = smr.r;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( 2.1718 )") ;
 
  // string
assign t93 = smr.s;
if ( t93 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( etob1 string )") ;
end if;
  // unique_id
assign t94 = smr.u;
if ( t94 == smr.u )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.u )") ;
end if;
 
  // date
assign t95 = smr.d;
LOG::LogDate(d:t95, message:"assign local_initial other.attribute(smr) ( 8/9/1991 13:07:17 )") ;
 
  // timestamp
assign t96 = smr.t;
LOG::LogTime(t:t96, message:"assign local_initial other.attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t97 = smr.tim;
if ( t97 == smr.tim )
  LOG::LogSuccess(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.attribute(smr) ( smr.tim )") ;
end if;
 
  // inst<Event>
assign t98 = smr.ev;
LOG::LogInfo( message:"assign local_initial other.attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t99 = saf.r6btrue;
if ( t99 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( true )") ;
end if;
 
assign t100 = saf.r6bfalse;
if ( t100 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( false )") ;
end if;
 
  // integer
assign t101 = saf.etoc_id;
if ( t101 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( 4 )") ;
end if;
 
  // real
assign t102 = saf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( 11.311 )") ;
 
  // string
assign t103 = saf.r6s;
if ( t103 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( etoc string )") ;
end if;
  // unique_id
assign t104 = saf.r6u;
if ( t104 == saf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6u )") ;
end if;
 
  // date
assign t105 = saf.r6d;
LOG::LogDate(d:t105, message:"assign local_initial other.referential_attribute(saf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t106 = saf.r6t;
LOG::LogTime(t:t106, message:"assign local_initial other.referential_attribute(saf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t107 = saf.r6tim;
if ( t107 == saf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(saf) ( saf.r6tim )") ;
end if;
 
  // inst<Event>
assign t108 = saf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if (smf.etob_id == 2)
  // boolean
assign t119 = smf.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( true )") ;
end if;
 
assign t110 = smf.r6bfalse;
if ( t110 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( false )") ;
end if;
 
  // integer
assign t111 = smf.etoc_id;
if ( t111 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( 4 )") ;
end if;
 
  // real
assign t112 = smf.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute ( 11.311 )") ;
 
  // string
assign t113 = smf.r6s;
if ( t113 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smf) ( etoc string )") ;
end if;
  // unique_id
assign t114 = smf.r6u;
if ( t114 == smf.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6u )") ;
end if;
 
  // date
assign t115 = smf.r6d;
LOG::LogDate(d:t115, message:"assign local_initial other.referential_attribute(smf) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t116 = smf.r6t;
LOG::LogTime(t:t116, message:"assign local_initial other.referential_attribute(smf) ( 0 )") ;
 
  // inst_ref<Timer>
assign t117 = smf.r6tim;
if ( t117 == smf.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute ( smf.r6tim )") ;
end if;
 
  // inst<Event>
assign t118 = smf.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smf) ( LOG1(timer event) )") ;
  end if;
end for;

  // boolean
assign t119 = sor.r6btrue;
if ( t119 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( true )") ;
end if;
 
assign t120 = sor.r6bfalse;
if ( t120 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( false )") ;
end if;
 
  // integer
assign t121 = sor.etoc_id;
if ( t121 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( 4 )") ;
end if;
 
  // real
assign t122 = sor.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( 11.311 )") ;
 
  // string
assign t123 = sor.r6s;
if ( t123 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( etoc string )") ;
end if;
  // unique_id
assign t124 = sor.r6u;
if ( t124 == sor.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6u )") ;
end if;
 
  // date
assign t125 = sor.r6d;
LOG::LogDate(d:t125, message:"assign local_initial other.referential_attribute(sor) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t126 = sor.r6t;
LOG::LogTime(t:t126, message:"assign local_initial other.referential_attribute(sor) ( 0 )") ;
 
  // inst_ref<Timer>
assign t127 = sor.r6tim;
if ( t127 == sor.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sor) ( sor.r6tim )") ;
end if;
 
  // inst<Event>
assign t128 = sor.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sor) ( LOG1(timer event) )") ;

  // boolean
assign t129 = sar.r6btrue;
if ( t129 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( true )") ;
end if;
 
assign t130 = sar.r6bfalse;
if ( t130 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( false )") ;
end if;
 
  // integer
assign t131 = sar.etoc_id;
if ( t131 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( 4 )") ;
end if;
 
  // real
assign t132 = sar.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( 11.311 )") ;
 
  // string
assign t133 = sar.r6s;
if ( t133 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( etoc string )") ;
end if;
  // unique_id
assign t134 = sar.r6u;
if ( t134 == sar.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6u )") ;
end if;
 
  // date
assign t135 = sar.r6d;
LOG::LogDate(d:t135, message:"assign local_initial other.referential_attribute(sar) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t136 = sar.r6t;
LOG::LogTime(t:t136, message:"assign local_initial other.referential_attribute(sar) ( 0 )") ;
 
  // inst_ref<Timer>
assign t137 = sar.r6tim;
if ( t137 == sar.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(sar) ( sar.r6tim )") ;
end if;
 
  // inst<Event>
assign t138 = sar.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(sar) ( LOG1(timer event) )") ;

for each smr in smrs
  if ( smr.etob_id == 2 )
  // boolean
assign t139 = smr.r6btrue;
if ( t139 == true )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( true )") ;
end if;
 
assign t140 = smr.r6bfalse;
if ( t140 == false )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( false )") ;
end if;
 
  // integer
assign t141 = smr.etoc_id;
if ( t141 == 4 )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( 4 )") ;
end if;
 
  // real
assign t142 = smr.r6r;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( 11.311 )") ;
 
  // string
assign t143 = smr.r6s;
if ( t143 == "etoc string" )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( etoc string )") ;
end if;
  // unique_id
assign t144 = smr.r6u;
if ( t144 == smr.r6u )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6u )") ;
end if;
 
  // date
assign t145 = smr.r6d;
LOG::LogDate(d:t145, message:"assign local_initial other.referential_attribute(smr) ( 12/13/1997 00:00:10 )") ;
 
  // timestamp
assign t146 = smr.r6t;
LOG::LogTime(t:t146, message:"assign local_initial other.referential_attribute(smr) ( 0 )") ;
 
  // inst_ref<Timer>
assign t147 = smr.r6tim;
if ( t147 == smr.r6tim )
  LOG::LogSuccess(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
else
  LOG::LogFailure(message:"assign local_initial other.referential_attribute(smr) ( smr.r6tim )") ;
end if;
 
  // inst<Event>
assign t148 = smr.r6ev;
LOG::LogInfo( message:"assign local_initial other.referential_attribute(smr) ( LOG1(timer event) )") ;
  end if;
end for;


  // boolean
assign t1 = false;
if ( t1 == false )
  LOG::LogSuccess(message:"assign local_existing constant ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( false )") ;
end if;
 
assign t2 = true;
if ( t2 == true )
  LOG::LogSuccess(message:"assign local_existing constant ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( true )") ;
end if;
 
  // integer
assign t3 = 7;
if ( t3 == 7 )
  LOG::LogSuccess(message:"assign local_existing constant ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( 7 )") ;
end if;
 
  // real
assign t4 = 96.98;
LOG::LogInfo( message:"assign local_existing constant ( 96.98 )") ;
 
  // string
assign t5 = "fussy";
if ( t5 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing constant ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing constant ( fussy )") ;
end if;

  // boolean
assign t2 = t7;
if ( t2 == false )
  LOG::LogSuccess(message:"assign local_existing local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( false )") ;
end if;
 
assign t1 = t6;
if ( t1 == true )
  LOG::LogSuccess(message:"assign local_existing local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( true )") ;
end if;
 
  // integer
assign t8 = t3;
if ( t8 == 7 )
  LOG::LogSuccess(message:"assign local_existing local_existing ( 7 )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( 7 )") ;
end if;
 
  // real
assign t9 = t4;
LOG::LogInfo( message:"assign local_existing local_existing ( 96.98 )") ;
 
  // string
assign t10 = t5;
if ( t10 == "fussy" )
  LOG::LogSuccess(message:"assign local_existing local_existing ( fussy )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( fussy )") ;
end if;

  // unique_id
assign t24 = t11;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing local_existing ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( self.u )") ;
end if;
 
  // date
assign t25 = t12;
if ( t25 == temp_date )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_date )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_date )") ;
end if;
 
  // timestamp
assign t26 = t13;
if ( t26 == temp_timestamp )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timestamp )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timestamp )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = t14;
if ( t27 == temp_timer )
  LOG::LogSuccess(message:"assign local_existing local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign t28 = t15;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( LOG1(timer event) )");

  // inst_ref<Object>
assign t17 = inst;
if ( t17 == inst )
  LOG::LogSuccess(message:"assign local_existing local_existing ( inst )") ;
else
  LOG::LogFailure(message:"assign local_existing local_existing ( inst )") ;
end if;
 

  // boolean
assign t19 = rcvd_evt.tfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( false )") ;
end if;
 
assign t20 = rcvd_evt.ttrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( true )") ;
end if;
 
  // integer
assign t21 = 0;
assign t21 = rcvd_evt.i;
if ( t21 == 11 )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( 11 )") ;
end if;
 
  // real
assign t22 = 0.0;
assign t22 = rcvd_evt.r;
LOG::LogInfo( message:"assign local_existing rcvd_evt ( 12.34 )") ;
 
  // string
assign t23 = "";
assign t23 = rcvd_evt.s;
if ( t23 == "fit" )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( fit )") ;
end if;
 
  // unique_id
assign t24 = rcvd_evt.u;
if ( t24 == rcvd_evt.u )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
if ( t25 == rcvd_evt.d )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
if ( t26 == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign local_existing rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // boolean
assign t19 = self.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( true )") ;
end if;
 
assign t20 = self.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( false )") ;
end if;
 
  // integer
assign t21 = self.i;
if ( t21 == 10 )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( 10 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( 10 )") ;
end if;
 
  // real
assign t22 = self.r;
LOG::LogInfo( message:"assign local_existing self.attribute ( 3.14 )") ;
 
  // string
assign t23 = self.s;
if ( t23 == "String" )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( String )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( String )") ;
end if;
  // unique_id
assign t24 = self.u;
if ( t24 == self.u )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.u )") ;
end if;
 
  // date
assign t25 = self.d;
if ( t25 == self.d )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign t26 = self.t;
if ( t26 == self.t )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.tim;
if ( t27 == self.tim )
  LOG::LogSuccess(message:"assign local_existing self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.ev;
LOG::LogInfo( message:"assign local_existing self.attribute ( LOG1(timer event) )") ;

  // boolean
assign t19 = self.r1bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = self.r1btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( true )") ;
end if;
 
  // integer
assign t21 = self.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign t22 = self.r1r;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( 2.1718 )") ;
 
  // string
assign t23 = self.r1s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( etob1 string )") ;
end if;
  // unique_id
assign t24 = self.r1u;
if ( t24 == self.r1u )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign t25 = self.r1d;
if ( t25 == self.r1d )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign t26 = self.r1t;
if ( t26 == self.r1t )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = self.r1tim;
if ( t27 == self.r1tim )
  LOG::LogSuccess(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign local_existing self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign t28 = self.r1ev;
LOG::LogInfo( message:"assign local_existing self.referential_attribute ( LOG1(timer event) )") ;

// lval = local existing rval = other.attribute (saf)
  // boolean
assign t19 = saf.bfalse;
if ( t19 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t20 = saf.btrue;
if ( t20 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign t21 = saf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign t22 = saf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( 2.1718 )") ;
 
  // string
assign t23 = saf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = saf.u;
if ( t24 == saf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign t25 = saf.d;
if ( t25 == saf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign t26 = saf.t;
if ( t26 == saf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = saf.tim;
if ( t27 == saf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign t28 = saf.ev;
LOG::LogInfo( message:"assign local_existing other.attribute(saf) ( LOG1(timer event) )") ;

for each smf in smfs
  if ( smf.etob_id == 2 )
  // boolean
assign t19 = smf.btrue;
if ( t19 == true )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t20 = smf.bfalse;
if ( t20 == false )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign t21 = smf.etob_id;
if ( t21 == 2 )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( 2 )") ;
end if;
 
  // real
assign t22 = smf.r;
LOG::LogInfo( message:"assign local_existing other.attribute(smf) ( 2.1718 )") ;
 
  // string
assign t23 = smf.s;
if ( t23 == "etob1 string" )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( etob1 string )") ;
end if;
  // unique_id
assign t24 = smf.u;
if ( t24 == smf.u )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign t25 = smf.d;
if ( t25 == smf.d )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign t26 = smf.t;
if ( t26 == smf.t )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign t27 = smf.tim;
if ( t27 == smf.tim )
  LOG::LogSuccess(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign local_existing other.attribute(smf) ( smf.tim )") ;
end if;
 
  end if;
end for;

//generate event to continue test
generate ET15:''Start assign test''(ttrue:true, tfalse:false, i:11, r:12.34, s:"fit",
   u:self.u, d: rcvd_evt.d, ts: rcvd_evt.ts, tim:rcvd_evt.tim, ev:rcvd_evt.ev) to self;

',
	'');
INSERT INTO SM_STATE
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'Additional assign tests',
	17,
	0);
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"d335290a-7204-0b63-db53-25d3f63fd8ea",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"7a133f52-371a-6d89-995f-845ec5c9c51f",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe");
INSERT INTO SM_AH
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("c5317a29-9458-8cab-1c80-699f0dbfdf45",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	1,
	'select any event_instance from instances of EV;
  // boolean
assign self.btrue = false;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( false )") ;
end if;
 
assign self.btrue = true;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( true )") ;
end if;
 
  // integer
assign self.i = -17;
if ( self.i == -17 )
  LOG::LogSuccess(message:"assign self.attribute constant ( -17 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( -17 )") ;
end if;
 
assign self.i = 15;
if ( self.i == 15 )
  LOG::LogSuccess(message:"assign self.attribute constant ( 15 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( 15 )") ;
end if;

  // real
assign self.r = 387.32;
if ( ((self.r - 387.32 ) < .1) OR ((387.32 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute constant ( 387.21 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant (387.21 )") ;
end if;

  // string
assign self.s = "test 1029";
if ( self.s == "test 1029" )
  LOG::LogSuccess(message:"assign self.attribute constant ( test 1029 )") ;
else
  LOG::LogFailure(message:"assign self.attribute constant ( test 1029 )") ;
end if;

  // boolean
assign t20 = false;
assign self.btrue = t20;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( false )") ;
end if;

assign t19 = true; 
assign self.btrue = t19;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( true )") ;
end if;
 
  // integer
assign t21 = 2;
assign self.i = t21;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( 2 )") ;
end if;
 
  // real
assign t22 = 2.1718;
assign self.r = t22;
if ( ((self.r - 2.1718) < .1) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 real )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 real )") ;
end if;

  // string
assign t23 = "etob1 string";
assign self.s = t23;
if ( self.s == "etob1 string" )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( etob1 string )") ;
end if;

  // unique_id
assign save_u = self.u;
assign t24 = rcvd_evt.u;
assign self.u = t24;
if ( self.u == rcvd_evt.u )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.u )") ;
end if;
 
  // date
assign t25 = rcvd_evt.d;
assign self.d = t25;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign t26 = rcvd_evt.ts;
assign self.t = t26;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
create event instance ev_inst1 of EV1:''Event Instance''(message:"timer event") to event_instance ;
bridge temp_timer = TIM::timer_start ( microseconds:1000000, event_inst:ev_inst1 );
assign self.tim = temp_timer;
if ( self.tim == temp_timer )
  LOG::LogSuccess(message:"assign self.attribute local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign self.attribute local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign self.ev = ev_inst1;
LOG::LogInfo(message:"assign self.attribute local_existing ( LOG1(timer event) )");

  // boolean
assign self.btrue = rcvd_evt.tfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( false )") ;
end if;
 
assign self.btrue = rcvd_evt.ttrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( true )") ;
end if;
 
  // integer
assign self.i = rcvd_evt.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11 )") ;
end if;
 
  // real
assign self.r = rcvd_evt.r;
if ( ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
assign self.r = rcvd_evt.i;
if ( self.r == 11.0 )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign self.s = rcvd_evt.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( fit )") ; 
end if; 
 
  // unique_id   
assign self.u = rcvd_evt.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( save_u )") ;
end if;
 
  // date
assign self.d = rcvd_evt.d;
if ( self.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp 
assign self.t = rcvd_evt.ts;
if ( self.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = rcvd_evt.tim;
if ( self.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = rcvd_evt.ev;
LOG::LogInfo(message:"assign self.attribute rcvd_evt ( LOG1(timer event) )") ; 
 

  // boolean
assign self.btrue = self.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( false )") ;
end if;
 
assign self.btrue = true;
assign self.bfalse = self.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( true )") ;
end if;
 
assign self.bfalse = false;

  // integer
assign self.i = self.i;
if ( self.i == 11 )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( 11 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( 11 )") ;
end if;
 
  // real
assign self.r = self.r;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r )") ; 
end if; 
 
assign self.r = self.i;
if (  ((self.r - 11.0) < .1) OR ((11.0 - self.r) < .1) ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( r i)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( r i)") ; 
end if; 
 
  // string
assign self.s = self.s; 
if ( self.s == "fit" ) 
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( fit )") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.attribute ( fit )") ; 
end if; 
 
  // unique_id
assign self.u = self.u;
if ( self.u == save_u )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( save_u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( save_u )") ;
end if;
 
  // date
assign self.d = self.d;
if ( self.d == self.d )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign self.t = self.t;
if ( self.t == self.t )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.tim;
if ( self.tim == self.tim )
  LOG::LogSuccess(message:"assign self.attribute self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.ev;
LOG::LogInfo( message:"assign self.attribute self.attribute ( LOG1(timer event) )") ; 

  // boolean
assign self.btrue = self.r1bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
assign self.btrue = self.r1btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( true )") ;
end if;
 
assign self.bfalse = self.r1bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( false )") ;
end if;
 
  // integer
assign self.i = self.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign self.r = self.r1r;
if ( (( self.r - 2.1718) < .1 ) OR ((2.1718 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
assign self.r = self.etob_id;
if ( (( self.r - 2.0) < .1 ) OR ((2.0 - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r)") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( assign self.r = self.r1r )") ;
end if;
 
  // string
assign self.s = self.r1s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute self.referential attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute self.referential attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = self.r1u;
if ( self.u == self.r1u )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1u )") ;
end if;
 
  // date
assign self.d = self.r1d;
if ( self.d == self.r1d )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign self.t = self.r1t;
if ( self.t == self.r1t )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = self.r1tim;
if ( self.tim == self.r1tim )
  LOG::LogSuccess(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign self.ev = self.r1ev;
LOG::LogInfo(message:"assign self.attribute self.referential attribute ( LOG1(timer event) )") ; 


  // boolean
select any saf from instances of ETOB;
assign self.btrue = saf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign self.btrue = saf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign self.bfalse = saf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( false )") ;
end if;
 
  // integer
assign self.i = saf.etob_id;
if ( self.i == 2 )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign self.r = saf.r;
if (  ((self.r -2.1718) < .1) OR (( 2.1718 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.r )") ;
end if;
 
assign self.r = saf.etob_id;
if (  ((self.r -2.0) < .1) OR (( 2.0 - self.i ) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( assign self.r = saf.etob_id; )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) (assign self.r = saf.etob_id; )") ;
end if;
 
  // string
assign self.s = saf.s; 
if ( self.s == "etob1 string" ) 
  LOG::LogSuccess(message:"assign self.attribute saf.attribute ( etob1 string)") ;
else 
  LOG::LogFailure(message:"assign self.attribute saf.attribute ( etob1 string)") ; 
end if; 
 
  // unique_id
assign self.u = saf.u;
if ( self.u == saf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.u )") ;
end if;
 
  // date
assign self.d = saf.d;
if ( self.d == saf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign self.t = saf.t;
if ( self.t == saf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = saf.tim;
if ( self.tim == saf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = saf.ev;
LOG::LogInfo(message:"assign self.attribute saf.attribute ( LOG1(timer event) )") ; 

  // boolean
select many smfs from instances of ETOB;
for each smf in smfs
assign self.btrue = smf.bfalse;
if ( self.btrue == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign self.btrue = smf.btrue;
if ( self.btrue == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.btrue;
if ( self.bfalse == true )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign self.bfalse = smf.bfalse;
if ( self.bfalse == false )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( false )") ;
end if;
 
  // integer
assign self.i = smf.etob_id;
if ( self.i == smf.etob_id )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign self.r = smf.r;
if ( ((self.r - smf.r ) < .1) OR ((smf.r - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.r )") ;
end if;
 
assign self.r = smf.etob_id;
if ( ((self.r - smf.etob_id ) < .1) OR ((smf.etob_id - self.r) < .1) )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( assign self.r = smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) (assign self.r = smf.etob_id )") ;
end if;
 
  // string
assign self.s = smf.s; 
if ( self.s == smf.s ) 
  LOG::LogSuccess(message:"assign self.attribute smf.attribute  etob1 string") ;
else 
  LOG::LogFailure(message:"assign self.attribute smf.attribute ( etob1 string)") ; 
end if; 
  // unique_id
assign self.u = smf.u;
if ( self.u == smf.u )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.u )") ;
end if;
 
  // date
assign self.d = smf.d;
if ( self.d == smf.d )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign self.t = smf.t;
if ( self.t == smf.t )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign self.tim = smf.tim;
if ( self.tim == smf.tim )
  LOG::LogSuccess(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign self.attribute other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign self.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign self.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;

  // boolean
assign saf.btrue = false;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
assign saf.btrue = true;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = true;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( true )") ;
end if;
 
assign saf.bfalse = false;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( false )") ;
end if;
 
  // integer
assign saf.etob_id = 435;
if ( saf.etob_id == 435 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 435 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 435 )") ;
end if;
 
  // real
assign saf.r = 12;
if ( saf.r == 12 )
  LOG::LogSuccess(message:"assign other.attribute(saf) constant ( 12 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) constant ( 12 )") ;
end if;
 
assign saf.r = 17.6;
LOG::LogInfo(message:"assign other.attribute(saf) constant ( 17.6 )");
 
  // string
assign saf.s = "test 222";
if ( saf.s == "test 222" )
  LOG::LogSuccess(message:"assign other.attribute constant ( test 222 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute constant ( test 222 )") ; 
end if;

  // boolean
assign temp10 = true;
assign temp11 = false;
assign saf.btrue = temp11;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
assign saf.btrue = temp10;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp10;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( true )") ;
end if;
 
assign saf.bfalse = temp11;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( false )") ;
end if;
 
  // integer
assign temp12 = 31;
assign saf.etob_id = temp12;
if ( saf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( 31 )") ;
end if;
 
  // real
assign temp13 = 9.874;
assign saf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 31.0 )") ;
 
assign saf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(saf) local_existing ( 9.874 )") ;
 
  // string
assign temp14 = "test 333";
assign saf.s = temp14;
if ( saf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute local_existing ( test 333 )") ;
else 
  LOG::LogFailure(message:"assign other.attribute local_existing ( test 333 )") ; 
end if;

  // date
assign saf.d = t25;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = t26;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = temp_timer;
if ( saf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign saf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute local_existing ( LOG1(timer event) )") to event_instance; 
  // boolean
assign saf.btrue = rcvd_evt.tfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign saf.btrue = rcvd_evt.ttrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign saf.etob_id = rcvd_evt.i;
if ( saf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign saf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(saf) rcvd_evt ( 12.34 )") ;
 
assign saf.r = rcvd_evt.i;
if ( saf.r == 11.0 )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( 11.0 )") ;
end if;
 
  // string
assign saf.s = rcvd_evt.s;
if ( saf.s == "fit" )
  LOG::LogSuccess(message:"assign saf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign saf.attribute rcvd_evt ( fit )") ;
end if;
 
  // date
assign saf.d = rcvd_evt.d;
if ( saf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign saf.t = rcvd_evt.ts;
if ( saf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = rcvd_evt.tim;
if ( saf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign saf.btrue = self.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = self.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign saf.bfalse = false;

  // integer
assign saf.etob_id = self.i;
if ( saf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( 3 )") ;
end if;
 
  // real
assign saf.r = self.r;
LOG::LogInfo(message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
assign saf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(saf) self.attribute ( 3.0 )") ;
 
  // string
assign saf.s = self.s;
if ( saf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.attribute ( etob2 string )") ;
end if;

  // date
assign saf.d = self.d;
if ( saf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign saf.t = self.t;
if ( saf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.tim;
if ( saf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = self.r1bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign saf.btrue = self.r1btrue;
if ( saf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign saf.bfalse = self.r1bfalse;
if ( saf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
  // integer
assign saf.etob_id = self.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign saf.r = self.r1r;
LOG::LogInfo(message:"assign other.attribute(saf) self.referential_attribute ( 2.1718 )") ;
 
assign saf.r = self.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) self.referential_attribute ( 2.0 )") ;
 
  // string
assign saf.s = self.r1s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute self.referential attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = self.r1d;
if ( saf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign saf.t = self.r1t;
if ( saf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = self.r1tim;
if ( saf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign saf.attribute self.referential attribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign saf.btrue = saf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign saf.bfalse = saf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
assign saf.bfalse = false; 
 
  // integer
assign saf.etob_id = saf.etob_id;
if ( saf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign saf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
assign saf.r = saf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = saf.s;
if ( saf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute saf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = saf.d;
if ( saf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign saf.t = saf.t;
if ( saf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = saf.tim;
if ( saf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute saf.attribute ( LOG1(timer event)") to event_instance; 

  // boolean
for each smf in smfs
assign saf.btrue = smf.bfalse;
if ( saf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign saf.btrue = true;
assign saf.bfalse = smf.btrue;
if ( saf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign saf.bfalse = false;
 
  // integer
assign saf.etob_id = smf.etob_id;
if ( saf.etob_id == smf.etob_id )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
end if;
 
  // real
assign saf.r = smf.r;
LOG::LogInfo(message:"assign other.attribute(saf) other.attribute(smf) ( smf.r )") ;
 
assign saf.r = smf.etob_id;
LOG::LogInfo( message:"assign other.attribute(saf) other.attribute(smf) ( smf.etob_id )") ;
 
  // string
assign saf.s = smf.s;
if ( saf.s == smf.s )
  LOG::LogSuccess(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
else
  LOG::LogFailure(message:"assign saf.attribute smf.attribute ( etob1 string)") ;
end if;

  // date
assign saf.d = smf.d;
if ( saf.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.d )") ;
end if;
 
  // timestamp
assign saf.t = smf.t;
if ( saf.t == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.t )") ;
end if;
 
  // inst_ref<Timer>
assign saf.tim = smf.tim;
if ( saf.tim == smf.tim )
  LOG::LogSuccess(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(saf) other.attribute(smf) ( smf.tim )") ;
end if;
 
  // inst<Event>
assign saf.ev = smf.ev;
generate EV1:''Event Instance''( message:"assign saf.attribute smf.attribute ( LOG1(timer event) )") to event_instance; 
end for;


for each smf in smfs
  // boolean
assign smf.btrue = false;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
assign smf.btrue = true;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = true;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( true )") ;
end if;
 
assign smf.bfalse = false;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( false )") ;
end if;
 
  // integer
assign smf.etob_id = 29;
if ( smf.etob_id == 29 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 29 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 29 )") ;
end if;
 
  // real
assign smf.r = 12;
if ( smf.r == 12.0 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 12.0 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 12.0 )") ;
end if;
 
assign smf.r = 17.5;
if ( smf.r == 17.5 )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( 17.5 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( 17.5 )") ;
end if;
 
  // string
assign smf.s = "test 444";
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 444 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 444 )") ;
end if;


  // boolean
assign smf.btrue = temp11;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
assign smf.btrue = temp10;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp10;
if ( smf.bfalse == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( true )") ;
end if;
 
assign smf.bfalse = temp11;
if ( smf.bfalse == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( false )") ;
end if;
 
  // integer
assign smf.etob_id = temp12;
if ( smf.etob_id == 31 )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( 31 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( 31 )") ;
end if;
 
  // real
assign smf.r = temp12;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 31.0 )") ;
 
assign smf.r = temp13;
LOG::LogInfo( message:"assign other.attribute(smf) local_existing ( 9.874 )") ;
 
  // string
assign smf.s = temp14;
if ( smf.s == "test 333" )
  LOG::LogSuccess(message:"assign other.attribute(smf) constant ( test 333 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) constant ( test 333 )") ;
end if;

  // date
assign smf.d = t25;
if ( rcvd_evt.d == smf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = t26;
if ( rcvd_evt.ts == smf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = temp_timer;
if ( smf.tim == temp_timer )
  LOG::LogSuccess(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) local_existing ( temp_timer )") ;
end if;
 
  // inst<Event>
assign smf.ev = ev_inst1;
generate EV1:''Event Instance''( message:"assign other.attribute(smf) local_existing ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = rcvd_evt.tfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( false )") ;
end if;
 
assign smf.btrue = rcvd_evt.ttrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( true )") ;
end if;
 
  // integer
assign smf.etob_id = rcvd_evt.i;
if ( smf.etob_id == 11 )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( 11 )") ;
end if;
 
  // real
assign smf.r = rcvd_evt.i;
LOG::LogInfo(message:"assign other.attribute(smf) rcvd_evt ( 11.0 )") ;
 
assign smf.r = rcvd_evt.r;
LOG::LogInfo( message:"assign other.attribute(smf) rcvd_evt ( 12.34 )") ;
 
  // string
assign smf.s = rcvd_evt.s;
if ( smf.s == "fit" )
  LOG::LogSuccess(message:"assign smf.attribute rcvd_evt ( fit )") ;
else
  LOG::LogFailure(message:"assign smf.attribute rcvd_evt ( fit )") ;
end if;

  // date
assign smf.d = rcvd_evt.d;
if ( smf.d == rcvd_evt.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.d )") ;
end if;
 
  // timestamp
assign smf.t = rcvd_evt.ts;
if ( smf.t == rcvd_evt.ts )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.ts )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = rcvd_evt.tim;
if ( smf.tim == rcvd_evt.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) rcvd_evt ( rcvd_evt.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = rcvd_evt.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute rcvd_evt ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = self.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( false )") ;
end if;
 
assign smf.btrue = self.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.i;
if ( smf.etob_id == 3 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( 3 )") ;
end if;
 
  // real
assign smf.r = self.i;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
assign smf.r = self.r;
LOG::LogInfo( message:"assign other.attribute(smf) self.attribute ( 3.0 )") ;
 
  // string
assign smf.s = self.s;
if ( smf.s == "etob2 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.attribute ( etob2 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.attribute ( etob2 string )") ;
end if;
 
  // date
assign smf.d = self.d;
if ( smf.d == self.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.d )") ;
end if;
 
  // timestamp
assign smf.t = self.t;
if ( smf.t == self.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.tim;
if ( smf.tim == self.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.attribute ( self.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.attribute ( LOG1(timer event) )") to event_instance; 
 
  // boolean
assign smf.btrue = self.r1bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( false )") ;
end if;
 
assign smf.btrue = self.r1btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( true )") ;
end if;
 
  // integer
assign smf.etob_id = self.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( 2 )") ;
end if;
 
  // real
assign smf.r = self.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) self.referential_attribute ( 2.0 )") ;
 
assign smf.r = self.r1r;
LOG::LogInfo( message:"assign other.attribute(smf) self.referential_attribute ( 2.1718 )") ;
 
  // string
assign smf.s = self.r1s;
if ( smf.s == "etob1 string" )
  LOG::LogSuccess(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
else
  LOG::LogFailure(message:"assign smf.attribute self.referential attribute ( etob1 string )") ;
end if;
 
  // date
assign smf.d = self.r1d;
if ( smf.d == self.r1d )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1d )") ;
end if;
 
  // timestamp
assign smf.t = self.r1t;
if ( smf.t == self.r1t )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = self.r1tim;
if ( smf.tim == self.r1tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) self.referential_attribute ( self.r1tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = self.r1ev;
generate EV1:''Event Instance''( message:"assign smf.attribute self.referentialattribute ( LOG1(timer event) )") to event_instance; 

  // boolean
assign smf.btrue = saf.bfalse;
if ( smf.btrue == false )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( false )") ;
end if;

assign saf.btrue = true; 
assign smf.btrue = saf.btrue;
if ( smf.btrue == true )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( true )") ;
end if;
 
  // integer
assign smf.etob_id = saf.etob_id;
if ( smf.etob_id == 2 )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( 2 )") ;
end if;
 
  // real
assign smf.r = saf.etob_id;
LOG::LogInfo(message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
assign smf.r = saf.r;
LOG::LogInfo( message:"assign other.attribute(smf) other.attribute(saf) ( 2.0 )") ;
 
  // string
assign saf.s = "test 444";
assign smf.s = saf.s;
if ( smf.s == "test 444" )
  LOG::LogSuccess(message:"assign smf.attribute saf.attribute ( test 444 )") ;
else
  LOG::LogFailure(message:"assign smf.attribute saf.attribute ( test 444 )") ;
end if;
 
  // date
assign smf.d = saf.d;
if ( smf.d == saf.d )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.d )") ;
end if;
 
  // timestamp
assign smf.t = saf.t;
if ( smf.t == saf.t )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.t )") ;
end if;
 
  // inst_ref<Timer>
assign smf.tim = saf.tim;
if ( smf.tim == saf.tim )
  LOG::LogSuccess(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
else
  LOG::LogFailure(message:"assign other.attribute(smf) other.attribute(saf) ( saf.tim )") ;
end if;
 
  // inst<Event>
assign smf.ev = saf.ev;
generate EV1:''Event Instance''( message:"assign smf.attribute saf.attribute ( LOG1(timer event) )") to event_instance; 

end for;

LOG::LogInfo(message:"Completed assign test") ;
 
//generate event to commence next test
generate ET16:''Start and test''(tfalse:false, ttrue: true) to self;

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"a07910a7-fe57-11eb-232e-407cdb7cdb22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa");
INSERT INTO SM_AH
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("5fa4f8ce-14df-c7f5-7cc8-ffa87da9959b",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	"56a92d6e-5fdb-7dde-119b-5b0aa5e2cb67",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9");
INSERT INTO SM_AH
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("36482735-10cc-d075-ff2f-b751466c36af",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("f4a141d5-1549-86af-1b9f-414c9f7900c9",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	"4ad7bfb4-1466-bffd-dbe9-c4a14eca35a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc");
INSERT INTO SM_AH
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ffc7cb3f-f73b-27c8-803f-c27ce1cfead8",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	"cda90e1c-f842-ccd3-907f-dc5d84abcb82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0");
INSERT INTO SM_AH
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("3f8bab77-1fa3-d508-f29c-697e341adbf4",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("81a758ba-b280-52f9-2e2b-8a985d1214e0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	"1a0b32df-a648-2dc4-be32-c924c59b332c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c");
INSERT INTO SM_AH
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("48385561-7861-7b49-780f-6041fcbf3349",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	"44c2a793-a30f-0bf3-d2a5-f6aed4611a9d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed");
INSERT INTO SM_AH
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("28b69ab8-b4d4-4abe-14a9-f8cf8ef63c62",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	"aafa5d1a-4de0-b9ae-c2c4-7534233876c7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a");
INSERT INTO SM_AH
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ad9409fa-61ef-71a1-6b24-cda494ae473c",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	"ce156462-1465-51f4-1a56-0e636e83effe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"05d84334-6128-3c86-0ccd-46ce2a40f255");
INSERT INTO SM_AH
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ec3514c2-f448-ee13-2459-0dadc15a2181",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("05d84334-6128-3c86-0ccd-46ce2a40f255",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	"a87338c9-ab09-2470-3669-7b1a8ae46d06",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2");
INSERT INTO SM_AH
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("6509bb2c-3d14-436c-dead-40dd5e9f9a34",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"9301500b-b43e-3be3-58ef-a86c45af48f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"5bd354f8-de29-42e7-95be-8f5033bbd963");
INSERT INTO SM_AH
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("94d78be7-cb7a-463c-1343-08ad5a9ccd17",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("5bd354f8-de29-42e7-95be-8f5033bbd963",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"43175404-e206-cc41-a98d-aeb8192090da",
	"adf9b133-58d2-bc6d-316c-f7e002e9acc7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5");
INSERT INTO SM_AH
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("ae4e1125-c956-1fdb-5efe-d895fdf54d98",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("87f26125-913e-11f9-0388-3ce77f6cc0d5",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	"98844fd4-7709-19a8-4164-61b84988e3ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0");
INSERT INTO SM_AH
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("2d86cd4f-5cf9-0dc4-b967-ede8eb50e386",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"43175404-e206-cc41-a98d-aeb8192090da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	"aca73873-0d79-b1ca-c191-af2a216b3ce7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3");
INSERT INTO SM_AH
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("2b635c4b-c91f-c9ec-1fc9-7ea21c68afc7",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3");
INSERT INTO SM_AH
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("d0ae6971-b6ab-bfc9-1a94-c2cd44b42f00",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	"3600367e-0add-f558-0191-3db7429b77fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be");
INSERT INTO SM_AH
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("c3598d3e-2da9-3791-b806-9d6892e8d521",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	"285ab600-087c-6767-ab4a-a92f5f89988a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"aa75aff3-40b8-c218-1567-bee8e6661517");
INSERT INTO SM_AH
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16");
INSERT INTO SM_ACT
	VALUES ("17c8b070-f378-1878-120c-a5031c34628d",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("aa75aff3-40b8-c218-1567-bee8e6661517",
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("2f9979da-033b-a529-812e-6e0002ece0d7",
	8,
	"835f4d8e-31a9-ecab-a6ab-42c9b725ac16",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("31362a34-9f56-d682-5582-12f307c35e4d",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"19cb2e7f-a19f-70d8-82ef-f04173872fa1",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2');
INSERT INTO GD_SHP
	VALUES ("31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO GD_NCS
	VALUES ("31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1360.000000,
	"31362a34-9f56-d682-5582-12f307c35e4d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("31362a34-9f56-d682-5582-12f307c35e4d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("61a3b83f-3f03-4108-7437-2bdcdd03e928",
	752.000000,
	1408.000000,
	"31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO DIM_CON
	VALUES ("3bb3abbe-aa2e-9836-87cf-a6ee98a4f7c5",
	784.000000,
	1360.000000,
	"31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO DIM_CON
	VALUES ("70729d0f-a9a7-2289-8749-13326ea562b3",
	928.000000,
	1456.000000,
	"31362a34-9f56-d682-5582-12f307c35e4d");
INSERT INTO GD_GE
	VALUES ("f0f907a3-8540-660e-766c-0205538f98e4",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"7f23a9c2-195b-71c1-db4b-d4ed84c2100e",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations');
INSERT INTO GD_SHP
	VALUES ("f0f907a3-8540-660e-766c-0205538f98e4");
INSERT INTO GD_NCS
	VALUES ("f0f907a3-8540-660e-766c-0205538f98e4");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"f0f907a3-8540-660e-766c-0205538f98e4");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1520.000000,
	"f0f907a3-8540-660e-766c-0205538f98e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f0f907a3-8540-660e-766c-0205538f98e4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("31bbb90c-d268-fe4d-9d5a-79add2a903a5",
	2128.000000,
	1616.000000,
	"f0f907a3-8540-660e-766c-0205538f98e4");
INSERT INTO DIM_CON
	VALUES ("c27c223b-6374-9fb7-1dab-fa00725dc85d",
	1712.000000,
	1568.000000,
	"f0f907a3-8540-660e-766c-0205538f98e4");
INSERT INTO GD_GE
	VALUES ("694f9a21-e7bc-cabe-1096-0b3f344befe5",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"0c9f6778-2455-fa3a-438f-2566fd42bc5d",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values');
INSERT INTO GD_SHP
	VALUES ("694f9a21-e7bc-cabe-1096-0b3f344befe5");
INSERT INTO GD_NCS
	VALUES ("694f9a21-e7bc-cabe-1096-0b3f344befe5");
INSERT INTO DIM_ND
	VALUES (416.000000,
	112.000000,
	"694f9a21-e7bc-cabe-1096-0b3f344befe5");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1696.000000,
	"694f9a21-e7bc-cabe-1096-0b3f344befe5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("694f9a21-e7bc-cabe-1096-0b3f344befe5",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("851b2a8a-0252-b2fb-e131-4c8b60b7c393",
	2128.000000,
	1760.000000,
	"694f9a21-e7bc-cabe-1096-0b3f344befe5");
INSERT INTO DIM_CON
	VALUES ("5a622923-78aa-c834-6e6e-011ed1c8f96c",
	2128.000000,
	1792.000000,
	"694f9a21-e7bc-cabe-1096-0b3f344befe5");
INSERT INTO GD_GE
	VALUES ("79c26faf-deda-6c4a-fa50-32a169bc284b",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"449ece98-5845-8620-2ff4-5a12ab3e1e60",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers');
INSERT INTO GD_SHP
	VALUES ("79c26faf-deda-6c4a-fa50-32a169bc284b");
INSERT INTO GD_NCS
	VALUES ("79c26faf-deda-6c4a-fa50-32a169bc284b");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"79c26faf-deda-6c4a-fa50-32a169bc284b");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	1872.000000,
	"79c26faf-deda-6c4a-fa50-32a169bc284b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("79c26faf-deda-6c4a-fa50-32a169bc284b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c59be97d-aa90-ce96-c8d5-1ea82daaa458",
	2128.000000,
	1920.000000,
	"79c26faf-deda-6c4a-fa50-32a169bc284b");
INSERT INTO DIM_CON
	VALUES ("aba5c60f-8543-1af2-f035-3740d9b5617b",
	2128.000000,
	1952.000000,
	"79c26faf-deda-6c4a-fa50-32a169bc284b");
INSERT INTO GD_GE
	VALUES ("9181b26c-b632-a1a6-23f0-92479bc66c43",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"c8c285f9-b4d1-2922-6b3a-cb6b56eccf82",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Shutting Down');
INSERT INTO GD_SHP
	VALUES ("9181b26c-b632-a1a6-23f0-92479bc66c43");
INSERT INTO GD_NCS
	VALUES ("9181b26c-b632-a1a6-23f0-92479bc66c43");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"9181b26c-b632-a1a6-23f0-92479bc66c43");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1536.000000,
	"9181b26c-b632-a1a6-23f0-92479bc66c43",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9181b26c-b632-a1a6-23f0-92479bc66c43",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("6b36c003-8d40-7b89-a56a-7ceff3a4e7dd",
	2592.000000,
	1632.000000,
	"9181b26c-b632-a1a6-23f0-92479bc66c43");
INSERT INTO GD_GE
	VALUES ("087e7f93-1704-0d9f-7424-1f9b46250a22",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"364da495-bb86-2167-9bb5-cfd1580e2c98",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators');
INSERT INTO GD_SHP
	VALUES ("087e7f93-1704-0d9f-7424-1f9b46250a22");
INSERT INTO GD_NCS
	VALUES ("087e7f93-1704-0d9f-7424-1f9b46250a22");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"087e7f93-1704-0d9f-7424-1f9b46250a22");
INSERT INTO DIM_GE
	VALUES (1712.000000,
	2016.000000,
	"087e7f93-1704-0d9f-7424-1f9b46250a22",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("087e7f93-1704-0d9f-7424-1f9b46250a22",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ed2746ba-b113-a4f2-c110-94110c136d27",
	2128.000000,
	2048.000000,
	"087e7f93-1704-0d9f-7424-1f9b46250a22");
INSERT INTO DIM_CON
	VALUES ("3505f26f-6851-cc05-a3bf-b8520e60a1e7",
	2128.000000,
	2080.000000,
	"087e7f93-1704-0d9f-7424-1f9b46250a22");
INSERT INTO GD_GE
	VALUES ("d17da28d-c175-b67c-5704-c7028e2e05f0",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"d4ff2114-0b19-0230-b090-1a1b336e6257",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("d17da28d-c175-b67c-5704-c7028e2e05f0");
INSERT INTO GD_NCS
	VALUES ("d17da28d-c175-b67c-5704-c7028e2e05f0");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"d17da28d-c175-b67c-5704-c7028e2e05f0");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	2016.000000,
	"d17da28d-c175-b67c-5704-c7028e2e05f0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d17da28d-c175-b67c-5704-c7028e2e05f0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("737e26d1-887e-f8a8-1f6f-3d7b1476f61b",
	2400.000000,
	2080.000000,
	"d17da28d-c175-b67c-5704-c7028e2e05f0");
INSERT INTO DIM_CON
	VALUES ("fa017363-6111-f8a4-5356-72dbef1d39fb",
	2608.000000,
	2016.000000,
	"d17da28d-c175-b67c-5704-c7028e2e05f0");
INSERT INTO GD_GE
	VALUES ("675e5ee2-09b3-f018-7834-10e0e6577bab",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"fd37b204-b5c7-0ea4-ffb9-91ca21babf11",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("675e5ee2-09b3-f018-7834-10e0e6577bab");
INSERT INTO GD_NCS
	VALUES ("675e5ee2-09b3-f018-7834-10e0e6577bab");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"675e5ee2-09b3-f018-7834-10e0e6577bab");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1872.000000,
	"675e5ee2-09b3-f018-7834-10e0e6577bab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("675e5ee2-09b3-f018-7834-10e0e6577bab",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("4027f2b9-a72f-a06a-1f95-ffdec221f9e6",
	2608.000000,
	1968.000000,
	"675e5ee2-09b3-f018-7834-10e0e6577bab");
INSERT INTO DIM_CON
	VALUES ("1a309fbf-2486-d096-80e2-0decb06b67aa",
	2608.000000,
	1872.000000,
	"675e5ee2-09b3-f018-7834-10e0e6577bab");
INSERT INTO GD_GE
	VALUES ("436189a2-f65d-6f52-47f8-231b0023f38b",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"3e74eccc-6a4b-90a3-3c10-d25145a28ee8",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types');
INSERT INTO GD_SHP
	VALUES ("436189a2-f65d-6f52-47f8-231b0023f38b");
INSERT INTO GD_NCS
	VALUES ("436189a2-f65d-6f52-47f8-231b0023f38b");
INSERT INTO DIM_ND
	VALUES (416.000000,
	96.000000,
	"436189a2-f65d-6f52-47f8-231b0023f38b");
INSERT INTO DIM_GE
	VALUES (2400.000000,
	1712.000000,
	"436189a2-f65d-6f52-47f8-231b0023f38b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("436189a2-f65d-6f52-47f8-231b0023f38b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("467e1212-9728-a32d-7a57-31745782fee6",
	2608.000000,
	1808.000000,
	"436189a2-f65d-6f52-47f8-231b0023f38b");
INSERT INTO DIM_CON
	VALUES ("7fcd81c3-b65c-bf74-bce1-33087f600294",
	2592.000000,
	1712.000000,
	"436189a2-f65d-6f52-47f8-231b0023f38b");
INSERT INTO GD_GE
	VALUES ("fc4539f3-a05b-61e9-773f-da003dc608e4",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"f1f4d914-105b-53ad-b3c3-202de165f703",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator');
INSERT INTO GD_SHP
	VALUES ("fc4539f3-a05b-61e9-773f-da003dc608e4");
INSERT INTO GD_NCS
	VALUES ("fc4539f3-a05b-61e9-773f-da003dc608e4");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"fc4539f3-a05b-61e9-773f-da003dc608e4");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1680.000000,
	"fc4539f3-a05b-61e9-773f-da003dc608e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fc4539f3-a05b-61e9-773f-da003dc608e4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("648ec6c0-eb5e-12fa-e8ba-83a21b85f633",
	928.000000,
	1776.000000,
	"fc4539f3-a05b-61e9-773f-da003dc608e4");
INSERT INTO DIM_CON
	VALUES ("fb3e006c-3dd8-b446-a36a-0fdf9890dd34",
	928.000000,
	1680.000000,
	"fc4539f3-a05b-61e9-773f-da003dc608e4");
INSERT INTO GD_GE
	VALUES ("fbbd10df-e022-1b91-aa3b-afec9589ed37",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"cad87477-03ab-6030-c3f3-0ca0252ba153",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator');
INSERT INTO GD_SHP
	VALUES ("fbbd10df-e022-1b91-aa3b-afec9589ed37");
INSERT INTO GD_NCS
	VALUES ("fbbd10df-e022-1b91-aa3b-afec9589ed37");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"fbbd10df-e022-1b91-aa3b-afec9589ed37");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1840.000000,
	"fbbd10df-e022-1b91-aa3b-afec9589ed37",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fbbd10df-e022-1b91-aa3b-afec9589ed37",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("c61fae45-9cf3-6c26-f36b-c8ba958c083f",
	928.000000,
	1840.000000,
	"fbbd10df-e022-1b91-aa3b-afec9589ed37");
INSERT INTO DIM_CON
	VALUES ("25c2184f-2320-932e-b388-0c133bbf5c7a",
	928.000000,
	1936.000000,
	"fbbd10df-e022-1b91-aa3b-afec9589ed37");
INSERT INTO GD_GE
	VALUES ("9bf06c40-b132-adae-faa9-b51b7396cced",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"01931093-f38f-79ac-ec3c-30bb8e4842ed",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator');
INSERT INTO GD_SHP
	VALUES ("9bf06c40-b132-adae-faa9-b51b7396cced");
INSERT INTO GD_NCS
	VALUES ("9bf06c40-b132-adae-faa9-b51b7396cced");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"9bf06c40-b132-adae-faa9-b51b7396cced");
INSERT INTO DIM_GE
	VALUES (752.000000,
	2016.000000,
	"9bf06c40-b132-adae-faa9-b51b7396cced",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9bf06c40-b132-adae-faa9-b51b7396cced",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("ba6d320a-988a-b805-c20e-61ae0ecbcf36",
	928.000000,
	2016.000000,
	"9bf06c40-b132-adae-faa9-b51b7396cced");
INSERT INTO DIM_CON
	VALUES ("f739f36e-7bca-826d-3d9d-275c54e1e055",
	1072.000000,
	2080.000000,
	"9bf06c40-b132-adae-faa9-b51b7396cced");
INSERT INTO GD_GE
	VALUES ("e84ab163-91d2-eb66-82e3-700161d48c1d",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"43175404-e206-cc41-a98d-aeb8192090da",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator');
INSERT INTO GD_SHP
	VALUES ("e84ab163-91d2-eb66-82e3-700161d48c1d");
INSERT INTO GD_NCS
	VALUES ("e84ab163-91d2-eb66-82e3-700161d48c1d");
INSERT INTO DIM_ND
	VALUES (320.000000,
	80.000000,
	"e84ab163-91d2-eb66-82e3-700161d48c1d");
INSERT INTO DIM_GE
	VALUES (752.000000,
	1536.000000,
	"e84ab163-91d2-eb66-82e3-700161d48c1d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e84ab163-91d2-eb66-82e3-700161d48c1d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("fd96b73e-f7c2-17e4-189e-7f9607ee29a1",
	928.000000,
	1616.000000,
	"e84ab163-91d2-eb66-82e3-700161d48c1d");
INSERT INTO DIM_CON
	VALUES ("e4d01898-5b40-4088-36d0-6148b5cd0552",
	928.000000,
	1536.000000,
	"e84ab163-91d2-eb66-82e3-700161d48c1d");
INSERT INTO GD_GE
	VALUES ("d675a4b0-2f28-976b-925c-6706255f091c",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"589bb0f5-52b1-a524-fb72-4fc4f81723a2",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator');
INSERT INTO GD_SHP
	VALUES ("d675a4b0-2f28-976b-925c-6706255f091c");
INSERT INTO GD_NCS
	VALUES ("d675a4b0-2f28-976b-925c-6706255f091c");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"d675a4b0-2f28-976b-925c-6706255f091c");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1360.000000,
	"d675a4b0-2f28-976b-925c-6706255f091c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d675a4b0-2f28-976b-925c-6706255f091c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("b9e15329-8c28-2f5f-1982-f87bb9b92523",
	1280.000000,
	1376.000000,
	"d675a4b0-2f28-976b-925c-6706255f091c");
INSERT INTO DIM_CON
	VALUES ("8e2a80ea-c0d5-cf50-b081-d6c5af85c35f",
	1424.000000,
	1456.000000,
	"d675a4b0-2f28-976b-925c-6706255f091c");
INSERT INTO GD_GE
	VALUES ("881e6035-1994-8d40-3159-12a68fc1c73f",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"37447b80-b406-0e4e-7887-c4e39e84f62f",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign');
INSERT INTO GD_SHP
	VALUES ("881e6035-1994-8d40-3159-12a68fc1c73f");
INSERT INTO GD_NCS
	VALUES ("881e6035-1994-8d40-3159-12a68fc1c73f");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"881e6035-1994-8d40-3159-12a68fc1c73f");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1520.000000,
	"881e6035-1994-8d40-3159-12a68fc1c73f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("881e6035-1994-8d40-3159-12a68fc1c73f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("0e62b577-04a3-40a6-2cf3-7731eb00af9a",
	1424.000000,
	1520.000000,
	"881e6035-1994-8d40-3159-12a68fc1c73f");
INSERT INTO DIM_CON
	VALUES ("50ed17ef-dd27-bf01-5311-2d9c10a6dfff",
	1456.000000,
	1616.000000,
	"881e6035-1994-8d40-3159-12a68fc1c73f");
INSERT INTO GD_GE
	VALUES ("9497b27c-87ff-ec06-a40a-002647d435c4",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"e62c16fa-be01-6570-fa1c-d8851a2b75fe",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests');
INSERT INTO GD_SHP
	VALUES ("9497b27c-87ff-ec06-a40a-002647d435c4");
INSERT INTO GD_NCS
	VALUES ("9497b27c-87ff-ec06-a40a-002647d435c4");
INSERT INTO DIM_ND
	VALUES (320.000000,
	96.000000,
	"9497b27c-87ff-ec06-a40a-002647d435c4");
INSERT INTO DIM_GE
	VALUES (1280.000000,
	1680.000000,
	"9497b27c-87ff-ec06-a40a-002647d435c4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9497b27c-87ff-ec06-a40a-002647d435c4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("d3e1f432-06d4-ca7a-c6cf-4fe90278bb6e",
	1456.000000,
	1680.000000,
	"9497b27c-87ff-ec06-a40a-002647d435c4");
INSERT INTO DIM_CON
	VALUES ("33a5ba38-87b0-b0c0-f2d9-fa608d16fbd8",
	1600.000000,
	1728.000000,
	"9497b27c-87ff-ec06-a40a-002647d435c4");
INSERT INTO GD_GE
	VALUES ("f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"b01fa619-38e2-737c-2eec-bcdaa35c75fa",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F3 through F14 Binary Operations::ET3: Run F15 Values');
INSERT INTO GD_CON
	VALUES ("f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9cfcc42f-cad6-a1b9-2bc4-913605aa2ab3",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9cfcc42f-cad6-a1b9-2bc4-913605aa2ab3");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9cfcc42f-cad6-a1b9-2bc4-913605aa2ab3",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9cfcc42f-cad6-a1b9-2bc4-913605aa2ab3",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("247a9dfb-614b-f5c9-878f-0a6e797f509c",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	3,
	16.000000,
	2.000000);
INSERT INTO DIM_ND
	VALUES (204.000000,
	44.000000,
	"247a9dfb-614b-f5c9-878f-0a6e797f509c");
INSERT INTO DIM_GE
	VALUES (2176.000000,
	1675.000000,
	"247a9dfb-614b-f5c9-878f-0a6e797f509c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("247a9dfb-614b-f5c9-878f-0a6e797f509c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("46446aab-480e-88a7-9e93-e8b3fa2ae5aa",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"46446aab-480e-88a7-9e93-e8b3fa2ae5aa");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"46446aab-480e-88a7-9e93-e8b3fa2ae5aa",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("46446aab-480e-88a7-9e93-e8b3fa2ae5aa",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8c559704-9d6c-b9fd-1851-e10f7b5b6fba",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000",
	"c4790c21-2290-d9cb-9ba3-15cdacf2ca60",
	"33b34650-3804-a323-5f81-e01dc40db9e2");
INSERT INTO GD_LS
	VALUES ("9072c5c9-4522-9c27-fc72-2763487d824d",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"8c559704-9d6c-b9fd-1851-e10f7b5b6fba",
	"33b34650-3804-a323-5f81-e01dc40db9e2",
	"ba2075c3-a66c-4208-2458-5910ef20938b");
INSERT INTO GD_LS
	VALUES ("0e2fbfb3-1a30-2577-3469-c664e2a5e8b0",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"9072c5c9-4522-9c27-fc72-2763487d824d",
	"ba2075c3-a66c-4208-2458-5910ef20938b",
	"d4e755a0-ce32-57a3-b645-06fe4b6a30f2");
INSERT INTO DIM_WAY
	VALUES ("c4790c21-2290-d9cb-9ba3-15cdacf2ca60",
	2128.000000,
	1616.000000,
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("33b34650-3804-a323-5f81-e01dc40db9e2",
	2176.000000,
	1616.000000,
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000",
	"c4790c21-2290-d9cb-9ba3-15cdacf2ca60");
INSERT INTO DIM_WAY
	VALUES ("ba2075c3-a66c-4208-2458-5910ef20938b",
	2176.000000,
	1760.000000,
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000",
	"33b34650-3804-a323-5f81-e01dc40db9e2");
INSERT INTO DIM_WAY
	VALUES ("d4e755a0-ce32-57a3-b645-06fe4b6a30f2",
	2128.000000,
	1760.000000,
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000",
	"ba2075c3-a66c-4208-2458-5910ef20938b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f674bf15-8018-0f4e-24e7-d9f5be485a6c",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("31bbb90c-d268-fe4d-9d5a-79add2a903a5",
	"851b2a8a-0252-b2fb-e131-4c8b60b7c393",
	"f674bf15-8018-0f4e-24e7-d9f5be485a6c");
INSERT INTO GD_GE
	VALUES ("0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"f4a141d5-1549-86af-1b9f-414c9f7900c9",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F15 values::ET4: Run F16 Transformers');
INSERT INTO GD_CON
	VALUES ("0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5793c616-0d28-9118-924a-d815960ac56e",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5793c616-0d28-9118-924a-d815960ac56e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5793c616-0d28-9118-924a-d815960ac56e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5793c616-0d28-9118-924a-d815960ac56e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4deb8f58-62c9-fe8f-3cad-d5c894f588ed",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	3,
	0.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (227.000000,
	53.000000,
	"4deb8f58-62c9-fe8f-3cad-d5c894f588ed");
INSERT INTO DIM_GE
	VALUES (2160.000000,
	1840.000000,
	"4deb8f58-62c9-fe8f-3cad-d5c894f588ed",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4deb8f58-62c9-fe8f-3cad-d5c894f588ed",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("60bccda9-0341-c468-dc38-b0f7c3b1c095",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"60bccda9-0341-c468-dc38-b0f7c3b1c095");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"60bccda9-0341-c468-dc38-b0f7c3b1c095",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("60bccda9-0341-c468-dc38-b0f7c3b1c095",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c52fa29e-ee05-f582-42b3-7d3a715d9343",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000",
	"16cdf782-7cfd-8326-c1a0-f499105a55fb",
	"ac081099-edaf-5ca0-9aa1-db1a9e3cdef0");
INSERT INTO GD_LS
	VALUES ("9d07ef89-3c9f-98c3-82a2-c17823cc7db4",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"c52fa29e-ee05-f582-42b3-7d3a715d9343",
	"ac081099-edaf-5ca0-9aa1-db1a9e3cdef0",
	"965894ac-d3f0-9439-4974-fc54f4d23108");
INSERT INTO GD_LS
	VALUES ("24840783-47e6-d5f4-e180-1fedf0d57fa4",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"9d07ef89-3c9f-98c3-82a2-c17823cc7db4",
	"965894ac-d3f0-9439-4974-fc54f4d23108",
	"82e3eec4-a81c-0447-5cab-4a938a46e40d");
INSERT INTO DIM_WAY
	VALUES ("16cdf782-7cfd-8326-c1a0-f499105a55fb",
	2128.000000,
	1792.000000,
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("ac081099-edaf-5ca0-9aa1-db1a9e3cdef0",
	2176.000000,
	1792.000000,
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000",
	"16cdf782-7cfd-8326-c1a0-f499105a55fb");
INSERT INTO DIM_WAY
	VALUES ("965894ac-d3f0-9439-4974-fc54f4d23108",
	2176.000000,
	1920.000000,
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000",
	"ac081099-edaf-5ca0-9aa1-db1a9e3cdef0");
INSERT INTO DIM_WAY
	VALUES ("82e3eec4-a81c-0447-5cab-4a938a46e40d",
	2128.000000,
	1920.000000,
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000",
	"965894ac-d3f0-9439-4974-fc54f4d23108");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0a0767c9-3f20-8dd8-f3e9-b131464e9aae",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("5a622923-78aa-c834-6e6e-011ed1c8f96c",
	"c59be97d-aa90-ce96-c8d5-1ea82daaa458",
	"0a0767c9-3f20-8dd8-f3e9-b131464e9aae");
INSERT INTO GD_GE
	VALUES ("c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"55ce11cf-67cc-31fe-1e3e-5236c9b962dc",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Run F16 Transformers::ET5: Run F17 Timestamp and F18 Date Operators');
INSERT INTO GD_CON
	VALUES ("c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c76e138b-0fdb-e7c6-7bad-1d3097402efe",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c76e138b-0fdb-e7c6-7bad-1d3097402efe");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c76e138b-0fdb-e7c6-7bad-1d3097402efe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c76e138b-0fdb-e7c6-7bad-1d3097402efe",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3fc89995-ed47-0908-cc2b-d19f2b944e63",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	3,
	22.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (212.000000,
	60.000000,
	"3fc89995-ed47-0908-cc2b-d19f2b944e63");
INSERT INTO DIM_GE
	VALUES (2182.000000,
	1984.000000,
	"3fc89995-ed47-0908-cc2b-d19f2b944e63",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3fc89995-ed47-0908-cc2b-d19f2b944e63",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("85609a2a-cb32-e201-81ba-10ed712dcefc",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"85609a2a-cb32-e201-81ba-10ed712dcefc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"85609a2a-cb32-e201-81ba-10ed712dcefc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85609a2a-cb32-e201-81ba-10ed712dcefc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("a0244fe5-a0a6-71f8-6d8e-06d2a180e73f",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000",
	"a4964af7-c791-078a-15c7-c1f3f9c2ba54",
	"5ad696c8-80d7-c5a2-4ac1-67e3a72df771");
INSERT INTO GD_LS
	VALUES ("f6ab8e37-a962-a6d0-0d77-7f1f421f8d6f",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"a0244fe5-a0a6-71f8-6d8e-06d2a180e73f",
	"5ad696c8-80d7-c5a2-4ac1-67e3a72df771",
	"4471f52d-d650-96bf-0d34-e0fddb4799b5");
INSERT INTO GD_LS
	VALUES ("d12dc021-2848-9957-b6f6-de369409b6d4",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"f6ab8e37-a962-a6d0-0d77-7f1f421f8d6f",
	"4471f52d-d650-96bf-0d34-e0fddb4799b5",
	"a22271ef-1e29-3215-372f-4caa66c934e6");
INSERT INTO DIM_WAY
	VALUES ("a4964af7-c791-078a-15c7-c1f3f9c2ba54",
	2128.000000,
	1952.000000,
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5ad696c8-80d7-c5a2-4ac1-67e3a72df771",
	2176.000000,
	1952.000000,
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000",
	"a4964af7-c791-078a-15c7-c1f3f9c2ba54");
INSERT INTO DIM_WAY
	VALUES ("4471f52d-d650-96bf-0d34-e0fddb4799b5",
	2176.000000,
	2048.000000,
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000",
	"5ad696c8-80d7-c5a2-4ac1-67e3a72df771");
INSERT INTO DIM_WAY
	VALUES ("a22271ef-1e29-3215-372f-4caa66c934e6",
	2128.000000,
	2048.000000,
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000",
	"4471f52d-d650-96bf-0d34-e0fddb4799b5");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c2c984bc-9ecf-376a-17c8-58a4e6a34a68",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("aba5c60f-8543-1af2-f035-3740d9b5617b",
	"ed2746ba-b113-a4f2-c110-94110c136d27",
	"c2c984bc-9ecf-376a-17c8-58a4e6a34a68");
INSERT INTO GD_GE
	VALUES ("343fa067-360b-db51-381d-07062382cc02",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"81a758ba-b280-52f9-2e2b-8a985d1214e0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Runnning F17 Timestamp and F18 Date Operators::ET6: Run F1 and F2 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("343fa067-360b-db51-381d-07062382cc02",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("122d797e-3e6e-fbaa-0f5d-5b7a70bfd567",
	"343fa067-360b-db51-381d-07062382cc02",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"122d797e-3e6e-fbaa-0f5d-5b7a70bfd567");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"122d797e-3e6e-fbaa-0f5d-5b7a70bfd567",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("122d797e-3e6e-fbaa-0f5d-5b7a70bfd567",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b2578323-c12b-bd4e-4956-55c6785f1278",
	"343fa067-360b-db51-381d-07062382cc02",
	3,
	-62.000000,
	22.000000);
INSERT INTO DIM_ND
	VALUES (186.000000,
	64.000000,
	"b2578323-c12b-bd4e-4956-55c6785f1278");
INSERT INTO DIM_GE
	VALUES (2177.000000,
	2077.000000,
	"b2578323-c12b-bd4e-4956-55c6785f1278",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b2578323-c12b-bd4e-4956-55c6785f1278",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("de5940de-7d11-9239-a8d3-f5546d12ab4c",
	"343fa067-360b-db51-381d-07062382cc02",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"de5940de-7d11-9239-a8d3-f5546d12ab4c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"de5940de-7d11-9239-a8d3-f5546d12ab4c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("de5940de-7d11-9239-a8d3-f5546d12ab4c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("d26966c0-bbab-8924-1892-a94064b27c1d",
	"343fa067-360b-db51-381d-07062382cc02",
	"00000000-0000-0000-0000-000000000000",
	"aa9f2ada-34c1-1c07-2a72-a07c1cdef755",
	"e70cb827-722e-ec17-bfa4-2204d19dada0");
INSERT INTO DIM_WAY
	VALUES ("aa9f2ada-34c1-1c07-2a72-a07c1cdef755",
	2128.000000,
	2080.000000,
	"343fa067-360b-db51-381d-07062382cc02",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e70cb827-722e-ec17-bfa4-2204d19dada0",
	2400.000000,
	2080.000000,
	"343fa067-360b-db51-381d-07062382cc02",
	"00000000-0000-0000-0000-000000000000",
	"aa9f2ada-34c1-1c07-2a72-a07c1cdef755");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"343fa067-360b-db51-381d-07062382cc02",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("343fa067-360b-db51-381d-07062382cc02",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("3505f26f-6851-cc05-a3bf-b8520e60a1e7",
	"737e26d1-887e-f8a8-1f6f-3d7b1476f61b",
	"343fa067-360b-db51-381d-07062382cc02");
INSERT INTO GD_GE
	VALUES ("19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"91129f55-fc86-e8a1-6e9e-a2712f72fd3c",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F1 and F2 for User Defined Types::ET7: Run F3 through F14 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("49e92021-743b-c1b8-7d1d-733a9241c39b",
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"49e92021-743b-c1b8-7d1d-733a9241c39b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"49e92021-743b-c1b8-7d1d-733a9241c39b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("49e92021-743b-c1b8-7d1d-733a9241c39b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6bbaf0ba-2767-01bf-7768-2e798900025f",
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	3,
	40.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (247.000000,
	49.000000,
	"6bbaf0ba-2767-01bf-7768-2e798900025f");
INSERT INTO DIM_GE
	VALUES (2632.000000,
	1975.000000,
	"6bbaf0ba-2767-01bf-7768-2e798900025f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6bbaf0ba-2767-01bf-7768-2e798900025f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0bb88857-0566-eb33-75f0-9e67904efeb2",
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0bb88857-0566-eb33-75f0-9e67904efeb2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0bb88857-0566-eb33-75f0-9e67904efeb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0bb88857-0566-eb33-75f0-9e67904efeb2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2765ce81-39ab-791c-7839-f0280d4c88a3",
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"00000000-0000-0000-0000-000000000000",
	"a158e3dc-2cf6-3910-ddf3-0ed4f9fc8141",
	"532aa2ce-767e-65ee-1ae5-a260caa7e1f5");
INSERT INTO DIM_WAY
	VALUES ("a158e3dc-2cf6-3910-ddf3-0ed4f9fc8141",
	2608.000000,
	2016.000000,
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("532aa2ce-767e-65ee-1ae5-a260caa7e1f5",
	2608.000000,
	1968.000000,
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"00000000-0000-0000-0000-000000000000",
	"a158e3dc-2cf6-3910-ddf3-0ed4f9fc8141");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"19a262b5-6120-b8ad-9a0c-e59e15e50518",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("19a262b5-6120-b8ad-9a0c-e59e15e50518",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fa017363-6111-f8a4-5356-72dbef1d39fb",
	"4027f2b9-a72f-a06a-1f95-ffdec221f9e6",
	"19a262b5-6120-b8ad-9a0c-e59e15e50518");
INSERT INTO GD_GE
	VALUES ("21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"1fcc1d2a-0e00-4091-34e9-7c7d968978ed",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F3 through F14 for User Defined Types::ET8: Run F15 for User Defined Types');
INSERT INTO GD_CON
	VALUES ("21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1d8142ab-5294-6b19-f774-75a83c41e054",
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1d8142ab-5294-6b19-f774-75a83c41e054");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1d8142ab-5294-6b19-f774-75a83c41e054",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1d8142ab-5294-6b19-f774-75a83c41e054",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9b829c3a-181b-98bc-6ca5-8a461f4dd877",
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	3,
	34.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (228.000000,
	45.000000,
	"9b829c3a-181b-98bc-6ca5-8a461f4dd877");
INSERT INTO DIM_GE
	VALUES (2626.000000,
	1820.000000,
	"9b829c3a-181b-98bc-6ca5-8a461f4dd877",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9b829c3a-181b-98bc-6ca5-8a461f4dd877",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("9d97a8f2-7792-6c80-75b6-eb6d7fe49802",
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"9d97a8f2-7792-6c80-75b6-eb6d7fe49802");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"9d97a8f2-7792-6c80-75b6-eb6d7fe49802",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("9d97a8f2-7792-6c80-75b6-eb6d7fe49802",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("ff92733c-09b0-192b-2508-c2ed6a63638f",
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"00000000-0000-0000-0000-000000000000",
	"0b423ac7-b84f-6b00-b53f-ac14bb392dfb",
	"a5ae1079-464d-7351-6b98-88ea79da8d13");
INSERT INTO DIM_WAY
	VALUES ("0b423ac7-b84f-6b00-b53f-ac14bb392dfb",
	2608.000000,
	1872.000000,
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a5ae1079-464d-7351-6b98-88ea79da8d13",
	2608.000000,
	1808.000000,
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"00000000-0000-0000-0000-000000000000",
	"0b423ac7-b84f-6b00-b53f-ac14bb392dfb");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("21e23872-1dd7-75e6-d6ff-8d1505f406ab",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("1a309fbf-2486-d096-80e2-0decb06b67aa",
	"467e1212-9728-a32d-7a57-31745782fee6",
	"21e23872-1dd7-75e6-d6ff-8d1505f406ab");
INSERT INTO GD_GE
	VALUES ("27417812-ca44-bde5-20d8-238e40a428df",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"707dbea1-fd6f-aba0-64f7-e2c87d70cf6a",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Running F15 for User Defined Types::ET9: Shut Down');
INSERT INTO GD_CON
	VALUES ("27417812-ca44-bde5-20d8-238e40a428df",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("841be2b7-9e5e-68c9-4b36-617a576354d9",
	"27417812-ca44-bde5-20d8-238e40a428df",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"841be2b7-9e5e-68c9-4b36-617a576354d9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"841be2b7-9e5e-68c9-4b36-617a576354d9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("841be2b7-9e5e-68c9-4b36-617a576354d9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fd95c7ea-33c1-6a3b-13f5-fa9dd2ad62cb",
	"27417812-ca44-bde5-20d8-238e40a428df",
	3,
	-5.000000,
	-8.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	52.000000,
	"fd95c7ea-33c1-6a3b-13f5-fa9dd2ad62cb");
INSERT INTO DIM_GE
	VALUES (2571.000000,
	1649.000000,
	"fd95c7ea-33c1-6a3b-13f5-fa9dd2ad62cb",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fd95c7ea-33c1-6a3b-13f5-fa9dd2ad62cb",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1fbf19c8-3f7f-56cb-ef08-44bb6e4cac4d",
	"27417812-ca44-bde5-20d8-238e40a428df",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1fbf19c8-3f7f-56cb-ef08-44bb6e4cac4d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1fbf19c8-3f7f-56cb-ef08-44bb6e4cac4d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1fbf19c8-3f7f-56cb-ef08-44bb6e4cac4d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("abb0f6ed-e3d5-df65-d07d-16ea3ea69b8a",
	"27417812-ca44-bde5-20d8-238e40a428df",
	"00000000-0000-0000-0000-000000000000",
	"03bd82a6-def8-0579-7880-a4f08d5bdde1",
	"2052e12c-6a28-8e51-6e17-48a56df3d68b");
INSERT INTO DIM_WAY
	VALUES ("03bd82a6-def8-0579-7880-a4f08d5bdde1",
	2592.000000,
	1712.000000,
	"27417812-ca44-bde5-20d8-238e40a428df",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("2052e12c-6a28-8e51-6e17-48a56df3d68b",
	2592.000000,
	1632.000000,
	"27417812-ca44-bde5-20d8-238e40a428df",
	"00000000-0000-0000-0000-000000000000",
	"03bd82a6-def8-0579-7880-a4f08d5bdde1");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"27417812-ca44-bde5-20d8-238e40a428df",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("27417812-ca44-bde5-20d8-238e40a428df",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("7fcd81c3-b65c-bf74-bce1-33087f600294",
	"6b36c003-8d40-7b89-a56a-7ceff3a4e7dd",
	"27417812-ca44-bde5-20d8-238e40a428df");
INSERT INTO GD_GE
	VALUES ("69351d28-5276-0371-a9b4-51a190952bd7",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"05d84334-6128-3c86-0ccd-46ce2a40f255",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing empty operator::ET10: Start not_empty test');
INSERT INTO GD_CON
	VALUES ("69351d28-5276-0371-a9b4-51a190952bd7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("eddcb9d0-5739-1e64-efd4-16b04cdae0cd",
	"69351d28-5276-0371-a9b4-51a190952bd7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"eddcb9d0-5739-1e64-efd4-16b04cdae0cd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"eddcb9d0-5739-1e64-efd4-16b04cdae0cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("eddcb9d0-5739-1e64-efd4-16b04cdae0cd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("b0c0c9b0-6c74-e64a-5ecc-988b64dd3859",
	"69351d28-5276-0371-a9b4-51a190952bd7",
	3,
	-170.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (199.000000,
	37.000000,
	"b0c0c9b0-6c74-e64a-5ecc-988b64dd3859");
INSERT INTO DIM_GE
	VALUES (742.000000,
	1794.000000,
	"b0c0c9b0-6c74-e64a-5ecc-988b64dd3859",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b0c0c9b0-6c74-e64a-5ecc-988b64dd3859",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("810e7a95-3759-bcda-75ff-8db151453f3f",
	"69351d28-5276-0371-a9b4-51a190952bd7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"810e7a95-3759-bcda-75ff-8db151453f3f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"810e7a95-3759-bcda-75ff-8db151453f3f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("810e7a95-3759-bcda-75ff-8db151453f3f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9041551f-e5c4-da81-6895-6dba5ce5a888",
	"69351d28-5276-0371-a9b4-51a190952bd7",
	"00000000-0000-0000-0000-000000000000",
	"2fd371eb-cadd-8b11-5a4d-471fbe4b2666",
	"579f4f94-2104-92da-8b1d-e1a231578cf6");
INSERT INTO DIM_WAY
	VALUES ("2fd371eb-cadd-8b11-5a4d-471fbe4b2666",
	928.000000,
	1776.000000,
	"69351d28-5276-0371-a9b4-51a190952bd7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("579f4f94-2104-92da-8b1d-e1a231578cf6",
	928.000000,
	1840.000000,
	"69351d28-5276-0371-a9b4-51a190952bd7",
	"00000000-0000-0000-0000-000000000000",
	"2fd371eb-cadd-8b11-5a4d-471fbe4b2666");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"69351d28-5276-0371-a9b4-51a190952bd7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("69351d28-5276-0371-a9b4-51a190952bd7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("648ec6c0-eb5e-12fa-e8ba-83a21b85f633",
	"c61fae45-9cf3-6c26-f36b-c8ba958c083f",
	"69351d28-5276-0371-a9b4-51a190952bd7");
INSERT INTO GD_GE
	VALUES ("d971a2ea-7e50-a647-941d-247d77270566",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"cf58d7a1-02e9-c68a-f72c-ec10d95550b2",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not_empty operator::ET11: Start cardinality test');
INSERT INTO GD_CON
	VALUES ("d971a2ea-7e50-a647-941d-247d77270566",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("a3f8d2f2-be40-9600-d9b0-0902cc51e2ad",
	"d971a2ea-7e50-a647-941d-247d77270566",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"a3f8d2f2-be40-9600-d9b0-0902cc51e2ad");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"a3f8d2f2-be40-9600-d9b0-0902cc51e2ad",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a3f8d2f2-be40-9600-d9b0-0902cc51e2ad",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("481438f1-3dcb-cfb4-f263-2442c029ab7f",
	"d971a2ea-7e50-a647-941d-247d77270566",
	3,
	-163.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (169.000000,
	36.000000,
	"481438f1-3dcb-cfb4-f263-2442c029ab7f");
INSERT INTO DIM_GE
	VALUES (749.000000,
	1961.000000,
	"481438f1-3dcb-cfb4-f263-2442c029ab7f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("481438f1-3dcb-cfb4-f263-2442c029ab7f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("22021a1e-8da9-f9d1-51de-5d91166b9e2f",
	"d971a2ea-7e50-a647-941d-247d77270566",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"22021a1e-8da9-f9d1-51de-5d91166b9e2f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"22021a1e-8da9-f9d1-51de-5d91166b9e2f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("22021a1e-8da9-f9d1-51de-5d91166b9e2f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("61e48b8d-22d8-6193-ab52-44a56881ced7",
	"d971a2ea-7e50-a647-941d-247d77270566",
	"00000000-0000-0000-0000-000000000000",
	"08f894b4-8bc2-d6af-521d-da40f873c150",
	"c6b9f1ef-4801-acbd-a33b-bd2b9fc69708");
INSERT INTO DIM_WAY
	VALUES ("08f894b4-8bc2-d6af-521d-da40f873c150",
	928.000000,
	1936.000000,
	"d971a2ea-7e50-a647-941d-247d77270566",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c6b9f1ef-4801-acbd-a33b-bd2b9fc69708",
	928.000000,
	2016.000000,
	"d971a2ea-7e50-a647-941d-247d77270566",
	"00000000-0000-0000-0000-000000000000",
	"08f894b4-8bc2-d6af-521d-da40f873c150");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d971a2ea-7e50-a647-941d-247d77270566",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d971a2ea-7e50-a647-941d-247d77270566",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("25c2184f-2320-932e-b388-0c133bbf5c7a",
	"ba6d320a-988a-b805-c20e-61ae0ecbcf36",
	"d971a2ea-7e50-a647-941d-247d77270566");
INSERT INTO GD_GE
	VALUES ("ee85faf0-db92-5bfe-582f-906106c01a9f",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"5bd354f8-de29-42e7-95be-8f5033bbd963",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET1: Start Expression Test');
INSERT INTO GD_CON
	VALUES ("ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c97892db-3821-4518-d60f-7628ea4b8a28",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c97892db-3821-4518-d60f-7628ea4b8a28");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c97892db-3821-4518-d60f-7628ea4b8a28",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c97892db-3821-4518-d60f-7628ea4b8a28",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c29cdcac-59a4-33fc-628f-b56c09f9a3a6",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	3,
	-38.000000,
	-24.000000);
INSERT INTO DIM_ND
	VALUES (161.000000,
	35.000000,
	"c29cdcac-59a4-33fc-628f-b56c09f9a3a6");
INSERT INTO DIM_GE
	VALUES (681.000000,
	1279.000000,
	"c29cdcac-59a4-33fc-628f-b56c09f9a3a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c29cdcac-59a4-33fc-628f-b56c09f9a3a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cb8997b4-3365-72fb-9a28-edd8c08cdc91",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cb8997b4-3365-72fb-9a28-edd8c08cdc91");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cb8997b4-3365-72fb-9a28-edd8c08cdc91",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cb8997b4-3365-72fb-9a28-edd8c08cdc91",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e52e3b1e-2dc3-c799-7821-16d5b7b8b23a",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"5156f00b-7858-d6e5-c3dd-492b955d4055",
	"351c612a-237b-4c2e-5833-ec08d7473a0e");
INSERT INTO GD_LS
	VALUES ("15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"e52e3b1e-2dc3-c799-7821-16d5b7b8b23a",
	"351c612a-237b-4c2e-5833-ec08d7473a0e",
	"79db8597-6619-d737-a749-54a53bae1ccd");
INSERT INTO GD_LS
	VALUES ("fd5373d8-6da1-a3ef-23b0-8981821c3b88",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"15ffa0a3-fa89-b080-2bdd-c96be9b8b5dc",
	"79db8597-6619-d737-a749-54a53bae1ccd",
	"da00168b-5980-6028-f5a4-85fb0c0043fd");
INSERT INTO GD_LS
	VALUES ("2ce106d8-5710-ccf2-0c56-a38fb5b88507",
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"fd5373d8-6da1-a3ef-23b0-8981821c3b88",
	"da00168b-5980-6028-f5a4-85fb0c0043fd",
	"87e312cf-03d7-bd86-cf84-df3fd8f6b367");
INSERT INTO DIM_WAY
	VALUES ("5156f00b-7858-d6e5-c3dd-492b955d4055",
	752.000000,
	1408.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("351c612a-237b-4c2e-5833-ec08d7473a0e",
	624.000000,
	1408.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"5156f00b-7858-d6e5-c3dd-492b955d4055");
INSERT INTO DIM_WAY
	VALUES ("79db8597-6619-d737-a749-54a53bae1ccd",
	624.000000,
	1328.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"351c612a-237b-4c2e-5833-ec08d7473a0e");
INSERT INTO DIM_WAY
	VALUES ("da00168b-5980-6028-f5a4-85fb0c0043fd",
	784.000000,
	1328.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"79db8597-6619-d737-a749-54a53bae1ccd");
INSERT INTO DIM_WAY
	VALUES ("87e312cf-03d7-bd86-cf84-df3fd8f6b367",
	784.000000,
	1360.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000",
	"da00168b-5980-6028-f5a4-85fb0c0043fd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"ee85faf0-db92-5bfe-582f-906106c01a9f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ee85faf0-db92-5bfe-582f-906106c01a9f",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("61a3b83f-3f03-4108-7437-2bdcdd03e928",
	"3bb3abbe-aa2e-9836-87cf-a6ee98a4f7c5",
	"ee85faf0-db92-5bfe-582f-906106c01a9f");
INSERT INTO GD_GE
	VALUES ("c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"87f26125-913e-11f9-0388-3ce77f6cc0d5",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing not operator::ET12: Start empty test');
INSERT INTO GD_CON
	VALUES ("c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1f54f037-1ad7-1d52-0594-6f4b21260007",
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1f54f037-1ad7-1d52-0594-6f4b21260007");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1f54f037-1ad7-1d52-0594-6f4b21260007",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f54f037-1ad7-1d52-0594-6f4b21260007",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("4b4fc108-ad8f-85db-3193-faab29081f6c",
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	3,
	-159.000000,
	-1.000000);
INSERT INTO DIM_ND
	VALUES (189.000000,
	36.000000,
	"4b4fc108-ad8f-85db-3193-faab29081f6c");
INSERT INTO DIM_GE
	VALUES (753.000000,
	1632.000000,
	"4b4fc108-ad8f-85db-3193-faab29081f6c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4b4fc108-ad8f-85db-3193-faab29081f6c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("918151ad-523d-4669-b631-0f550cd59fe2",
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"918151ad-523d-4669-b631-0f550cd59fe2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"918151ad-523d-4669-b631-0f550cd59fe2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("918151ad-523d-4669-b631-0f550cd59fe2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("003a6b4a-1d3f-2b90-85c5-3072e48e4195",
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"00000000-0000-0000-0000-000000000000",
	"d564917a-4a47-ad14-6b9b-21bdc8b1e6c4",
	"0488c8dc-b86d-d4d7-c91f-29ac624f44b4");
INSERT INTO DIM_WAY
	VALUES ("d564917a-4a47-ad14-6b9b-21bdc8b1e6c4",
	928.000000,
	1616.000000,
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("0488c8dc-b86d-d4d7-c91f-29ac624f44b4",
	928.000000,
	1680.000000,
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"00000000-0000-0000-0000-000000000000",
	"d564917a-4a47-ad14-6b9b-21bdc8b1e6c4");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c90f0b8e-2ee8-c900-bcd1-0e4afa69f229",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("fd96b73e-f7c2-17e4-189e-7f9607ee29a1",
	"fb3e006c-3dd8-b446-a36a-0fdf9890dd34",
	"c90f0b8e-2ee8-c900-bcd1-0e4afa69f229");
INSERT INTO GD_GE
	VALUES ("2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"b6ade2ad-7bf6-d77e-3b08-4d338e6fc3e0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Starting Expression Test F1 and F2::ET13: Start not test');
INSERT INTO GD_CON
	VALUES ("2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c50f1574-dd46-44e2-e39b-ef33a544816c",
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c50f1574-dd46-44e2-e39b-ef33a544816c");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c50f1574-dd46-44e2-e39b-ef33a544816c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c50f1574-dd46-44e2-e39b-ef33a544816c",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2457eff8-307f-66c7-d0d5-0c847da032a7",
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	3,
	-220.000000,
	-6.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	40.000000,
	"2457eff8-307f-66c7-d0d5-0c847da032a7");
INSERT INTO DIM_GE
	VALUES (692.000000,
	1475.000000,
	"2457eff8-307f-66c7-d0d5-0c847da032a7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2457eff8-307f-66c7-d0d5-0c847da032a7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("447b1288-8772-0c8a-d14f-bb305e088ec7",
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"447b1288-8772-0c8a-d14f-bb305e088ec7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"447b1288-8772-0c8a-d14f-bb305e088ec7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("447b1288-8772-0c8a-d14f-bb305e088ec7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("c0167b59-101c-acc7-dca6-ad121c58d91f",
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"00000000-0000-0000-0000-000000000000",
	"1a3abc8b-179b-a582-b41f-a058b5c26533",
	"e58c8443-c22e-097e-6001-68bce54262d8");
INSERT INTO DIM_WAY
	VALUES ("1a3abc8b-179b-a582-b41f-a058b5c26533",
	928.000000,
	1456.000000,
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e58c8443-c22e-097e-6001-68bce54262d8",
	928.000000,
	1536.000000,
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"00000000-0000-0000-0000-000000000000",
	"1a3abc8b-179b-a582-b41f-a058b5c26533");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2d5a2706-ec38-64db-dd8d-3a6a36d58818",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("70729d0f-a9a7-2289-8749-13326ea562b3",
	"e4d01898-5b40-4088-36d0-6148b5cd0552",
	"2d5a2706-ec38-64db-dd8d-3a6a36d58818");
INSERT INTO GD_GE
	VALUES ("6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"7e57820e-2dc6-03dd-e2fa-bfde224d60e3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing cardinality operator::ET14: Start subtract test');
INSERT INTO GD_CON
	VALUES ("6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6b9905f4-ff07-dd22-ab51-6610564a1146",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6b9905f4-ff07-dd22-ab51-6610564a1146");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6b9905f4-ff07-dd22-ab51-6610564a1146",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6b9905f4-ff07-dd22-ab51-6610564a1146",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("806a9ee0-de67-9854-a61f-b90539c14d24",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	3,
	-54.000000,
	-372.000000);
INSERT INTO DIM_ND
	VALUES (233.000000,
	39.000000,
	"806a9ee0-de67-9854-a61f-b90539c14d24");
INSERT INTO DIM_GE
	VALUES (1098.000000,
	1333.000000,
	"806a9ee0-de67-9854-a61f-b90539c14d24",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("806a9ee0-de67-9854-a61f-b90539c14d24",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c1a9eca4-5681-648a-1c51-6adcad280702",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c1a9eca4-5681-648a-1c51-6adcad280702");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c1a9eca4-5681-648a-1c51-6adcad280702",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1a9eca4-5681-648a-1c51-6adcad280702",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000",
	"ff5992ce-a693-087c-b723-6b7314a98d3f",
	"73699cd6-b846-e7a4-d8ae-9a1fa768e00e");
INSERT INTO GD_LS
	VALUES ("12677fea-9c80-5307-71ab-aa3ae4748fa9",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"8cbc4e4d-4e72-5e03-855c-2b2fa201d2a7",
	"73699cd6-b846-e7a4-d8ae-9a1fa768e00e",
	"b91d77a5-7e9e-362b-5216-eee72bbd030e");
INSERT INTO GD_LS
	VALUES ("43699e04-d5ae-13bd-ad17-ab4c98be280d",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"12677fea-9c80-5307-71ab-aa3ae4748fa9",
	"b91d77a5-7e9e-362b-5216-eee72bbd030e",
	"b6177e9d-d09d-383f-f60b-15ef826dbc4b");
INSERT INTO DIM_WAY
	VALUES ("ff5992ce-a693-087c-b723-6b7314a98d3f",
	1072.000000,
	2080.000000,
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("73699cd6-b846-e7a4-d8ae-9a1fa768e00e",
	1168.000000,
	2080.000000,
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000",
	"ff5992ce-a693-087c-b723-6b7314a98d3f");
INSERT INTO DIM_WAY
	VALUES ("b91d77a5-7e9e-362b-5216-eee72bbd030e",
	1168.000000,
	1376.000000,
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000",
	"73699cd6-b846-e7a4-d8ae-9a1fa768e00e");
INSERT INTO DIM_WAY
	VALUES ("b6177e9d-d09d-383f-f60b-15ef826dbc4b",
	1280.000000,
	1376.000000,
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000",
	"b91d77a5-7e9e-362b-5216-eee72bbd030e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6e13fdf2-4b13-5ee2-ffab-b294492b8f59",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("f739f36e-7bca-826d-3d9d-275c54e1e055",
	"b9e15329-8c28-2f5f-1982-f87bb9b92523",
	"6e13fdf2-4b13-5ee2-ffab-b294492b8f59");
INSERT INTO GD_GE
	VALUES ("4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"38f76ef9-7dd8-a15d-db9d-638a005e01d3",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing subtraction operator::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("c5bd644d-a96a-8850-1cb3-e7ec03f04bbc",
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"c5bd644d-a96a-8850-1cb3-e7ec03f04bbc");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"c5bd644d-a96a-8850-1cb3-e7ec03f04bbc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c5bd644d-a96a-8850-1cb3-e7ec03f04bbc",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8cac598a-d568-56ba-f212-4de5e7d962ac",
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	3,
	-210.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (220.000000,
	34.000000,
	"8cac598a-d568-56ba-f212-4de5e7d962ac");
INSERT INTO DIM_GE
	VALUES (1198.000000,
	1469.000000,
	"8cac598a-d568-56ba-f212-4de5e7d962ac",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8cac598a-d568-56ba-f212-4de5e7d962ac",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("569fc37c-71fd-7065-03ac-e2e4caeb94dd",
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"569fc37c-71fd-7065-03ac-e2e4caeb94dd");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"569fc37c-71fd-7065-03ac-e2e4caeb94dd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("569fc37c-71fd-7065-03ac-e2e4caeb94dd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("754c3751-e5d3-08d8-3929-f3de089542e6",
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"00000000-0000-0000-0000-000000000000",
	"cb34a887-8239-a0ba-a352-e22d302f672e",
	"a16c6401-8d0f-ecc0-1e7e-b0bca87adfcc");
INSERT INTO DIM_WAY
	VALUES ("cb34a887-8239-a0ba-a352-e22d302f672e",
	1424.000000,
	1456.000000,
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a16c6401-8d0f-ecc0-1e7e-b0bca87adfcc",
	1424.000000,
	1520.000000,
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"00000000-0000-0000-0000-000000000000",
	"cb34a887-8239-a0ba-a352-e22d302f672e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("4e62d7c6-3022-0afd-2702-ade144b1e1e7",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("8e2a80ea-c0d5-cf50-b081-d6c5af85c35f",
	"0e62b577-04a3-40a6-2cf3-7731eb00af9a",
	"4e62d7c6-3022-0afd-2702-ade144b1e1e7");
INSERT INTO GD_GE
	VALUES ("25ec4553-6048-f887-09cb-4ae04c840d2d",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"c63bdc8f-6320-a0ef-e91a-7bd5f5ed08be",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Testing assign::ET15: Start assign test');
INSERT INTO GD_CON
	VALUES ("25ec4553-6048-f887-09cb-4ae04c840d2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("1f7bbdae-d733-9602-5c7e-32e15d6f8f9e",
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"1f7bbdae-d733-9602-5c7e-32e15d6f8f9e");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1f7bbdae-d733-9602-5c7e-32e15d6f8f9e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1f7bbdae-d733-9602-5c7e-32e15d6f8f9e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6c9ba1e5-6d8b-5cbf-adc9-f2ad25276c0e",
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	3,
	-246.000000,
	-3.000000);
INSERT INTO DIM_ND
	VALUES (263.000000,
	34.000000,
	"6c9ba1e5-6d8b-5cbf-adc9-f2ad25276c0e");
INSERT INTO DIM_GE
	VALUES (1194.000000,
	1630.000000,
	"6c9ba1e5-6d8b-5cbf-adc9-f2ad25276c0e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6c9ba1e5-6d8b-5cbf-adc9-f2ad25276c0e",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("241f4ffd-b0cb-871b-85a0-2dbcc7739140",
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"241f4ffd-b0cb-871b-85a0-2dbcc7739140");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"241f4ffd-b0cb-871b-85a0-2dbcc7739140",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("241f4ffd-b0cb-871b-85a0-2dbcc7739140",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("6880a2c3-dd2f-29c6-5715-7ee61197e17e",
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	"00000000-0000-0000-0000-000000000000",
	"c122f5dc-1f8c-7f40-e960-72ae6baf875f",
	"e600c149-798c-6c69-f50d-83a4ddc2f5f7");
INSERT INTO DIM_WAY
	VALUES ("c122f5dc-1f8c-7f40-e960-72ae6baf875f",
	1456.000000,
	1616.000000,
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("e600c149-798c-6c69-f50d-83a4ddc2f5f7",
	1456.000000,
	1680.000000,
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	"00000000-0000-0000-0000-000000000000",
	"c122f5dc-1f8c-7f40-e960-72ae6baf875f");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"25ec4553-6048-f887-09cb-4ae04c840d2d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("25ec4553-6048-f887-09cb-4ae04c840d2d",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("50ed17ef-dd27-bf01-5311-2d9c10a6dfff",
	"d3e1f432-06d4-ca7a-c6cf-4fe90278bb6e",
	"25ec4553-6048-f887-09cb-4ae04c840d2d");
INSERT INTO GD_GE
	VALUES ("f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"2f9979da-033b-a529-812e-6e0002ece0d7",
	"aa75aff3-40b8-c218-1567-bee8e6661517",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::Expression Test::Instance State Machine::Additional assign tests::ET16: Start and test');
INSERT INTO GD_CON
	VALUES ("f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("cc93fb10-4acd-9b84-baf5-02fcb6124cb2",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"cc93fb10-4acd-9b84-baf5-02fcb6124cb2");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cc93fb10-4acd-9b84-baf5-02fcb6124cb2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cc93fb10-4acd-9b84-baf5-02fcb6124cb2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("bf5c3fc2-1dff-6541-b3c6-f87e14e0aa71",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	3,
	22.000000,
	16.000000);
INSERT INTO DIM_ND
	VALUES (187.000000,
	35.000000,
	"bf5c3fc2-1dff-6541-b3c6-f87e14e0aa71");
INSERT INTO DIM_GE
	VALUES (1654.000000,
	1641.000000,
	"bf5c3fc2-1dff-6541-b3c6-f87e14e0aa71",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf5c3fc2-1dff-6541-b3c6-f87e14e0aa71",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("8b315c76-d5e3-7d1a-26b0-9c9e27032437",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"8b315c76-d5e3-7d1a-26b0-9c9e27032437");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8b315c76-d5e3-7d1a-26b0-9c9e27032437",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8b315c76-d5e3-7d1a-26b0-9c9e27032437",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("2ff41ad8-6f17-153b-084c-ffe548379eba",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000",
	"8d0328a6-2e4f-9332-d18c-48c456d728cc",
	"c2548ecf-be67-a011-9b14-ece3e30d07ac");
INSERT INTO GD_LS
	VALUES ("3461f0a4-1b81-aa34-e8b0-85feb5083a4b",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"2ff41ad8-6f17-153b-084c-ffe548379eba",
	"c2548ecf-be67-a011-9b14-ece3e30d07ac",
	"ee0fd5b1-bd97-6ced-fd0b-93565f4c0528");
INSERT INTO GD_LS
	VALUES ("3906f057-325d-5e2c-32d9-e370852f3fa7",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"3461f0a4-1b81-aa34-e8b0-85feb5083a4b",
	"ee0fd5b1-bd97-6ced-fd0b-93565f4c0528",
	"9e726727-b13f-785d-7f4c-a16f8494579c");
INSERT INTO DIM_WAY
	VALUES ("8d0328a6-2e4f-9332-d18c-48c456d728cc",
	1600.000000,
	1728.000000,
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("c2548ecf-be67-a011-9b14-ece3e30d07ac",
	1648.000000,
	1728.000000,
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000",
	"8d0328a6-2e4f-9332-d18c-48c456d728cc");
INSERT INTO DIM_WAY
	VALUES ("ee0fd5b1-bd97-6ced-fd0b-93565f4c0528",
	1648.000000,
	1568.000000,
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000",
	"c2548ecf-be67-a011-9b14-ece3e30d07ac");
INSERT INTO DIM_WAY
	VALUES ("9e726727-b13f-785d-7f4c-a16f8494579c",
	1712.000000,
	1568.000000,
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000",
	"ee0fd5b1-bd97-6ced-fd0b-93565f4c0528");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f7a73ea3-ed4d-1b8b-c45c-932d8a92a708",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("33a5ba38-87b0-b0c0-f2d9-fa608d16fbd8",
	"c27c223b-6374-9fb7-1dab-fa00725dc85d",
	"f7a73ea3-ed4d-1b8b-c45c-932d8a92a708");
INSERT INTO DIM_DIA
	VALUES ("2f9979da-033b-a529-812e-6e0002ece0d7",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	'Many Instances',
	7,
	'MI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74");
INSERT INTO O_BATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74");
INSERT INTO O_ATTR
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"00000000-0000-0000-0000-000000000000",
	'mi_id',
	'',
	'',
	'mi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"6c92c0a0-43ac-234e-c6ce-1ec2a655df3d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R4');
INSERT INTO O_RATTR
	VALUES ("44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("44eee04b-c7b3-406b-e49a-559cc8c0ceaf",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74");
INSERT INTO O_OIDA
	VALUES ("21f99b5b-bf90-a6e1-f01a-4f18121d29c0",
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	0,
	'mi_id');
INSERT INTO O_ID
	VALUES (1,
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74");
INSERT INTO O_ID
	VALUES (2,
	"4206c40b-edd7-2055-c9ae-7e2e2357ae74");
INSERT INTO PE_PE
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	'No Instances',
	5,
	'NOI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"07bff483-9300-a1f1-5b45-304f90bb0356");
INSERT INTO O_BATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"07bff483-9300-a1f1-5b45-304f90bb0356");
INSERT INTO O_ATTR
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	"00000000-0000-0000-0000-000000000000",
	'noi_id',
	'',
	'',
	'noi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"770dd365-5254-96db-959d-bbceea84050b",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R2');
INSERT INTO O_RATTR
	VALUES ("4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	"1820e4f9-f2d9-2605-abf8-375ac991263a",
	'r2et_id',
	'',
	'r2',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"1532eced-0f36-6463-4a58-51234289a64d",
	"7a801430-6744-7624-24f4-233ed91363ae",
	"883e370e-d1ac-910b-db79-98ce3052b9d6",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R5');
INSERT INTO O_RATTR
	VALUES ("7a801430-6744-7624-24f4-233ed91363ae",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("7a801430-6744-7624-24f4-233ed91363ae",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	"4b7b86a4-d4ba-a9dc-fedc-7adeeda61bc8",
	'r5et_id',
	'',
	'r5',
	'et_id',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"07bff483-9300-a1f1-5b45-304f90bb0356");
INSERT INTO O_OIDA
	VALUES ("1820e4f9-f2d9-2605-abf8-375ac991263a",
	"07bff483-9300-a1f1-5b45-304f90bb0356",
	0,
	'noi_id');
INSERT INTO O_ID
	VALUES (1,
	"07bff483-9300-a1f1-5b45-304f90bb0356");
INSERT INTO O_ID
	VALUES (2,
	"07bff483-9300-a1f1-5b45-304f90bb0356");
INSERT INTO PE_PE
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	'One Instance',
	6,
	'OI',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b");
INSERT INTO O_BATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b");
INSERT INTO O_ATTR
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"00000000-0000-0000-0000-000000000000",
	'oi_id',
	'',
	'',
	'oi_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"4894243b-2a30-4adf-abf8-ad29eb612d93",
	"4d61bb05-1726-9fc8-6386-eb8cd95a0001",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Expression Test',
	'et_id',
	'R3');
INSERT INTO O_RATTR
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	1,
	'et_id');
INSERT INTO O_ATTR
	VALUES ("4894243b-2a30-4adf-abf8-ad29eb612d93",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"3193a9f8-daf6-3fe5-6b31-78391226cf26",
	'et_id',
	'',
	'',
	'et_id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"10cb639d-df2d-adb0-98f3-a78db4dc592b");
INSERT INTO O_OIDA
	VALUES ("3193a9f8-daf6-3fe5-6b31-78391226cf26",
	"10cb639d-df2d-adb0-98f3-a78db4dc592b",
	0,
	'oi_id');
INSERT INTO O_ID
	VALUES (1,
	"10cb639d-df2d-adb0-98f3-a78db4dc592b");
INSERT INTO O_ID
	VALUES (2,
	"10cb639d-df2d-adb0-98f3-a78db4dc592b");
INSERT INTO PE_PE
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	'Other Boolean Expression Test',
	16,
	'OBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_BATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_ATTR
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_BATTR
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_ATTR
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"cf465ea6-30e2-2b28-87b9-c08791e751ab",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_REF
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	0,
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	"7be62edf-4758-17b6-2da1-445f35b3beb8",
	"5f1cf737-918c-ed30-1933-f683620cce66",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Boolean Expression Test',
	'id',
	'R10');
INSERT INTO O_RATTR
	VALUES ("7be62edf-4758-17b6-2da1-445f35b3beb8",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("7be62edf-4758-17b6-2da1-445f35b3beb8",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	"6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"27c99522-5892-10ba-f285-109c5fea2d9d",
	"4e230405-b143-8a69-ea76-544b8476c6e9",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'btrue',
	'R11');
INSERT INTO O_RATTR
	VALUES ("27c99522-5892-10ba-f285-109c5fea2d9d",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("27c99522-5892-10ba-f285-109c5fea2d9d",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"7be62edf-4758-17b6-2da1-445f35b3beb8",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	"5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"afce8ef1-6bb4-2038-d4ae-38c2c91d1b1e",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Third Boolean Expression Test',
	'bfalse',
	'R11');
INSERT INTO O_RATTR
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("dcdaea83-d87b-de84-fa3c-6706cbfdd35a",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	"27c99522-5892-10ba-f285-109c5fea2d9d",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_OIDA
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO O_ID
	VALUES (2,
	"6969931b-e22d-0bf5-041b-6abc1679047b");
INSERT INTO PE_PE
	VALUES ("36a13d1a-1200-f700-aecd-ebb37da607d6",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("36a13d1a-1200-f700-aecd-ebb37da607d6",
	'Third Boolean Expression Test',
	17,
	'TBET',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_BATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_ATTR
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_BATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_ATTR
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	"6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"ba5eda7a-def5-0000-0000-000000000001",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_OIDA
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	'bfalse');
INSERT INTO O_OIDA
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	'btrue');
INSERT INTO O_ID
	VALUES (1,
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO O_ID
	VALUES (2,
	"36a13d1a-1200-f700-aecd-ebb37da607d6");
INSERT INTO PE_PE
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	'User Boolean Test',
	18,
	'UBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_BATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_ATTR
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_BATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_ATTR
	VALUES ("13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_BATTR
	VALUES ("e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_ATTR
	VALUES ("e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"13e1f921-8ec3-7572-8e68-d3ae9d68abdc",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"057c8c8a-3480-5e92-6029-a8412947eb30",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'bfalse',
	'R12');
INSERT INTO O_RATTR
	VALUES ("da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"e1390b75-8ab8-348c-727d-ec5f32cea4ec",
	'r9bfalse',
	'',
	'r9',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	"ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"ec864d68-9be0-5fb0-bfc7-cb648f5182c3",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Other Boolean Test',
	'btrue',
	'R12');
INSERT INTO O_RATTR
	VALUES ("9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"da2a31aa-f0ed-56d3-a09f-dae20839ce7d",
	'r9btrue',
	'',
	'r9',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_BATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_ATTR
	VALUES ("f91add83-0bb5-b790-fa50-83e130b4fa84",
	"1666303f-be65-bcfc-c61a-60015487b986",
	"9aabebdb-d891-ae49-5620-10a0e81f9b1b",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_OIDA
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO O_ID
	VALUES (2,
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO SM_ISM
	VALUES ("37f079d3-10d6-deec-188d-cec441629cf6",
	"1666303f-be65-bcfc-c61a-60015487b986");
INSERT INTO SM_SM
	VALUES ("37f079d3-10d6-deec-188d-cec441629cf6",
	'',
	6);
INSERT INTO SM_MOORE
	VALUES ("37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_EVTDI
	VALUES ("ff6e556d-fc46-7470-9b7e-db002e78921c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'tfalse',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("f5aa6b4b-fb5e-01fe-56aa-3df381896848",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'ttrue',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"ff6e556d-fc46-7470-9b7e-db002e78921c");
INSERT INTO SM_EVTDI
	VALUES ("7eaa6fda-7321-f90a-e38c-0677a7363709",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'tfalse',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("add55a8f-b9ea-9479-c36e-2ad2f5bfe53d",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'tfalse',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("29cb091b-eb75-8d7e-1ac2-5fe410cad773",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'tfalse',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("59354e20-333b-07fd-9cb0-034af02bb47a",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'ttrue',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"7eaa6fda-7321-f90a-e38c-0677a7363709");
INSERT INTO SM_EVTDI
	VALUES ("77a1826e-aa55-665e-5654-0e2251a36b73",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'ttrue',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"add55a8f-b9ea-9479-c36e-2ad2f5bfe53d");
INSERT INTO SM_EVTDI
	VALUES ("7e0429f4-c89a-7acf-5271-494d452aa79e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	'ttrue',
	'',
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"29cb091b-eb75-8d7e-1ac2-5fe410cad773");
INSERT INTO SM_LEVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	1,
	'Start and test',
	0,
	'',
	'UBT1',
	'');
INSERT INTO SM_LEVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	2,
	'Continue and test',
	0,
	'',
	'UBT2',
	'');
INSERT INTO SM_LEVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	3,
	'Start or test',
	0,
	'',
	'UBT3',
	'');
INSERT INTO SM_LEVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	4,
	'Continue or test',
	0,
	'',
	'UBT4',
	'');
INSERT INTO SM_STATE
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'And test 1a',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("40f4044e-f142-b000-1c88-3043effa3abe",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"40f4044e-f142-b000-1c88-3043effa3abe");
INSERT INTO SM_AH
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("632b3aeb-abc5-6afe-29c9-ed7c6f5ab8e7",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'LOG::LogInfo(message:"Starting and (user-defined type) test") ;

//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 and rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 and rcvd_evt.ttrue ;
if ( t6 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t7 = temp2 and rcvd_evt.tfalse ;
if ( t7 == false )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( false )") ;
end if;
 
assign t8 = temp2 and rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" and local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 and self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 and self.btrue ;
if ( t14 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t15 = temp2 and self.bfalse ;
if ( t15 == false )
  LOG::LogSuccess(message:" and local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( false )") ;
end if;
 
assign t16 = temp2 and self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" and local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 and self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 and self.r9btrue ;
if ( t18 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t19 = temp2 and self.r9bfalse ;
if ( t19 == false )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( false )") ;
end if;
 
assign t20 = temp2 and self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" and local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 and saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 and saf.btrue ;
if ( t22 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t23 = temp2 and saf.bfalse ;
if ( t23 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t24 = temp2 and saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 and smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 and smf.btrue ;
if ( t26 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t27 = temp2 and smf.bfalse ;
if ( t27 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t28 = temp2 and smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 and sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 and sor.btrue ;
if ( t30 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t31 = temp2 and sor.bfalse ;
if ( t31 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t32 = temp2 and sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 and sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 and sar.btrue ;
if ( t34 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t35 = temp2 and sar.bfalse ;
if ( t35 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t36 = temp2 and sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 and smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 and smr.btrue ;
if ( t38 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t39 = temp2 and smr.bfalse ;
if ( t39 == false )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t40 = temp2 and smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" and local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 and saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 and saf.r11btrue ;
if ( t42 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t43 = temp2 and saf.r11bfalse ;
if ( t43 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t44 = temp2 and saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 and smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 and smf.r11btrue ;
if ( t46 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t47 = temp2 and smf.r11bfalse ;
if ( t47 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t48 = temp2 and smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 and sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 and sor.r11btrue ;
if ( t50 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t51 = temp2 and sor.r11bfalse ;
if ( t51 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t52 = temp2 and sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 and sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 and sar.r11btrue ;
if ( t54 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t55 = temp2 and sar.r11bfalse ;
if ( t55 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t56 = temp2 and sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 and smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 and smr.r11btrue ;
if ( t58 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t59 = temp2 and smr.r11bfalse ;
if ( t59 == false )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t60 = temp2 and smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" and local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse and temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue and temp1 ;
if ( t62 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t63 = rcvd_evt.tfalse and temp2 ;
if ( t63 == false )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( false )") ;
end if;
 
assign t64 = rcvd_evt.ttrue and temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" and rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse and rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue and rcvd_evt.tfalse ;
if ( t66 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t67 = rcvd_evt.tfalse and rcvd_evt.ttrue ;
if ( t67 == false )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t68 = rcvd_evt.ttrue and rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" and rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse and false ;
if ( t69 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue and false ;
if ( t70 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t71 = rcvd_evt.tfalse and true ;
if ( t71 == false )
  LOG::LogSuccess(message:" and rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( false )") ;
end if;
 
assign t72 = rcvd_evt.ttrue and true ;
if ( t72 == true )
  LOG::LogSuccess(message:" and rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse and self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue and self.bfalse ;
if ( t74 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t75 = rcvd_evt.tfalse and self.btrue ;
if ( t75 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( false )") ;
end if;
 
assign t76 = rcvd_evt.ttrue and self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse and self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue and self.r9bfalse ;
if ( t78 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t79 = rcvd_evt.tfalse and self.r9btrue ;
if ( t79 == false )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t80 = rcvd_evt.ttrue and self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" and rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse and saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse and saf.btrue ;
if ( t82 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t83 = rcvd_evt.ttrue and saf.bfalse ;
if ( t83 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t84 = rcvd_evt.ttrue and saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse and smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse and smf.btrue ;
if ( t86 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t87 = rcvd_evt.ttrue and smf.bfalse ;
if ( t87 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t88 = rcvd_evt.ttrue and smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse and sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse and sor.btrue ;
if ( t90 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t91 = rcvd_evt.ttrue and sor.bfalse ;
if ( t91 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t92 = rcvd_evt.ttrue and sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse and sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse and sar.btrue ;
if ( t94 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t95 = rcvd_evt.ttrue and sar.bfalse ;
if ( t95 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t96 = rcvd_evt.ttrue and sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse and smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse and smr.btrue ;
if ( t98 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t99 = rcvd_evt.ttrue and smr.bfalse ;
if ( t99 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t100 = rcvd_evt.ttrue and smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse and saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse and saf.r11btrue ;
if ( t102 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t103 = rcvd_evt.ttrue and saf.r11bfalse ;
if ( t103 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t104 = rcvd_evt.ttrue and saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse and smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse and smf.r11btrue ;
if ( t106 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t107 = rcvd_evt.ttrue and smf.r11bfalse ;
if ( t107 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t108 = rcvd_evt.ttrue and smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse and sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse and sor.r11btrue ;
if ( t110 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t111 = rcvd_evt.ttrue and sor.r11bfalse ;
if ( t111 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t112 = rcvd_evt.ttrue and sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse and sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse and sar.r11btrue ;
if ( t114 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t115 = rcvd_evt.ttrue and sar.r11bfalse ;
if ( t115 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t116 = rcvd_evt.ttrue and sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse and smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse and smr.r11btrue ;
if ( t118 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t119 = rcvd_evt.ttrue and smr.r11bfalse ;
if ( t119 == false )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t120 = rcvd_evt.ttrue and smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'And test 1b',
	2,
	0);
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("8e354c1d-5852-273a-2a70-02e9cab68075",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"8e354c1d-5852-273a-2a70-02e9cab68075");
INSERT INTO SM_AH
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("194c1f4a-429c-39ef-1821-0ee02a1df3ec",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true and temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse and temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue and temp1 ;
if ( t182 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t183 = self.bfalse and temp2 ;
if ( t183 == false )
  LOG::LogSuccess(message:" and self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( false )") ;
end if;
 
assign t184 = self.btrue and temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" and self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse and rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue and rcvd_evt.tfalse ;
if ( t186 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t187 = self.bfalse and rcvd_evt.ttrue ;
if ( t187 == false )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( false )") ;
end if;
 
assign t188 = self.btrue and rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" and self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse and false ;
if ( t189 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue and false ;
if ( t190 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t191 = self.bfalse and true ;
if ( t191 == false )
  LOG::LogSuccess(message:" and self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( false )") ;
end if;
 
assign t192 = self.btrue and true ;
if ( t192 == true )
  LOG::LogSuccess(message:" and self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse and self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue and self.bfalse ;
if ( t194 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t195 = self.bfalse and self.btrue ;
if ( t195 == false )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( false )") ;
end if;
 
assign t196 = self.btrue and self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" and self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse and self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue and self.r9bfalse ;
if ( t198 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t199 = self.bfalse and self.r9btrue ;
if ( t199 == false )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t200 = self.btrue and self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" and self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse and saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse and saf.btrue ;
if ( t202 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t203 = self.btrue and saf.bfalse ;
if ( t203 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t204 = self.btrue and saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse and smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse and smf.btrue ;
if ( t206 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t207 = self.btrue and smf.bfalse ;
if ( t207 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t208 = self.btrue and smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse and sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse and sor.btrue ;
if ( t210 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t211 = self.btrue and sor.bfalse ;
if ( t211 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t212 = self.btrue and sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse and sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse and sar.btrue ;
if ( t214 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t215 = self.btrue and sar.bfalse ;
if ( t215 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t216 = self.btrue and sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse and smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse and smr.btrue ;
if ( t218 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t219 = self.btrue and smr.bfalse ;
if ( t219 == false )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t220 = self.btrue and smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" and self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse and saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse and saf.r11btrue ;
if ( t222 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t223 = self.btrue and saf.r11bfalse ;
if ( t223 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t224 = self.btrue and saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse and smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse and smf.r11btrue ;
if ( t226 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t227 = self.btrue and smf.r11bfalse ;
if ( t227 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t228 = self.btrue and smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse and sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse and sor.r11btrue ;
if ( t230 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t231 = self.btrue and sor.r11bfalse ;
if ( t231 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t232 = self.btrue and sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse and sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse and sar.r11btrue ;
if ( t234 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t235 = self.btrue and sar.r11bfalse ;
if ( t235 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t236 = self.btrue and sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse and smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse and smr.r11btrue ;
if ( t238 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t239 = self.btrue and smr.r11bfalse ;
if ( t239 == false )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t240 = self.btrue and smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse and temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue and temp1 ;
if ( t242 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t243 = self.r9bfalse and temp2 ;
if ( t243 == false )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( false )") ;
end if;
 
assign t244 = self.r9btrue and temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" and self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse and rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue and rcvd_evt.tfalse ;
if ( t246 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t247 = self.r9bfalse and rcvd_evt.ttrue ;
if ( t247 == false )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t248 = self.r9btrue and rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" and self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse and false ;
if ( t249 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue and false ;
if ( t250 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t251 = self.r9bfalse and true ;
if ( t251 == false )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( false )") ;
end if;
 
assign t252 = self.r9btrue and true ;
if ( t252 == true )
  LOG::LogSuccess(message:" and self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse and self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue and self.bfalse ;
if ( t254 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t255 = self.r9bfalse and self.btrue ;
if ( t255 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t256 = self.r9btrue and self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse and self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue and self.r9bfalse ;
if ( t258 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t259 = self.r9bfalse and self.r9btrue ;
if ( t259 == false )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t260 = self.r9btrue and self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" and self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse and saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse and saf.btrue ;
if ( t262 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t263 = self.r9btrue and saf.bfalse ;
if ( t263 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t264 = self.r9btrue and saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse and smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse and smf.btrue ;
if ( t266 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t267 = self.r9btrue and smf.bfalse ;
if ( t267 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t268 = self.r9btrue and smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse and sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse and sor.btrue ;
if ( t270 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t271 = self.r9btrue and sor.bfalse ;
if ( t271 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t272 = self.r9btrue and sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse and sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse and sar.btrue ;
if ( t274 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t275 = self.r9btrue and sar.bfalse ;
if ( t275 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t276 = self.r9btrue and sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse and smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse and smr.btrue ;
if ( t278 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t279 = self.r9btrue and smr.bfalse ;
if ( t279 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t280 = self.r9btrue and smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse and saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse and saf.r11btrue ;
if ( t282 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t283 = self.r9btrue and saf.r11bfalse ;
if ( t283 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t284 = self.r9btrue and saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse and smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse and smf.r11btrue ;
if ( t286 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t287 = self.r9btrue and smf.r11bfalse ;
if ( t287 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t288 = self.r9btrue and smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse and sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse and sor.r11btrue ;
if ( t290 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t291 = self.r9btrue and sor.r11bfalse ;
if ( t291 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t292 = self.r9btrue and sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse and sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse and sar.r11btrue ;
if ( t294 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t295 = self.r9btrue and sar.r11bfalse ;
if ( t295 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t296 = self.r9btrue and sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse and smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse and smr.r11btrue ;
if ( t298 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t299 = self.r9btrue and smr.r11bfalse ;
if ( t299 == false )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t300 = self.r9btrue and smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT2:''Continue and test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'And test 2',
	3,
	0);
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("d32743f7-4644-a40d-b13b-137ddb048cea",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"d32743f7-4644-a40d-b13b-137ddb048cea");
INSERT INTO SM_AH
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("6562fd50-26ee-d6a9-930a-2363bc5744c4",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'//and operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse and temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue and temp1 ;
if ( t302 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t303 = saf.bfalse and temp2 ;
if ( t303 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t304 = saf.btrue and temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse and rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue and rcvd_evt.tfalse ;
if ( t306 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t307 = saf.bfalse and rcvd_evt.ttrue ;
if ( t307 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t308 = saf.btrue and rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse and false ;
if ( t309 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue and false ;
if ( t310 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t311 = saf.bfalse and true ;
if ( t311 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( false )") ;
end if;
 
assign t312 = saf.btrue and true ;
if ( t312 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse and self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue and self.bfalse ;
if ( t314 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t315 = saf.bfalse and self.btrue ;
if ( t315 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t316 = saf.btrue and self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse and self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue and self.r9bfalse ;
if ( t318 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t319 = saf.bfalse and self.r9btrue ;
if ( t319 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t320 = saf.btrue and self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse and saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse and saf.btrue ;
if ( t322 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t323 = saf.btrue and saf.bfalse ;
if ( t323 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t324 = saf.btrue and saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse and smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse and smf.btrue ;
if ( t326 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t327 = saf.btrue and smf.bfalse ;
if ( t327 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t328 = saf.btrue and smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse and sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse and sor.btrue ;
if ( t330 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t331 = saf.btrue and sor.bfalse ;
if ( t331 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t332 = saf.btrue and sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse and sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse and sar.btrue ;
if ( t334 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t335 = saf.btrue and sar.bfalse ;
if ( t335 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t336 = saf.btrue and sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse and smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse and smr.btrue ;
if ( t338 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t339 = saf.btrue and smr.bfalse ;
if ( t339 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t340 = saf.btrue and smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse and saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse and saf.r11btrue ;
if ( t342 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t343 = saf.btrue and saf.r11bfalse ;
if ( t343 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t344 = saf.btrue and saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse and smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse and smf.r11btrue ;
if ( t346 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t347 = saf.btrue and smf.r11bfalse ;
if ( t347 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t348 = saf.btrue and smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse and sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse and sor.r11btrue ;
if ( t350 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t351 = saf.btrue and sor.r11bfalse ;
if ( t351 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t352 = saf.btrue and sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse and sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse and sar.r11btrue ;
if ( t354 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t355 = saf.btrue and sar.r11bfalse ;
if ( t355 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t356 = saf.btrue and sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse and smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse and smr.r11btrue ;
if ( t358 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t359 = saf.btrue and smr.r11bfalse ;
if ( t359 == false )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t360 = saf.btrue and smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse and temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue and temp1 ;
if ( t602 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t603 = saf.r11bfalse and temp2 ;
if ( t603 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t604 = saf.r11btrue and temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse and rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue and rcvd_evt.tfalse ;
if ( t606 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t607 = saf.r11bfalse and rcvd_evt.ttrue ;
if ( t607 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t608 = saf.r11btrue and rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse and false ;
if ( t609 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue and false ;
if ( t610 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t611 = saf.r11bfalse and true ;
if ( t611 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t612 = saf.r11btrue and true ;
if ( t612 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse and self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue and self.bfalse ;
if ( t614 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t615 = saf.r11bfalse and self.btrue ;
if ( t615 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t616 = saf.r11btrue and self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse and self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue and self.r9bfalse ;
if ( t618 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t619 = saf.r11bfalse and self.r9btrue ;
if ( t619 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t620 = saf.r11btrue and self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse and saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse and saf.btrue ;
if ( t622 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t623 = saf.r11btrue and saf.bfalse ;
if ( t623 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t624 = saf.r11btrue and saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse and smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse and smf.btrue ;
if ( t626 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t627 = saf.r11btrue and smf.bfalse ;
if ( t627 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t628 = saf.r11btrue and smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse and sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse and sor.btrue ;
if ( t630 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t631 = saf.r11btrue and sor.bfalse ;
if ( t631 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t632 = saf.r11btrue and sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse and sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse and sar.btrue ;
if ( t634 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t635 = saf.r11btrue and sar.bfalse ;
if ( t635 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t636 = saf.r11btrue and sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse and smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse and smr.btrue ;
if ( t638 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t639 = saf.r11btrue and smr.bfalse ;
if ( t639 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t640 = saf.r11btrue and smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse and saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse and saf.r11btrue ;
if ( t642 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t643 = saf.r11btrue and saf.r11bfalse ;
if ( t643 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t644 = saf.r11btrue and saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse and smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse and smf.r11btrue ;
if ( t646 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t647 = saf.r11btrue and smf.r11bfalse ;
if ( t647 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t648 = saf.r11btrue and smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse and sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse and sor.r11btrue ;
if ( t650 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t651 = saf.r11btrue and sor.r11bfalse ;
if ( t651 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t652 = saf.r11btrue and sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse and sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse and sar.r11btrue ;
if ( t654 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t655 = saf.r11btrue and sar.r11bfalse ;
if ( t655 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t656 = saf.r11btrue and sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse and smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse and smr.r11btrue ;
if ( t658 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t659 = saf.r11btrue and smr.r11bfalse ;
if ( t659 == false )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t660 = saf.r11btrue and smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" and other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed and (user-defined type) test") ;

//generate event to commence next test
generate UBT3:''Start or test''(tfalse:false, ttrue:true) to self;
 

',
	'');
INSERT INTO SM_STATE
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1a',
	4,
	0);
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("f13e2674-401b-bc19-80b6-5220f5c83006",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"f13e2674-401b-bc19-80b6-5220f5c83006");
INSERT INTO SM_AH
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("961493c7-ac97-75a1-8738-35ce6d8c8e91",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'LOG::LogInfo(message:"Starting or (user-defined type) test") ;

//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

  // local existing    rcvd_evt
assign t5 = temp1 or rcvd_evt.tfalse ;
if ( t5 == false )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( false )") ;
end if;
 
assign t6 = temp1 or rcvd_evt.ttrue ;
if ( t6 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t7 = temp2 or rcvd_evt.tfalse ;
if ( t7 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
assign t8 = temp2 or rcvd_evt.ttrue ;
if ( t8 == true )
  LOG::LogSuccess(message:" or local_existing rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or local_existing rcvd_evt ( true )") ;
end if;
 
  // local existing   constant 
assign t9 = temp1 or false ;
if ( t9 == false )
  LOG::LogSuccess(message:" or local_existing constant ( false )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( false )") ;
end if;
 
assign t10 = temp1 or true ;
if ( t10 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t11 = temp2 or false ;
if ( t11 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
assign t12 = temp2 or true ;
if ( t12 == true )
  LOG::LogSuccess(message:" or local_existing constant ( true )") ;
else
  LOG::LogFailure(message:" or local_existing constant ( true )") ;
end if;
 
  // local existing   self.attribute 
assign t13 = temp1 or self.bfalse ;
if ( t13 == false )
  LOG::LogSuccess(message:" or local_existing self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( false )") ;
end if;
 
assign t14 = temp1 or self.btrue ;
if ( t14 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t15 = temp2 or self.bfalse ;
if ( t15 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 
assign t16 = temp2 or self.btrue ;
if ( t16 == true )
  LOG::LogSuccess(message:" or local_existing self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.attribute ( true )") ;
end if;
 

  // local existing    self.referential attribute
assign t17 = temp1 or self.r9bfalse ;
if ( t17 == false )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( false )") ;
end if;
 
assign t18 = temp1 or self.r9btrue ;
if ( t18 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t19 = temp2 or self.r9bfalse ;
if ( t19 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
assign t20 = temp2 or self.r9btrue ;
if ( t20 == true )
  LOG::LogSuccess(message:" or local_existing self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or local_existing self.referential_attribute ( true )") ;
end if;
 
  // local existing    other.attribute (saf)
select any saf from instances of UOBT;
assign t21 = temp1 or saf.bfalse ;
if ( t21 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( false )") ;
end if;
 
assign t22 = temp1 or saf.btrue ;
if ( t22 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t23 = temp2 or saf.bfalse ;
if ( t23 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
assign t24 = temp2 or saf.btrue ;
if ( t24 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(saf) ( true )") ;
end if;
 
  // local existing    other.attribute (smf)
select many smfs from instances of UOBT;
for each smf in smfs
assign t25 = temp1 or smf.bfalse ;
if ( t25 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( false )") ;
end if;
 
assign t26 = temp1 or smf.btrue ;
if ( t26 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t27 = temp2 or smf.bfalse ;
if ( t27 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
assign t28 = temp2 or smf.btrue ;
if ( t28 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.attribute (sor)
select one sor related by self->UOBT[R12];
assign t29 = temp1 or sor.bfalse ;
if ( t29 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( false )") ;
end if;
 
assign t30 = temp1 or sor.btrue ;
if ( t30 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t31 = temp2 or sor.bfalse ;
if ( t31 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
assign t32 = temp2 or sor.btrue ;
if ( t32 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sor) ( true )") ;
end if;
 
  // local existing    other.attribute (sar)
select any sar related by self->UOBT[R13];
assign t33 = temp1 or sar.bfalse ;
if ( t33 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( false )") ;
end if;
 
assign t34 = temp1 or sar.btrue ;
if ( t34 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t35 = temp2 or sar.bfalse ;
if ( t35 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
assign t36 = temp2 or sar.btrue ;
if ( t36 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(sar) ( true )") ;
end if;
 
  // local existing    other.attribute (smr)
select many smrs related by self->UOBT[R13];
for each smr in smrs
assign t37 = temp1 or smr.bfalse ;
if ( t37 == false )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( false )") ;
end if;
 
assign t38 = temp1 or smr.btrue ;
if ( t38 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t39 = temp2 or smr.bfalse ;
if ( t39 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
assign t40 = temp2 or smr.btrue ;
if ( t40 == true )
  LOG::LogSuccess(message:" or local_existing other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.attribute(smr) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (saf)
assign t41 = temp1 or saf.r11bfalse ;
if ( t41 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( false )") ;
end if;
 
assign t42 = temp1 or saf.r11btrue ;
if ( t42 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t43 = temp2 or saf.r11bfalse ;
if ( t43 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
assign t44 = temp2 or saf.r11btrue ;
if ( t44 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(saf) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smf)
for each smf in smfs
assign t45 = temp1 or smf.r11bfalse ;
if ( t45 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( false )") ;
end if;
 
assign t46 = temp1 or smf.r11btrue ;
if ( t46 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t47 = temp2 or smf.r11bfalse ;
if ( t47 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
assign t48 = temp2 or smf.r11btrue ;
if ( t48 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // local existing    other.referential attribute (sor)
assign t49 = temp1 or sor.r11bfalse ;
if ( t49 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( false )") ;
end if;
 
assign t50 = temp1 or sor.r11btrue ;
if ( t50 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t51 = temp2 or sor.r11bfalse ;
if ( t51 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
assign t52 = temp2 or sor.r11btrue ;
if ( t52 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sor) ( true )") ;
end if;
 
  // local existing    other.referential attribute (sar)
assign t53 = temp1 or sar.r11bfalse ;
if ( t53 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( false )") ;
end if;
 
assign t54 = temp1 or sar.r11btrue ;
if ( t54 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t55 = temp2 or sar.r11bfalse ;
if ( t55 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
assign t56 = temp2 or sar.r11btrue ;
if ( t56 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(sar) ( true )") ;
end if;
 
  // local existing    other.referential attribute (smr)
for each smr in smrs
assign t57 = temp1 or smr.r11bfalse ;
if ( t57 == false )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( false )") ;
end if;
 
assign t58 = temp1 or smr.r11btrue ;
if ( t58 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t59 = temp2 or smr.r11bfalse ;
if ( t59 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
assign t60 = temp2 or smr.r11btrue ;
if ( t60 == true )
  LOG::LogSuccess(message:" or local_existing other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or local_existing other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    local existing
assign t61 = rcvd_evt.tfalse or temp1 ;
if ( t61 == false )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( false )") ;
end if;
 
assign t62 = rcvd_evt.ttrue or temp1 ;
if ( t62 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t63 = rcvd_evt.tfalse or temp2 ;
if ( t63 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
assign t64 = rcvd_evt.ttrue or temp2 ;
if ( t64 == true )
  LOG::LogSuccess(message:" or rcvd_evt local_existing ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt local_existing ( true )") ;
end if;
 
  // rcvd_evt    rcvd_evt
assign t65 = rcvd_evt.tfalse or rcvd_evt.tfalse ;
if ( t65 == false )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( false )") ;
end if;
 
assign t66 = rcvd_evt.ttrue or rcvd_evt.tfalse ;
if ( t66 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t67 = rcvd_evt.tfalse or rcvd_evt.ttrue ;
if ( t67 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
assign t68 = rcvd_evt.ttrue or rcvd_evt.ttrue ;
if ( t68 == true )
  LOG::LogSuccess(message:" or rcvd_evt rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt rcvd_evt ( true )") ;
end if;
 
  // rcvd_evt    constant
assign t69 = rcvd_evt.tfalse or false ;
if ( t69 == false )
  LOG::LogSuccess(message:" or rcvd_evt constant ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( false )") ;
end if;
 
assign t70 = rcvd_evt.ttrue or false ;
if ( t70 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t71 = rcvd_evt.tfalse or true ;
if ( t71 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
assign t72 = rcvd_evt.ttrue or true ;
if ( t72 == true )
  LOG::LogSuccess(message:" or rcvd_evt constant ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt constant ( true )") ;
end if;
 
  // rcvd_evt    self.attribute
assign t73 = rcvd_evt.tfalse or self.bfalse ;
if ( t73 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( false )") ;
end if;
 
assign t74 = rcvd_evt.ttrue or self.bfalse ;
if ( t74 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t75 = rcvd_evt.tfalse or self.btrue ;
if ( t75 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
assign t76 = rcvd_evt.ttrue or self.btrue ;
if ( t76 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.attribute ( true )") ;
end if;
 
  // rcvd_evt    self.referential attribute
assign t77 = rcvd_evt.tfalse or self.r9bfalse ;
if ( t77 == false )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( false )") ;
end if;
 
assign t78 = rcvd_evt.ttrue or self.r9bfalse ;
if ( t78 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t79 = rcvd_evt.tfalse or self.r9btrue ;
if ( t79 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
assign t80 = rcvd_evt.ttrue or self.r9btrue ;
if ( t80 == true )
  LOG::LogSuccess(message:" or rcvd_evt self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt self.referential_attribute ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (saf)
assign t81 = rcvd_evt.tfalse or saf.bfalse ;
if ( t81 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( false )") ;
end if;
 
assign t82 = rcvd_evt.tfalse or saf.btrue ;
if ( t82 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t83 = rcvd_evt.ttrue or saf.bfalse ;
if ( t83 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
assign t84 = rcvd_evt.ttrue or saf.btrue ;
if ( t84 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smf)
for each smf in smfs
assign t85 = rcvd_evt.tfalse or smf.bfalse ;
if ( t85 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( false )") ;
end if;
 
assign t86 = rcvd_evt.tfalse or smf.btrue ;
if ( t86 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t87 = rcvd_evt.ttrue or smf.bfalse ;
if ( t87 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
assign t88 = rcvd_evt.ttrue or smf.btrue ;
if ( t88 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.attribute (sor)
assign t89 = rcvd_evt.tfalse or sor.bfalse ;
if ( t89 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( false )") ;
end if;
 
assign t90 = rcvd_evt.tfalse or sor.btrue ;
if ( t90 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t91 = rcvd_evt.ttrue or sor.bfalse ;
if ( t91 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
assign t92 = rcvd_evt.ttrue or sor.btrue ;
if ( t92 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (sar)
assign t93 = rcvd_evt.tfalse or sar.bfalse ;
if ( t93 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( false )") ;
end if;
 
assign t94 = rcvd_evt.tfalse or sar.btrue ;
if ( t94 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t95 = rcvd_evt.ttrue or sar.bfalse ;
if ( t95 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
assign t96 = rcvd_evt.ttrue or sar.btrue ;
if ( t96 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.attribute (smr)
for each smr in smrs
assign t97 = rcvd_evt.tfalse or smr.bfalse ;
if ( t97 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( false )") ;
end if;
 
assign t98 = rcvd_evt.tfalse or smr.btrue ;
if ( t98 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t99 = rcvd_evt.ttrue or smr.bfalse ;
if ( t99 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
assign t100 = rcvd_evt.ttrue or smr.btrue ;
if ( t100 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.attribute(smr) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (saf)
assign t101 = rcvd_evt.tfalse or saf.r11bfalse ;
if ( t101 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( false )") ;
end if;
 
assign t102 = rcvd_evt.tfalse or saf.r11btrue ;
if ( t102 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t103 = rcvd_evt.ttrue or saf.r11bfalse ;
if ( t103 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
assign t104 = rcvd_evt.ttrue or saf.r11btrue ;
if ( t104 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(saf) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smf)
for each smf in smfs
assign t105 = rcvd_evt.tfalse or smf.r11bfalse ;
if ( t105 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( false )") ;
end if;
 
assign t106 = rcvd_evt.tfalse or smf.r11btrue ;
if ( t106 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t107 = rcvd_evt.ttrue or smf.r11bfalse ;
if ( t107 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
assign t108 = rcvd_evt.ttrue or smf.r11btrue ;
if ( t108 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // rcvd_evt    other.referential attribute (sor)
assign t109 = rcvd_evt.tfalse or sor.r11bfalse ;
if ( t109 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( false )") ;
end if;
 
assign t110 = rcvd_evt.tfalse or sor.r11btrue ;
if ( t110 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t111 = rcvd_evt.ttrue or sor.r11bfalse ;
if ( t111 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
assign t112 = rcvd_evt.ttrue or sor.r11btrue ;
if ( t112 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sor) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (sar)
assign t113 = rcvd_evt.tfalse or sar.r11bfalse ;
if ( t113 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( false )") ;
end if;
 
assign t114 = rcvd_evt.tfalse or sar.r11btrue ;
if ( t114 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t115 = rcvd_evt.ttrue or sar.r11bfalse ;
if ( t115 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
assign t116 = rcvd_evt.ttrue or sar.r11btrue ;
if ( t116 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(sar) ( true )") ;
end if;
 
  // rcvd_evt    other.referential attribute (smr)
for each smr in smrs
assign t117 = rcvd_evt.tfalse or smr.r11bfalse ;
if ( t117 == false )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( false )") ;
end if;
 
assign t118 = rcvd_evt.tfalse or smr.r11btrue ;
if ( t118 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t119 = rcvd_evt.ttrue or smr.r11bfalse ;
if ( t119 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
assign t120 = rcvd_evt.ttrue or smr.r11btrue ;
if ( t120 == true )
  LOG::LogSuccess(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or rcvd_evt other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self; 

',
	'');
INSERT INTO SM_STATE
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'Or test 1b',
	5,
	0);
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEME
	VALUES ("b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc");
INSERT INTO SM_AH
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("3c1f7470-60f4-df06-cf95-7ce052ba19db",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'
assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

// BridgePoint 3.2 can''t parse expressions for booleans of the type:
//  assign x = true or temp1;
// so tests 121 - 180 aren''t implemented

  // self.attribute    local existing
assign t181 = self.bfalse or temp1 ;
if ( t181 == false )
  LOG::LogSuccess(message:" or self.attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( false )") ;
end if;
 
assign t182 = self.btrue or temp1 ;
if ( t182 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t183 = self.bfalse or temp2 ;
if ( t183 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
assign t184 = self.btrue or temp2 ;
if ( t184 == true )
  LOG::LogSuccess(message:" or self.attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute local_existing ( true )") ;
end if;
 
  // self.attribute   rcvd_evt 
assign t185 = self.bfalse or rcvd_evt.tfalse ;
if ( t185 == false )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( false )") ;
end if;
 
assign t186 = self.btrue or rcvd_evt.tfalse ;
if ( t186 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t187 = self.bfalse or rcvd_evt.ttrue ;
if ( t187 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
assign t188 = self.btrue or rcvd_evt.ttrue ;
if ( t188 == true )
  LOG::LogSuccess(message:" or self.attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute rcvd_evt ( true )") ;
end if;
 
  // self.attribute    constant
assign t189 = self.bfalse or false ;
if ( t189 == false )
  LOG::LogSuccess(message:" or self.attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( false )") ;
end if;
 
assign t190 = self.btrue or false ;
if ( t190 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t191 = self.bfalse or true ;
if ( t191 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
assign t192 = self.btrue or true ;
if ( t192 == true )
  LOG::LogSuccess(message:" or self.attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute constant ( true )") ;
end if;
 
  // self.attribute    self.attribute
assign t193 = self.bfalse or self.bfalse ;
if ( t193 == false )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( false )") ;
end if;
 
assign t194 = self.btrue or self.bfalse ;
if ( t194 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t195 = self.bfalse or self.btrue ;
if ( t195 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
assign t196 = self.btrue or self.btrue ;
if ( t196 == true )
  LOG::LogSuccess(message:" or self.attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.attribute ( true )") ;
end if;
 
  // self.attribute    self.referential attribute
assign t197 = self.bfalse or self.r9bfalse ;
if ( t197 == false )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( false )") ;
end if;
 
assign t198 = self.btrue or self.r9bfalse ;
if ( t198 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t199 = self.bfalse or self.r9btrue ;
if ( t199 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
assign t200 = self.btrue or self.r9btrue ;
if ( t200 == true )
  LOG::LogSuccess(message:" or self.attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute self.referential_attribute ( true )") ;
end if;
 
  // self.attribute    other.attribute (saf)
assign t201 = self.bfalse or saf.bfalse ;
if ( t201 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( false )") ;
end if;
 
assign t202 = self.bfalse or saf.btrue ;
if ( t202 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t203 = self.btrue or saf.bfalse ;
if ( t203 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
assign t204 = self.btrue or saf.btrue ;
if ( t204 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smf)
for each smf in smfs
assign t205 = self.bfalse or smf.bfalse ;
if ( t205 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( false )") ;
end if;
 
assign t206 = self.bfalse or smf.btrue ;
if ( t206 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t207 = self.btrue or smf.bfalse ;
if ( t207 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
assign t208 = self.btrue or smf.btrue ;
if ( t208 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.attribute (sor)
assign t209 = self.bfalse or sor.bfalse ;
if ( t209 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( false )") ;
end if;
 
assign t210 = self.bfalse or sor.btrue ;
if ( t210 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t211 = self.btrue or sor.bfalse ;
if ( t211 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
assign t212 = self.btrue or sor.btrue ;
if ( t212 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.attribute (sar)
assign t213 = self.bfalse or sar.bfalse ;
if ( t213 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( false )") ;
end if;
 
assign t214 = self.bfalse or sar.btrue ;
if ( t214 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t215 = self.btrue or sar.bfalse ;
if ( t215 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
assign t216 = self.btrue or sar.btrue ;
if ( t216 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.attribute (smr)
for each smr in smrs
assign t217 = self.bfalse or smr.bfalse ;
if ( t217 == false )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( false )") ;
end if;
 
assign t218 = self.bfalse or smr.btrue ;
if ( t218 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t219 = self.btrue or smr.bfalse ;
if ( t219 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
assign t220 = self.btrue or smr.btrue ;
if ( t220 == true )
  LOG::LogSuccess(message:" or self.attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (saf)
assign t221 = self.bfalse or saf.r11bfalse ;
if ( t221 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t222 = self.bfalse or saf.r11btrue ;
if ( t222 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t223 = self.btrue or saf.r11bfalse ;
if ( t223 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t224 = self.btrue or saf.r11btrue ;
if ( t224 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smf)
for each smf in smfs
assign t225 = self.bfalse or smf.r11bfalse ;
if ( t225 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t226 = self.bfalse or smf.r11btrue ;
if ( t226 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t227 = self.btrue or smf.r11bfalse ;
if ( t227 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t228 = self.btrue or smf.r11btrue ;
if ( t228 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.attribute    other.referential attribute (sor)
assign t229 = self.bfalse or sor.r11bfalse ;
if ( t229 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t230 = self.bfalse or sor.r11btrue ;
if ( t230 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t231 = self.btrue or sor.r11bfalse ;
if ( t231 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t232 = self.btrue or sor.r11btrue ;
if ( t232 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (sar)
assign t233 = self.bfalse or sar.r11bfalse ;
if ( t233 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t234 = self.bfalse or sar.r11btrue ;
if ( t234 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t235 = self.btrue or sar.r11bfalse ;
if ( t235 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t236 = self.btrue or sar.r11btrue ;
if ( t236 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.attribute    other.referential attribute (smr)
for each smr in smrs
assign t237 = self.bfalse or smr.r11bfalse ;
if ( t237 == false )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t238 = self.bfalse or smr.r11btrue ;
if ( t238 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t239 = self.btrue or smr.r11bfalse ;
if ( t239 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t240 = self.btrue or smr.r11btrue ;
if ( t240 == true )
  LOG::LogSuccess(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;


  // self.referential attribute    local existing
assign t241 = self.r9bfalse or temp1 ;
if ( t241 == false )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( false )") ;
end if;
 
assign t242 = self.r9btrue or temp1 ;
if ( t242 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t243 = self.r9bfalse or temp2 ;
if ( t243 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
assign t244 = self.r9btrue or temp2 ;
if ( t244 == true )
  LOG::LogSuccess(message:" or self.referential_attribute local_existing ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute local_existing ( true )") ;
end if;
 
  // self.referential_attribute   rcvd_evt 
assign t245 = self.r9bfalse or rcvd_evt.tfalse ;
if ( t245 == false )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( false )") ;
end if;
 
assign t246 = self.r9btrue or rcvd_evt.tfalse ;
if ( t246 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t247 = self.r9bfalse or rcvd_evt.ttrue ;
if ( t247 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
assign t248 = self.r9btrue or rcvd_evt.ttrue ;
if ( t248 == true )
  LOG::LogSuccess(message:" or self.referential_attribute rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute rcvd_evt ( true )") ;
end if;
 
  // self.referential_attribute    constant
assign t249 = self.r9bfalse or false ;
if ( t249 == false )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( false )") ;
end if;
 
assign t250 = self.r9btrue or false ;
if ( t250 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t251 = self.r9bfalse or true ;
if ( t251 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
assign t252 = self.r9btrue or true ;
if ( t252 == true )
  LOG::LogSuccess(message:" or self.referential_attribute constant ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute constant ( true )") ;
end if;
 
  // self.referential_attribute    self.attribute
assign t253 = self.r9bfalse or self.bfalse ;
if ( t253 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( false )") ;
end if;
 
assign t254 = self.r9btrue or self.bfalse ;
if ( t254 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t255 = self.r9bfalse or self.btrue ;
if ( t255 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
assign t256 = self.r9btrue or self.btrue ;
if ( t256 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.attribute ( true )") ;
end if;
 
  // self.referential_attribute    self.referential attribute
assign t257 = self.r9bfalse or self.r9bfalse ;
if ( t257 == false )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( false )") ;
end if;
 
assign t258 = self.r9btrue or self.r9bfalse ;
if ( t258 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t259 = self.r9bfalse or self.r9btrue ;
if ( t259 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
assign t260 = self.r9btrue or self.r9btrue ;
if ( t260 == true )
  LOG::LogSuccess(message:" or self.referential_attribute self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute self.referential_attribute ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (saf)
assign t261 = self.r9bfalse or saf.bfalse ;
if ( t261 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( false )") ;
end if;
 
assign t262 = self.r9bfalse or saf.btrue ;
if ( t262 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t263 = self.r9btrue or saf.bfalse ;
if ( t263 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
assign t264 = self.r9btrue or saf.btrue ;
if ( t264 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smf)
for each smf in smfs
assign t265 = self.r9bfalse or smf.bfalse ;
if ( t265 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( false )") ;
end if;
 
assign t266 = self.r9bfalse or smf.btrue ;
if ( t266 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t267 = self.r9btrue or smf.bfalse ;
if ( t267 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
assign t268 = self.r9btrue or smf.btrue ;
if ( t268 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.attribute (sor)
assign t269 = self.r9bfalse or sor.bfalse ;
if ( t269 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( false )") ;
end if;
 
assign t270 = self.r9bfalse or sor.btrue ;
if ( t270 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t271 = self.r9btrue or sor.bfalse ;
if ( t271 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
assign t272 = self.r9btrue or sor.btrue ;
if ( t272 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (sar)
assign t273 = self.r9bfalse or sar.bfalse ;
if ( t273 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( false )") ;
end if;
 
assign t274 = self.r9bfalse or sar.btrue ;
if ( t274 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t275 = self.r9btrue or sar.bfalse ;
if ( t275 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
assign t276 = self.r9btrue or sar.btrue ;
if ( t276 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.attribute (smr)
for each smr in smrs
assign t277 = self.r9bfalse or smr.bfalse ;
if ( t277 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( false )") ;
end if;
 
assign t278 = self.r9bfalse or smr.btrue ;
if ( t278 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t279 = self.r9btrue or smr.bfalse ;
if ( t279 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
assign t280 = self.r9btrue or smr.btrue ;
if ( t280 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.attribute(smr) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (saf)
assign t281 = self.r9bfalse or saf.r11bfalse ;
if ( t281 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( false )") ;
end if;
 
assign t282 = self.r9bfalse or saf.r11btrue ;
if ( t282 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t283 = self.r9btrue or saf.r11bfalse ;
if ( t283 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
assign t284 = self.r9btrue or saf.r11btrue ;
if ( t284 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(saf) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smf)
for each smf in smfs
assign t285 = self.r9bfalse or smf.r11bfalse ;
if ( t285 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( false )") ;
end if;
 
assign t286 = self.r9bfalse or smf.r11btrue ;
if ( t286 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t287 = self.r9btrue or smf.r11bfalse ;
if ( t287 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
assign t288 = self.r9btrue or smf.r11btrue ;
if ( t288 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // self.referential_attribute    other.referential attribute (sor)
assign t289 = self.r9bfalse or sor.r11bfalse ;
if ( t289 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( false )") ;
end if;
 
assign t290 = self.r9bfalse or sor.r11btrue ;
if ( t290 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t291 = self.r9btrue or sor.r11bfalse ;
if ( t291 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
assign t292 = self.r9btrue or sor.r11btrue ;
if ( t292 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sor) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (sar)
assign t293 = self.r9bfalse or sar.r11bfalse ;
if ( t293 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( false )") ;
end if;
 
assign t294 = self.r9bfalse or sar.r11btrue ;
if ( t294 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t295 = self.r9btrue or sar.r11bfalse ;
if ( t295 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
assign t296 = self.r9btrue or sar.r11btrue ;
if ( t296 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(sar) ( true )") ;
end if;
 
  // self.referential_attribute    other.referential attribute (smr)
for each smr in smrs
assign t297 = self.r9bfalse or smr.r11bfalse ;
if ( t297 == false )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( false )") ;
end if;
 
assign t298 = self.r9bfalse or smr.r11btrue ;
if ( t298 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t299 = self.r9btrue or smr.r11bfalse ;
if ( t299 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
assign t300 = self.r9btrue or smr.r11btrue ;
if ( t300 == true )
  LOG::LogSuccess(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or self.referential_attribute other.referential_attribute(smr) ( true )") ;
end if;
 
end for;

 
//generate event to continue test
Generate UBT4:''Continue or test''( ttrue: true, tfalse: false ) to self;


',
	'');
INSERT INTO SM_STATE
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'Or test 2',
	6,
	0);
INSERT INTO SM_CH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_CH
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO SM_SEME
	VALUES ("59917f33-cef2-9af9-8dd3-a33ee8073757",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"59917f33-cef2-9af9-8dd3-a33ee8073757");
INSERT INTO SM_AH
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("6d12f674-d4ca-ab3e-0a7a-a34131024470",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	1,
	'//or operation  (only boolean type)

assign temp1 = false;
assign temp2 = true;

select any saf from instances of UOBT;
select many smfs from instances of UOBT;
select one sor related by self->UOBT[R12];
select any sar related by self->UOBT[R13];
select many smrs related by self->UOBT[R13];

  // other.attribute (saf)    local existing
assign t301 = saf.bfalse or temp1 ;
if ( t301 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( false )") ;
end if;
 
assign t302 = saf.btrue or temp1 ;
if ( t302 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t303 = saf.bfalse or temp2 ;
if ( t303 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
assign t304 = saf.btrue or temp2 ;
if ( t304 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) local_existing ( true )") ;
end if;
 
  // other.attribute(saf)   rcvd_evt 
assign t305 = saf.bfalse or rcvd_evt.tfalse ;
if ( t305 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t306 = saf.btrue or rcvd_evt.tfalse ;
if ( t306 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t307 = saf.bfalse or rcvd_evt.ttrue ;
if ( t307 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t308 = saf.btrue or rcvd_evt.ttrue ;
if ( t308 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.attribute(saf)    constant
assign t309 = saf.bfalse or false ;
if ( t309 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( false )") ;
end if;
 
assign t310 = saf.btrue or false ;
if ( t310 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t311 = saf.bfalse or true ;
if ( t311 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
assign t312 = saf.btrue or true ;
if ( t312 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) constant ( true )") ;
end if;
 
  // other.attribute(saf)    self.attribute
assign t313 = saf.bfalse or self.bfalse ;
if ( t313 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( false )") ;
end if;
 
assign t314 = saf.btrue or self.bfalse ;
if ( t314 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t315 = saf.bfalse or self.btrue ;
if ( t315 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
assign t316 = saf.btrue or self.btrue ;
if ( t316 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.attribute(saf)    self.referential attribute
assign t317 = saf.bfalse or self.r9bfalse ;
if ( t317 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t318 = saf.btrue or self.r9bfalse ;
if ( t318 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t319 = saf.bfalse or self.r9btrue ;
if ( t319 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t320 = saf.btrue or self.r9btrue ;
if ( t320 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (saf)
assign t321 = saf.bfalse or saf.bfalse ;
if ( t321 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t322 = saf.bfalse or saf.btrue ;
if ( t322 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t323 = saf.btrue or saf.bfalse ;
if ( t323 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t324 = saf.btrue or saf.btrue ;
if ( t324 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t325 = saf.bfalse or smf.bfalse ;
if ( t325 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t326 = saf.bfalse or smf.btrue ;
if ( t326 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t327 = saf.btrue or smf.bfalse ;
if ( t327 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t328 = saf.btrue or smf.btrue ;
if ( t328 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.attribute (sor)
assign t329 = saf.bfalse or sor.bfalse ;
if ( t329 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t330 = saf.bfalse or sor.btrue ;
if ( t330 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t331 = saf.btrue or sor.bfalse ;
if ( t331 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t332 = saf.btrue or sor.btrue ;
if ( t332 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (sar)
assign t333 = saf.bfalse or sar.bfalse ;
if ( t333 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t334 = saf.bfalse or sar.btrue ;
if ( t334 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t335 = saf.btrue or sar.bfalse ;
if ( t335 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t336 = saf.btrue or sar.btrue ;
if ( t336 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t337 = saf.bfalse or smr.bfalse ;
if ( t337 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t338 = saf.bfalse or smr.btrue ;
if ( t338 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t339 = saf.btrue or smr.bfalse ;
if ( t339 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t340 = saf.btrue or smr.btrue ;
if ( t340 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (saf)
assign t341 = saf.bfalse or saf.r11bfalse ;
if ( t341 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t342 = saf.bfalse or saf.r11btrue ;
if ( t342 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t343 = saf.btrue or saf.r11bfalse ;
if ( t343 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t344 = saf.btrue or saf.r11btrue ;
if ( t344 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t345 = saf.bfalse or smf.r11bfalse ;
if ( t345 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t346 = saf.bfalse or smf.r11btrue ;
if ( t346 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t347 = saf.btrue or smf.r11bfalse ;
if ( t347 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t348 = saf.btrue or smf.r11btrue ;
if ( t348 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.attribute(saf)    other.referential attribute (sor)
assign t349 = saf.bfalse or sor.r11bfalse ;
if ( t349 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t350 = saf.bfalse or sor.r11btrue ;
if ( t350 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t351 = saf.btrue or sor.r11bfalse ;
if ( t351 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t352 = saf.btrue or sor.r11btrue ;
if ( t352 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (sar)
assign t353 = saf.bfalse or sar.r11bfalse ;
if ( t353 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t354 = saf.bfalse or sar.r11btrue ;
if ( t354 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t355 = saf.btrue or sar.r11bfalse ;
if ( t355 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t356 = saf.btrue or sar.r11btrue ;
if ( t356 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t357 = saf.bfalse or smr.r11bfalse ;
if ( t357 == false )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t358 = saf.bfalse or smr.r11btrue ;
if ( t358 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t359 = saf.btrue or smr.r11bfalse ;
if ( t359 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t360 = saf.btrue or smr.r11btrue ;
if ( t360 == true )
  LOG::LogSuccess(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.attribute (smf)    local existing
  // other.attribute (smf)    constant
  // other.attribute (smf)    constant
  // other.attribute (smf)    self.attribute
  // other.attribute (smf)    self.referential attribute
  // other.attribute (smf)    other.attribute (saf)
  // other.attribute (smf)    other.attribute (smf)
  // other.attribute (smf)    other.attribute (sor)
  // other.attribute (smf)    other.attribute (sar)
  // other.attribute (smf)    other.attribute (smr)
  // other.attribute (smf)    other.referential attribute (saf)
  // other.attribute (smf)    other.referential attribute (smf)
  // other.attribute (smf)    other.referential attribute (sor)
  // other.attribute (smf)    other.referential attribute (sar)
  // other.attribute (smf)    other.referential attribute (smr)
  // other.attribute (sor)    local existing
  // other.attribute (sor)    constant
  // other.attribute (sor)    constant
  // other.attribute (sor)    self.attribute
  // other.attribute (sor)    self.referential attribute
  // other.attribute (sor)    other.attribute (saf)
  // other.attribute (sor)    other.attribute (smf)
  // other.attribute (sor)    other.attribute (sor)
  // other.attribute (sor)    other.attribute (sar)
  // other.attribute (sor)    other.attribute (smr)
  // other.attribute (sor)    other.referential attribute (saf)
  // other.attribute (sor)    other.referential attribute (smf)
  // other.attribute (sor)    other.referential attribute (sor)
  // other.attribute (sor)    other.referential attribute (sar)
  // other.attribute (sor)    other.referential attribute (smr)
  // other.attribute (sar)    local existing
  // other.attribute (sar)    constant
  // other.attribute (sar)    constant
  // other.attribute (sar)    self.attribute
  // other.attribute (sar)    self.referential attribute
  // other.attribute (sar)    other.attribute (saf)
  // other.attribute (sar)    other.attribute (smf)
  // other.attribute (sar)    other.attribute (sor)
  // other.attribute (sar)    other.attribute (sar)
  // other.attribute (sar)    other.attribute (smr)
  // other.attribute (sar)    other.referential attribute (saf)
  // other.attribute (sar)    other.referential attribute (smf)
  // other.attribute (sar)    other.referential attribute (sor)
  // other.attribute (sar)    other.referential attribute (sar)
  // other.attribute (sar)    other.referential attribute (smr)
  // other.attribute (smr)    local existing
  // other.attribute (smr)    constant
  // other.attribute (smr)    constant
  // other.attribute (smr)    self.attribute
  // other.attribute (smr)    self.referential attribute
  // other.attribute (smr)    other.attribute (saf)
  // other.attribute (smr)    other.attribute (smf)
  // other.attribute (smr)    other.attribute (sor)
  // other.attribute (smr)    other.attribute (sar)
  // other.attribute (smr)    other.attribute (smr)
  // other.attribute (smr)    other.referential attribute (saf)
  // other.attribute (smr)    other.referential attribute (smf)
  // other.attribute (smr)    other.referential attribute (sor)
  // other.attribute (smr)    other.referential attribute (sar)
  // other.attribute (smr)    other.referential attribute (smr)
  // other.referential attribute (saf)    local existing
assign t601 = saf.r11bfalse or temp1 ;
if ( t601 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( false )") ;
end if;
 
assign t602 = saf.r11btrue or temp1 ;
if ( t602 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t603 = saf.r11bfalse or temp2 ;
if ( t603 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
assign t604 = saf.r11btrue or temp2 ;
if ( t604 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) local_existing ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) local_existing ( true )") ;
end if;
 
  // other.referential_attribute(saf)   rcvd_evt 
assign t605 = saf.r11bfalse or rcvd_evt.tfalse ;
if ( t605 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( false )") ;
end if;
 
assign t606 = saf.r11btrue or rcvd_evt.tfalse ;
if ( t606 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t607 = saf.r11bfalse or rcvd_evt.ttrue ;
if ( t607 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
assign t608 = saf.r11btrue or rcvd_evt.ttrue ;
if ( t608 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) rcvd_evt ( true )") ;
end if;
 
  // other.referential_attribute(saf)    constant
assign t609 = saf.r11bfalse or false ;
if ( t609 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( false )") ;
end if;
 
assign t610 = saf.r11btrue or false ;
if ( t610 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t611 = saf.r11bfalse or true ;
if ( t611 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
assign t612 = saf.r11btrue or true ;
if ( t612 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) constant ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) constant ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.attribute
assign t613 = saf.r11bfalse or self.bfalse ;
if ( t613 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( false )") ;
end if;
 
assign t614 = saf.r11btrue or self.bfalse ;
if ( t614 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t615 = saf.r11bfalse or self.btrue ;
if ( t615 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
assign t616 = saf.r11btrue or self.btrue ;
if ( t616 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    self.referential attribute
assign t617 = saf.r11bfalse or self.r9bfalse ;
if ( t617 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( false )") ;
end if;
 
assign t618 = saf.r11btrue or self.r9bfalse ;
if ( t618 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t619 = saf.r11bfalse or self.r9btrue ;
if ( t619 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
assign t620 = saf.r11btrue or self.r9btrue ;
if ( t620 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) self.referential_attribute ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (saf)
assign t621 = saf.r11bfalse or saf.bfalse ;
if ( t621 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( false )") ;
end if;
 
assign t622 = saf.r11bfalse or saf.btrue ;
if ( t622 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t623 = saf.r11btrue or saf.bfalse ;
if ( t623 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
assign t624 = saf.r11btrue or saf.btrue ;
if ( t624 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smf)
for each smf in smfs
assign t625 = saf.r11bfalse or smf.bfalse ;
if ( t625 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( false )") ;
end if;
 
assign t626 = saf.r11bfalse or smf.btrue ;
if ( t626 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t627 = saf.r11btrue or smf.bfalse ;
if ( t627 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
assign t628 = saf.r11btrue or smf.btrue ;
if ( t628 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.attribute (sor)
assign t629 = saf.r11bfalse or sor.bfalse ;
if ( t629 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( false )") ;
end if;
 
assign t630 = saf.r11bfalse or sor.btrue ;
if ( t630 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t631 = saf.r11btrue or sor.bfalse ;
if ( t631 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
assign t632 = saf.r11btrue or sor.btrue ;
if ( t632 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (sar)
assign t633 = saf.r11bfalse or sar.bfalse ;
if ( t633 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( false )") ;
end if;
 
assign t634 = saf.r11bfalse or sar.btrue ;
if ( t634 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t635 = saf.r11btrue or sar.bfalse ;
if ( t635 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
assign t636 = saf.r11btrue or sar.btrue ;
if ( t636 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.attribute (smr)
for each smr in smrs
assign t637 = saf.r11bfalse or smr.bfalse ;
if ( t637 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( false )") ;
end if;
 
assign t638 = saf.r11bfalse or smr.btrue ;
if ( t638 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t639 = saf.r11btrue or smr.bfalse ;
if ( t639 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
assign t640 = saf.r11btrue or smr.btrue ;
if ( t640 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (saf)
assign t641 = saf.r11bfalse or saf.r11bfalse ;
if ( t641 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( false )") ;
end if;
 
assign t642 = saf.r11bfalse or saf.r11btrue ;
if ( t642 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t643 = saf.r11btrue or saf.r11bfalse ;
if ( t643 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
assign t644 = saf.r11btrue or saf.r11btrue ;
if ( t644 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(saf) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smf)
for each smf in smfs
assign t645 = saf.r11bfalse or smf.r11bfalse ;
if ( t645 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( false )") ;
end if;
 
assign t646 = saf.r11bfalse or smf.r11btrue ;
if ( t646 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t647 = saf.r11btrue or smf.r11bfalse ;
if ( t647 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
assign t648 = saf.r11btrue or smf.r11btrue ;
if ( t648 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smf) ( true )") ;
end if;
 
end for;
  // other.referential_attribute(saf)    other.referential attribute (sor)
assign t649 = saf.r11bfalse or sor.r11bfalse ;
if ( t649 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( false )") ;
end if;
 
assign t650 = saf.r11bfalse or sor.r11btrue ;
if ( t650 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t651 = saf.r11btrue or sor.r11bfalse ;
if ( t651 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
assign t652 = saf.r11btrue or sor.r11btrue ;
if ( t652 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sor) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (sar)
assign t653 = saf.r11bfalse or sar.r11bfalse ;
if ( t653 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( false )") ;
end if;
 
assign t654 = saf.r11bfalse or sar.r11btrue ;
if ( t654 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t655 = saf.r11btrue or sar.r11bfalse ;
if ( t655 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
assign t656 = saf.r11btrue or sar.r11btrue ;
if ( t656 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(sar) ( true )") ;
end if;
 
  // other.referential_attribute(saf)    other.referential attribute (smr)
for each smr in smrs
assign t657 = saf.r11bfalse or smr.r11bfalse ;
if ( t657 == false )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( false )") ;
end if;
 
assign t658 = saf.r11bfalse or smr.r11btrue ;
if ( t658 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t659 = saf.r11btrue or smr.r11bfalse ;
if ( t659 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
assign t660 = saf.r11btrue or smr.r11btrue ;
if ( t660 == true )
  LOG::LogSuccess(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
else
  LOG::LogFailure(message:" or other.referential_attribute(saf) other.referential_attribute(smr) ( true )") ;
end if;
 
end for;
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    constant
  // other.referential attribute (saf)    self.attribute
  // other.referential attribute (saf)    self.referential attribute
  // other.referential attribute (saf)    other.attribute (saf)
  // other.referential attribute (saf)    other.attribute (smf)
  // other.referential attribute (saf)    other.attribute (sor)
  // other.referential attribute (saf)    other.attribute (sar)
  // other.referential attribute (saf)    other.attribute (smr)
  // other.referential attribute (saf)    other.referential attribute (saf)
  // other.referential attribute (saf)    other.referential attribute (smf)
  // other.referential attribute (saf)    other.referential attribute (sor)
  // other.referential attribute (saf)    other.referential attribute (sar)
  // other.referential attribute (saf)    other.referential attribute (smr)
  // other.referential attribute (smf)    local existing
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    constant
  // other.referential attribute (smf)    self.attribute
  // other.referential attribute (smf)    self.referential attribute
  // other.referential attribute (smf)    other.attribute (saf)
  // other.referential attribute (smf)    other.attribute (smf)
  // other.referential attribute (smf)    other.attribute (sor)
  // other.referential attribute (smf)    other.attribute (sar)
  // other.referential attribute (smf)    other.attribute (smr)
  // other.referential attribute (smf)    other.referential attribute (saf)
  // other.referential attribute (smf)    other.referential attribute (smf)
  // other.referential attribute (smf)    other.referential attribute (sor)
  // other.referential attribute (smf)    other.referential attribute (sar)
  // other.referential attribute (smf)    other.referential attribute (smr)
  // other.referential attribute (sor)    local existing
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    constant
  // other.referential attribute (sor)    self.attribute
  // other.referential attribute (sor)    self.referential attribute
  // other.referential attribute (sor)    other.attribute (saf)
  // other.referential attribute (sor)    other.attribute (smf)
  // other.referential attribute (sor)    other.attribute (sor)
  // other.referential attribute (sor)    other.attribute (sar)
  // other.referential attribute (sor)    other.attribute (smr)
  // other.referential attribute (sor)    other.referential attribute (saf)
  // other.referential attribute (sor)    other.referential attribute (smf)
  // other.referential attribute (sor)    other.referential attribute (sor)
  // other.referential attribute (sor)    other.referential attribute (sar)
  // other.referential attribute (sor)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    constant
  // other.referential attribute (sar)    self.attribute
  // other.referential attribute (sar)    self.referential attribute
  // other.referential attribute (sar)    other.attribute (saf)
  // other.referential attribute (sar)    other.attribute (smf)
  // other.referential attribute (sar)    other.attribute (sor)
  // other.referential attribute (sar)    other.attribute (sar)
  // other.referential attribute (sar)    other.attribute (smr)
  // other.referential attribute (sar)    other.referential attribute (saf)
  // other.referential attribute (sar)    other.referential attribute (smf)
  // other.referential attribute (sar)    other.referential attribute (sor)
  // other.referential attribute (sar)    other.referential attribute (sar)
  // other.referential attribute (sar)    other.referential attribute (smr)
  // other.referential attribute (sar)    local existing
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    constant
  // other.referential attribute (smr)    self.attribute
  // other.referential attribute (smr)    self.referential attribute
  // other.referential attribute (smr)    other.attribute (saf)
  // other.referential attribute (smr)    other.attribute (smf)
  // other.referential attribute (smr)    other.attribute (sor)
  // other.referential attribute (smr)    other.attribute (sar)
  // other.referential attribute (smr)    other.attribute (smr)
  // other.referential attribute (smr)    other.referential attribute (saf)
  // other.referential attribute (smr)    other.referential attribute (smf)
  // other.referential attribute (smr)    other.referential attribute (sor)
  // other.referential attribute (smr)    other.referential attribute (sar)
  // other.referential attribute (smr)    other.referential attribute (smr)
 
LOG::LogInfo(message:"Completed or (user-defined type) test") ;

select any ev from instances of EV;
generate EV2:''shutdown'' to ev;
 
 

',
	'');
INSERT INTO SM_NSTXN
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	"3ce61557-ef56-933a-3ed1-5fc3546b8037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb");
INSERT INTO SM_AH
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("13e70eb2-800b-89eb-b3d4-b63609adafbe",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	"c5dee5bd-6962-05cb-10cc-4b9aa1f5815c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"e6176175-e590-5ee8-e918-dcff3a86153e");
INSERT INTO SM_AH
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("343b25d2-9730-b3c6-f285-fd4c7b69e37c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("e6176175-e590-5ee8-e918-dcff3a86153e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"d31332ef-3a64-01c2-29b3-30e4d5e7962e");
INSERT INTO SM_AH
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("50628439-bb7f-3f44-440b-d959629750e3",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	"ecc44064-5a49-a18e-152a-ea0cf48abb30",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e");
INSERT INTO SM_AH
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("df711df7-b52b-f9f4-1daf-1faa5eb3698c",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"b0a1d77e-4bd3-d8a6-936b-e90d7275bab0");
INSERT INTO SM_AH
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("e8693089-41c0-1fec-1856-19f196b4055d",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc",
	"691ada37-3fdb-f72e-8df5-bef3abfa5726",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"f64ff628-c913-616a-bbe7-83682902a298");
INSERT INTO SM_AH
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"37f079d3-10d6-deec-188d-cec441629cf6");
INSERT INTO SM_ACT
	VALUES ("60b1be3f-099c-2d6e-1a66-521cf72e6bb6",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("f64ff628-c913-616a-bbe7-83682902a298",
	"37f079d3-10d6-deec-188d-cec441629cf6",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("fbd61b75-4871-c39a-631d-48438e87b5d2",
	8,
	"37f079d3-10d6-deec-188d-cec441629cf6",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("3f4836f4-f0b1-1795-1f17-b5ed9ecc9663",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"40f4044e-f142-b000-1c88-3043effa3abe",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a');
INSERT INTO GD_SHP
	VALUES ("3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO GD_NCS
	VALUES ("3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1264.000000,
	"3f4836f4-f0b1-1795-1f17-b5ed9ecc9663",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f4836f4-f0b1-1795-1f17-b5ed9ecc9663",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("788d1730-54b5-19e0-2848-e530867a7d78",
	1872.000000,
	1296.000000,
	"3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO DIM_CON
	VALUES ("94b22f3a-9877-e866-6525-0c59f29a5c20",
	1824.000000,
	1264.000000,
	"3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO DIM_CON
	VALUES ("b6763a8b-5949-1edd-f4dc-e9bf322858d3",
	1792.000000,
	1344.000000,
	"3f4836f4-f0b1-1795-1f17-b5ed9ecc9663");
INSERT INTO GD_GE
	VALUES ("74dcba96-0e02-0cde-ea9b-567dc77cc0d2",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"8e354c1d-5852-273a-2a70-02e9cab68075",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b');
INSERT INTO GD_SHP
	VALUES ("74dcba96-0e02-0cde-ea9b-567dc77cc0d2");
INSERT INTO GD_NCS
	VALUES ("74dcba96-0e02-0cde-ea9b-567dc77cc0d2");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"74dcba96-0e02-0cde-ea9b-567dc77cc0d2");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1456.000000,
	"74dcba96-0e02-0cde-ea9b-567dc77cc0d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("74dcba96-0e02-0cde-ea9b-567dc77cc0d2",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("5b6efaca-1bc3-14eb-d3cc-4ddad9ced72a",
	1792.000000,
	1456.000000,
	"74dcba96-0e02-0cde-ea9b-567dc77cc0d2");
INSERT INTO DIM_CON
	VALUES ("ee4e999e-2b9c-ea47-ef89-461223d27c34",
	1792.000000,
	1536.000000,
	"74dcba96-0e02-0cde-ea9b-567dc77cc0d2");
INSERT INTO GD_GE
	VALUES ("452b5863-7b99-02f8-5ca7-27111b10c5b0",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"d32743f7-4644-a40d-b13b-137ddb048cea",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2');
INSERT INTO GD_SHP
	VALUES ("452b5863-7b99-02f8-5ca7-27111b10c5b0");
INSERT INTO GD_NCS
	VALUES ("452b5863-7b99-02f8-5ca7-27111b10c5b0");
INSERT INTO DIM_ND
	VALUES (144.000000,
	80.000000,
	"452b5863-7b99-02f8-5ca7-27111b10c5b0");
INSERT INTO DIM_GE
	VALUES (1728.000000,
	1648.000000,
	"452b5863-7b99-02f8-5ca7-27111b10c5b0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("452b5863-7b99-02f8-5ca7-27111b10c5b0",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("f7db4de3-9946-48b2-1dd2-493713b6076e",
	1792.000000,
	1648.000000,
	"452b5863-7b99-02f8-5ca7-27111b10c5b0");
INSERT INTO DIM_CON
	VALUES ("6677a3d1-ae1d-0bc1-fd5b-c49248048409",
	1872.000000,
	1696.000000,
	"452b5863-7b99-02f8-5ca7-27111b10c5b0");
INSERT INTO GD_GE
	VALUES ("015c92e2-bf53-a158-7243-89a69f01c069",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"f13e2674-401b-bc19-80b6-5220f5c83006",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a');
INSERT INTO GD_SHP
	VALUES ("015c92e2-bf53-a158-7243-89a69f01c069");
INSERT INTO GD_NCS
	VALUES ("015c92e2-bf53-a158-7243-89a69f01c069");
INSERT INTO DIM_ND
	VALUES (128.000000,
	64.000000,
	"015c92e2-bf53-a158-7243-89a69f01c069");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1296.000000,
	"015c92e2-bf53-a158-7243-89a69f01c069",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("015c92e2-bf53-a158-7243-89a69f01c069",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("a3c315d4-02b8-5622-078f-8bd82e4d4075",
	2096.000000,
	1360.000000,
	"015c92e2-bf53-a158-7243-89a69f01c069");
INSERT INTO DIM_CON
	VALUES ("0c6903e6-dca6-f062-8072-2e5a75a351ec",
	2096.000000,
	1296.000000,
	"015c92e2-bf53-a158-7243-89a69f01c069");
INSERT INTO GD_GE
	VALUES ("d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"b3799b4d-80e2-c190-89d5-aa9411a565dc",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b');
INSERT INTO GD_SHP
	VALUES ("d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9");
INSERT INTO GD_NCS
	VALUES ("d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1456.000000,
	"d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("3adc5bf0-3ff1-fdb1-4457-d86b3c538ab1",
	2096.000000,
	1456.000000,
	"d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9");
INSERT INTO DIM_CON
	VALUES ("54a6a948-4aee-14e3-704a-90f98f8f9697",
	2096.000000,
	1536.000000,
	"d5241264-e1b3-aa76-3f4b-1cc0c40e8dd9");
INSERT INTO GD_GE
	VALUES ("48d16874-d9dd-54e3-ccfc-519ecceb44a8",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"59917f33-cef2-9af9-8dd3-a33ee8073757",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 2');
INSERT INTO GD_SHP
	VALUES ("48d16874-d9dd-54e3-ccfc-519ecceb44a8");
INSERT INTO GD_NCS
	VALUES ("48d16874-d9dd-54e3-ccfc-519ecceb44a8");
INSERT INTO DIM_ND
	VALUES (128.000000,
	80.000000,
	"48d16874-d9dd-54e3-ccfc-519ecceb44a8");
INSERT INTO DIM_GE
	VALUES (2032.000000,
	1648.000000,
	"48d16874-d9dd-54e3-ccfc-519ecceb44a8",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("48d16874-d9dd-54e3-ccfc-519ecceb44a8",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("1905c6a7-37de-6530-2475-27e9f4a1e007",
	2096.000000,
	1648.000000,
	"48d16874-d9dd-54e3-ccfc-519ecceb44a8");
INSERT INTO GD_GE
	VALUES ("448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"81a3d867-b82f-e3e5-c5e6-1fa58e3c73fb",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT1: Start and test');
INSERT INTO GD_CON
	VALUES ("448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("703e22df-d84f-deb3-e2ca-1c4882950d6d",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"703e22df-d84f-deb3-e2ca-1c4882950d6d");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"703e22df-d84f-deb3-e2ca-1c4882950d6d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("703e22df-d84f-deb3-e2ca-1c4882950d6d",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("070ce229-5c53-005e-fc4e-5183ee765bbf",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	3,
	-66.000000,
	-5.000000);
INSERT INTO DIM_ND
	VALUES (252.000000,
	41.000000,
	"070ce229-5c53-005e-fc4e-5183ee765bbf");
INSERT INTO DIM_GE
	VALUES (1821.000000,
	1186.000000,
	"070ce229-5c53-005e-fc4e-5183ee765bbf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("070ce229-5c53-005e-fc4e-5183ee765bbf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("3f47203f-50f5-fd9d-8dcd-5d8c55f3621a",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"3f47203f-50f5-fd9d-8dcd-5d8c55f3621a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"3f47203f-50f5-fd9d-8dcd-5d8c55f3621a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("3f47203f-50f5-fd9d-8dcd-5d8c55f3621a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9cd8c958-6bf9-ab52-15f2-ab86d59211bd",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"fef6cf8d-c1d5-7e2b-e82d-db9e28ea1e7b",
	"4655bab1-b297-16de-aadb-21aa038f98e1");
INSERT INTO GD_LS
	VALUES ("6009ed98-57ba-0665-d207-241e9d90a64f",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"9cd8c958-6bf9-ab52-15f2-ab86d59211bd",
	"4655bab1-b297-16de-aadb-21aa038f98e1",
	"a6f91103-404f-e113-f8a1-714f96a30fcd");
INSERT INTO GD_LS
	VALUES ("53b246b0-41d8-2f6e-f88a-a7cb1cec3377",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"6009ed98-57ba-0665-d207-241e9d90a64f",
	"a6f91103-404f-e113-f8a1-714f96a30fcd",
	"368a468e-6709-4944-8118-c38b24658c98");
INSERT INTO GD_LS
	VALUES ("8c5f4764-b9f6-8240-112c-2f07add452ed",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"53b246b0-41d8-2f6e-f88a-a7cb1cec3377",
	"368a468e-6709-4944-8118-c38b24658c98",
	"4eb87db5-f803-c645-9456-d91ea1673065");
INSERT INTO DIM_WAY
	VALUES ("fef6cf8d-c1d5-7e2b-e82d-db9e28ea1e7b",
	1872.000000,
	1296.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("4655bab1-b297-16de-aadb-21aa038f98e1",
	1920.000000,
	1296.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"fef6cf8d-c1d5-7e2b-e82d-db9e28ea1e7b");
INSERT INTO DIM_WAY
	VALUES ("a6f91103-404f-e113-f8a1-714f96a30fcd",
	1920.000000,
	1216.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"4655bab1-b297-16de-aadb-21aa038f98e1");
INSERT INTO DIM_WAY
	VALUES ("368a468e-6709-4944-8118-c38b24658c98",
	1824.000000,
	1216.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"a6f91103-404f-e113-f8a1-714f96a30fcd");
INSERT INTO DIM_WAY
	VALUES ("4eb87db5-f803-c645-9456-d91ea1673065",
	1824.000000,
	1264.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000",
	"368a468e-6709-4944-8118-c38b24658c98");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("788d1730-54b5-19e0-2848-e530867a7d78",
	"94b22f3a-9877-e866-6525-0c59f29a5c20",
	"448b6c44-c7c4-88e5-db6f-3cc35f0ee3dc");
INSERT INTO GD_GE
	VALUES ("68570925-8a19-9640-32c1-c3fce69c88f4",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"d31332ef-3a64-01c2-29b3-30e4d5e7962e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1a::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("68570925-8a19-9640-32c1-c3fce69c88f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("0b25a99a-1a99-2ee9-6c7b-0557c6958f5b",
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"0b25a99a-1a99-2ee9-6c7b-0557c6958f5b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"0b25a99a-1a99-2ee9-6c7b-0557c6958f5b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0b25a99a-1a99-2ee9-6c7b-0557c6958f5b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("95aadab4-120b-9b1b-87e9-bac9d7cde6a6",
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	3,
	-231.000000,
	4.000000);
INSERT INTO DIM_ND
	VALUES (248.000000,
	37.000000,
	"95aadab4-120b-9b1b-87e9-bac9d7cde6a6");
INSERT INTO DIM_GE
	VALUES (1545.000000,
	1389.000000,
	"95aadab4-120b-9b1b-87e9-bac9d7cde6a6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95aadab4-120b-9b1b-87e9-bac9d7cde6a6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("169b0d09-74f2-40c3-72bc-ff2bc2097cbf",
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"169b0d09-74f2-40c3-72bc-ff2bc2097cbf");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"169b0d09-74f2-40c3-72bc-ff2bc2097cbf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("169b0d09-74f2-40c3-72bc-ff2bc2097cbf",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("e5910b26-89d3-65d8-c7e4-09f2b878fd8e",
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	"00000000-0000-0000-0000-000000000000",
	"2ced704b-77bc-bbd5-c9dd-f3f9fe836433",
	"a19d5b14-56c5-e64f-f972-d48ae7b4ffd9");
INSERT INTO DIM_WAY
	VALUES ("2ced704b-77bc-bbd5-c9dd-f3f9fe836433",
	1792.000000,
	1344.000000,
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("a19d5b14-56c5-e64f-f972-d48ae7b4ffd9",
	1792.000000,
	1456.000000,
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	"00000000-0000-0000-0000-000000000000",
	"2ced704b-77bc-bbd5-c9dd-f3f9fe836433");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"68570925-8a19-9640-32c1-c3fce69c88f4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("68570925-8a19-9640-32c1-c3fce69c88f4",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("b6763a8b-5949-1edd-f4dc-e9bf322858d3",
	"5b6efaca-1bc3-14eb-d3cc-4ddad9ced72a",
	"68570925-8a19-9640-32c1-c3fce69c88f4");
INSERT INTO GD_GE
	VALUES ("801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"7bc1ccff-469f-64a0-cc24-5b04823d0b1e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 1b::UBT2: Continue and test');
INSERT INTO GD_CON
	VALUES ("801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("e2c1c3ff-7df1-96ac-88f5-05edf887fd91",
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"e2c1c3ff-7df1-96ac-88f5-05edf887fd91");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"e2c1c3ff-7df1-96ac-88f5-05edf887fd91",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("e2c1c3ff-7df1-96ac-88f5-05edf887fd91",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7c773e96-eddc-ddbd-c029-b98be2592f75",
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	3,
	-212.000000,
	-2.000000);
INSERT INTO DIM_ND
	VALUES (226.000000,
	44.000000,
	"7c773e96-eddc-ddbd-c029-b98be2592f75");
INSERT INTO DIM_GE
	VALUES (1564.000000,
	1575.000000,
	"7c773e96-eddc-ddbd-c029-b98be2592f75",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7c773e96-eddc-ddbd-c029-b98be2592f75",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("7780d39c-d37f-cf8d-b2b9-409b37db3b5a",
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"7780d39c-d37f-cf8d-b2b9-409b37db3b5a");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7780d39c-d37f-cf8d-b2b9-409b37db3b5a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7780d39c-d37f-cf8d-b2b9-409b37db3b5a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("0d5781ec-fa9f-9fb5-3d8e-ac4e3c51290d",
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"00000000-0000-0000-0000-000000000000",
	"f145c6cf-5fa2-cec6-30dd-dc847d33fc21",
	"299dae74-9590-b5f7-70ef-650b4d3cb7c0");
INSERT INTO DIM_WAY
	VALUES ("f145c6cf-5fa2-cec6-30dd-dc847d33fc21",
	1792.000000,
	1536.000000,
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("299dae74-9590-b5f7-70ef-650b4d3cb7c0",
	1792.000000,
	1648.000000,
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"00000000-0000-0000-0000-000000000000",
	"f145c6cf-5fa2-cec6-30dd-dc847d33fc21");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("801c0fe6-947e-2aff-7532-ede0f9a9a1b9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("ee4e999e-2b9c-ea47-ef89-461223d27c34",
	"f7db4de3-9946-48b2-1dd2-493713b6076e",
	"801c0fe6-947e-2aff-7532-ede0f9a9a1b9");
INSERT INTO GD_GE
	VALUES ("8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"b0a1d77e-4bd3-d8a6-936b-e90d7275bab0",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1a::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("5bb6b5d2-a644-7b42-637b-49e12e6ef796",
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"5bb6b5d2-a644-7b42-637b-49e12e6ef796");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"5bb6b5d2-a644-7b42-637b-49e12e6ef796",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("5bb6b5d2-a644-7b42-637b-49e12e6ef796",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("69919f0c-fc87-020d-ea23-5e789311ea9a",
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	3,
	-13.000000,
	1.000000);
INSERT INTO DIM_ND
	VALUES (274.000000,
	38.000000,
	"69919f0c-fc87-020d-ea23-5e789311ea9a");
INSERT INTO DIM_GE
	VALUES (2067.000000,
	1394.000000,
	"69919f0c-fc87-020d-ea23-5e789311ea9a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("69919f0c-fc87-020d-ea23-5e789311ea9a",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("6ff6c3f1-b603-4c6a-9b16-9659ac9d044b",
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"6ff6c3f1-b603-4c6a-9b16-9659ac9d044b");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"6ff6c3f1-b603-4c6a-9b16-9659ac9d044b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6ff6c3f1-b603-4c6a-9b16-9659ac9d044b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("be824962-1a55-57ec-d42a-5214887e7beb",
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"00000000-0000-0000-0000-000000000000",
	"826e0014-f0e0-17ed-3c0e-227b3168b4de",
	"cae1c3f9-79bc-cd23-1a61-7344ca4aeb64");
INSERT INTO DIM_WAY
	VALUES ("826e0014-f0e0-17ed-3c0e-227b3168b4de",
	2096.000000,
	1360.000000,
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("cae1c3f9-79bc-cd23-1a61-7344ca4aeb64",
	2096.000000,
	1456.000000,
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"00000000-0000-0000-0000-000000000000",
	"826e0014-f0e0-17ed-3c0e-227b3168b4de");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("8abfad8d-c3f7-f4ce-680c-4dbfde750226",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("a3c315d4-02b8-5622-078f-8bd82e4d4075",
	"3adc5bf0-3ff1-fdb1-4457-d86b3c538ab1",
	"8abfad8d-c3f7-f4ce-680c-4dbfde750226");
INSERT INTO GD_GE
	VALUES ("753214b7-8978-7b33-20da-4b9544f57c3a",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"f64ff628-c913-616a-bbe7-83682902a298",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::Or test 1b::UBT4: Continue or test');
INSERT INTO GD_CON
	VALUES ("753214b7-8978-7b33-20da-4b9544f57c3a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f3484ad4-d6b0-5b38-0922-a70c8deacbf6",
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f3484ad4-d6b0-5b38-0922-a70c8deacbf6");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f3484ad4-d6b0-5b38-0922-a70c8deacbf6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f3484ad4-d6b0-5b38-0922-a70c8deacbf6",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("325f2c93-c233-5d75-3c13-ef9cb392bfa1",
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	3,
	-15.000000,
	7.000000);
INSERT INTO DIM_ND
	VALUES (272.000000,
	41.000000,
	"325f2c93-c233-5d75-3c13-ef9cb392bfa1");
INSERT INTO DIM_GE
	VALUES (2065.000000,
	1584.000000,
	"325f2c93-c233-5d75-3c13-ef9cb392bfa1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("325f2c93-c233-5d75-3c13-ef9cb392bfa1",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("62a435c9-16a0-471f-19be-32698520cf21",
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"62a435c9-16a0-471f-19be-32698520cf21");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"62a435c9-16a0-471f-19be-32698520cf21",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("62a435c9-16a0-471f-19be-32698520cf21",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("9325dc13-4ccd-8fe4-2f31-887730c908cb",
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	"00000000-0000-0000-0000-000000000000",
	"61009695-7a07-4e7d-580a-75410fb15ef9",
	"f5ab0901-5231-d8c7-bda6-8379c6d47f39");
INSERT INTO DIM_WAY
	VALUES ("61009695-7a07-4e7d-580a-75410fb15ef9",
	2096.000000,
	1536.000000,
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("f5ab0901-5231-d8c7-bda6-8379c6d47f39",
	2096.000000,
	1648.000000,
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	"00000000-0000-0000-0000-000000000000",
	"61009695-7a07-4e7d-580a-75410fb15ef9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"753214b7-8978-7b33-20da-4b9544f57c3a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("753214b7-8978-7b33-20da-4b9544f57c3a",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("54a6a948-4aee-14e3-704a-90f98f8f9697",
	"1905c6a7-37de-6530-2475-27e9f4a1e007",
	"753214b7-8978-7b33-20da-4b9544f57c3a");
INSERT INTO GD_GE
	VALUES ("1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"fbd61b75-4871-c39a-631d-48438e87b5d2",
	"e6176175-e590-5ee8-e918-dcff3a86153e",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::User Boolean Test::Instance State Machine::And test 2::UBT3: Start or test');
INSERT INTO GD_CON
	VALUES ("1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("17de88eb-d5aa-ffbc-00c3-83315c40f866",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"17de88eb-d5aa-ffbc-00c3-83315c40f866");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"17de88eb-d5aa-ffbc-00c3-83315c40f866",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("17de88eb-d5aa-ffbc-00c3-83315c40f866",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("447a7de5-0d8d-dcb2-d4c4-1803466b57ef",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	3,
	105.000000,
	-196.000000);
INSERT INTO DIM_ND
	VALUES (235.000000,
	45.000000,
	"447a7de5-0d8d-dcb2-d4c4-1803466b57ef");
INSERT INTO DIM_GE
	VALUES (2057.000000,
	1221.000000,
	"447a7de5-0d8d-dcb2-d4c4-1803466b57ef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("447a7de5-0d8d-dcb2-d4c4-1803466b57ef",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("85e40cda-d08c-3509-26a8-ec7e52dfee17",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"85e40cda-d08c-3509-26a8-ec7e52dfee17");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"85e40cda-d08c-3509-26a8-ec7e52dfee17",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("85e40cda-d08c-3509-26a8-ec7e52dfee17",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("81449443-e68a-caf2-101e-1d2a815ee493",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"32ac7abb-a3bc-1e8a-8dc1-1a0e8c08260a",
	"9df03f04-6ea9-0a26-1494-fe26e1da11d9");
INSERT INTO GD_LS
	VALUES ("ff12a63a-c6b0-a58f-6a07-6afdf17eb85e",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"81449443-e68a-caf2-101e-1d2a815ee493",
	"9df03f04-6ea9-0a26-1494-fe26e1da11d9",
	"0a98d1b1-fe1b-ca01-256f-5dbab9b127a0");
INSERT INTO GD_LS
	VALUES ("5db37dad-f577-e497-9bcb-c443f35c1cc5",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"ff12a63a-c6b0-a58f-6a07-6afdf17eb85e",
	"0a98d1b1-fe1b-ca01-256f-5dbab9b127a0",
	"e3b7025e-f612-0cb5-3563-1603f51b0444");
INSERT INTO GD_LS
	VALUES ("c0aa5051-85e9-0487-0a22-da4574e2ecba",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"5db37dad-f577-e497-9bcb-c443f35c1cc5",
	"e3b7025e-f612-0cb5-3563-1603f51b0444",
	"9bad5cba-8d2b-6ace-5059-0e3b55973ec2");
INSERT INTO DIM_WAY
	VALUES ("32ac7abb-a3bc-1e8a-8dc1-1a0e8c08260a",
	1872.000000,
	1696.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("9df03f04-6ea9-0a26-1494-fe26e1da11d9",
	1968.000000,
	1696.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"32ac7abb-a3bc-1e8a-8dc1-1a0e8c08260a");
INSERT INTO DIM_WAY
	VALUES ("0a98d1b1-fe1b-ca01-256f-5dbab9b127a0",
	1968.000000,
	1248.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"9df03f04-6ea9-0a26-1494-fe26e1da11d9");
INSERT INTO DIM_WAY
	VALUES ("e3b7025e-f612-0cb5-3563-1603f51b0444",
	2096.000000,
	1248.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"0a98d1b1-fe1b-ca01-256f-5dbab9b127a0");
INSERT INTO DIM_WAY
	VALUES ("9bad5cba-8d2b-6ace-5059-0e3b55973ec2",
	2096.000000,
	1296.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000",
	"e3b7025e-f612-0cb5-3563-1603f51b0444");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("1c43d6b8-56fb-54a8-1713-5a7732b4ffaf",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("6677a3d1-ae1d-0bc1-fd5b-c49248048409",
	"0c6903e6-dca6-f062-8072-2e5a75a351ec",
	"1c43d6b8-56fb-54a8-1713-5a7732b4ffaf");
INSERT INTO DIM_DIA
	VALUES ("fbd61b75-4871-c39a-631d-48438e87b5d2",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	'User Other Boolean Test',
	19,
	'UOBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_BATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_ATTR
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"00000000-0000-0000-0000-000000000000",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_BATTR
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_ATTR
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"1666303f-be65-bcfc-c61a-60015487b986",
	0,
	"4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	"73a87d8d-920f-5045-5d06-12de6044e2c7",
	"7fd31cc5-4c81-453c-5cea-ee1041f6ac96",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Boolean Test',
	'id',
	'R13');
INSERT INTO O_RATTR
	VALUES ("73a87d8d-920f-5045-5d06-12de6044e2c7",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986",
	1,
	'id');
INSERT INTO O_ATTR
	VALUES ("73a87d8d-920f-5045-5d06-12de6044e2c7",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	"95296e2e-8956-9277-e949-d5f922af20d4",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"23be9183-ac52-6ab4-4667-0427148fc222",
	"4e42ae8d-e3de-aceb-08e0-5e95cf30872d",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'btrue',
	'R14');
INSERT INTO O_RATTR
	VALUES ("23be9183-ac52-6ab4-4667-0427148fc222",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	1,
	'btrue');
INSERT INTO O_ATTR
	VALUES ("23be9183-ac52-6ab4-4667-0427148fc222",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"73a87d8d-920f-5045-5d06-12de6044e2c7",
	'r11btrue',
	'',
	'r11',
	'btrue',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	"a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"4463774f-b7f4-496a-9234-f6187ee88b96",
	"9c85cfe9-eceb-b23b-b4ae-4c474f4ad325",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'User Third Boolean Test',
	'bfalse',
	'R14');
INSERT INTO O_RATTR
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	1,
	'bfalse');
INSERT INTO O_ATTR
	VALUES ("4463774f-b7f4-496a-9234-f6187ee88b96",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"23be9183-ac52-6ab4-4667-0427148fc222",
	'r11bfalse',
	'',
	'r11',
	'bfalse',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_OIDA
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO O_ID
	VALUES (2,
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b");
INSERT INTO PE_PE
	VALUES ("be9e2171-dc97-6eba-071d-a89efce27f22",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("be9e2171-dc97-6eba-071d-a89efce27f22",
	'User Third Boolean Test',
	20,
	'UTBT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_BATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_ATTR
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	"00000000-0000-0000-0000-000000000000",
	'btrue',
	'',
	'',
	'btrue',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_BATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_ATTR
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	"95296e2e-8956-9277-e949-d5f922af20d4",
	'bfalse',
	'',
	'',
	'bfalse',
	0,
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_OIDA
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	'btrue');
INSERT INTO O_OIDA
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	'bfalse');
INSERT INTO O_ID
	VALUES (1,
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO O_ID
	VALUES (2,
	"be9e2171-dc97-6eba-071d-a89efce27f22");
INSERT INTO PE_PE
	VALUES ("0145c467-517a-31e2-8e26-fce57532eea1",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO O_OBJ
	VALUES ("0145c467-517a-31e2-8e26-fce57532eea1",
	'ex init',
	1,
	'USERINIT',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_NBATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_BATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_ATTR
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"0145c467-517a-31e2-8e26-fce57532eea1",
	"00000000-0000-0000-0000-000000000000",
	'id',
	'',
	'',
	'id',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_BATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_ATTR
	VALUES ("27280732-2bfa-bede-3bc6-dd987bccb815",
	"0145c467-517a-31e2-8e26-fce57532eea1",
	"ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_OIDA
	VALUES ("ca72b1ff-e5a6-e38d-f4b2-46e6a7aa5538",
	"0145c467-517a-31e2-8e26-fce57532eea1",
	0,
	'id');
INSERT INTO O_ID
	VALUES (1,
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO O_ID
	VALUES (2,
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO SM_ISM
	VALUES ("c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"0145c467-517a-31e2-8e26-fce57532eea1");
INSERT INTO SM_SM
	VALUES ("c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	'',
	3);
INSERT INTO SM_MOORE
	VALUES ("c9262fd1-759f-c7d8-3c2f-6c2a34f15e74");
INSERT INTO SM_LEVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"00000000-0000-0000-0000-000000000000",
	1,
	'init',
	0,
	'',
	'USERINIT1',
	'');
INSERT INTO SM_STATE
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"00000000-0000-0000-0000-000000000000",
	'ex init',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("010e5b79-68d0-bcb1-520c-f74108fb87da",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"010e5b79-68d0-bcb1-520c-f74108fb87da");
INSERT INTO SM_AH
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74");
INSERT INTO SM_ACT
	VALUES ("039fe8f5-af7d-7451-32d4-b3cf1d5ea922",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	1,
	'LOG::LogInfo(message:"a1test_exconfig: a1test_exconfig init") ;

// create preexisting instances
create object instance ev of EV;
assign ev.shutdown_count = 3;
create object instance et of ET;
assign et.btrue = TRUE;
assign et.et_id = 1;
create object instance one_inst of OI;
relate et to one_inst across R3;
create object instance mi1 of MI;
relate et to mi1 across R4;
create object instance mi2 of MI;
relate et to mi2 across R4;

create object instance etob1 of ETOB;
assign etob1.etob_id = 2;
assign etob1.r = 2.1718;
assign etob1.btrue = TRUE;
assign etob1.bfalse = FALSE;
assign etob1.s = "etob1 string";
bridge etob1.d = TIM::create_date(second:17,minute:7,hour:13,day:9,month:8,year:1991);
select any event_instance from instances of EV;
create event instance ev_temp of EV1:''Event Instance''(message:"etob1 event instance") to event_instance;
assign etob1.ev = ev_temp;
bridge etob1.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp);
relate et to etob1 across R1;
relate et to etob1 across R8;
create object instance etob2 of ETOB;
assign etob2.etob_id = 3;
assign etob2.r = 1.616;
assign etob2.btrue = TRUE;
assign etob2.bfalse = FALSE;
assign etob2.s = "etob2 string";
relate et to etob2 across R8;

create object instance etoc of ETOC;
assign etoc.etoc_id = 4;
assign etoc.r = 11.311;
assign etoc.btrue = TRUE;
assign etoc.bfalse = FALSE;
assign etoc.s = "etoc string";
bridge etoc.d = TIM::create_date(second:10,minute:0,hour:0,day:13,month:12,year:1997);
create event instance ev_temp2 of EV1:''Event Instance''(message:"etoc event instance") to event_instance;
assign etoc.ev = ev_temp2;
bridge etoc.tim = TIM::timer_start ( microseconds:2000000, event_inst:ev_temp2);

relate etob1 to etoc across R6;
create object instance etoc2 of ETOC;
assign etoc2.etoc_id = 5;
assign etoc2.r = 17.311;
assign etoc2.btrue = TRUE;
assign etoc2.bfalse = FALSE;
assign etoc2.s = "etoc2 string";
relate etob2 to etoc2 across R6;

create object instance bet of BET;
assign bet.btrue = TRUE;
assign bet.bfalse = FALSE;
create object instance obet1 of OBET;
assign obet1.btrue = TRUE;
assign obet1.bfalse = FALSE;
relate bet to obet1 across R9;
relate bet to obet1 across R10;
create object instance obet2 of OBET;
assign obet2.btrue = TRUE;
assign obet2.bfalse = FALSE;
relate bet to obet2 across R10;
create object instance tbet1 of TBET;
assign tbet1.btrue = TRUE;
assign tbet1.bfalse = FALSE;
relate tbet1 to obet1 across R11;
create object instance tbet2 of TBET;
assign tbet2.btrue = TRUE;
assign tbet2.bfalse = FALSE;
relate tbet2 to obet2 across R11;

create object instance ubt of UBT;
assign ubt.btrue = TRUE;
assign ubt.bfalse = FALSE;

create object instance uobt1 of UOBT;
assign uobt1.btrue = TRUE;
assign uobt1.bfalse = FALSE;
relate ubt to uobt1 across R12;
relate ubt to uobt1 across R13;

create object instance uobt2 of UOBT;
assign uobt2.btrue = TRUE;
assign uobt2.bfalse = FALSE;
relate ubt to uobt2 across R13;

create object instance utbt1 of UTBT;
assign utbt1.btrue = TRUE;
assign utbt1.bfalse = FALSE;
relate utbt1 to uobt1 across R14;

create object instance utbt2 of UTBT;
assign utbt2.btrue = TRUE;
assign utbt2.bfalse = FALSE;
relate utbt2 to uobt2 across R14;


// no instances of NOI should be created

// start the expression test
generate ET1:''Start Expression Test''() to et;

generate BET1:''Start and test''( ttrue: true, tfalse: false) to bet;
generate UBT1:''Start and test''( ttrue: true, tfalse: false) to ubt;
',
	'');
INSERT INTO SM_NSTXN
	VALUES ("93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"417f5810-e42c-e0e2-fb4b-3cec12ff8438",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TAH
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"93ea5f31-2048-2ab7-bae9-4e08a4ea93cc");
INSERT INTO SM_AH
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74");
INSERT INTO SM_ACT
	VALUES ("124933f0-be4f-4b48-43da-d36851efe3c1",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	3,
	'',
	'');
INSERT INTO SM_TXN
	VALUES ("93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_MD
	VALUES ("937ce1fe-5b75-9088-8901-6c46f038c406",
	8,
	"c9262fd1-759f-c7d8-3c2f-6c2a34f15e74",
	40,
	1,
	0,
	1,
	1,
	0,
	12,
	0,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("95711086-8424-74d9-eaa1-082657ca4ea9",
	"937ce1fe-5b75-9088-8901-6c46f038c406",
	"010e5b79-68d0-bcb1-520c-f74108fb87da",
	41,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init');
INSERT INTO GD_SHP
	VALUES ("95711086-8424-74d9-eaa1-082657ca4ea9");
INSERT INTO GD_NCS
	VALUES ("95711086-8424-74d9-eaa1-082657ca4ea9");
INSERT INTO DIM_ND
	VALUES (496.000000,
	480.000000,
	"95711086-8424-74d9-eaa1-082657ca4ea9");
INSERT INTO DIM_GE
	VALUES (1744.000000,
	1248.000000,
	"95711086-8424-74d9-eaa1-082657ca4ea9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("95711086-8424-74d9-eaa1-082657ca4ea9",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("24d068bc-0ff5-e9a6-8eb3-eff9e76ab534",
	2240.000000,
	1296.000000,
	"95711086-8424-74d9-eaa1-082657ca4ea9");
INSERT INTO DIM_CON
	VALUES ("0133cade-812e-519e-5f1e-486f6d09a80e",
	2176.000000,
	1248.000000,
	"95711086-8424-74d9-eaa1-082657ca4ea9");
INSERT INTO GD_GE
	VALUES ("cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"937ce1fe-5b75-9088-8901-6c46f038c406",
	"93ea5f31-2048-2ab7-bae9-4e08a4ea93cc",
	42,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::ex::ex init::Instance State Machine::ex init::USERINIT1: init');
INSERT INTO GD_CON
	VALUES ("cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f6d5d2c1-cfa8-e083-d452-f23aca8b69d7",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f6d5d2c1-cfa8-e083-d452-f23aca8b69d7");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"f6d5d2c1-cfa8-e083-d452-f23aca8b69d7",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f6d5d2c1-cfa8-e083-d452-f23aca8b69d7",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("ae614ce9-51c5-8218-c16d-10fc33642995",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	3,
	-109.000000,
	-4.000000);
INSERT INTO DIM_ND
	VALUES (145.000000,
	33.000000,
	"ae614ce9-51c5-8218-c16d-10fc33642995");
INSERT INTO DIM_GE
	VALUES (2178.000000,
	1171.000000,
	"ae614ce9-51c5-8218-c16d-10fc33642995",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("ae614ce9-51c5-8218-c16d-10fc33642995",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("2f118e3e-ae50-19d8-37da-b2225ee46f58",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"2f118e3e-ae50-19d8-37da-b2225ee46f58");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"2f118e3e-ae50-19d8-37da-b2225ee46f58",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("2f118e3e-ae50-19d8-37da-b2225ee46f58",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("01d1b458-5efe-daf7-17c1-ab741de57f70",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"2e025feb-0fb2-7ab4-80b1-26be57c9f896",
	"3d29acc1-9578-9add-83f9-2b489d66e0b2");
INSERT INTO GD_LS
	VALUES ("58c72aca-c49a-0666-be52-d7481a422eeb",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"01d1b458-5efe-daf7-17c1-ab741de57f70",
	"3d29acc1-9578-9add-83f9-2b489d66e0b2",
	"80938a47-a759-98ab-0f84-abc0080e8b99");
INSERT INTO GD_LS
	VALUES ("82b42a46-9717-fdfe-451d-9e9384f61b7a",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"58c72aca-c49a-0666-be52-d7481a422eeb",
	"80938a47-a759-98ab-0f84-abc0080e8b99",
	"47a7744d-bbbd-e651-41bb-d31466457970");
INSERT INTO GD_LS
	VALUES ("e318a591-6c77-7998-2dff-d4ad546d4f39",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"82b42a46-9717-fdfe-451d-9e9384f61b7a",
	"47a7744d-bbbd-e651-41bb-d31466457970",
	"6eea63c5-5d8f-7a89-4b6e-1863c0d8ee47");
INSERT INTO DIM_WAY
	VALUES ("2e025feb-0fb2-7ab4-80b1-26be57c9f896",
	2240.000000,
	1296.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("3d29acc1-9578-9add-83f9-2b489d66e0b2",
	2320.000000,
	1296.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"2e025feb-0fb2-7ab4-80b1-26be57c9f896");
INSERT INTO DIM_WAY
	VALUES ("80938a47-a759-98ab-0f84-abc0080e8b99",
	2320.000000,
	1200.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"3d29acc1-9578-9add-83f9-2b489d66e0b2");
INSERT INTO DIM_WAY
	VALUES ("47a7744d-bbbd-e651-41bb-d31466457970",
	2176.000000,
	1200.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"80938a47-a759-98ab-0f84-abc0080e8b99");
INSERT INTO DIM_WAY
	VALUES ("6eea63c5-5d8f-7a89-4b6e-1863c0d8ee47",
	2176.000000,
	1248.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000",
	"47a7744d-bbbd-e651-41bb-d31466457970");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"cd1ab843-40da-26f7-dca9-58dc9998e53b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("cd1ab843-40da-26f7-dca9-58dc9998e53b",
	1,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("24d068bc-0ff5-e9a6-8eb3-eff9e76ab534",
	"0133cade-812e-519e-5f1e-486f6d09a80e",
	"cd1ab843-40da-26f7-dca9-58dc9998e53b");
INSERT INTO DIM_DIA
	VALUES ("937ce1fe-5b75-9088-8901-6c46f038c406",
	'',
	1.000000,
	1600.000000,
	1179.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5",
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("b0c41c18-2ec3-082a-de04-0645538d81a5");
INSERT INTO R_PART
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("bf73a6b3-0f53-09cc-e95f-9595e1214551",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("4ed0e08d-602b-f2d5-2f05-b795e0fe4d69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("5e7b239b-59a8-8274-3c8a-7abe276e36c6",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("0cf5ecb2-9f89-da33-bb16-ce0693261674",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("bd201d9f-9c61-13d7-45a4-6d424fce92da",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("1646c2b6-e1b8-2ff6-804d-2816d4def61f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("6367115e-8d6d-a5bb-91e9-beb7a37cff4f",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("0a567d5d-743b-86df-7f36-8d47c97145b4",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("7bdb5dde-4d1f-9322-83f1-d4aef5ce28fc",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO O_RTIDA
	VALUES ("955f9dc3-6792-d471-00ec-91b38ae7fb69",
	"13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	0,
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1");
INSERT INTO R_RTO
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	0);
INSERT INTO R_OIR
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"e5448393-9fba-0000-99bf-c6ddd5efa4c1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a");
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b0c41c18-2ec3-082a-de04-0645538d81a5",
	"2c4dfa33-317a-2057-4799-ca233db1e10a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	2,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55");
INSERT INTO R_PART
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5");
INSERT INTO R_RTO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	0);
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"6c1ec3f5-1825-f0f6-df89-bebfc20bc7a5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	1,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052");
INSERT INTO R_OIR
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"083c9cf6-6a2b-7562-cbd5-2c4f7e75fe55",
	"fec823f3-30b7-8aec-c9b7-169afcf2e052",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d",
	3,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("e710b946-9035-55ff-a08d-d748e3f4803d");
INSERT INTO R_PART
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e");
INSERT INTO R_RTO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	0);
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"5bf95f81-bb7c-8400-6836-f1339f7c917e",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"e46687fc-d696-59c0-16bf-f541d57a57d1");
INSERT INTO R_OIR
	VALUES ("10cb639d-df2d-adb0-98f3-a78db4dc592b",
	"e710b946-9035-55ff-a08d-d748e3f4803d",
	"e46687fc-d696-59c0-16bf-f541d57a57d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	4,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("63148bdd-fdd1-b725-e6bc-eff81f5bb5c1");
INSERT INTO R_PART
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a");
INSERT INTO R_RTO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	0);
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"fddb96c4-ae5e-78b8-2e0e-a128df260b0a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6");
INSERT INTO R_OIR
	VALUES ("4206c40b-edd7-2055-c9ae-7e2e2357ae74",
	"63148bdd-fdd1-b725-e6bc-eff81f5bb5c1",
	"3c55c927-841a-b2ef-2e4f-65509835d7e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	5,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f");
INSERT INTO R_PART
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"1532eced-0f36-6463-4a58-51234289a64d",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"1532eced-0f36-6463-4a58-51234289a64d");
INSERT INTO R_RTO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"1532eced-0f36-6463-4a58-51234289a64d",
	0);
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"1532eced-0f36-6463-4a58-51234289a64d",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef");
INSERT INTO R_OIR
	VALUES ("07bff483-9300-a1f1-5b45-304f90bb0356",
	"5b3fd52a-393a-a64d-3a7b-52e1d4a12a3f",
	"bd0d89e0-a4f6-1cf8-6797-98220022bdef",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	6,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa");
INSERT INTO R_FORM
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6");
INSERT INTO R_OIR
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"c5688cf2-d55a-9dc3-0162-ec497afb28e6",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("f27d150f-5992-e53c-b782-8a0d207beecf",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("c5a14468-e51d-5a62-7dd7-54ad7cfe954e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("a80aa59c-df79-e41d-8fbf-e286acbecbfd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("7734bddb-7442-e149-9954-439287ef0f4a",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("c6ca4bce-887f-805a-2422-cb8534463eb6",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("1b59e831-033b-9ce7-b65e-5fe2efb3849d",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("46f99e6a-e777-d553-2d38-ff40d6cdbd61",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("ccce8115-d43e-7de7-3359-7eca850c7ead",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("988bf124-e0f1-2e44-35f8-20aa22f2b32e",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("da58c8b4-e115-bda5-ef6c-931b9c201031",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO O_RTIDA
	VALUES ("afd2ccbc-87e1-0def-4b6f-6fbc5f6212dd",
	"f27d150f-5992-e53c-b782-8a0d207beecf",
	0,
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882");
INSERT INTO R_RTO
	VALUES ("f27d150f-5992-e53c-b782-8a0d207beecf",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	0);
INSERT INTO R_OIR
	VALUES ("f27d150f-5992-e53c-b782-8a0d207beecf",
	"8a2e5faa-86c0-01f6-cab0-c2ce0e9c53aa",
	"e2d13fba-f144-700f-8a57-89cd77de0882",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	8,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979");
INSERT INTO R_PART
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("9f821190-633f-b88a-15c0-58473e04dab8",
	"9ce314cf-ef10-05bc-3fc1-07055c886174",
	0,
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"0a69908c-030b-344c-d1fc-2ae53261c05c");
INSERT INTO R_RTO
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	0);
INSERT INTO R_OIR
	VALUES ("9ce314cf-ef10-05bc-3fc1-07055c886174",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"0a69908c-030b-344c-d1fc-2ae53261c05c",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"51c69cc9-966b-1f42-77f3-40556127d89a");
INSERT INTO R_OIR
	VALUES ("13e1df6d-f4c0-a5d3-3d39-41576f26946d",
	"b3c88eb2-410c-b6c9-69ee-5c0d1c9f3979",
	"51c69cc9-966b-1f42-77f3-40556127d89a",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1df0b40c-855d-bdd9-ba08-7d506c4da672",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1df0b40c-855d-bdd9-ba08-7d506c4da672",
	9,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1df0b40c-855d-bdd9-ba08-7d506c4da672");
INSERT INTO R_FORM
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b");
INSERT INTO R_OIR
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"2a2d9e47-a989-1434-6645-8cb939e6dd9b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("cf465ea6-30e2-2b28-87b9-c08791e751ab",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"33c980d2-8225-907f-dfd4-e154279837ce");
INSERT INTO O_RTIDA
	VALUES ("770cbafe-c7de-b1c2-5839-59ccb9f303fd",
	"6969931b-e22d-0bf5-041b-6abc1679047b",
	0,
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"33c980d2-8225-907f-dfd4-e154279837ce");
INSERT INTO R_RTO
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	0);
INSERT INTO R_OIR
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"1df0b40c-855d-bdd9-ba08-7d506c4da672",
	"33c980d2-8225-907f-dfd4-e154279837ce",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("463900cd-cb24-e7ce-394a-517012c78ded",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("463900cd-cb24-e7ce-394a-517012c78ded",
	10,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("463900cd-cb24-e7ce-394a-517012c78ded");
INSERT INTO R_PART
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4d506659-eff5-a9b8-70b1-8ef421843fc1",
	"4328620f-7230-a48a-b68e-8a14e65195e9",
	0,
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"b38d2601-6548-7b5d-a632-40a2974b50a4");
INSERT INTO R_RTO
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	0);
INSERT INTO R_OIR
	VALUES ("4328620f-7230-a48a-b68e-8a14e65195e9",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"b38d2601-6548-7b5d-a632-40a2974b50a4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4");
INSERT INTO R_OIR
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"463900cd-cb24-e7ce-394a-517012c78ded",
	"61b47bf0-bbf7-9b3e-1647-9b192abee0e4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("167f3797-8ca4-b3c9-1cdc-619d8873a382",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("167f3797-8ca4-b3c9-1cdc-619d8873a382",
	11,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("167f3797-8ca4-b3c9-1cdc-619d8873a382");
INSERT INTO R_FORM
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4");
INSERT INTO R_OIR
	VALUES ("6969931b-e22d-0bf5-041b-6abc1679047b",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"c8a47aa4-20fd-54b7-8943-e806342b7bc4",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("36a13d1a-1200-f700-aecd-ebb37da607d6",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("5b342212-a9f5-41ad-f1b0-3ebaed8d7588",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"79d2f928-3950-26af-ffc1-c07aed1996ff");
INSERT INTO O_RTIDA
	VALUES ("6f6fd546-9e31-73af-8b66-24ea7e794d4d",
	"36a13d1a-1200-f700-aecd-ebb37da607d6",
	0,
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"79d2f928-3950-26af-ffc1-c07aed1996ff");
INSERT INTO R_RTO
	VALUES ("36a13d1a-1200-f700-aecd-ebb37da607d6",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	0);
INSERT INTO R_OIR
	VALUES ("36a13d1a-1200-f700-aecd-ebb37da607d6",
	"167f3797-8ca4-b3c9-1cdc-619d8873a382",
	"79d2f928-3950-26af-ffc1-c07aed1996ff",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("633893b1-6815-b390-ea0b-55ece0ae3db4",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("633893b1-6815-b390-ea0b-55ece0ae3db4",
	12,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("633893b1-6815-b390-ea0b-55ece0ae3db4");
INSERT INTO R_FORM
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	0,
	1,
	'');
INSERT INTO R_RGO
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"2266ed22-2062-951c-1c75-d77359aa8342");
INSERT INTO R_OIR
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"2266ed22-2062-951c-1c75-d77359aa8342",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("ec9ce7b0-4da6-ce7a-7d77-092b335e2936",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc");
INSERT INTO O_RTIDA
	VALUES ("5e42ba8d-3d4c-4b02-58b6-96f03c4520fc",
	"2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	0,
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc");
INSERT INTO R_RTO
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	0);
INSERT INTO R_OIR
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"633893b1-6815-b390-ea0b-55ece0ae3db4",
	"9adc1dd1-bd35-472d-5c73-97f8244fa0fc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	13,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("ee6ae716-3c6f-95f0-2355-70cf45baa9b0");
INSERT INTO R_PART
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("4ea4ac8e-6522-c228-b4ab-0f5a849d7238",
	"1666303f-be65-bcfc-c61a-60015487b986",
	0,
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86");
INSERT INTO R_RTO
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	0);
INSERT INTO R_OIR
	VALUES ("1666303f-be65-bcfc-c61a-60015487b986",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"7fc2d4b2-faeb-3735-a9e1-bb2ab988fd86",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_FORM
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	1,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"9f27ab91-0194-b361-7e67-c537592b48d1");
INSERT INTO R_OIR
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"ee6ae716-3c6f-95f0-2355-70cf45baa9b0",
	"9f27ab91-0194-b361-7e67-c537592b48d1",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("1e40733c-3d1f-ae78-5c3d-517bb656a368",
	1,
	"7516aa72-1b6a-f610-ef70-2de192c2b769",
	"00000000-0000-0000-0000-000000000000",
	9);
INSERT INTO R_REL
	VALUES ("1e40733c-3d1f-ae78-5c3d-517bb656a368",
	14,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_SIMP
	VALUES ("1e40733c-3d1f-ae78-5c3d-517bb656a368");
INSERT INTO R_FORM
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	0,
	0,
	'');
INSERT INTO R_RGO
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc");
INSERT INTO R_OIR
	VALUES ("2538b85f-80b5-34b7-8c4b-93d69bdbc38b",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"f1b17a81-6479-6bae-e09d-40a3c7998cfc",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO R_PART
	VALUES ("be9e2171-dc97-6eba-071d-a89efce27f22",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	0,
	0,
	'');
INSERT INTO O_RTIDA
	VALUES ("95296e2e-8956-9277-e949-d5f922af20d4",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157");
INSERT INTO O_RTIDA
	VALUES ("a7a57e1b-c248-765e-6ca6-e33a4b838ba3",
	"be9e2171-dc97-6eba-071d-a89efce27f22",
	0,
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157");
INSERT INTO R_RTO
	VALUES ("be9e2171-dc97-6eba-071d-a89efce27f22",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	0);
INSERT INTO R_OIR
	VALUES ("be9e2171-dc97-6eba-071d-a89efce27f22",
	"1e40733c-3d1f-ae78-5c3d-517bb656a368",
	"a51df3ee-4ec7-695a-e7b6-6e08001f8157",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("a9c338d5-2dc5-d146-4de0-0bf11cb8a24e",
	1,
	"53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("a9c338d5-2dc5-d146-4de0-0bf11cb8a24e",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'External Entities',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("db71e127-c79b-5fe3-6aee-9a2a5f29699e",
	112,
	"a9c338d5-2dc5-d146-4de0-0bf11cb8a24e",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::External Entities');
INSERT INTO DIM_DIA
	VALUES ("db71e127-c79b-5fe3-6aee-9a2a5f29699e",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("ea2f4889-a8e4-301b-f60e-aca5212761fc",
	1,
	"53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG
	VALUES ("ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	"d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'Datatypes',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	112,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'',
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes');
INSERT INTO GD_GE
	VALUES ("6e4c0222-ddab-11f6-246f-dc326385f702",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_b');
INSERT INTO GD_SHP
	VALUES ("6e4c0222-ddab-11f6-246f-dc326385f702");
INSERT INTO GD_NCS
	VALUES ("6e4c0222-ddab-11f6-246f-dc326385f702");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"6e4c0222-ddab-11f6-246f-dc326385f702");
INSERT INTO DIM_GE
	VALUES (2280.000000,
	1690.000000,
	"6e4c0222-ddab-11f6-246f-dc326385f702",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("6e4c0222-ddab-11f6-246f-dc326385f702",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("bf7c3f23-b659-b6f5-99f9-7b476a5af152",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"2c989ba8-f0da-5e56-46cf-06a2a7c1b6ac",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_i');
INSERT INTO GD_SHP
	VALUES ("bf7c3f23-b659-b6f5-99f9-7b476a5af152");
INSERT INTO GD_NCS
	VALUES ("bf7c3f23-b659-b6f5-99f9-7b476a5af152");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"bf7c3f23-b659-b6f5-99f9-7b476a5af152");
INSERT INTO DIM_GE
	VALUES (2500.000000,
	1690.000000,
	"bf7c3f23-b659-b6f5-99f9-7b476a5af152",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("bf7c3f23-b659-b6f5-99f9-7b476a5af152",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("a4bb663d-c53c-76e0-edbd-6cc426790037",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"e67ffa5f-2ae4-d156-e190-c8ecd2a0f5db",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_r');
INSERT INTO GD_SHP
	VALUES ("a4bb663d-c53c-76e0-edbd-6cc426790037");
INSERT INTO GD_NCS
	VALUES ("a4bb663d-c53c-76e0-edbd-6cc426790037");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"a4bb663d-c53c-76e0-edbd-6cc426790037");
INSERT INTO DIM_GE
	VALUES (1620.000000,
	1855.000000,
	"a4bb663d-c53c-76e0-edbd-6cc426790037",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("a4bb663d-c53c-76e0-edbd-6cc426790037",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("b034df09-f0cb-552a-7718-8f1a9e06f499",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"861b22fc-9407-ee4e-ce52-2199f47e3ce8",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_s');
INSERT INTO GD_SHP
	VALUES ("b034df09-f0cb-552a-7718-8f1a9e06f499");
INSERT INTO GD_NCS
	VALUES ("b034df09-f0cb-552a-7718-8f1a9e06f499");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"b034df09-f0cb-552a-7718-8f1a9e06f499");
INSERT INTO DIM_GE
	VALUES (1840.000000,
	1855.000000,
	"b034df09-f0cb-552a-7718-8f1a9e06f499",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b034df09-f0cb-552a-7718-8f1a9e06f499",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("b8b9d334-6c33-2e58-e687-1dd3cc94803b",
	"e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	"b04a89b5-0eca-1678-aaea-137214f5d9a6",
	51,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1::Datatypes::my_u');
INSERT INTO GD_SHP
	VALUES ("b8b9d334-6c33-2e58-e687-1dd3cc94803b");
INSERT INTO GD_NCS
	VALUES ("b8b9d334-6c33-2e58-e687-1dd3cc94803b");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"b8b9d334-6c33-2e58-e687-1dd3cc94803b");
INSERT INTO DIM_GE
	VALUES (2060.000000,
	1855.000000,
	"b8b9d334-6c33-2e58-e687-1dd3cc94803b",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b8b9d334-6c33-2e58-e687-1dd3cc94803b",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("e0fc8c1f-f76f-696c-cf3c-d12c7be8ce6d",
	'',
	1.000000,
	1600.000000,
	1180.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO PE_PE
	VALUES ("79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	1,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	"00000000-0000-0000-0000-000000000000",
	'my_b',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("79f633fb-09b8-7ca5-0f3b-229fada3bdf4",
	"ba5eda7a-def5-0000-0000-000000000001",
	0);
INSERT INTO PE_PE
	VALUES ("2c989ba8-f0da-5e56-46cf-06a2a7c1b6ac",
	1,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("2c989ba8-f0da-5e56-46cf-06a2a7c1b6ac",
	"00000000-0000-0000-0000-000000000000",
	'my_i',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("2c989ba8-f0da-5e56-46cf-06a2a7c1b6ac",
	"ba5eda7a-def5-0000-0000-000000000002",
	0);
INSERT INTO PE_PE
	VALUES ("e67ffa5f-2ae4-d156-e190-c8ecd2a0f5db",
	1,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("e67ffa5f-2ae4-d156-e190-c8ecd2a0f5db",
	"00000000-0000-0000-0000-000000000000",
	'my_r',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("e67ffa5f-2ae4-d156-e190-c8ecd2a0f5db",
	"ba5eda7a-def5-0000-0000-000000000003",
	0);
INSERT INTO PE_PE
	VALUES ("861b22fc-9407-ee4e-ce52-2199f47e3ce8",
	1,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("861b22fc-9407-ee4e-ce52-2199f47e3ce8",
	"00000000-0000-0000-0000-000000000000",
	'my_s',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("861b22fc-9407-ee4e-ce52-2199f47e3ce8",
	"ba5eda7a-def5-0000-0000-000000000004",
	0);
INSERT INTO PE_PE
	VALUES ("b04a89b5-0eca-1678-aaea-137214f5d9a6",
	1,
	"ea2f4889-a8e4-301b-f60e-aca5212761fc",
	"00000000-0000-0000-0000-000000000000",
	3);
INSERT INTO S_DT
	VALUES ("b04a89b5-0eca-1678-aaea-137214f5d9a6",
	"00000000-0000-0000-0000-000000000000",
	'my_u',
	'',
	'');
INSERT INTO S_UDT
	VALUES ("b04a89b5-0eca-1678-aaea-137214f5d9a6",
	"ba5eda7a-def5-0000-0000-000000000005",
	0);
INSERT INTO PE_PE
	VALUES ("53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	0,
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO GD_GE
	VALUES ("05af4c6a-3bba-71ce-b166-9813f326eca0",
	"4ae64cde-c5c5-198e-a964-558f0c217360",
	"53a47f11-d21d-5e6c-ae8f-8ba46e44476a",
	108,
	0,
	'com.mentor.nucleus.bp.io.mdl.test::ex1');
INSERT INTO GD_SHP
	VALUES ("05af4c6a-3bba-71ce-b166-9813f326eca0");
INSERT INTO GD_NCS
	VALUES ("05af4c6a-3bba-71ce-b166-9813f326eca0");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"05af4c6a-3bba-71ce-b166-9813f326eca0");
INSERT INTO DIM_GE
	VALUES (4010.000000,
	0.000000,
	"05af4c6a-3bba-71ce-b166-9813f326eca0",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("05af4c6a-3bba-71ce-b166-9813f326eca0",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYS_PROXY
	VALUES ("d73d062b-4547-d2eb-35bc-2b9d90dfb02b",
	'com.mentor.nucleus.bp.io.mdl.test',
	1,
	'../com.mentor.nucleus.bp.io.mdl.test.xtuml');
