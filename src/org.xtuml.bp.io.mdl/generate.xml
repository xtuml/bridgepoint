<?xml version="1.0" encoding="UTF-8"?>
<project name="bp.io.mdl" default="all" basedir=".">

  <import file="${mcj_path}/common.xml"/>

  <target name="all"
          description="Generate all code for this project"
          depends="class2table,import.java,export.java,export_stream.java,uuid_convert_util.java,persistence_meta_data.java,external_link_evaluator.java,delete_gen,format_java">
  </target>

  <target name="nb_all"
          description="Generate all code for this project"
          depends="class2table,import.java,export.java,export_stream.java,uuid_convert_util.java,persistence_meta_data.java,external_link_evaluator.java,delete_gen">
  </target>

  <property name="plugins-home" value="${ant.home}/../.."/>

  <property name="iocore_path" value="../org.xtuml.bp.io.core" />

  <property name="sg.dep" value="ooa_schema.sql,schema_gen.arc" />
  <property name="schema" value="file_io_schema.sql" />

  <property name="class2table.input" value="sql/ooaofooa-1.sql" />
  <property name="class2table.output" value="ooa.pei.sql" />

  <property name="core_path" value="../org.xtuml.bp.core" />
  <property name="canvas_path" value="../org.xtuml.bp.ui.canvas" />

  <property name="graphics.model" value="sql/ooaofgraphics.sql" />

  <target name="class2table.depends" >
    <uptodate property="class2table.buildNotNeeded" targetfile="sql/${class2table.output}">
       <srcfiles dir = "${core_path}"        includes = "${class2table.input}"/>
       <srcfiles dir = "${canvas_path}"      includes = "${graphics.model}" />
       <srcfiles dir = "${iocore_path}/arc"        includes = "class2table.arc"/>
       <srcfiles dir = "${mcj_path}" includes = "ooa_schema.sql"/>
    </uptodate>
  </target>
  <target name="class2table"
          depends="class2table.depends"
          description="Generate the Tiger OOA pre-existing instances file"
          unless="class2table.buildNotNeeded" >
    <!-- If the ooa_schema.sql file does not exist at the mc_java_path
    	 location, we are dealing with a relative path.  We must account
    	 for the sql directory by adding another ascension
    -->      
    <ant dir="sql" antfile="${ant.file}" target="mcj_path_type" />
  </target>

  <target name="mcj_path_type">
	  <available file="${mcj_path}" property="absolute.present"/>
	  <available file="../${mcj_path}" property="relative.present"/>
	  <antcall target="class2table.absolute"/>
	  <antcall target="class2table.relative"/>   		
  </target>

  <target name="class2table.absolute" if="absolute.present" >
    <echo >Generating ${class2table.output} ...</echo>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
      -import ${mcj_path}/ooa_schema.sql
      -import ../${core_path}/${class2table.input}
      -import ../${canvas_path}/${graphics.model}
      -arch ../${iocore_path}/arc/class2table.arc" />
  </exec>
    <delete file="____file.txt" />
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${class2table.output}" />
  </target>

  <target name="class2table.relative" if="relative.present" >
    <echo >Generating ${class2table.output} ...</echo>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
    	 -import ../${mcj_path}/ooa_schema.sql
    	 -import ../${core_path}/${class2table.input}
    	 -import ../${canvas_path}/${graphics.model}
    	 -arch ../${iocore_path}/arc/class2table.arc" />
    </exec>
    <delete file="____file.txt" />
    <!-- Need to touch the output file for the case where the input data
    	 changed, but the output didn't -->
    <touch file="${class2table.output}" />
  </target>

  <property name="sql.output" value="ooaofooa-1.sql" />
  <property name="import.output" value="src/org/xtuml/bp/io/mdl/ImportModel.java" />
  <property name="import_component.output" value = "src/org/xtuml/bp/io/mdl/ImportModelComponent.java"/>
  <property name="import_stream.output" value = "src/org/xtuml/bp/io/mdl/ImportModelStream.java"/>

  <target name="import.depends" >
    <uptodate property="import.buildNotNeeded" targetfile="${import.output}">
       <srcfiles dir = "arc"        includes = "gen_import_java.arc,gen_xtuml_import_java.arc, gen_stream_import.arc"/>
       <srcfiles dir = "${iocore_path}/arc"     includes = "gen_import_java.inc,import_functions.inc,generate_configurable_components.inc" />
       <srcfiles dir = "${iocore_path}/sql"     includes = "${schema}" />
     <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
     <srcfiles dir = "${core_path}/sql" includes = "${sql.output}" />
       <srcfiles dir = "sql"        includes = "${class2table.output},file_io.pei.sql"/>
       <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
    </uptodate>
  </target>

  <property name="export.output" value="src/org/xtuml/bp/io/mdl/ExportModel.java" />
  <property name="export_component.output" value = "src/org/xtuml/bp/io/mdl/ExportModelComponent.java"/>
  <property name="export_stream.output" value = "src/org/xtuml/bp/io/mdl/ExportModelStream.java"/>

  <target name="export.depends" >
    <uptodate property="export.buildNotNeeded" targetfile="${export.output}">
       <srcfiles dir = "arc"        includes = "gen_export_java.arc,gen_xtuml_export_java.arc"/>
       <srcfiles dir = "${iocore_path}/arc"     includes = "gen_export_java.inc,export_functions.inc,generate_configurable_components.inc" />
       <srcfiles dir = "${iocore_path}/sql"     includes = "${schema}" />
     <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
     <srcfiles dir = "${core_path}/sql" includes = "${sql.output}" />
       <srcfiles dir = "sql"        includes = "${class2table.output},file_io.pei.sql"/>
       <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
    </uptodate>
  </target>

  <target name="export_stream.depends" >
    <uptodate property="export_stream.buildNotNeeded" targetfile="${export_stream.output}">
       <srcfiles dir = "arc"        includes = "gen_stream_export.arc"/>
       <srcfiles dir = "${iocore_path}/arc"     includes = "gen_export_java.inc, export_functions.inc,generate_configurable_components.inc" />
       <srcfiles dir = "${iocore_path}/sql"     includes = "${schema}" />
        <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
       <srcfiles dir = "${core_path}/sql" includes = "${sql.output}" />
       <srcfiles dir = "${core_path}/arc" includes = "parse_chain.inc" />
       <srcfiles dir = "sql"        includes = "${class2table.output},stream.pei.sql"/>
       <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
    </uptodate>
  </target>

  <property name="persistence_meta_data.output" value = "src/org/xtuml/bp/io/mdl/PersistenceHierarchyMetaData.java"/>

  <target name="persistence_meta_data.depends" >
      <uptodate property="persistence_meta_data.buildNotNeeded" targetfile="${persistence_meta_data.output}">
         <srcfiles dir = "arc"        includes = "create_persistence_meta_data.arc,"/>
         <srcfiles dir = "${iocore_path}/arc"      includes = "generate_configurable_components.inc" />
         <srcfiles dir = "${iocore_path}/sql"      includes = "${schema}" />
       <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
       <srcfiles dir = "${core_path}/sql" includes = "${sql.output}" />
         <srcfiles dir = "sql"        includes = "${class2table.output},file_io.pei.sql"/>
         <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
      </uptodate>
  </target>

  <property name="uuid_convert_util.output" value = "src/org/xtuml/bp/io/mdl/IDConversionUtil.java"/>

  <target name="uuid_convert_util.depends" >
      <uptodate property="uuid_convert_util.buildNotNeeded" targetfile="${uuid_convert_util.output}">
         <srcfiles dir = "arc"        includes = "gen_uuid_convert_util.arc"/>
         <srcfiles dir = "${iocore_path}/arc"      includes = "generate_configurable_components.inc" />
         <srcfiles dir = "${iocore_path}/sql"      includes = "${schema}" />
       <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
         <srcfiles dir = "sql"        includes = "${class2table.output},file_io.pei.sql"/>
         <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
      </uptodate>
  </target>

  <target name="create_gen.depends"
          depends="import.depends, export.depends, uuid_convert_util.depends, persistence_meta_data.depends, external_link_evaluator.depends" >
    <condition property="create_gen.buildNotNeeded" >
      <and>
      <istrue value="${import.buildNotNeeded}"/>
      <istrue value="${export.buildNotNeeded}"/>
      <istrue value="${uuid_convert_util.buildNotNeeded}"/>
      <istrue value="${persistence_meta_data.buildNotNeeded}"/>
      <istrue value="${external_link_evaluator.buildNotNeeded}"/>
    </and>
    </condition>
  </target>

  <target name="create_gen"
          depends="create_gen.depends"
          description="Create the generation database"
          unless="create_gen.buildNotNeeded" >
    <echo >Generating gen_oal.gen ...</echo>
  <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -f gen_oal.gen
      -import ${iocore_path}/sql/${schema}
      -import ${mcj_path}/ooa_schema.sql
      -import ${core_path}/sql/${sql.output}
      -import ${canvas_path}/sql/ooaofgraphics.sql
      -import sql/${class2table.output}
      -import sql/file_io.pei.sql" />
  </exec>
  </target>

  <target name="import.java"
          depends="create_gen"
          description="Create the import java code"
          unless="import.buildNotNeeded" >
  <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
        <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
        <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
         <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -f gen_oal.gen
      -arch arc/gen_import_java.arc
      -arch arc/gen_xtuml_import_java.arc
      -arch arc/gen_stream_import.arc" />
  </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${import.output}" />
    <touch file="${import_component.output}" />
  </target>

  <target name="export.java"
          depends="create_gen"
          description="Create the export java code"
          unless="export.buildNotNeeded" >
  <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
        <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
        <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
        <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -f gen_oal.gen
      -arch arc/gen_export_java.arc
      -arch arc/gen_xtuml_export_java.arc" />
  </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${export.output}" />
    <touch file="${export_component.output}" />
  </target>

  <target name="export_stream.java"
          depends="export_stream.depends"
          description="Create the export java code"
          unless="export_stream.buildNotNeeded" >
  <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
        <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
        <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
         <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -f gen_stream.gen
      -import ${iocore_path}/sql/${schema}
      -import ${mcj_path}/ooa_schema.sql
      -import ${core_path}/sql/${sql.output}
      -import ${canvas_path}/sql/ooaofgraphics.sql
      -import sql/${class2table.output}
      -import sql/stream.pei.sql
      -arch arc/gen_stream_export.arc" />
  </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
    <touch file="${export_stream.output}" />
    <delete file="gen_stream.gen" />
    <delete file="____file.txt" />
  </target>

  <target name="uuid_convert_util.java"
    depends="create_gen"
    description="Generate implementation of IPersistenceHierarchyMetaData"
    unless="uuid_convert_util.buildNotNeeded">
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
      <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
      <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
      <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
     <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
      <arg line="xtumlmc_gen_erate -f gen_oal.gen
        -arch arc/gen_uuid_convert_util.arc" />
    </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${uuid_convert_util.output}" />
  </target>

  <target name="persistence_meta_data.java"
    depends="create_gen"
    description="Generate implementation of IPersistenceHierarchyMetaData"
    unless="persistence_meta_data.buildNotNeeded">
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
      <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
      <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
      <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
      <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
      <arg line="xtumlmc_gen_erate -f gen_oal.gen
        -arch arc/create_persistence_meta_data.arc" />
    </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${persistence_meta_data.output}" />
  </target>

  <property name="external_link_evaluator.output" value = "src/org/xtuml/bp/io/mdl/ExternalLinkEvaluator.java"/>

  <target name="external_link_evaluator.depends" >
    <uptodate property="external_link_evaluator.buildNotNeeded" targetfile="${external_link_evaluator.output}">
         <srcfiles dir = "arc"        includes = "create_external_link_evaluator.arc"/>
         <srcfiles dir = "${iocore_path}/arc"      includes = "generate_configurable_components.inc" />
         <srcfiles dir = "${iocore_path}/sql"      includes = "${schema}" />
       <srcfiles dir = "${core_path}/color" includes = "ooaofooa_package_spec.clr" />
       <srcfiles dir = "${core_path}/sql" includes = "${sql.output}" />
         <srcfiles dir = "sql"        includes = "${class2table.output},file_io.pei.sql"/>
         <srcfiles dir = "${mcj_path}" includes = "arch_utils.inc"/>
    </uptodate>
  </target>

  <target name="external_link_evaluator.java"
    depends="create_gen"
    description="Generate implementation of ExternalLink"
    unless="external_link_evaluator.buildNotNeeded">
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
      <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
      <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
      <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
      <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
      <arg line="xtumlmc_gen_erate -f gen_oal.gen
        -arch arc/create_external_link_evaluator.arc" />
    </exec>
  <touch file="${external_link_evaluator.output}" />
  </target>

   
   <target name="gen_test_file"
             depends="create_gen.depends"
             description="Test the instance population" >
       <echo >Testing the instance population of what would be in gen_oal.gen...</echo>
     <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
       <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
       <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
       <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
       <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
       <arg line="xtumlmc_gen_erate -nopersist

         -import ${iocore_path}/sql/${schema}
         -import ${mcj_path}/ooa_schema.sql
         -import ${core_path}/sql/${sql.output}
         -import ${canvas_path}/sql/ooaofgraphics.sql
         -import sql/${class2table.output}
         -import sql/file_io.pei.sql
         -arch /home/robertmulvey/xtuml/BridgePoint/eclipse/check_instances.arc" />
     </exec>
   </target>   
   <target name="gen_test_stream"
             depends="create_gen.depends"
             description="Test the instance population" >
       <echo >Testing the instance population of what would be in gen_oal.gen...</echo>
     <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
       <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
       <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
       <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
       <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
       <arg line="xtumlmc_gen_erate -nopersist

         -import ${iocore_path}/sql/${schema}
         -import ${mcj_path}/ooa_schema.sql
         -import ${core_path}/sql/${sql.output}
         -import ${canvas_path}/sql/ooaofgraphics.sql
         -import sql/${class2table.output}
         -import sql/stream.pei.sql
         -arch /home/robertmulvey/xtuml/BridgePoint/eclipse/check_instances.arc" />
     </exec>
   </target>   
   <target name="gen_all"
             depends="class2table,create_gen.depends"
             description="Create the generation database"
             unless="create_gen.buildNotNeeded" >
       <echo >Generating all.  This replace the targets that use the intermediate gen_oal.gen file ...</echo>
     <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
       <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
       <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
       <env key="CORE_ARC_DIR" value="../org.xtuml.bp.core/arc"/>
       <env key="IO_CORE_ARC_DIR" value="${iocore_path}/arc"/>
       <arg line="xtumlmc_gen_erate -nopersist

         -import ${iocore_path}/sql/${schema}
         -import ${mcj_path}/ooa_schema.sql
         -import ${core_path}/sql/${sql.output}
         -import ${canvas_path}/sql/ooaofgraphics.sql
         -import sql/${class2table.output}
         -import sql/file_io.pei.sql

         -arch arc/gen_import_java.arc
        -arch arc/gen_xtuml_import_java.arc
         -arch arc/gen_stream_import.arc
         -arch arc/gen_export_java.arc
         -arch arc/gen_xtuml_export_java.arc" />
     </exec>
     <touch file="${external_link_evaluator.output}" />
   </target>   
  <target name="format_java"
        description="Format the generated java source" >

    <taskdef name="PTCodeFormat" classname="PTCodeFormatterTask" >
        <classpath>
            <pathelement path="${mcj_path}/../org.xtuml.bp.core/tools/" />
            <fileset dir="${plugins-home}/plugins" casesensitive="yes">
                <include name="**/org.eclipse.text_*.jar" />
                <include name="**/org.eclipse.ui_*.jar" />
                <include name="**/org.eclipse.jdt.core_*.jar" />
                <include name="**/org.eclipse.core.runtime_*.jar" />
                <include name="**/org.eclipse.osgi_*.jar" />
                <include name="**/org.eclipse.core.resources_*.jar" />
                <include name="**/org.eclipse.equinox.common_*.jar" />
            </fileset>
        </classpath>
    </taskdef>
        <PTCodeFormat>
          <fileset dir="../org.xtuml.bp.io.mdl/src/org/xtuml/bp/io/mdl/" excludes="wizards/ModelExportPage.java, wizards/ModelExportWizard.java,
              ConvertToMultifileAction.java, MdlPlugin.java, ImportModelFactory.java, ExportModelFactory.java,
              ConvertToMultifileWizard.java, ConvertToMultifileWizardPage1.java, ConvertToMultifileWizardPage1View.java,
              ExportStreamFactory.java, ImportStreamFactory.java, wizards/ModelImportPage.java, wizards/ModelImportWizard.java,
              tree/ModelCheckedTreeContentProvider.java"
            includes="*.java" />
        </PTCodeFormat>
  </target>

  <target name="delete_gen"
          description="Delete generation working files" >
  <delete file="gen_oal.gen" />
  <delete file="____file.txt" />
  </target>

  <!-- CLEAN TARGETS -->

  <target name="clean_all"
        description="Clean entire project"
        depends="clean_classes,clean_class2table,clean_import.java,clean_export.java,clean_uuid_convert_util.java,clean_persistence_meta_data.java,clean_external_link_evaluator.java,delete_gen" >

    <echo>Done cleaning for ${ant.project.name}</echo>

  </target>

  <target name="clean_class2table"
          description="Remove the BP OOA pre-existing instances file" >

  <echo>Removing the generated file: ${class2table.output}</echo>
  <delete file="sql/${class2table.output}" />

  </target>

  <target name="clean_import.java"
        depends="clean_export.java"
          description="Remove the import java code" >

  <echo>Removing the imported java code ...</echo>
    <delete file="${import.output}" />
    <delete file="${import_component.output}" />
    <delete file="${import_stream.output}" />
  </target>

  <target name="clean_export.java"
          description="Remove the export java code" >

  <echo>Removing the exported java code ...</echo>
    <delete file="${export.output}" />
    <delete file="${export_component.output}" />
    <delete file="${export_stream.output}" />
  </target>

  <target name="clean_uuid_convert_util.java"
            description="Remove the persistence meta data java code" >

  <echo>Removing the persistence java code ...</echo>
  <delete file="${uuid_convert_util.output}" />

  </target>
  <target name="clean_persistence_meta_data.java"
            description="Remove the persistence meta data java code" >

  <echo>Removing the persistence java code ...</echo>
  <delete file="${persistence_meta_data.output}" />

  </target>

  <target name="clean_external_link_evaluator.java"
              description="Remove the external link evaluator" >

  <echo>Removing the external link evaluator ...</echo>
  <delete file="${external_link_evaluator.output}" />

  </target>

  <target name="clean_classes"
        description="Remove compiled class files" >

  <echo>Removing compiled classes ...</echo>
  <delete verbose="true" dir="bin" />

  </target>

</project>
