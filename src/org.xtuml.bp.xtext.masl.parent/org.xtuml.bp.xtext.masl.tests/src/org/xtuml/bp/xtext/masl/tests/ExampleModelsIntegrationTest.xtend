/*
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.tests

import com.google.inject.Inject
import com.google.inject.Provider
import java.io.File
import java.io.FileInputStream
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.eclipse.xtext.resource.FileExtensionProvider
import org.eclipse.xtext.resource.XtextResourceSet
import org.junit.Test
import org.junit.runner.RunWith
import org.xtuml.bp.xtext.masl.masl.structure.MaslModel

import static org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(MASLInjectorProvider)
class ExampleModelsIntegrationTest {

	@Inject extension ParseHelper<MaslModel>
	@Inject extension ValidationTestHelper
	@Inject Provider<XtextResourceSet> resourceSetProvider
	@Inject FileExtensionProvider fileExtensionProvider
	
	@Test
	def void testExamplesFromTutorial() {
		testProject('examples/tutorial')
	}

	@Test
	def void testGPSExample() {
		testProject('examples/GPS')
	}

	@Test
	def void testPSCExample() {
		testProject('examples/PSC')
	}

	@Test
	def void testSACExample_old() {
		testProject('examples/SAC_old')
	}

	@Test
	def void testSACExample_MASL() {
		testProject('examples/SAC/masl')
	}

	@Test
	def void testSACExample_xtUML() {
		testProject('examples/SAC/models')
	}

	@Test
	def void testWikiExamples() {
		testProject('examples/wiki')
	}

	@Test
	def void testServiceExamples() {
		testProject('examples/test_dom')
	}

	protected def testProject(String folderName) {
		val resourceSet = resourceSetProvider.get
		load(new File(folderName), resourceSet)
		var i=0
		while(resourceSet.resources.size > i) {
			val resource = resourceSet.resources.get(i)
			try {
				resource.assertNoErrors()
			} catch (AssertionError e) {
				fail(resource.URI.lastSegment + ': ' + e.message)
			}
			i++
		}
		assertTrue(i > 0)
		//println('Validated ' + i + ' resources')
	}

	protected def void load(File file, ResourceSet resourceSet) {
		if (file.isDirectory) {
			file.listFiles [
				isDirectory || fileExtensionProvider.fileExtensions.contains(name.split('\\.').last)
			].forEach[
				load(resourceSet)
			]
		} else {
			new FileInputStream(file).parse(URI.createFileURI(file.canonicalPath), null, resourceSet)
		}
	}
}
