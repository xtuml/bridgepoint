<<<<<<< HEAD
/* The following code was generated by JFlex 1.4.3 on 6/22/17 1:07 PM */
=======
/* The following code was generated by JFlex 1.4.3 on 6/23/17 10:07 AM */
>>>>>>> refs/remotes/origin/master

/*
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.parser.antlr.lexer.jflex;

import java.io.Reader;
import java.io.IOException;

import org.antlr.runtime.Token;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.TokenSource;

import static org.xtuml.bp.xtext.masl.parser.antlr.internal.InternalMASLParser.*;

@SuppressWarnings({"all"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
<<<<<<< HEAD
 * on 6/22/17 1:07 PM from the specification file
 * <tt>/Users/travislondon/git/bridgepoint/src/org.xtuml.bp.xtext.masl.parent/org.xtuml.bp.xtext.masl/../org.xtuml.bp.xtext.masl/src-gen/org/xtuml/bp/xtext/masl/parser/antlr/lexer/jflex/MASLFlexer.flex</tt>
=======
 * on 6/23/17 10:07 AM from the specification file
 * <tt>../org.xtuml.bp.xtext.masl/src-gen/org/xtuml/bp/xtext/masl/parser/antlr/lexer/jflex/MASLFlexer.flex</tt>
>>>>>>> refs/remotes/origin/master
 */
public class MASLFlexer implements org.antlr.runtime.TokenSource {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\4\22\0\1\1\1\0\1\22\1\12"+
    "\2\0\1\72\1\24\1\73\1\74\1\66\1\10\1\75\1\11\1\5"+
    "\1\3\10\13\2\14\1\70\1\76\1\64\1\67\1\65\1\0\1\17"+
    "\2\15\1\43\1\15\1\7\1\57\1\16\1\44\1\60\2\16\1\61"+
    "\1\16\1\50\1\16\1\20\2\16\1\46\7\16\1\77\1\23\1\100"+
    "\1\0\1\21\1\0\1\41\1\33\1\36\1\32\1\6\1\52\1\54"+
    "\1\47\1\37\1\56\1\62\1\42\1\53\1\35\1\31\1\45\1\55"+
    "\1\26\1\30\1\40\1\25\1\27\1\63\1\51\1\34\1\16\1\0"+
    "\1\101\1\0\1\71\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\6\1\7"+
    "\1\1\1\10\1\11\1\12\1\13\25\5\1\14\1\15"+
    "\1\16\1\17\1\20\1\1\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\5\5\1\35\5\0\2\11\1\36\1\12\3\0\11\5"+
    "\1\37\3\5\1\40\13\5\1\41\1\5\1\42\1\43"+
    "\2\5\1\44\6\5\1\45\23\5\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\31"+
    "\1\0\3\5\1\60\3\5\3\0\1\34\1\0\1\10"+
    "\1\36\2\0\1\61\2\0\11\5\1\62\3\5\1\63"+
    "\5\5\1\64\2\5\1\65\12\5\1\66\2\5\1\67"+
    "\20\5\1\70\1\5\1\71\12\5\1\72\1\5\1\73"+
    "\3\5\1\74\6\5\1\75\1\76\2\5\1\77\1\100"+
    "\1\101\2\5\1\102\2\0\1\34\3\0\41\5\1\103"+
    "\5\5\1\104\2\5\1\105\4\5\1\106\1\5\1\107"+
    "\1\110\1\111\3\5\1\112\1\113\11\5\1\114\2\5"+
    "\1\115\2\5\1\116\1\117\1\5\1\120\1\121\1\122"+
    "\1\5\2\0\1\123\1\5\1\124\7\5\1\125\1\126"+
    "\5\5\1\127\1\130\5\5\1\131\1\132\5\5\1\133"+
    "\15\5\1\134\14\5\1\135\1\136\2\5\1\137\1\5"+
    "\1\140\1\141\1\5\1\142\1\143\1\5\1\144\11\5"+
    "\1\145\1\146\1\5\1\147\1\5\1\150\2\5\1\151"+
    "\2\5\1\152\1\153\4\5\1\154\11\5\1\155\3\5"+
    "\1\156\5\5\1\157\2\5\1\160\3\5\1\161\1\5"+
    "\1\162\3\5\1\163\3\5\1\164\2\5\1\165\14\5"+
    "\1\166\1\167\10\5\1\170\2\5\1\171\1\172\2\5"+
    "\1\173\1\174\2\5\1\175\3\5\1\176\2\5\1\177"+
    "\1\5\1\200\5\5\1\201\1\202\1\5\1\203\1\204"+
    "\1\205\4\5\1\206\11\5\1\207\2\5\1\210\1\5"+
    "\1\211\4\5\1\212\1\213\4\5\1\214\1\5\1\215"+
    "\1\216\7\5\1\217\13\5\1\220\1\221\1\222\2\5"+
    "\1\223\2\5\1\224\1\225\2\5\1\226\1\227\1\230"+
    "\1\231\2\5\1\232\3\5\1\233";

  private static int [] zzUnpackAction() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\102"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc"+
    "\0\u0a0e\0\102\0\102\0\102\0\102\0\102\0\102\0\102"+
    "\0\102\0\u0a50\0\102\0\102\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\102\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26"+
    "\0\u0d68\0\102\0\u0daa\0\102\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2"+
    "\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2"+
    "\0\u1104\0\u1146\0\u1188\0\u11ca\0\u018c\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u018c\0\u15a8\0\u15ea\0\u018c\0\u162c"+
    "\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776\0\u018c\0\u17b8\0\u17fa"+
    "\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\102\0\102\0\u1ce0\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\u1d22\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\102\0\u207c\0\u20be\0\102\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352"+
    "\0\u2394\0\u018c\0\u23d6\0\u2418\0\u245a\0\u018c\0\u249c\0\u24de"+
    "\0\u2520\0\u2562\0\u25a4\0\u018c\0\u25e6\0\u2628\0\u018c\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a"+
    "\0\u28bc\0\u018c\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48"+
    "\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58"+
    "\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u018c\0\u2de4\0\u018c"+
    "\0\u2e26\0\u2e68\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4"+
    "\0\u3036\0\u3078\0\u018c\0\u30ba\0\u018c\0\u30fc\0\u313e\0\u3180"+
    "\0\u018c\0\u31c2\0\u3204\0\u3246\0\u3288\0\u32ca\0\u330c\0\102"+
    "\0\102\0\u334e\0\u3390\0\u018c\0\u018c\0\u018c\0\u33d2\0\u3414"+
    "\0\u018c\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2"+
    "\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\u376e\0\u37b0\0\u37f2"+
    "\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e\0\u39c0\0\u3a02"+
    "\0\u3a44\0\u3a86\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12"+
    "\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22"+
    "\0\u018c\0\u3e64\0\u3ea6\0\u3ee8\0\u3f2a\0\u3f6c\0\u018c\0\u3fae"+
    "\0\u3ff0\0\u018c\0\u4032\0\u4074\0\u40b6\0\u40f8\0\u018c\0\u413a"+
    "\0\u018c\0\u018c\0\u018c\0\u417c\0\u41be\0\u4200\0\u018c\0\u018c"+
    "\0\u4242\0\u4284\0\u42c6\0\u4308\0\u434a\0\u438c\0\u43ce\0\u4410"+
    "\0\u4452\0\u4494\0\u44d6\0\u4518\0\u018c\0\u455a\0\u459c\0\u018c"+
    "\0\u018c\0\u45de\0\u018c\0\u018c\0\u018c\0\u4620\0\u4662\0\u46a4"+
    "\0\u018c\0\u46e6\0\u018c\0\u4728\0\u476a\0\u47ac\0\u47ee\0\u4830"+
    "\0\u4872\0\u48b4\0\u018c\0\u018c\0\u48f6\0\u4938\0\u497a\0\u49bc"+
    "\0\u49fe\0\u018c\0\u018c\0\u4a40\0\u4a82\0\u4ac4\0\u4b06\0\u4b48"+
    "\0\u018c\0\u018c\0\u4b8a\0\u4bcc\0\u4c0e\0\u4c50\0\u4c92\0\u018c"+
    "\0\u4cd4\0\u4d16\0\u4d58\0\u4d9a\0\u4ddc\0\u4e1e\0\u4e60\0\u4ea2"+
    "\0\u4ee4\0\u4f26\0\u4f68\0\u4faa\0\u4fec\0\u018c\0\u502e\0\u5070"+
    "\0\u50b2\0\u50f4\0\u5136\0\u5178\0\u51ba\0\u51fc\0\u523e\0\u5280"+
    "\0\u52c2\0\u5304\0\u018c\0\u018c\0\u5346\0\u5388\0\u018c\0\u53ca"+
    "\0\102\0\102\0\u540c\0\u018c\0\u018c\0\u544e\0\u018c\0\u5490"+
    "\0\u54d2\0\u5514\0\u5556\0\u5598\0\u55da\0\u561c\0\u565e\0\u56a0"+
    "\0\u018c\0\u018c\0\u56e2\0\u018c\0\u5724\0\u018c\0\u5766\0\u57a8"+
    "\0\u018c\0\u57ea\0\u582c\0\u018c\0\u018c\0\u586e\0\u58b0\0\u58f2"+
    "\0\u5934\0\u018c\0\u5976\0\u59b8\0\u59fa\0\u5a3c\0\u5a7e\0\u5ac0"+
    "\0\u5b02\0\u5b44\0\u5b86\0\u018c\0\u5bc8\0\u5c0a\0\u5c4c\0\u018c"+
    "\0\u5c8e\0\u5cd0\0\u5d12\0\u5d54\0\u5d96\0\u018c\0\u5dd8\0\u5e1a"+
    "\0\u5e5c\0\u5e9e\0\u5ee0\0\u5f22\0\u018c\0\u5f64\0\u018c\0\u5fa6"+
    "\0\u5fe8\0\u602a\0\u018c\0\u606c\0\u60ae\0\u60f0\0\u018c\0\u6132"+
    "\0\u6174\0\u018c\0\u61b6\0\u61f8\0\u623a\0\u627c\0\u62be\0\u6300"+
    "\0\u6342\0\u6384\0\u63c6\0\u6408\0\u644a\0\u648c\0\u018c\0\u018c"+
    "\0\u64ce\0\u6510\0\u6552\0\u6594\0\u65d6\0\u6618\0\u665a\0\u669c"+
    "\0\u018c\0\u66de\0\u6720\0\u018c\0\u018c\0\u6762\0\u67a4\0\u018c"+
    "\0\u018c\0\u67e6\0\u6828\0\u018c\0\u686a\0\u68ac\0\u68ee\0\u018c"+
    "\0\u6930\0\u6972\0\u018c\0\u69b4\0\u018c\0\u69f6\0\u6a38\0\u6a7a"+
    "\0\u6abc\0\u6afe\0\u018c\0\u018c\0\u6b40\0\u018c\0\u018c\0\u018c"+
    "\0\u6b82\0\u6bc4\0\u6c06\0\u6c48\0\u018c\0\u6c8a\0\u6ccc\0\u6d0e"+
    "\0\u6d50\0\u6d92\0\u6dd4\0\u6e16\0\u6e58\0\u6e9a\0\u018c\0\u6edc"+
    "\0\u6f1e\0\u018c\0\u6f60\0\u018c\0\u6fa2\0\u6fe4\0\u7026\0\u7068"+
    "\0\u018c\0\u018c\0\u70aa\0\u70ec\0\u712e\0\u7170\0\u018c\0\u71b2"+
    "\0\u018c\0\u018c\0\u71f4\0\u7236\0\u7278\0\u72ba\0\u72fc\0\u733e"+
    "\0\u7380\0\u018c\0\u73c2\0\u7404\0\u7446\0\u7488\0\u74ca\0\u750c"+
    "\0\u754e\0\u7590\0\u75d2\0\u7614\0\u7656\0\u018c\0\u018c\0\u018c"+
    "\0\u7698\0\u76da\0\u018c\0\u771c\0\u775e\0\u018c\0\u018c\0\u77a0"+
    "\0\u77e2\0\u018c\0\u018c\0\u018c\0\u018c\0\u7824\0\u7866\0\u018c"+
    "\0\u78a8\0\u78ea\0\u792c\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\2\13\2\7\1\14\2\7\1\15\1\2"+
    "\1\16\1\17\1\20\1\7\1\21\1\22\1\23\1\24"+
    "\1\7\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\7\1\34\2\7\1\35\1\36\1\37\1\40\1\41"+
    "\3\7\1\42\2\7\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\103\0\2\3\1\0\1\3\100\0\1\62"+
    "\63\0\1\63\17\0\1\64\5\0\2\65\73\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\7\1\66\1\67"+
    "\5\7\1\70\4\7\1\71\6\7\1\72\12\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\37\7\103\0"+
    "\1\73\73\0\1\74\1\0\1\75\25\0\1\76\2\77"+
    "\2\0\1\100\2\13\65\0\17\101\1\102\1\103\24\101"+
    "\1\103\34\101\22\15\1\104\1\105\56\15\23\106\1\107"+
    "\1\0\55\106\6\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\3\7\1\110\4\7\1\111\26\7\24\0\1\112"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\14\7\1\113"+
    "\22\7\24\0\1\114\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\115\10\7\1\116\1\7\1\117\23\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\1\120\1\121"+
    "\4\7\1\122\1\7\1\123\2\7\1\124\11\7\1\125"+
    "\11\7\24\0\1\126\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\4\7\1\127\5\7\1\130\24\7\24\0\1\131"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\1\132\13\7"+
    "\1\133\22\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\134\3\7\1\135\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\136\2\7\1\137"+
    "\7\7\1\140\22\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\3\7\1\141\1\7\1\142\2\7\1\143"+
    "\14\7\1\144\11\7\24\0\1\145\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\7\1\146\2\7\1\147\2\7"+
    "\1\150\12\7\1\151\14\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\7\1\152\1\7\1\153\2\7"+
    "\1\154\1\7\1\155\2\7\1\156\23\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\4\7\1\157\5\7"+
    "\1\160\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\161\13\7\1\162\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\163\1\164\35\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\4\7\1\165"+
    "\32\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\4\7\1\166\32\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\1\167\3\7\1\170\5\7\1\171\1\7"+
    "\1\172\1\173\21\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\174\7\7\1\175\22\7\24\0"+
    "\1\176\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\27\7"+
    "\1\177\7\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\12\7\1\200\7\7\1\201\14\7\102\0\1\202"+
    "\1\203\1\0\1\204\77\0\1\205\1\0\1\206\100\0"+
    "\1\207\100\0\1\210\103\0\1\211\1\212\76\0\1\213"+
    "\14\0\2\62\1\214\1\62\1\215\75\62\6\0\2\77"+
    "\3\0\2\65\73\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\14\7\1\216\22\7\24\0\1\217\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\220\4\7\1\221\31\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\3\7"+
    "\1\222\33\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\11\7\1\223\1\224\24\7\76\0\1\225\101\0"+
    "\1\226\34\0\2\65\75\0\2\227\1\0\2\230\72\0"+
    "\1\231\2\232\3\0\4\232\1\0\1\232\4\0\37\232"+
    "\16\0\17\101\1\102\62\101\17\103\1\233\62\103\13\15"+
    "\1\234\1\0\10\15\1\235\54\15\24\0\1\236\55\0"+
    "\13\106\1\237\1\0\10\106\1\240\54\106\6\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\12\7\1\241\24\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\11\7"+
    "\1\242\1\243\2\7\1\244\21\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\2\7\1\245\10\7\1\246"+
    "\1\247\1\250\7\7\1\251\1\252\10\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\253\1\7"+
    "\1\254\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\255\11\7\1\256\14\7\1\257\6\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\6\7"+
    "\1\260\30\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\22\7\1\261\14\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\7\1\262\12\7\1\263\22\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\264\23\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\5\7\1\265\31\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\31\7\1\266\5\7\24\0\1\267"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\22\7\1\270"+
    "\14\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\11\7\1\271\3\7\1\272\7\7\1\273\11\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\26\7\1\274"+
    "\10\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\275\5\7\1\276\15\7\1\277\7\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\27\7\1\300"+
    "\7\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\301\24\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\27\7\1\302\7\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\15\7\1\303\21\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\304"+
    "\2\7\1\305\23\7\24\0\1\306\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\307\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\3\7\1\310\4\7"+
    "\1\311\26\7\24\0\2\7\3\0\4\7\1\0\1\7"+
    "\1\312\3\0\37\7\24\0\1\313\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\3\7\1\314\7\7\1\315\23\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\1\7"+
    "\1\316\35\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\317\13\7\1\320\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\20\7\1\321\16\7\24\0"+
    "\1\322\1\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\323\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\324\35\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\3\7\1\325\33\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\3\7\1\326\33\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\4\7"+
    "\1\327\1\330\31\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\331\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\332\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\1\7\1\333"+
    "\35\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\10\7\1\334\26\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\6\7\1\335\30\7\24\0\1\336\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\4\7\1\337\5\7"+
    "\1\340\1\7\1\341\22\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\342\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\7\1\343\35\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\10\7"+
    "\1\344\26\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\345\35\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\346\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\15\7\1\347\21\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\1\350"+
    "\36\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\5\7\1\351\31\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\352\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\353\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\354"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\13\7\1\355\23\7\24\0\1\356\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\12\7\1\357\24\7\102\0\1\360"+
    "\102\0\1\361\16\0\1\214\105\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\3\7\1\362\33\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\363\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\26\7"+
    "\1\364\10\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\15\7\1\365\21\7\24\0\1\366\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\12\7\1\367\24\7\24\0"+
    "\1\370\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\371\23\7\77\0\1\372\70\0\1\373\44\0\2\230"+
    "\73\0\2\374\3\0\4\374\1\0\1\374\4\0\37\374"+
    "\23\0\1\231\2\232\2\0\1\77\4\232\1\0\1\232"+
    "\4\0\37\232\31\0\1\375\74\0\2\15\3\0\3\15"+
    "\14\0\2\15\2\0\1\15\2\0\1\15\1\0\1\15"+
    "\6\0\1\15\4\0\1\15\35\0\1\376\74\0\2\377"+
    "\3\0\3\377\14\0\2\377\2\0\1\377\2\0\1\377"+
    "\1\0\1\377\6\0\1\377\4\0\1\377\30\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u0100\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\4\7"+
    "\1\u0101\32\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\4\7\1\u0102\23\7\1\u0103\6\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\12\7\1\u0104\24\7"+
    "\24\0\1\u0105\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\1\u0106\36\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\5\7\1\u0107\31\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\14\7\1\u0108\22\7\24\0\1\u0109"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\27\7\1\u010a"+
    "\7\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u010b\33\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\2\7\1\u010c\34\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\u010d\36\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\13\7\1\u010e\23\7"+
    "\24\0\1\u010f\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\1\u0110\36\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\u0111\11\7\1\u0112\23\7\24\0\1\u0113"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\1\u0114\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\1\u0115\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\15\7\1\u0116\21\7\24\0\1\u0117\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\13\7\1\u0118\1\u0119\22\7\24\0"+
    "\1\u011a\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\14\7"+
    "\1\u011b\22\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\u011c\36\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\13\7\1\u011d\23\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\12\7\1\u011e\24\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u011f"+
    "\24\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\15\7\1\u0120\21\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\15\7\1\u0121\21\7\24\0\2\7\3\0"+
    "\4\7\1\0\1\7\1\u0122\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\1\7\1\u0123\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\14\7\1\u0124"+
    "\22\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u0125\1\7\1\u0126\31\7\24\0\1\u0127\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u0128\1\u0129"+
    "\25\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\14\7\1\u012a\22\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u012b\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\13\7\1\u012c\23\7\24\0"+
    "\1\u012d\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\26\7"+
    "\1\u012e\10\7\24\0\1\u012f\1\7\3\0\4\7\1\0"+
    "\2\7\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u0130\26\7\24\0\1\u0131\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u0132\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\3\7"+
    "\1\u0133\33\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\14\7\1\u0134\22\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\12\7\1\u0135\24\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u0136\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\20\7"+
    "\1\u0137\16\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\35\7\1\u0138\1\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\7\1\u0139\35\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u013a\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\15\7"+
    "\1\u013b\21\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\25\7\1\u013c\11\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\31\7\1\u013d\5\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\2\7\1\u013e\34\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\27\7"+
    "\1\u013f\7\7\24\0\2\7\3\0\4\7\1\0\1\7"+
    "\1\u0140\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\11\7\1\u0141\25\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\5\7\1\u0142\31\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\3\7\1\u0143"+
    "\33\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u0144\33\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\7\7\1\u0145\27\7\24\0\1\u0146\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\4\7\1\u0147\32\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\22\7"+
    "\1\u0148\14\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\10\7\1\u0149\26\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\15\7\1\u014a\21\7\24\0\1\u014b"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u014c"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\25\7\1\u014d\11\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\20\7\1\u014e\16\7\25\0\1\u014f\101\0"+
    "\1\u0150\100\0\2\374\2\0\1\77\4\374\1\0\1\374"+
    "\4\0\37\374\31\0\1\15\101\0\1\106\74\0\2\377"+
    "\3\0\3\377\6\0\1\236\5\0\2\377\2\0\1\377"+
    "\2\0\1\377\1\0\1\377\6\0\1\377\4\0\1\377"+
    "\30\0\2\7\3\0\4\7\1\0\2\7\3\0\27\7"+
    "\1\u0151\7\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\10\7\1\u0152\26\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\u0153\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\u0154\36\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\u0155"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\1\7\1\u0156\35\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\1\7\1\u0157\35\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u0158\32\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u0159"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\1\7\1\u015a\35\7\24\0\1\u015b\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\1\u015c\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\12\7\1\u015d\24\7\24\0"+
    "\1\u015e\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\7\7"+
    "\1\u015f\27\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\5\7\1\u0160\31\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\11\7\1\u0161\25\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\13\7\1\u0162\23\7"+
    "\24\0\1\u0163\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\1\7\1\u0164\35\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\11\7\1\u0165\25\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\u0166\35\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\14\7\1\u0167"+
    "\22\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\13\7\1\u0168\23\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\14\7\1\u0169\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\7\7\1\u016a\27\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\1\7\1\u016b"+
    "\35\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\u016c\24\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u016d\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\12\7\1\u016e\24\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u016f"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\10\7\1\u0170\26\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\13\7\1\u0171\23\7\24\0\1\u0172\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\12\7\1\u0173\24\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\u0174\23\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\4\7\1\u0175\32\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\12\7\1\u0176\24\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\4\7\1\u0177\32\7"+
    "\24\0\1\u0178\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\13\7\1\u0179\23\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\14\7\1\u017a\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\u017b\35\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u017c"+
    "\24\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u017d\33\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\7\7\1\u017e\27\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\27\7\1\u017f\7\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\7\7\1\u0180"+
    "\27\7\24\0\1\u0181\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\37\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\4\7\1\u0182\32\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\12\7\1\u0183\24\7\24\0\1\u0184"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\1\u0185\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\14\7"+
    "\1\u0186\22\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\26\7\1\u0187\10\7\24\0\1\7\1\u0188\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\13\7\1\u0189\23\7\24\0"+
    "\2\7\3\0\4\7\1\0\1\7\1\u018a\3\0\37\7"+
    "\24\0\1\u018b\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\22\7\1\u018c\14\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\1\7\1\u018d\35\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\u018e\35\7\24\0"+
    "\1\u018f\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\u0190\23\7\30\0\1\u0191\101\0\1\u0192\75\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\5\7\1\u0193\31\7"+
    "\24\0\1\u0194\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\35\7\1\u0195\1\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\3\7\1\u0196\33\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\u0197\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\u0198"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\u0199\24\7\24\0\1\u019a\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\11\7\1\u019b\25\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u019c\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\20\7"+
    "\1\u019d\16\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\u019e\36\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\13\7\1\u019f\23\7\24\0\1\u01a0\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\13\7\1\u01a1\23\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\3\7"+
    "\1\u01a2\33\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\u01a3\35\7\24\0\1\u01a4\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\u01a5\35\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\u01a6"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\u01a7\24\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\u01a8\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\3\7\1\u01a9\33\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u01aa"+
    "\24\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\24\7\1\u01ab\12\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u01ac\26\7\24\0\1\u01ad\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\12\7\1\u01ae\24\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\15\7"+
    "\1\u01af\21\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\13\7\1\u01b0\23\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\13\7\1\u01b1\23\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\15\7\1\u01b2\21\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\u01b3\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\10\7\1\u01b4\26\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\3\7\1\u01b5\33\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u01b6\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\u01b7\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\10\7\1\u01b8\26\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\26\7\1\u01b9\10\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\10\7\1\u01ba\26\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\u01bb\23\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\11\7\1\u01bc\25\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\7\1\u01bd\35\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\11\7\1\u01be\25\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\u01bf\23\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\14\7\1\u01c0\22\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\24\7\1\u01c1\12\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\12\7\1\u01c2\24\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\4\7"+
    "\1\u01c3\7\7\1\u01c4\22\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\14\7\1\u01c5\22\7\24\0\1\u01c6"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u01c7"+
    "\24\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\u01c8\24\7\24\0\1\u01c9\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\15\7\1\u01ca\21\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\4\7\1\u01cb\32\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\10\7"+
    "\1\u01cc\26\7\24\0\1\u01cd\1\7\3\0\4\7\1\0"+
    "\2\7\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\11\7\1\u01ce\25\7\24\0\1\u01cf\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\15\7\1\u01d0\21\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\1\u01d1"+
    "\36\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\5\7\1\u01d2\31\7\24\0\1\u01d3\1\7\3\0\4\7"+
    "\1\0\2\7\3\0\37\7\24\0\1\u01d4\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u01d5\32\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\u01d6"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\10\7\1\u01d7\26\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\12\7\1\u01d8\24\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u01d9\32\7\24\0"+
    "\1\u01da\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\u01db\24\7\24\0\2\7\3\0\4\7\1\0\1\7"+
    "\1\u01dc\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\25\7\1\u01dd\11\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\11\7\1\u01de\25\7\24\0"+
    "\1\u01df\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\14\7"+
    "\1\u01e0\22\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\13\7\1\u01e1\23\7\24\0\1\u01e2\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u01e3\32\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u01e4"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\1\7\1\u01e5"+
    "\3\0\37\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\u01e6\35\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\13\7\1\u01e7\23\7\24\0\1\u01e8"+
    "\1\7\3\0\4\7\1\0\2\7\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u01e9"+
    "\24\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\4\7\1\u01ea\32\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u01eb\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\15\7\1\u01ec\21\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u01ed"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\4\7\1\u01ee\32\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\13\7\1\u01ef\23\7\24\0\2\7\3\0"+
    "\4\7\1\0\1\7\1\u01f0\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\7\7\1\u01f1\27\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\10\7"+
    "\1\u01f2\26\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\13\7\1\u01f3\23\7\24\0\1\u01f4\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\1\u01f5\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\7\1\u01f6\35\7"+
    "\24\0\2\7\3\0\4\7\1\0\1\7\1\u01f7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\5\7\1\u01f8\31\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u01f9\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\14\7\1\u01fa\22\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\3\7\1\u01fb"+
    "\33\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\10\7\1\u01fc\26\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\u01fd\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\22\7\1\u01fe\14\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\12\7\1\u01ff"+
    "\24\7\24\0\1\u0200\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\37\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\11\7\1\u0201\25\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\13\7\1\u0202\1\7\1\u0203\21\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\u0204\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\u0205\35\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\1\u0206\36\7\24\0\2\7\3\0"+
    "\4\7\1\0\1\7\1\u0207\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\17\7\1\u0208\17\7"+
    "\24\0\1\u0209\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u020a\33\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u020b\26\7\24\0\1\u020c\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\15\7\1\u020d\21\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\15\7"+
    "\1\u020e\21\7\24\0\1\u020f\1\7\3\0\4\7\1\0"+
    "\2\7\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u0210\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\12\7\1\u0211\24\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\4\7\1\u0212"+
    "\32\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\3\7\1\u0213\33\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\12\7\1\u0214\24\7\24\0\1\u0215\1\7"+
    "\3\0\4\7\1\0\2\7\3\0\37\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\6\7\1\u0216\30\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\1\7"+
    "\1\u0217\35\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\13\7\1\u0218\23\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\u0219\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\14\7\1\u021a\22\7"+
    "\24\0\1\u021b\1\7\3\0\4\7\1\0\2\7\3\0"+
    "\37\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\13\7\1\u021c\23\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\u021d\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u021e\32\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\3\7\1\u021f"+
    "\33\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\21\7\1\u0220\15\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\14\7\1\u0221\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\5\7\1\u0222\31\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\13\7\1\u0223"+
    "\23\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\7\7\1\u0224\27\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\4\7\1\u0225\32\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\1\7\1\u0226\35\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\22\7\1\u0227"+
    "\14\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\14\7\1\u0228\22\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\7\7\1\u0229\27\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\7\7\1\u022a\27\7\24\0"+
    "\1\u022b\1\7\3\0\4\7\1\0\2\7\3\0\14\7"+
    "\1\u022c\22\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\14\7\1\u022d\22\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\20\7\1\u022e\16\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\7\1\u022f\35\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\12\7"+
    "\1\u0230\24\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\1\7\1\u0231\35\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\10\7\1\u0232\26\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\13\7\1\u0233\23\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\20\7"+
    "\1\u0234\16\7\24\0\1\u0235\1\7\3\0\4\7\1\0"+
    "\2\7\3\0\14\7\1\u0236\22\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\u0237\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\5\7\1\u0238"+
    "\31\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\12\7\1\u0239\24\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\15\7\1\u023a\21\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\u023b\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\10\7\1\u023c"+
    "\26\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\15\7\1\u023d\21\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\20\7\1\u023e\16\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\4\7\1\u023f\32\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\14\7\1\u0240"+
    "\22\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\20\7\1\u0241\16\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u0242\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\u0243\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\14\7\1\u0244"+
    "\22\7\24\0\1\u0245\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\37\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\20\7\1\u0246\16\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\13\7\1\u0247\23\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\13\7\1\u0248\23\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\15\7"+
    "\1\u0249\21\7\24\0\1\u024a\1\7\3\0\4\7\1\0"+
    "\2\7\3\0\37\7\24\0\2\7\3\0\4\7\1\0"+
    "\2\7\3\0\10\7\1\u024b\26\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\13\7\1\u024c\23\7\24\0"+
    "\1\u024d\1\7\3\0\4\7\1\0\2\7\3\0\37\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\13\7"+
    "\1\u024e\23\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\13\7\1\u024f\23\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\15\7\1\u0250\21\7\24\0\2\7"+
    "\3\0\4\7\1\0\2\7\3\0\1\7\1\u0251\35\7"+
    "\24\0\2\7\3\0\4\7\1\0\2\7\3\0\7\7"+
    "\1\u0252\27\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\10\7\1\u0253\26\7\24\0\1\u0254\1\7\3\0"+
    "\4\7\1\0\2\7\3\0\37\7\24\0\2\7\3\0"+
    "\4\7\1\0\2\7\3\0\10\7\1\u0255\26\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\15\7\1\u0256"+
    "\21\7\24\0\1\u0257\1\7\3\0\4\7\1\0\2\7"+
    "\3\0\37\7\24\0\2\7\3\0\4\7\1\0\2\7"+
    "\3\0\7\7\1\u0258\27\7\24\0\2\7\3\0\4\7"+
    "\1\0\2\7\3\0\5\7\1\u0259\31\7\24\0\2\7"+
    "\3\0\4\7\1\0\1\7\1\u025a\3\0\37\7\24\0"+
    "\2\7\3\0\4\7\1\0\2\7\3\0\6\7\1\u025b"+
    "\30\7\24\0\2\7\3\0\4\7\1\0\2\7\3\0"+
    "\7\7\1\u025c\27\7\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31086];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\41\1\10\11\1\1\2\11"+
    "\6\1\1\11\5\0\1\1\1\11\1\1\1\11\3\0"+
    "\73\1\2\11\1\1\7\11\1\0\7\1\3\0\1\1"+
    "\1\0\1\1\1\11\2\0\1\11\2\0\117\1\2\11"+
    "\10\1\2\0\1\1\3\0\117\1\2\0\100\1\2\11"+
    "\312\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[604];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public final static TokenSource createTokenSource(Reader reader) {
		return new MASLFlexer(reader);
	}

	private int offset = 0;
	
	public void reset(Reader reader) {
		yyreset(reader);
		offset = 0;
	}

	@Override
	public Token nextToken() {
		try {
			int type = advance();
			if (type == Token.EOF) {
				return Token.EOF_TOKEN;
			}
			int length = yylength();
			final String tokenText = yytext();
			CommonToken result = new CommonTokenWithText(tokenText, type, Token.DEFAULT_CHANNEL, offset);
			offset += length;
			return result;
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public String getSourceName() {
		return "FlexTokenSource";
	}

	public static class CommonTokenWithText extends CommonToken {

		private static final long serialVersionUID = 1L;

		public CommonTokenWithText(String tokenText, int type, int defaultChannel, int offset) {
			super(null, type, defaultChannel, offset, offset + tokenText.length() - 1);
			this.text = tokenText;
		}
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MASLFlexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MASLFlexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return LessThanSignLessThanSign;
          }
        case 156: break;
        case 98: 
          { return Unique;
          }
        case 157: break;
        case 2: 
          { return RULE_WS;
          }
        case 158: break;
        case 117: 
          { return Console;
          }
        case 159: break;
        case 3: 
          { return Solidus;
          }
        case 160: break;
        case 68: 
          { return Case;
          }
        case 161: break;
        case 93: 
          { return False;
          }
        case 162: break;
        case 126: 
          { return Instance;
          }
        case 163: break;
        case 10: 
          { return RULE_STRING;
          }
        case 164: break;
        case 109: 
          { return Public;
          }
        case 165: break;
        case 44: 
          { return EqualsSignGreaterThanSign;
          }
        case 166: break;
        case 149: 
          { return Non_Existant;
          }
        case 167: break;
        case 147: 
          { return Intersection;
          }
        case 168: break;
        case 23: 
          { return RightSquareBracket;
          }
        case 169: break;
        case 116: 
          { return Builtin;
          }
        case 170: break;
        case 15: 
          { return EqualsSign;
          }
        case 171: break;
        case 37: 
          { return At;
          }
        case 172: break;
        case 77: 
          { return Many;
          }
        case 173: break;
        case 32: 
          { return Of;
          }
        case 174: break;
        case 101: 
          { return Object;
          }
        case 175: break;
        case 33: 
          { return Is;
          }
        case 176: break;
        case 72: 
          { return Then;
          }
        case 177: break;
        case 88: 
          { return State;
          }
        case 178: break;
        case 31: 
          { return Or;
          }
        case 179: break;
        case 91: 
          { return Begin;
          }
        case 180: break;
        case 151: 
          { return Cannot_happen;
          }
        case 181: break;
        case 150: 
          { return Conditionally;
          }
        case 182: break;
        case 35: 
          { return If;
          }
        case 183: break;
        case 131: 
          { return Find_all;
          }
        case 184: break;
        case 103: 
          { return Delete;
          }
        case 185: break;
        case 82: 
          { return Elsif;
          }
        case 186: break;
        case 89: 
          { return Delta;
          }
        case 187: break;
        case 108: 
          { return Cancel;
          }
        case 188: break;
        case 111: 
          { return Ignore;
          }
        case 189: break;
        case 137: 
          { return Find_only;
          }
        case 190: break;
        case 28: 
          { return RULE_REAL;
          }
        case 191: break;
        case 136: 
          { return Preferred;
          }
        case 192: break;
        case 48: 
          { return End;
          }
        case 193: break;
        case 67: 
          { return Null;
          }
        case 194: break;
        case 19: 
          { return RightParenthesis;
          }
        case 195: break;
        case 139: 
          { return Dictionary;
          }
        case 196: break;
        case 56: 
          { return Abs;
          }
        case 197: break;
        case 17: 
          { return Ampersand;
          }
        case 198: break;
        case 75: 
          { return Link;
          }
        case 199: break;
        case 79: 
          { return When;
          }
        case 200: break;
        case 7: 
          { return HyphenMinus;
          }
        case 201: break;
        case 46: 
          { return ColonColon;
          }
        case 202: break;
        case 123: 
          { return Deferred;
          }
        case 203: break;
        case 66: 
          { return Exit;
          }
        case 204: break;
        case 53: 
          { return One;
          }
        case 205: break;
        case 5: 
          { return RULE_ID;
          }
        case 206: break;
        case 127: 
          { return Terminal;
          }
        case 207: break;
        case 64: 
          { return Endl;
          }
        case 208: break;
        case 100: 
          { return Return;
          }
        case 209: break;
        case 42: 
          { return GreaterThanSignEqualsSign;
          }
        case 210: break;
        case 61: 
          { return LessThanSignLessThanSignLessThanSign;
          }
        case 211: break;
        case 78: 
          { return With;
          }
        case 212: break;
        case 105: 
          { return Digits;
          }
        case 213: break;
        case 145: 
          { return Non_existent;
          }
        case 214: break;
        case 57: 
          { return And;
          }
        case 215: break;
        case 95: 
          { return While;
          }
        case 216: break;
        case 114: 
          { return Subtype;
          }
        case 217: break;
        case 13: 
          { return GreaterThanSign;
          }
        case 218: break;
        case 55: 
          { return Not;
          }
        case 219: break;
        case 140: 
          { return Identifier;
          }
        case 220: break;
        case 144: 
          { return Relationship;
          }
        case 221: break;
        case 104: 
          { return Domain;
          }
        case 222: break;
        case 128: 
          { return Assigner;
          }
        case 223: break;
        case 96: 
          { return FILE;
          }
        case 224: break;
        case 120: 
          { return Readonly;
          }
        case 225: break;
        case 60: 
          { return Mod;
          }
        case 226: break;
        case 122: 
          { return Schedule;
          }
        case 227: break;
        case 125: 
          { return Creation;
          }
        case 228: break;
        case 141: 
          { return Terminator;
          }
        case 229: break;
        case 99: 
          { return Unlink;
          }
        case 230: break;
        case 86: 
          { return Raise;
          }
        case 231: break;
        case 113: 
          { return Service;
          }
        case 232: break;
        case 146: 
          { return Non_existant;
          }
        case 233: break;
        case 11: 
          { return Apostrophe;
          }
        case 234: break;
        case 26: 
          { return SolidusEqualsSign;
          }
        case 235: break;
        case 76: 
          { return Find;
          }
        case 236: break;
        case 34: 
          { return In;
          }
        case 237: break;
        case 115: 
          { return Declare;
          }
        case 238: break;
        case 155: 
          { return Reverse_ordered_by;
          }
        case 239: break;
        case 138: 
          { return Ordered_by;
          }
        case 240: break;
        case 4: 
          { return FullStop;
          }
        case 241: break;
        case 27: 
          { return FullStopFullStop;
          }
        case 242: break;
        case 52: 
          { return Out;
          }
        case 243: break;
        case 6: 
          { return PlusSign;
          }
        case 244: break;
        case 14: 
          { return Asterisk;
          }
        case 245: break;
        case 51: 
          { return Set;
          }
        case 246: break;
        case 83: 
          { return Using;
          }
        case 247: break;
        case 119: 
          { return Private;
          }
        case 248: break;
        case 9: 
          { return RULE_TIMESTAMP;
          }
        case 249: break;
        case 47: 
          { return TildeGreaterThanSign;
          }
        case 250: break;
        case 80: 
          { return Erase;
          }
        case 251: break;
        case 142: 
          { return Transition;
          }
        case 252: break;
        case 124: 
          { return Disunion;
          }
        case 253: break;
        case 63: 
          { return Enum;
          }
        case 254: break;
        case 110: 
          { return Pragma;
          }
        case 255: break;
        case 30: 
          { return RULE_DURATION;
          }
        case 256: break;
        case 49: 
          { return RULE_CHAR;
          }
        case 257: break;
        case 16: 
          { return Colon;
          }
        case 258: break;
        case 129: 
          { return Function;
          }
        case 259: break;
        case 107: 
          { return Create;
          }
        case 260: break;
        case 94: 
          { return Flush;
          }
        case 261: break;
        case 45: 
          { return ColonEqualsSign;
          }
        case 262: break;
        case 74: 
          { return Loop;
          }
        case 263: break;
        case 40: 
          { return LessThanSignEqualsSign;
          }
        case 264: break;
        case 81: 
          { return Event;
          }
        case 265: break;
        case 85: 
          { return Range;
          }
        case 266: break;
        case 132: 
          { return Generate;
          }
        case 267: break;
        case 134: 
          { return Structure;
          }
        case 268: break;
        case 73: 
          { return This;
          }
        case 269: break;
        case 97: 
          { return LINE;
          }
        case 270: break;
        case 58: 
          { return Xor;
          }
        case 271: break;
        case 25: 
          { return RULE_SL_COMMENT;
          }
        case 272: break;
        case 39: 
          { return LessThanSignGreaterThanSign;
          }
        case 273: break;
        case 69: 
          { return Is_a;
          }
        case 274: break;
        case 1: 
          { return RULE_ANY_OTHER;
          }
        case 275: break;
        case 62: 
          { return GreaterThanSignGreaterThanSignGreaterThanSign;
          }
        case 276: break;
        case 130: 
          { return Find_one;
          }
        case 277: break;
        case 154: 
          { return Unconditionally;
          }
        case 278: break;
        case 106: 
          { return Not_in;
          }
        case 279: break;
        case 102: 
          { return Others;
          }
        case 280: break;
        case 92: 
          { return Array;
          }
        case 281: break;
        case 21: 
          { return Semicolon;
          }
        case 282: break;
        case 29: 
          { return HyphenMinusGreaterThanSign;
          }
        case 283: break;
        case 59: 
          { return For;
          }
        case 284: break;
        case 121: 
          { return Sequence;
          }
        case 285: break;
        case 118: 
          { return Project;
          }
        case 286: break;
        case 41: 
          { return GreaterThanSignGreaterThanSign;
          }
        case 287: break;
        case 18: 
          { return LeftParenthesis;
          }
        case 288: break;
        case 112: 
          { return Reverse;
          }
        case 289: break;
        case 65: 
          { return Else;
          }
        case 290: break;
        case 152: 
          { return Current_State;
          }
        case 291: break;
        case 36: 
          { return To;
          }
        case 292: break;
        case 135: 
          { return Anonymous;
          }
        case 293: break;
        case 153: 
          { return Cannot_Happen;
          }
        case 294: break;
        case 70: 
          { return True;
          }
        case 295: break;
        case 12: 
          { return LessThanSign;
          }
        case 296: break;
        case 22: 
          { return LeftSquareBracket;
          }
        case 297: break;
        case 84: 
          { return Union;
          }
        case 298: break;
        case 20: 
          { return Comma;
          }
        case 299: break;
        case 50: 
          { return Rem;
          }
        case 300: break;
        case 148: 
          { return Non_Existent;
          }
        case 301: break;
        case 143: 
          { return Referential;
          }
        case 302: break;
        case 43: 
          { return AsteriskAsterisk;
          }
        case 303: break;
        case 133: 
          { return Exception;
          }
        case 304: break;
        case 90: 
          { return Delay;
          }
        case 305: break;
        case 87: 
          { return Start;
          }
        case 306: break;
        case 71: 
          { return Type;
          }
        case 307: break;
        case 54: 
          { return Bag;
          }
        case 308: break;
        case 24: 
          { return VerticalLine;
          }
        case 309: break;
        case 8: 
          { return RULE_INTEGER;
          }
        case 310: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return Token.EOF;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
