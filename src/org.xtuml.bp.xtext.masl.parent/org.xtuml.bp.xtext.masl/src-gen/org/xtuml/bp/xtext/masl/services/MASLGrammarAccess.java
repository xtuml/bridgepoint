/*
 * generated by Xtext 2.39.0
 */
package org.xtuml.bp.xtext.masl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MASLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MaslModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.MaslModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBuiltinLibraryDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMaslModelAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsAbstractTopLevelElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//MaslModel:
		//    BuiltinLibraryDefinition
		//    | {MaslModel} elements+=AbstractTopLevelElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//BuiltinLibraryDefinition
		//| {MaslModel} elements+=AbstractTopLevelElement*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BuiltinLibraryDefinition
		public RuleCall getBuiltinLibraryDefinitionParserRuleCall_0() { return cBuiltinLibraryDefinitionParserRuleCall_0; }
		
		//{MaslModel} elements+=AbstractTopLevelElement*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MaslModel}
		public Action getMaslModelAction_1_0() { return cMaslModelAction_1_0; }
		
		//elements+=AbstractTopLevelElement*
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//AbstractTopLevelElement
		public RuleCall getElementsAbstractTopLevelElementParserRuleCall_1_1_0() { return cElementsAbstractTopLevelElementParserRuleCall_1_1_0; }
	}
	public class AbstractTopLevelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTopLevelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProjectDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDomainDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDomainServiceDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cObjectServiceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStateDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTerminatorServiceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AbstractTopLevelElement:
		//    ProjectDefinition
		//    | DomainDefinition
		//    | DomainServiceDefinition
		//    | ObjectServiceDefinition
		//    | StateDefinition
		//    | TerminatorServiceDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//ProjectDefinition
		//| DomainDefinition
		//| DomainServiceDefinition
		//| ObjectServiceDefinition
		//| StateDefinition
		//| TerminatorServiceDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProjectDefinition
		public RuleCall getProjectDefinitionParserRuleCall_0() { return cProjectDefinitionParserRuleCall_0; }
		
		//DomainDefinition
		public RuleCall getDomainDefinitionParserRuleCall_1() { return cDomainDefinitionParserRuleCall_1; }
		
		//DomainServiceDefinition
		public RuleCall getDomainServiceDefinitionParserRuleCall_2() { return cDomainServiceDefinitionParserRuleCall_2; }
		
		//ObjectServiceDefinition
		public RuleCall getObjectServiceDefinitionParserRuleCall_3() { return cObjectServiceDefinitionParserRuleCall_3; }
		
		//StateDefinition
		public RuleCall getStateDefinitionParserRuleCall_4() { return cStateDefinitionParserRuleCall_4; }
		
		//TerminatorServiceDefinition
		public RuleCall getTerminatorServiceDefinitionParserRuleCall_5() { return cTerminatorServiceDefinitionParserRuleCall_5; }
	}
	public class ScopedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ScopedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////---------------------------------------------------------
		//// Common rules and fragments
		////---------------------------------------------------------
		//ScopedName:
		//    (ID '::')? ID;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID '::')? ID
		public Group getGroup() { return cGroup; }
		
		//(ID '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PragmaListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PragmaList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPragmasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPragmasPragmaParserRuleCall_0_0 = (RuleCall)cPragmasAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//fragment PragmaList returns Pragmatized:
		//    (pragmas+=Pragma ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//(pragmas+=Pragma ';')*
		public Group getGroup() { return cGroup; }
		
		//pragmas+=Pragma
		public Assignment getPragmasAssignment_0() { return cPragmasAssignment_0; }
		
		//Pragma
		public RuleCall getPragmasPragmaParserRuleCall_0_0() { return cPragmasPragmaParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class PragmaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Pragma");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPragmaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValuesPragmaValueParserRuleCall_3_0_0 = (RuleCall)cValuesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValuesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValuesPragmaValueParserRuleCall_3_1_1_0 = (RuleCall)cValuesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pragma:
		//    'pragma' name=ID
		//    '('
		//    (values+=PragmaValue (',' values+=PragmaValue)*)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pragma' name=ID
		//'('
		//(values+=PragmaValue (',' values+=PragmaValue)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'pragma'
		public Keyword getPragmaKeyword_0() { return cPragmaKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(values+=PragmaValue (',' values+=PragmaValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//values+=PragmaValue
		public Assignment getValuesAssignment_3_0() { return cValuesAssignment_3_0; }
		
		//PragmaValue
		public RuleCall getValuesPragmaValueParserRuleCall_3_0_0() { return cValuesPragmaValueParserRuleCall_3_0_0; }
		
		//(',' values+=PragmaValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//values+=PragmaValue
		public Assignment getValuesAssignment_3_1_1() { return cValuesAssignment_3_1_1; }
		
		//PragmaValue
		public RuleCall getValuesPragmaValueParserRuleCall_3_1_1_0() { return cValuesPragmaValueParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PragmaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PragmaValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PragmaValue:
		//    name=ID | value=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID | value=Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_0_0 = (RuleCall)cParametersAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment ParameterList returns Parameterized:
		//    '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_0() { return cParametersAssignment_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_0_0() { return cParametersParameterParserRuleCall_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1_1() { return cParametersAssignment_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_1_0() { return cParametersParameterParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeParameterModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAbstractTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' mode=ParameterMode type=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' mode=ParameterMode type=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//mode=ParameterMode
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }
		
		//ParameterMode
		public RuleCall getModeParameterModeEnumRuleCall_2_0() { return cModeParameterModeEnumRuleCall_2_0; }
		
		//type=AbstractTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//AbstractTypeReference
		public RuleCall getTypeAbstractTypeReferenceParserRuleCall_3_0() { return cTypeAbstractTypeReferenceParserRuleCall_3_0; }
	}
	public class ProjectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ProjectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDomainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDomainsDomainDefinitionParserRuleCall_3_0 = (RuleCall)cDomainsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cProjectKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////---------------------------------------------------------
		//// Project Definition
		////---------------------------------------------------------
		//ProjectDefinition:
		//    'project' name=ID 'is'
		//    domains+=DomainDefinition*
		//    'end' 'project'?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'project' name=ID 'is'
		//domains+=DomainDefinition*
		//'end' 'project'?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//'project'
		public Keyword getProjectKeyword_0() { return cProjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//domains+=DomainDefinition*
		public Assignment getDomainsAssignment_3() { return cDomainsAssignment_3; }
		
		//DomainDefinition
		public RuleCall getDomainsDomainDefinitionParserRuleCall_3_0() { return cDomainsDomainDefinitionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'project'?
		public Keyword getProjectKeyword_5() { return cProjectKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class DomainDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DomainDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cObjectsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cObjectsObjectDeclarationParserRuleCall_3_0_0 = (RuleCall)cObjectsAssignment_3_0.eContents().get(0);
		private final Assignment cServicesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cServicesDomainServiceDeclarationParserRuleCall_3_1_0 = (RuleCall)cServicesAssignment_3_1.eContents().get(0);
		private final Assignment cTerminatorsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cTerminatorsTerminatorDefinitionParserRuleCall_3_2_0 = (RuleCall)cTerminatorsAssignment_3_2.eContents().get(0);
		private final Assignment cRelationshipsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cRelationshipsRelationshipDefinitionParserRuleCall_3_3_0 = (RuleCall)cRelationshipsAssignment_3_3.eContents().get(0);
		private final Assignment cObjectDefsAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cObjectDefsObjectDefinitionParserRuleCall_3_4_0 = (RuleCall)cObjectDefsAssignment_3_4.eContents().get(0);
		private final Assignment cTypeForwardsAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cTypeForwardsTypeForwardDeclarationParserRuleCall_3_5_0 = (RuleCall)cTypeForwardsAssignment_3_5.eContents().get(0);
		private final Assignment cTypesAssignment_3_6 = (Assignment)cAlternatives_3.eContents().get(6);
		private final RuleCall cTypesTypeDeclarationParserRuleCall_3_6_0 = (RuleCall)cTypesAssignment_3_6.eContents().get(0);
		private final Assignment cExceptionsAssignment_3_7 = (Assignment)cAlternatives_3.eContents().get(7);
		private final RuleCall cExceptionsExceptionDeclarationParserRuleCall_3_7_0 = (RuleCall)cExceptionsAssignment_3_7.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cDomainKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////---------------------------------------------------------
		//// Domain Definition
		////---------------------------------------------------------
		//DomainDefinition:
		//    'domain' name=ID 'is'
		//    (
		//        objects+=ObjectDeclaration
		//        | services+=DomainServiceDeclaration
		//        | terminators+=TerminatorDefinition
		//        | relationships+=RelationshipDefinition
		//        | objectDefs+=ObjectDefinition
		//        | typeForwards+=TypeForwardDeclaration
		//        | types+=TypeDeclaration
		//        | exceptions+=ExceptionDeclaration
		//    )*
		//    'end' 'domain'?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=ID 'is'
		//(
		//    objects+=ObjectDeclaration
		//    | services+=DomainServiceDeclaration
		//    | terminators+=TerminatorDefinition
		//    | relationships+=RelationshipDefinition
		//    | objectDefs+=ObjectDefinition
		//    | typeForwards+=TypeForwardDeclaration
		//    | types+=TypeDeclaration
		//    | exceptions+=ExceptionDeclaration
		//)*
		//'end' 'domain'?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//(
		//    objects+=ObjectDeclaration
		//    | services+=DomainServiceDeclaration
		//    | terminators+=TerminatorDefinition
		//    | relationships+=RelationshipDefinition
		//    | objectDefs+=ObjectDefinition
		//    | typeForwards+=TypeForwardDeclaration
		//    | types+=TypeDeclaration
		//    | exceptions+=ExceptionDeclaration
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//objects+=ObjectDeclaration
		public Assignment getObjectsAssignment_3_0() { return cObjectsAssignment_3_0; }
		
		//ObjectDeclaration
		public RuleCall getObjectsObjectDeclarationParserRuleCall_3_0_0() { return cObjectsObjectDeclarationParserRuleCall_3_0_0; }
		
		//services+=DomainServiceDeclaration
		public Assignment getServicesAssignment_3_1() { return cServicesAssignment_3_1; }
		
		//DomainServiceDeclaration
		public RuleCall getServicesDomainServiceDeclarationParserRuleCall_3_1_0() { return cServicesDomainServiceDeclarationParserRuleCall_3_1_0; }
		
		//terminators+=TerminatorDefinition
		public Assignment getTerminatorsAssignment_3_2() { return cTerminatorsAssignment_3_2; }
		
		//TerminatorDefinition
		public RuleCall getTerminatorsTerminatorDefinitionParserRuleCall_3_2_0() { return cTerminatorsTerminatorDefinitionParserRuleCall_3_2_0; }
		
		//relationships+=RelationshipDefinition
		public Assignment getRelationshipsAssignment_3_3() { return cRelationshipsAssignment_3_3; }
		
		//RelationshipDefinition
		public RuleCall getRelationshipsRelationshipDefinitionParserRuleCall_3_3_0() { return cRelationshipsRelationshipDefinitionParserRuleCall_3_3_0; }
		
		//objectDefs+=ObjectDefinition
		public Assignment getObjectDefsAssignment_3_4() { return cObjectDefsAssignment_3_4; }
		
		//ObjectDefinition
		public RuleCall getObjectDefsObjectDefinitionParserRuleCall_3_4_0() { return cObjectDefsObjectDefinitionParserRuleCall_3_4_0; }
		
		//typeForwards+=TypeForwardDeclaration
		public Assignment getTypeForwardsAssignment_3_5() { return cTypeForwardsAssignment_3_5; }
		
		//TypeForwardDeclaration
		public RuleCall getTypeForwardsTypeForwardDeclarationParserRuleCall_3_5_0() { return cTypeForwardsTypeForwardDeclarationParserRuleCall_3_5_0; }
		
		//types+=TypeDeclaration
		public Assignment getTypesAssignment_3_6() { return cTypesAssignment_3_6; }
		
		//TypeDeclaration
		public RuleCall getTypesTypeDeclarationParserRuleCall_3_6_0() { return cTypesTypeDeclarationParserRuleCall_3_6_0; }
		
		//exceptions+=ExceptionDeclaration
		public Assignment getExceptionsAssignment_3_7() { return cExceptionsAssignment_3_7; }
		
		//ExceptionDeclaration
		public RuleCall getExceptionsExceptionDeclarationParserRuleCall_3_7_0() { return cExceptionsExceptionDeclarationParserRuleCall_3_7_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'domain'?
		public Keyword getDomainKeyword_5() { return cDomainKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class BuiltinLibraryDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.BuiltinLibraryDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBuiltinLibraryDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBuiltinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypesBuiltinTypeDeclarationParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Assignment cExceptionsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExceptionsExceptionDeclarationParserRuleCall_3_1_0 = (RuleCall)cExceptionsAssignment_3_1.eContents().get(0);
		private final Assignment cCharacteristicsAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cCharacteristicsCharacteristicParserRuleCall_3_2_0 = (RuleCall)cCharacteristicsAssignment_3_2.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBuiltinKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////---------------------------------------------------------
		//// Library Definition
		////---------------------------------------------------------
		//BuiltinLibraryDefinition:
		//    {BuiltinLibraryDefinition}
		//    'builtin' 'is'
		//    (types+=BuiltinTypeDeclaration
		//    | exceptions+=ExceptionDeclaration
		//    | characteristics+=Characteristic)*
		//    'end' 'builtin'? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{BuiltinLibraryDefinition}
		//'builtin' 'is'
		//(types+=BuiltinTypeDeclaration
		//| exceptions+=ExceptionDeclaration
		//| characteristics+=Characteristic)*
		//'end' 'builtin'? ';'
		public Group getGroup() { return cGroup; }
		
		//{BuiltinLibraryDefinition}
		public Action getBuiltinLibraryDefinitionAction_0() { return cBuiltinLibraryDefinitionAction_0; }
		
		//'builtin'
		public Keyword getBuiltinKeyword_1() { return cBuiltinKeyword_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//(types+=BuiltinTypeDeclaration
		//| exceptions+=ExceptionDeclaration
		//| characteristics+=Characteristic)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//types+=BuiltinTypeDeclaration
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//BuiltinTypeDeclaration
		public RuleCall getTypesBuiltinTypeDeclarationParserRuleCall_3_0_0() { return cTypesBuiltinTypeDeclarationParserRuleCall_3_0_0; }
		
		//exceptions+=ExceptionDeclaration
		public Assignment getExceptionsAssignment_3_1() { return cExceptionsAssignment_3_1; }
		
		//ExceptionDeclaration
		public RuleCall getExceptionsExceptionDeclarationParserRuleCall_3_1_0() { return cExceptionsExceptionDeclarationParserRuleCall_3_1_0; }
		
		//characteristics+=Characteristic
		public Assignment getCharacteristicsAssignment_3_2() { return cCharacteristicsAssignment_3_2; }
		
		//Characteristic
		public RuleCall getCharacteristicsCharacteristicParserRuleCall_3_2_0() { return cCharacteristicsCharacteristicParserRuleCall_3_2_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'builtin'?
		public Keyword getBuiltinKeyword_5() { return cBuiltinKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class BuiltinTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.BuiltinTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBuiltinTypeDeclarationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAnonymousAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAnonymousAnonymousKeyword_1_1_0 = (Keyword)cAnonymousAssignment_1_1.eContents().get(0);
		private final Keyword cBuiltinKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//BuiltinTypeDeclaration returns TypeDeclaration:
		//    TypeDeclaration
		//    | {BuiltinTypeDeclaration} anonymous?='anonymous'? 'builtin' name=ID ';';
		@Override public ParserRule getRule() { return rule; }
		
		//TypeDeclaration
		//| {BuiltinTypeDeclaration} anonymous?='anonymous'? 'builtin' name=ID ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationParserRuleCall_0() { return cTypeDeclarationParserRuleCall_0; }
		
		//{BuiltinTypeDeclaration} anonymous?='anonymous'? 'builtin' name=ID ';'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BuiltinTypeDeclaration}
		public Action getBuiltinTypeDeclarationAction_1_0() { return cBuiltinTypeDeclarationAction_1_0; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_1_1() { return cAnonymousAssignment_1_1; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_1_1_0() { return cAnonymousAnonymousKeyword_1_1_0; }
		
		//'builtin'
		public Keyword getBuiltinKeyword_1_2() { return cBuiltinKeyword_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0() { return cNameIDTerminalRuleCall_1_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Characteristic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTypeParamsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeParamsTypeParameterParserRuleCall_0_1_0 = (RuleCall)cTypeParamsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cTypeParamsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cTypeParamsTypeParameterParserRuleCall_0_2_1_0 = (RuleCall)cTypeParamsAssignment_0_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cForValueAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cForValueLeftParenthesisKeyword_1_0_0_0 = (Keyword)cForValueAssignment_1_0_0.eContents().get(0);
		private final Assignment cReceiverTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cReceiverTypeAbstractTypeReferenceParserRuleCall_1_0_1_0 = (RuleCall)cReceiverTypeAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cReceiverTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cReceiverTypeAbstractTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cReceiverTypeAssignment_1_1.eContents().get(0);
		private final Keyword cApostropheKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameCharacteristicIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceWithRangeParserRuleCall_5_1_0 = (RuleCall)cReturnTypeAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Characteristic:
		//     ('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')?
		//     ((forValue?='(' receiverType=AbstractTypeReference ')') | (receiverType=AbstractTypeReference))
		//     '\'' name=CharacteristicID
		//     ParameterList?
		//     ('return' returnType=AbstractTypeReferenceWithRange)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')?
		//((forValue?='(' receiverType=AbstractTypeReference ')') | (receiverType=AbstractTypeReference))
		//'\'' name=CharacteristicID
		//ParameterList?
		//('return' returnType=AbstractTypeReferenceWithRange)? ';'
		public Group getGroup() { return cGroup; }
		
		//('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')?
		public Group getGroup_0() { return cGroup_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_0() { return cLessThanSignKeyword_0_0; }
		
		//typeParams+=TypeParameter
		public Assignment getTypeParamsAssignment_0_1() { return cTypeParamsAssignment_0_1; }
		
		//TypeParameter
		public RuleCall getTypeParamsTypeParameterParserRuleCall_0_1_0() { return cTypeParamsTypeParameterParserRuleCall_0_1_0; }
		
		//(',' typeParams+=TypeParameter)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//typeParams+=TypeParameter
		public Assignment getTypeParamsAssignment_0_2_1() { return cTypeParamsAssignment_0_2_1; }
		
		//TypeParameter
		public RuleCall getTypeParamsTypeParameterParserRuleCall_0_2_1_0() { return cTypeParamsTypeParameterParserRuleCall_0_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_3() { return cGreaterThanSignKeyword_0_3; }
		
		//((forValue?='(' receiverType=AbstractTypeReference ')') | (receiverType=AbstractTypeReference))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(forValue?='(' receiverType=AbstractTypeReference ')')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//forValue?='('
		public Assignment getForValueAssignment_1_0_0() { return cForValueAssignment_1_0_0; }
		
		//'('
		public Keyword getForValueLeftParenthesisKeyword_1_0_0_0() { return cForValueLeftParenthesisKeyword_1_0_0_0; }
		
		//receiverType=AbstractTypeReference
		public Assignment getReceiverTypeAssignment_1_0_1() { return cReceiverTypeAssignment_1_0_1; }
		
		//AbstractTypeReference
		public RuleCall getReceiverTypeAbstractTypeReferenceParserRuleCall_1_0_1_0() { return cReceiverTypeAbstractTypeReferenceParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//(receiverType=AbstractTypeReference)
		public Assignment getReceiverTypeAssignment_1_1() { return cReceiverTypeAssignment_1_1; }
		
		//AbstractTypeReference
		public RuleCall getReceiverTypeAbstractTypeReferenceParserRuleCall_1_1_0() { return cReceiverTypeAbstractTypeReferenceParserRuleCall_1_1_0; }
		
		//'\''
		public Keyword getApostropheKeyword_2() { return cApostropheKeyword_2; }
		
		//name=CharacteristicID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//CharacteristicID
		public RuleCall getNameCharacteristicIDParserRuleCall_3_0() { return cNameCharacteristicIDParserRuleCall_3_0; }
		
		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }
		
		//('return' returnType=AbstractTypeReferenceWithRange)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'return'
		public Keyword getReturnKeyword_5_0() { return cReturnKeyword_5_0; }
		
		//returnType=AbstractTypeReferenceWithRange
		public Assignment getReturnTypeAssignment_5_1() { return cReturnTypeAssignment_5_1; }
		
		//AbstractTypeReferenceWithRange
		public RuleCall getReturnTypeAbstractTypeReferenceWithRangeParserRuleCall_5_1_0() { return cReturnTypeAbstractTypeReferenceWithRangeParserRuleCall_5_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cEnumEnumKeyword_0_0 = (Keyword)cEnumAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TypeParameter:
		//     ^enum?='enum'? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//^enum?='enum'? name=ID
		public Group getGroup() { return cGroup; }
		
		//^enum?='enum'?
		public Assignment getEnumAssignment_0() { return cEnumAssignment_0; }
		
		//'enum'
		public Keyword getEnumEnumKeyword_0_0() { return cEnumEnumKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AbstractTypeReferenceWithRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRangeTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractTypeReferenceWithRange returns AbstractTypeReference:
		//    AbstractTypeReference
		//    | RangeTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractTypeReference
		//| RangeTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractTypeReference
		public RuleCall getAbstractTypeReferenceParserRuleCall_0() { return cAbstractTypeReferenceParserRuleCall_0; }
		
		//RangeTypeReference
		public RuleCall getRangeTypeReferenceParserRuleCall_1() { return cRangeTypeReferenceParserRuleCall_1; }
	}
	public class RangeTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RangeTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_3_0 = (RuleCall)cElementTypeAssignment_3.eContents().get(0);
		
		//RangeTypeReference:
		//    anonymous?='anonymous'? 'range' 'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'? 'range' 'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_3() { return cElementTypeAssignment_3; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_3_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_3_0; }
	}
	public class ExceptionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ExceptionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cExceptionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPragmaListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////---------------------------------------------------------
		//// Exception Declaration
		////---------------------------------------------------------
		//ExceptionDeclaration:
		//    visibility=Visibility? 'exception' name=ID
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? 'exception' name=ID
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//'exception'
		public Keyword getExceptionKeyword_1() { return cExceptionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_4() { return cPragmaListParserRuleCall_4; }
	}
	public class TypeForwardDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TypeForwardDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cSubtypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSubtypeSubtypeKeyword_1_1_0 = (Keyword)cSubtypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cPragmaListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////---------------------------------------------------------
		//// Type Definition
		////---------------------------------------------------------
		//TypeForwardDeclaration:
		//    visibility=Visibility? ('type' | subtype?='subtype') name=ID
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? ('type' | subtype?='subtype') name=ID
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('type' | subtype?='subtype')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0() { return cTypeKeyword_1_0; }
		
		//subtype?='subtype'
		public Assignment getSubtypeAssignment_1_1() { return cSubtypeAssignment_1_1; }
		
		//'subtype'
		public Keyword getSubtypeSubtypeKeyword_1_1_0() { return cSubtypeSubtypeKeyword_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_4() { return cPragmaListParserRuleCall_4; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cTypeKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cSubtypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cSubtypeSubtypeKeyword_1_1_0 = (Keyword)cSubtypeAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cIsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefinitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefinitionAbstractTypeDefinitionParserRuleCall_4_0 = (RuleCall)cDefinitionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//TypeDeclaration:
		//    visibility=Visibility? ('type' | subtype?='subtype') name=ID 'is'
		//    definition=AbstractTypeDefinition
		//    ';' ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? ('type' | subtype?='subtype') name=ID 'is'
		//definition=AbstractTypeDefinition
		//';' ';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('type' | subtype?='subtype')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'type'
		public Keyword getTypeKeyword_1_0() { return cTypeKeyword_1_0; }
		
		//subtype?='subtype'
		public Assignment getSubtypeAssignment_1_1() { return cSubtypeAssignment_1_1; }
		
		//'subtype'
		public Keyword getSubtypeSubtypeKeyword_1_1_0() { return cSubtypeSubtypeKeyword_1_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'is'
		public Keyword getIsKeyword_3() { return cIsKeyword_3; }
		
		//definition=AbstractTypeDefinition
		public Assignment getDefinitionAssignment_4() { return cDefinitionAssignment_4; }
		
		//AbstractTypeDefinition
		public RuleCall getDefinitionAbstractTypeDefinitionParserRuleCall_4_0() { return cDefinitionAbstractTypeDefinitionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//';'?
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class AbstractTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTypeDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStructureTypeDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstrainedTypeDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAbstractTypeReferenceWithCAParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cUnconstrainedArrayDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractTypeDefinition:
		//    StructureTypeDefinition
		//    | EnumerationTypeDefinition
		//    | ConstrainedTypeDefinition
		//    | AbstractTypeReferenceWithCA
		//    | UnconstrainedArrayDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//StructureTypeDefinition
		//| EnumerationTypeDefinition
		//| ConstrainedTypeDefinition
		//| AbstractTypeReferenceWithCA
		//| UnconstrainedArrayDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StructureTypeDefinition
		public RuleCall getStructureTypeDefinitionParserRuleCall_0() { return cStructureTypeDefinitionParserRuleCall_0; }
		
		//EnumerationTypeDefinition
		public RuleCall getEnumerationTypeDefinitionParserRuleCall_1() { return cEnumerationTypeDefinitionParserRuleCall_1; }
		
		//ConstrainedTypeDefinition
		public RuleCall getConstrainedTypeDefinitionParserRuleCall_2() { return cConstrainedTypeDefinitionParserRuleCall_2; }
		
		//AbstractTypeReferenceWithCA
		public RuleCall getAbstractTypeReferenceWithCAParserRuleCall_3() { return cAbstractTypeReferenceWithCAParserRuleCall_3; }
		
		//UnconstrainedArrayDefinition
		public RuleCall getUnconstrainedArrayDefinitionParserRuleCall_4() { return cUnconstrainedArrayDefinitionParserRuleCall_4; }
	}
	public class ConstrainedTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ConstrainedTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeNamedTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cConstraintAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstraintAbstractTypeConstraintParserRuleCall_1_0 = (RuleCall)cConstraintAssignment_1.eContents().get(0);
		
		//ConstrainedTypeDefinition:
		//    type=NamedTypeReference constraint=AbstractTypeConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//type=NamedTypeReference constraint=AbstractTypeConstraint
		public Group getGroup() { return cGroup; }
		
		//type=NamedTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//NamedTypeReference
		public RuleCall getTypeNamedTypeReferenceParserRuleCall_0_0() { return cTypeNamedTypeReferenceParserRuleCall_0_0; }
		
		//constraint=AbstractTypeConstraint
		public Assignment getConstraintAssignment_1() { return cConstraintAssignment_1; }
		
		//AbstractTypeConstraint
		public RuleCall getConstraintAbstractTypeConstraintParserRuleCall_1_0() { return cConstraintAbstractTypeConstraintParserRuleCall_1_0; }
	}
	public class AbstractTypeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTypeConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRangeConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeltaConstraintParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDigitsConstraintParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//AbstractTypeConstraint:
		//    RangeConstraint
		//    | DeltaConstraint
		//    | DigitsConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeConstraint
		//| DeltaConstraint
		//| DigitsConstraint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RangeConstraint
		public RuleCall getRangeConstraintParserRuleCall_0() { return cRangeConstraintParserRuleCall_0; }
		
		//DeltaConstraint
		public RuleCall getDeltaConstraintParserRuleCall_1() { return cDeltaConstraintParserRuleCall_1; }
		
		//DigitsConstraint
		public RuleCall getDigitsConstraintParserRuleCall_2() { return cDigitsConstraintParserRuleCall_2; }
	}
	public class RangeConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RangeConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangeExpressionParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		
		//RangeConstraint:
		//    'range' range=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'range' range=Expression
		public Group getGroup() { return cGroup; }
		
		//'range'
		public Keyword getRangeKeyword_0() { return cRangeKeyword_0; }
		
		//range=Expression
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }
		
		//Expression
		public RuleCall getRangeExpressionParserRuleCall_1_0() { return cRangeExpressionParserRuleCall_1_0; }
	}
	public class DeltaConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DeltaConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeltaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeltaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeltaConstExpressionParserRuleCall_1_0 = (RuleCall)cDeltaAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintRangeConstraintParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//DeltaConstraint:
		//    'delta' delta=ConstExpression constraint=RangeConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//'delta' delta=ConstExpression constraint=RangeConstraint
		public Group getGroup() { return cGroup; }
		
		//'delta'
		public Keyword getDeltaKeyword_0() { return cDeltaKeyword_0; }
		
		//delta=ConstExpression
		public Assignment getDeltaAssignment_1() { return cDeltaAssignment_1; }
		
		//ConstExpression
		public RuleCall getDeltaConstExpressionParserRuleCall_1_0() { return cDeltaConstExpressionParserRuleCall_1_0; }
		
		//constraint=RangeConstraint
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//RangeConstraint
		public RuleCall getConstraintRangeConstraintParserRuleCall_2_0() { return cConstraintRangeConstraintParserRuleCall_2_0; }
	}
	public class DigitsConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DigitsConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDigitsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDigitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDigitsConstExpressionParserRuleCall_1_0 = (RuleCall)cDigitsAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintRangeConstraintParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		//DigitsConstraint:
		//    'digits' digits=ConstExpression constraint=RangeConstraint;
		@Override public ParserRule getRule() { return rule; }
		
		//'digits' digits=ConstExpression constraint=RangeConstraint
		public Group getGroup() { return cGroup; }
		
		//'digits'
		public Keyword getDigitsKeyword_0() { return cDigitsKeyword_0; }
		
		//digits=ConstExpression
		public Assignment getDigitsAssignment_1() { return cDigitsAssignment_1; }
		
		//ConstExpression
		public RuleCall getDigitsConstExpressionParserRuleCall_1_0() { return cDigitsConstExpressionParserRuleCall_1_0; }
		
		//constraint=RangeConstraint
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//RangeConstraint
		public RuleCall getConstraintRangeConstraintParserRuleCall_2_0() { return cConstraintRangeConstraintParserRuleCall_2_0; }
	}
	public class StructureTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StructureTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cComponentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComponentsStructureComponentDefinitionParserRuleCall_2_0 = (RuleCall)cComponentsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cStructureKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructureTypeDefinition:
		//    {StructureTypeDefinition}
		//    'structure'
		//    components+=StructureComponentDefinition*
		//    'end' 'structure'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StructureTypeDefinition}
		//'structure'
		//components+=StructureComponentDefinition*
		//'end' 'structure'?
		public Group getGroup() { return cGroup; }
		
		//{StructureTypeDefinition}
		public Action getStructureTypeDefinitionAction_0() { return cStructureTypeDefinitionAction_0; }
		
		//'structure'
		public Keyword getStructureKeyword_1() { return cStructureKeyword_1; }
		
		//components+=StructureComponentDefinition*
		public Assignment getComponentsAssignment_2() { return cComponentsAssignment_2; }
		
		//StructureComponentDefinition
		public RuleCall getComponentsStructureComponentDefinitionParserRuleCall_2_0() { return cComponentsStructureComponentDefinitionParserRuleCall_2_0; }
		
		//'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
		
		//'structure'?
		public Keyword getStructureKeyword_4() { return cStructureKeyword_4; }
	}
	public class StructureComponentDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StructureComponentDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeAbstractTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueConstExpressionParserRuleCall_3_1_0 = (RuleCall)cDefaultValueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPragmaListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//StructureComponentDefinition:
		//    name=ID ':' type=AbstractTypeReference
		//    (':=' defaultValue=ConstExpression)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=AbstractTypeReference
		//(':=' defaultValue=ConstExpression)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=AbstractTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//AbstractTypeReference
		public RuleCall getTypeAbstractTypeReferenceParserRuleCall_2_0() { return cTypeAbstractTypeReferenceParserRuleCall_2_0; }
		
		//(':=' defaultValue=ConstExpression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_3_0() { return cColonEqualsSignKeyword_3_0; }
		
		//defaultValue=ConstExpression
		public Assignment getDefaultValueAssignment_3_1() { return cDefaultValueAssignment_3_1; }
		
		//ConstExpression
		public RuleCall getDefaultValueConstExpressionParserRuleCall_3_1_0() { return cDefaultValueConstExpressionParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_5() { return cPragmaListParserRuleCall_5; }
	}
	public class EnumerationTypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.EnumerationTypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationTypeDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cEnumeratorsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cEnumeratorsEnumeratorParserRuleCall_3_0_0 = (RuleCall)cEnumeratorsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cEnumeratorsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cEnumeratorsEnumeratorParserRuleCall_3_1_1_0 = (RuleCall)cEnumeratorsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumerationTypeDefinition:
		//    {EnumerationTypeDefinition}
		//    'enum'
		//    '(' (enumerators+=Enumerator (',' enumerators+=Enumerator)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationTypeDefinition}
		//'enum'
		//'(' (enumerators+=Enumerator (',' enumerators+=Enumerator)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//{EnumerationTypeDefinition}
		public Action getEnumerationTypeDefinitionAction_0() { return cEnumerationTypeDefinitionAction_0; }
		
		//'enum'
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(enumerators+=Enumerator (',' enumerators+=Enumerator)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//enumerators+=Enumerator
		public Assignment getEnumeratorsAssignment_3_0() { return cEnumeratorsAssignment_3_0; }
		
		//Enumerator
		public RuleCall getEnumeratorsEnumeratorParserRuleCall_3_0_0() { return cEnumeratorsEnumeratorParserRuleCall_3_0_0; }
		
		//(',' enumerators+=Enumerator)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//enumerators+=Enumerator
		public Assignment getEnumeratorsAssignment_3_1_1() { return cEnumeratorsAssignment_3_1_1; }
		
		//Enumerator
		public RuleCall getEnumeratorsEnumeratorParserRuleCall_3_1_1_0() { return cEnumeratorsEnumeratorParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Enumerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionConstExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//Enumerator:
		//    name=ID (('=' | ':=') expression=ConstExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (('=' | ':=') expression=ConstExpression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(('=' | ':=') expression=ConstExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('=' | ':=')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0() { return cEqualsSignKeyword_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_0_1() { return cColonEqualsSignKeyword_1_0_1; }
		
		//expression=ConstExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//ConstExpression
		public RuleCall getExpressionConstExpressionParserRuleCall_1_1_0() { return cExpressionConstExpressionParserRuleCall_1_1_0; }
	}
	public class UnconstrainedArrayDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.UnconstrainedArrayDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexTypeNamedTypeReferenceParserRuleCall_2_0 = (RuleCall)cIndexTypeAssignment_2.eContents().get(0);
		private final Keyword cRangeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cOfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_7_0 = (RuleCall)cElementTypeAssignment_7.eContents().get(0);
		
		//UnconstrainedArrayDefinition:
		//    'array' '(' indexType=NamedTypeReference 'range' '<>' ')'
		//    'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'array' '(' indexType=NamedTypeReference 'range' '<>' ')'
		//'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//'array'
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//indexType=NamedTypeReference
		public Assignment getIndexTypeAssignment_2() { return cIndexTypeAssignment_2; }
		
		//NamedTypeReference
		public RuleCall getIndexTypeNamedTypeReferenceParserRuleCall_2_0() { return cIndexTypeNamedTypeReferenceParserRuleCall_2_0; }
		
		//'range'
		public Keyword getRangeKeyword_3() { return cRangeKeyword_3; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_4() { return cLessThanSignGreaterThanSignKeyword_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'of'
		public Keyword getOfKeyword_6() { return cOfKeyword_6; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_7() { return cElementTypeAssignment_7; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_7_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_7_0; }
	}
	public class AbstractTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractCollectionTypeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////---------------------------------------------------------
		//// Type Reference
		////---------------------------------------------------------
		//AbstractTypeReference:
		//    NamedTypeReference
		//    | InstanceTypeReference
		//    | AbstractCollectionTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedTypeReference
		//| InstanceTypeReference
		//| AbstractCollectionTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedTypeReference
		public RuleCall getNamedTypeReferenceParserRuleCall_0() { return cNamedTypeReferenceParserRuleCall_0; }
		
		//InstanceTypeReference
		public RuleCall getInstanceTypeReferenceParserRuleCall_1() { return cInstanceTypeReferenceParserRuleCall_1; }
		
		//AbstractCollectionTypeReference
		public RuleCall getAbstractCollectionTypeReferenceParserRuleCall_2() { return cAbstractCollectionTypeReferenceParserRuleCall_2; }
	}
	public class AbstractTypeReferenceWithCAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithCA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstrainedArrayTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////    | DeprecatedTypeReference;
		//AbstractTypeReferenceWithCA returns AbstractTypeReference:
		//    AbstractTypeReference
		//    | ConstrainedArrayTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//AbstractTypeReference
		//| ConstrainedArrayTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbstractTypeReference
		public RuleCall getAbstractTypeReferenceParserRuleCall_0() { return cAbstractTypeReferenceParserRuleCall_0; }
		
		//ConstrainedArrayTypeReference
		public RuleCall getConstrainedArrayTypeReferenceParserRuleCall_1() { return cConstrainedArrayTypeReferenceParserRuleCall_1; }
	}
	public class InstanceTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.InstanceTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInstanceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInstanceObjectDeclarationCrossReference_3_0 = (CrossReference)cInstanceAssignment_3.eContents().get(0);
		private final RuleCall cInstanceObjectDeclarationScopedNameParserRuleCall_3_0_1 = (RuleCall)cInstanceObjectDeclarationCrossReference_3_0.eContents().get(1);
		
		////DeprecatedTypeReference:
		////    typeName=('instance'
		////    | 'event'
		////    | 'service');
		//InstanceTypeReference:
		//    anonymous?='anonymous'? 'instance' 'of' instance=[ObjectDeclaration|ScopedName];
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'? 'instance' 'of' instance=[ObjectDeclaration|ScopedName]
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'instance'
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//instance=[ObjectDeclaration|ScopedName]
		public Assignment getInstanceAssignment_3() { return cInstanceAssignment_3; }
		
		//[ObjectDeclaration|ScopedName]
		public CrossReference getInstanceObjectDeclarationCrossReference_3_0() { return cInstanceObjectDeclarationCrossReference_3_0; }
		
		//ScopedName
		public RuleCall getInstanceObjectDeclarationScopedNameParserRuleCall_3_0_1() { return cInstanceObjectDeclarationScopedNameParserRuleCall_3_0_1; }
	}
	public class NamedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.NamedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeDeclarationCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeDeclarationScopedNameParserRuleCall_1_0_1 = (RuleCall)cTypeTypeDeclarationCrossReference_1_0.eContents().get(1);
		
		//NamedTypeReference:
		//    anonymous?='anonymous'? type=[TypeDeclaration|ScopedName];
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'? type=[TypeDeclaration|ScopedName]
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//type=[TypeDeclaration|ScopedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//[TypeDeclaration|ScopedName]
		public CrossReference getTypeTypeDeclarationCrossReference_1_0() { return cTypeTypeDeclarationCrossReference_1_0; }
		
		//ScopedName
		public RuleCall getTypeTypeDeclarationScopedNameParserRuleCall_1_0_1() { return cTypeTypeDeclarationScopedNameParserRuleCall_1_0_1; }
	}
	public class ConstrainedArrayTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ConstrainedArrayTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnconstrainedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cUnconstrainedTypeDeclarationCrossReference_0_0 = (CrossReference)cUnconstrainedAssignment_0.eContents().get(0);
		private final RuleCall cUnconstrainedTypeDeclarationScopedNameParserRuleCall_0_0_1 = (RuleCall)cUnconstrainedTypeDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintExpressionParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstrainedArrayTypeReference:
		//    unconstrained=[TypeDeclaration|ScopedName] '(' constraint=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//unconstrained=[TypeDeclaration|ScopedName] '(' constraint=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//unconstrained=[TypeDeclaration|ScopedName]
		public Assignment getUnconstrainedAssignment_0() { return cUnconstrainedAssignment_0; }
		
		//[TypeDeclaration|ScopedName]
		public CrossReference getUnconstrainedTypeDeclarationCrossReference_0_0() { return cUnconstrainedTypeDeclarationCrossReference_0_0; }
		
		//ScopedName
		public RuleCall getUnconstrainedTypeDeclarationScopedNameParserRuleCall_0_0_1() { return cUnconstrainedTypeDeclarationScopedNameParserRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//constraint=Expression
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }
		
		//Expression
		public RuleCall getConstraintExpressionParserRuleCall_2_0() { return cConstraintExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AbstractCollectionTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractCollectionTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetTypeReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBagTypeReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDictionaryTypeReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractCollectionTypeReference:
		//    SequenceTypeReference
		//    | ArrayTypeReference
		//    | SetTypeReference
		//    | BagTypeReference
		//    | DictionaryTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceTypeReference
		//| ArrayTypeReference
		//| SetTypeReference
		//| BagTypeReference
		//| DictionaryTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SequenceTypeReference
		public RuleCall getSequenceTypeReferenceParserRuleCall_0() { return cSequenceTypeReferenceParserRuleCall_0; }
		
		//ArrayTypeReference
		public RuleCall getArrayTypeReferenceParserRuleCall_1() { return cArrayTypeReferenceParserRuleCall_1; }
		
		//SetTypeReference
		public RuleCall getSetTypeReferenceParserRuleCall_2() { return cSetTypeReferenceParserRuleCall_2; }
		
		//BagTypeReference
		public RuleCall getBagTypeReferenceParserRuleCall_3() { return cBagTypeReferenceParserRuleCall_3; }
		
		//DictionaryTypeReference
		public RuleCall getDictionaryTypeReferenceParserRuleCall_4() { return cDictionaryTypeReferenceParserRuleCall_4; }
	}
	public class SequenceTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SequenceTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_4_0 = (RuleCall)cElementTypeAssignment_4.eContents().get(0);
		
		//SequenceTypeReference:
		//    anonymous?='anonymous'?
		//    'sequence' ('(' expression=Expression ')')? 'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'?
		//'sequence' ('(' expression=Expression ')')? 'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }
		
		//('(' expression=Expression ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//'of'
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_4() { return cElementTypeAssignment_4; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_4_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_4_0; }
	}
	public class ArrayTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ArrayTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIndexTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIndexTypeRangeTypeReferenceParserRuleCall_3_0_0 = (RuleCall)cIndexTypeAssignment_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_6_0 = (RuleCall)cElementTypeAssignment_6.eContents().get(0);
		
		//ArrayTypeReference:
		//    anonymous?='anonymous'?
		//    'array' '(' (indexType=RangeTypeReference | expression=Expression) ')' 'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'?
		//'array' '(' (indexType=RangeTypeReference | expression=Expression) ')' 'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'array'
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(indexType=RangeTypeReference | expression=Expression)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//indexType=RangeTypeReference
		public Assignment getIndexTypeAssignment_3_0() { return cIndexTypeAssignment_3_0; }
		
		//RangeTypeReference
		public RuleCall getIndexTypeRangeTypeReferenceParserRuleCall_3_0_0() { return cIndexTypeRangeTypeReferenceParserRuleCall_3_0_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'of'
		public Keyword getOfKeyword_5() { return cOfKeyword_5; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_6() { return cElementTypeAssignment_6; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_6_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_6_0; }
	}
	public class SetTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SetTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cSetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_3_0 = (RuleCall)cElementTypeAssignment_3.eContents().get(0);
		
		//SetTypeReference:
		//    anonymous?='anonymous'?
		//    'set' 'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'?
		//'set' 'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'set'
		public Keyword getSetKeyword_1() { return cSetKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_3() { return cElementTypeAssignment_3; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_3_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_3_0; }
	}
	public class BagTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.BagTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnonymousAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAnonymousAnonymousKeyword_0_0 = (Keyword)cAnonymousAssignment_0.eContents().get(0);
		private final Keyword cBagKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_3_0 = (RuleCall)cElementTypeAssignment_3.eContents().get(0);
		
		//BagTypeReference:
		//    anonymous?='anonymous'?
		//    'bag' 'of' elementType=AbstractTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//anonymous?='anonymous'?
		//'bag' 'of' elementType=AbstractTypeReference
		public Group getGroup() { return cGroup; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_0() { return cAnonymousAssignment_0; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_0_0() { return cAnonymousAnonymousKeyword_0_0; }
		
		//'bag'
		public Keyword getBagKeyword_1() { return cBagKeyword_1; }
		
		//'of'
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_3() { return cElementTypeAssignment_3; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_3_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_3_0; }
	}
	public class DictionaryTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DictionaryTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDictionaryTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnonymousAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAnonymousAnonymousKeyword_1_0 = (Keyword)cAnonymousAssignment_1.eContents().get(0);
		private final Keyword cDictionaryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cKeyTypeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKeyTypeAbstractDictKeyTypeRefParserRuleCall_3_0_0 = (RuleCall)cKeyTypeAssignment_3_0.eContents().get(0);
		private final Keyword cOfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cElementTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementTypeAbstractTypeReferenceParserRuleCall_3_2_0 = (RuleCall)cElementTypeAssignment_3_2.eContents().get(0);
		
		//DictionaryTypeReference:
		//    {DictionaryTypeReference}
		//    anonymous?='anonymous'?
		//    'dictionary' (keyType=AbstractDictKeyTypeRef? 'of' elementType=AbstractTypeReference)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DictionaryTypeReference}
		//anonymous?='anonymous'?
		//'dictionary' (keyType=AbstractDictKeyTypeRef? 'of' elementType=AbstractTypeReference)?
		public Group getGroup() { return cGroup; }
		
		//{DictionaryTypeReference}
		public Action getDictionaryTypeReferenceAction_0() { return cDictionaryTypeReferenceAction_0; }
		
		//anonymous?='anonymous'?
		public Assignment getAnonymousAssignment_1() { return cAnonymousAssignment_1; }
		
		//'anonymous'
		public Keyword getAnonymousAnonymousKeyword_1_0() { return cAnonymousAnonymousKeyword_1_0; }
		
		//'dictionary'
		public Keyword getDictionaryKeyword_2() { return cDictionaryKeyword_2; }
		
		//(keyType=AbstractDictKeyTypeRef? 'of' elementType=AbstractTypeReference)?
		public Group getGroup_3() { return cGroup_3; }
		
		//keyType=AbstractDictKeyTypeRef?
		public Assignment getKeyTypeAssignment_3_0() { return cKeyTypeAssignment_3_0; }
		
		//AbstractDictKeyTypeRef
		public RuleCall getKeyTypeAbstractDictKeyTypeRefParserRuleCall_3_0_0() { return cKeyTypeAbstractDictKeyTypeRefParserRuleCall_3_0_0; }
		
		//'of'
		public Keyword getOfKeyword_3_1() { return cOfKeyword_3_1; }
		
		//elementType=AbstractTypeReference
		public Assignment getElementTypeAssignment_3_2() { return cElementTypeAssignment_3_2; }
		
		//AbstractTypeReference
		public RuleCall getElementTypeAbstractTypeReferenceParserRuleCall_3_2_0() { return cElementTypeAbstractTypeReferenceParserRuleCall_3_2_0; }
	}
	public class AbstractDictKeyTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AbstractDictKeyTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNamedTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInstanceTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractDictKeyTypeRef returns AbstractTypeReference:
		//    NamedTypeReference | InstanceTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//NamedTypeReference | InstanceTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NamedTypeReference
		public RuleCall getNamedTypeReferenceParserRuleCall_0() { return cNamedTypeReferenceParserRuleCall_0; }
		
		//InstanceTypeReference
		public RuleCall getInstanceTypeReferenceParserRuleCall_1() { return cInstanceTypeReferenceParserRuleCall_1; }
	}
	public class TerminatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TerminatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cServicesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cServicesTerminatorServiceDeclarationParserRuleCall_3_0 = (RuleCall)cServicesAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTerminatorKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		////---------------------------------------------------------
		//// Terminator Definition
		////---------------------------------------------------------
		//TerminatorDefinition:
		//    'terminator' name=ID 'is'
		//    services+=TerminatorServiceDeclaration*
		//    'end' 'terminator'?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'terminator' name=ID 'is'
		//services+=TerminatorServiceDeclaration*
		//'end' 'terminator'?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//'terminator'
		public Keyword getTerminatorKeyword_0() { return cTerminatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//services+=TerminatorServiceDeclaration*
		public Assignment getServicesAssignment_3() { return cServicesAssignment_3; }
		
		//TerminatorServiceDeclaration
		public RuleCall getServicesTerminatorServiceDeclarationParserRuleCall_3_0() { return cServicesTerminatorServiceDeclarationParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'terminator'?
		public Keyword getTerminatorKeyword_5() { return cTerminatorKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class TerminatorServiceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TerminatorServiceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cServiceKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReturnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPragmaListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//TerminatorServiceDeclaration:
		//    visibility=Visibility? ('service'|'function') name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? ('service'|'function') name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('service'|'function')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'service'
		public Keyword getServiceKeyword_1_0() { return cServiceKeyword_1_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1_1() { return cFunctionKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'return'
		public Keyword getReturnKeyword_4_0() { return cReturnKeyword_4_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_6() { return cPragmaListParserRuleCall_6; }
	}
	public class ObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPragmaListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////---------------------------------------------------------
		//// Object Definition
		////---------------------------------------------------------
		//ObjectDeclaration:
		//    'object' name=ID
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' name=ID
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_3() { return cPragmaListParserRuleCall_3; }
	}
	public class ObjectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ObjectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cObjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAttributesAttributeDefinitionParserRuleCall_3_0_0 = (RuleCall)cAttributesAssignment_3_0.eContents().get(0);
		private final Assignment cIdentifiersAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cIdentifiersIdentifierDefinitionParserRuleCall_3_1_0 = (RuleCall)cIdentifiersAssignment_3_1.eContents().get(0);
		private final Assignment cServicesAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cServicesObjectServiceDeclarationParserRuleCall_3_2_0 = (RuleCall)cServicesAssignment_3_2.eContents().get(0);
		private final Assignment cEventsAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cEventsEventDefinitionParserRuleCall_3_3_0 = (RuleCall)cEventsAssignment_3_3.eContents().get(0);
		private final Assignment cStatesAssignment_3_4 = (Assignment)cAlternatives_3.eContents().get(4);
		private final RuleCall cStatesStateDeclarationParserRuleCall_3_4_0 = (RuleCall)cStatesAssignment_3_4.eContents().get(0);
		private final Assignment cTransitionsAssignment_3_5 = (Assignment)cAlternatives_3.eContents().get(5);
		private final RuleCall cTransitionsTransitionTableParserRuleCall_3_5_0 = (RuleCall)cTransitionsAssignment_3_5.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cObjectKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//ObjectDefinition:
		//    'object' name=ID 'is'
		//    (attributes+=AttributeDefinition
		//    | identifiers+=IdentifierDefinition
		//    | services+=ObjectServiceDeclaration
		//    | events+=EventDefinition
		//    | states+=StateDeclaration
		//    | transitions+=TransitionTable)*
		//    'end' 'object'?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'object' name=ID 'is'
		//(attributes+=AttributeDefinition
		//| identifiers+=IdentifierDefinition
		//| services+=ObjectServiceDeclaration
		//| events+=EventDefinition
		//| states+=StateDeclaration
		//| transitions+=TransitionTable)*
		//'end' 'object'?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//'object'
		public Keyword getObjectKeyword_0() { return cObjectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//(attributes+=AttributeDefinition
		//| identifiers+=IdentifierDefinition
		//| services+=ObjectServiceDeclaration
		//| events+=EventDefinition
		//| states+=StateDeclaration
		//| transitions+=TransitionTable)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//attributes+=AttributeDefinition
		public Assignment getAttributesAssignment_3_0() { return cAttributesAssignment_3_0; }
		
		//AttributeDefinition
		public RuleCall getAttributesAttributeDefinitionParserRuleCall_3_0_0() { return cAttributesAttributeDefinitionParserRuleCall_3_0_0; }
		
		//identifiers+=IdentifierDefinition
		public Assignment getIdentifiersAssignment_3_1() { return cIdentifiersAssignment_3_1; }
		
		//IdentifierDefinition
		public RuleCall getIdentifiersIdentifierDefinitionParserRuleCall_3_1_0() { return cIdentifiersIdentifierDefinitionParserRuleCall_3_1_0; }
		
		//services+=ObjectServiceDeclaration
		public Assignment getServicesAssignment_3_2() { return cServicesAssignment_3_2; }
		
		//ObjectServiceDeclaration
		public RuleCall getServicesObjectServiceDeclarationParserRuleCall_3_2_0() { return cServicesObjectServiceDeclarationParserRuleCall_3_2_0; }
		
		//events+=EventDefinition
		public Assignment getEventsAssignment_3_3() { return cEventsAssignment_3_3; }
		
		//EventDefinition
		public RuleCall getEventsEventDefinitionParserRuleCall_3_3_0() { return cEventsEventDefinitionParserRuleCall_3_3_0; }
		
		//states+=StateDeclaration
		public Assignment getStatesAssignment_3_4() { return cStatesAssignment_3_4; }
		
		//StateDeclaration
		public RuleCall getStatesStateDeclarationParserRuleCall_3_4_0() { return cStatesStateDeclarationParserRuleCall_3_4_0; }
		
		//transitions+=TransitionTable
		public Assignment getTransitionsAssignment_3_5() { return cTransitionsAssignment_3_5; }
		
		//TransitionTable
		public RuleCall getTransitionsTransitionTableParserRuleCall_3_5_0() { return cTransitionsTransitionTableParserRuleCall_3_5_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'object'?
		public Keyword getObjectKeyword_5() { return cObjectKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class AttributeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AttributeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPreferredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cPreferredPreferredKeyword_2_0 = (Keyword)cPreferredAssignment_2.eContents().get(0);
		private final Assignment cUniqueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cUniqueUniqueKeyword_3_0 = (Keyword)cUniqueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReferentialKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Assignment cReferentialsAssignment_4_2_0 = (Assignment)cGroup_4_2.eContents().get(0);
		private final RuleCall cReferentialsAttributeReferentialParserRuleCall_4_2_0_0 = (RuleCall)cReferentialsAssignment_4_2_0.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Keyword cCommaKeyword_4_2_1_0 = (Keyword)cGroup_4_2_1.eContents().get(0);
		private final Assignment cReferentialsAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cReferentialsAttributeReferentialParserRuleCall_4_2_1_1_0 = (RuleCall)cReferentialsAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeAbstractTypeReferenceParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cColonEqualsSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDefaultValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDefaultValueConstExpressionParserRuleCall_6_1_0 = (RuleCall)cDefaultValueAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cPragmaListParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//AttributeDefinition:
		//    name=ID ':'
		//    preferred?='preferred'? unique?='unique'?
		//    ('referential'
		//     '(' (referentials+=AttributeReferential (',' referentials+=AttributeReferential)*)? ')'
		//    )?
		//    type=AbstractTypeReference
		//    (':=' defaultValue=ConstExpression)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':'
		//preferred?='preferred'? unique?='unique'?
		//('referential'
		// '(' (referentials+=AttributeReferential (',' referentials+=AttributeReferential)*)? ')'
		//)?
		//type=AbstractTypeReference
		//(':=' defaultValue=ConstExpression)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//preferred?='preferred'?
		public Assignment getPreferredAssignment_2() { return cPreferredAssignment_2; }
		
		//'preferred'
		public Keyword getPreferredPreferredKeyword_2_0() { return cPreferredPreferredKeyword_2_0; }
		
		//unique?='unique'?
		public Assignment getUniqueAssignment_3() { return cUniqueAssignment_3; }
		
		//'unique'
		public Keyword getUniqueUniqueKeyword_3_0() { return cUniqueUniqueKeyword_3_0; }
		
		//('referential'
		// '(' (referentials+=AttributeReferential (',' referentials+=AttributeReferential)*)? ')'
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'referential'
		public Keyword getReferentialKeyword_4_0() { return cReferentialKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//(referentials+=AttributeReferential (',' referentials+=AttributeReferential)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//referentials+=AttributeReferential
		public Assignment getReferentialsAssignment_4_2_0() { return cReferentialsAssignment_4_2_0; }
		
		//AttributeReferential
		public RuleCall getReferentialsAttributeReferentialParserRuleCall_4_2_0_0() { return cReferentialsAttributeReferentialParserRuleCall_4_2_0_0; }
		
		//(',' referentials+=AttributeReferential)*
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//','
		public Keyword getCommaKeyword_4_2_1_0() { return cCommaKeyword_4_2_1_0; }
		
		//referentials+=AttributeReferential
		public Assignment getReferentialsAssignment_4_2_1_1() { return cReferentialsAssignment_4_2_1_1; }
		
		//AttributeReferential
		public RuleCall getReferentialsAttributeReferentialParserRuleCall_4_2_1_1_0() { return cReferentialsAttributeReferentialParserRuleCall_4_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//type=AbstractTypeReference
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//AbstractTypeReference
		public RuleCall getTypeAbstractTypeReferenceParserRuleCall_5_0() { return cTypeAbstractTypeReferenceParserRuleCall_5_0; }
		
		//(':=' defaultValue=ConstExpression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_6_0() { return cColonEqualsSignKeyword_6_0; }
		
		//defaultValue=ConstExpression
		public Assignment getDefaultValueAssignment_6_1() { return cDefaultValueAssignment_6_1; }
		
		//ConstExpression
		public RuleCall getDefaultValueConstExpressionParserRuleCall_6_1_0() { return cDefaultValueConstExpressionParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_8() { return cPragmaListParserRuleCall_8; }
	}
	public class AttributeReferentialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AttributeReferential");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeReferentialAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRelationshipAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRelationshipRelationshipDefinitionCrossReference_1_0 = (CrossReference)cRelationshipAssignment_1.eContents().get(0);
		private final RuleCall cRelationshipRelationshipDefinitionScopedNameParserRuleCall_1_0_1 = (RuleCall)cRelationshipRelationshipDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cObjectOrRoleAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final CrossReference cObjectOrRoleObjectOrRoleCrossReference_3_0_0_0 = (CrossReference)cObjectOrRoleAssignment_3_0_0.eContents().get(0);
		private final RuleCall cObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_3_0_0_0_1 = (RuleCall)cObjectOrRoleObjectOrRoleCrossReference_3_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cAttributeAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final CrossReference cAttributeAttributeDefinitionCrossReference_3_0_2_0 = (CrossReference)cAttributeAssignment_3_0_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDefinitionIDTerminalRuleCall_3_0_2_0_1 = (RuleCall)cAttributeAttributeDefinitionCrossReference_3_0_2_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cObjectOrRoleAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final CrossReference cObjectOrRoleObjectOrRoleCrossReference_3_1_0_0 = (CrossReference)cObjectOrRoleAssignment_3_1_0.eContents().get(0);
		private final RuleCall cObjectOrRoleObjectOrRoleIDTerminalRuleCall_3_1_0_0_1 = (RuleCall)cObjectOrRoleObjectOrRoleCrossReference_3_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cAttributeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final CrossReference cAttributeAttributeDefinitionCrossReference_3_1_2_0 = (CrossReference)cAttributeAssignment_3_1_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDefinitionIDTerminalRuleCall_3_1_2_0_1 = (RuleCall)cAttributeAttributeDefinitionCrossReference_3_1_2_0.eContents().get(1);
		private final Assignment cAttributeAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final CrossReference cAttributeAttributeDefinitionCrossReference_3_2_0 = (CrossReference)cAttributeAssignment_3_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDefinitionIDTerminalRuleCall_3_2_0_1 = (RuleCall)cAttributeAttributeDefinitionCrossReference_3_2_0.eContents().get(1);
		
		//AttributeReferential returns RelationshipNavigation:
		//    {AttributeReferential}
		//    relationship=[RelationshipDefinition|ScopedName]
		//    '.'
		//    ( objectOrRole=[ObjectOrRole|ObjectOrRoleName] '.' attribute=[AttributeDefinition]
		//    | objectOrRole=[ObjectOrRole|ID] '.' attribute=[AttributeDefinition]
		//    | attribute=[AttributeDefinition]);
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeReferential}
		//relationship=[RelationshipDefinition|ScopedName]
		//'.'
		//( objectOrRole=[ObjectOrRole|ObjectOrRoleName] '.' attribute=[AttributeDefinition]
		//| objectOrRole=[ObjectOrRole|ID] '.' attribute=[AttributeDefinition]
		//| attribute=[AttributeDefinition])
		public Group getGroup() { return cGroup; }
		
		//{AttributeReferential}
		public Action getAttributeReferentialAction_0() { return cAttributeReferentialAction_0; }
		
		//relationship=[RelationshipDefinition|ScopedName]
		public Assignment getRelationshipAssignment_1() { return cRelationshipAssignment_1; }
		
		//[RelationshipDefinition|ScopedName]
		public CrossReference getRelationshipRelationshipDefinitionCrossReference_1_0() { return cRelationshipRelationshipDefinitionCrossReference_1_0; }
		
		//ScopedName
		public RuleCall getRelationshipRelationshipDefinitionScopedNameParserRuleCall_1_0_1() { return cRelationshipRelationshipDefinitionScopedNameParserRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//( objectOrRole=[ObjectOrRole|ObjectOrRoleName] '.' attribute=[AttributeDefinition]
		//| objectOrRole=[ObjectOrRole|ID] '.' attribute=[AttributeDefinition]
		//| attribute=[AttributeDefinition])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//objectOrRole=[ObjectOrRole|ObjectOrRoleName] '.' attribute=[AttributeDefinition]
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//objectOrRole=[ObjectOrRole|ObjectOrRoleName]
		public Assignment getObjectOrRoleAssignment_3_0_0() { return cObjectOrRoleAssignment_3_0_0; }
		
		//[ObjectOrRole|ObjectOrRoleName]
		public CrossReference getObjectOrRoleObjectOrRoleCrossReference_3_0_0_0() { return cObjectOrRoleObjectOrRoleCrossReference_3_0_0_0; }
		
		//ObjectOrRoleName
		public RuleCall getObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_3_0_0_0_1() { return cObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_3_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0_1() { return cFullStopKeyword_3_0_1; }
		
		//attribute=[AttributeDefinition]
		public Assignment getAttributeAssignment_3_0_2() { return cAttributeAssignment_3_0_2; }
		
		//[AttributeDefinition]
		public CrossReference getAttributeAttributeDefinitionCrossReference_3_0_2_0() { return cAttributeAttributeDefinitionCrossReference_3_0_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeDefinitionIDTerminalRuleCall_3_0_2_0_1() { return cAttributeAttributeDefinitionIDTerminalRuleCall_3_0_2_0_1; }
		
		//objectOrRole=[ObjectOrRole|ID] '.' attribute=[AttributeDefinition]
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//objectOrRole=[ObjectOrRole|ID]
		public Assignment getObjectOrRoleAssignment_3_1_0() { return cObjectOrRoleAssignment_3_1_0; }
		
		//[ObjectOrRole|ID]
		public CrossReference getObjectOrRoleObjectOrRoleCrossReference_3_1_0_0() { return cObjectOrRoleObjectOrRoleCrossReference_3_1_0_0; }
		
		//ID
		public RuleCall getObjectOrRoleObjectOrRoleIDTerminalRuleCall_3_1_0_0_1() { return cObjectOrRoleObjectOrRoleIDTerminalRuleCall_3_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3_1_1() { return cFullStopKeyword_3_1_1; }
		
		//attribute=[AttributeDefinition]
		public Assignment getAttributeAssignment_3_1_2() { return cAttributeAssignment_3_1_2; }
		
		//[AttributeDefinition]
		public CrossReference getAttributeAttributeDefinitionCrossReference_3_1_2_0() { return cAttributeAttributeDefinitionCrossReference_3_1_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeDefinitionIDTerminalRuleCall_3_1_2_0_1() { return cAttributeAttributeDefinitionIDTerminalRuleCall_3_1_2_0_1; }
		
		//attribute=[AttributeDefinition]
		public Assignment getAttributeAssignment_3_2() { return cAttributeAssignment_3_2; }
		
		//[AttributeDefinition]
		public CrossReference getAttributeAttributeDefinitionCrossReference_3_2_0() { return cAttributeAttributeDefinitionCrossReference_3_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeDefinitionIDTerminalRuleCall_3_2_0_1() { return cAttributeAttributeDefinitionIDTerminalRuleCall_3_2_0_1; }
	}
	public class ObjectOrRoleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ObjectOrRoleName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ObjectOrRoleName:
		//    ID '.' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '.' ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class ObjectServiceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ObjectServiceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInstanceInstanceKeyword_1_0 = (Keyword)cInstanceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDeferredKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRelationshipAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cRelationshipRelationshipDefinitionCrossReference_2_2_0 = (CrossReference)cRelationshipAssignment_2_2.eContents().get(0);
		private final RuleCall cRelationshipRelationshipDefinitionIDTerminalRuleCall_2_2_0_1 = (RuleCall)cRelationshipRelationshipDefinitionCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cServiceKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cFunctionKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cReturnKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cReturnTypeAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cPragmaListParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//ObjectServiceDeclaration:
		//    visibility=Visibility?
		//    instance?='instance'?
		//    ('deferred' '(' relationship=[RelationshipDefinition] ')')?
		//    ('service'|'function') name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility?
		//instance?='instance'?
		//('deferred' '(' relationship=[RelationshipDefinition] ')')?
		//('service'|'function') name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//instance?='instance'?
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }
		
		//'instance'
		public Keyword getInstanceInstanceKeyword_1_0() { return cInstanceInstanceKeyword_1_0; }
		
		//('deferred' '(' relationship=[RelationshipDefinition] ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'deferred'
		public Keyword getDeferredKeyword_2_0() { return cDeferredKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//relationship=[RelationshipDefinition]
		public Assignment getRelationshipAssignment_2_2() { return cRelationshipAssignment_2_2; }
		
		//[RelationshipDefinition]
		public CrossReference getRelationshipRelationshipDefinitionCrossReference_2_2_0() { return cRelationshipRelationshipDefinitionCrossReference_2_2_0; }
		
		//ID
		public RuleCall getRelationshipRelationshipDefinitionIDTerminalRuleCall_2_2_0_1() { return cRelationshipRelationshipDefinitionIDTerminalRuleCall_2_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('service'|'function')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'service'
		public Keyword getServiceKeyword_3_0() { return cServiceKeyword_3_0; }
		
		//'function'
		public Keyword getFunctionKeyword_3_1() { return cFunctionKeyword_3_1; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_5() { return cParameterListParserRuleCall_5; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'return'
		public Keyword getReturnKeyword_6_0() { return cReturnKeyword_6_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_6_1() { return cReturnTypeAssignment_6_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_8() { return cPragmaListParserRuleCall_8; }
	}
	public class IdentifierDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.IdentifierDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cAttributesAttributeDefinitionCrossReference_3_0_0 = (CrossReference)cAttributesAssignment_3_0.eContents().get(0);
		private final RuleCall cAttributesAttributeDefinitionIDTerminalRuleCall_3_0_0_1 = (RuleCall)cAttributesAttributeDefinitionCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cAttributesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cAttributesAttributeDefinitionCrossReference_3_1_1_0 = (CrossReference)cAttributesAssignment_3_1_1.eContents().get(0);
		private final RuleCall cAttributesAttributeDefinitionIDTerminalRuleCall_3_1_1_0_1 = (RuleCall)cAttributesAttributeDefinitionCrossReference_3_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPragmaListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//IdentifierDefinition:
		//    'identifier' 'is'
		//    '(' (attributes+=[AttributeDefinition] (',' attributes+=[AttributeDefinition])*)? ')'
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'identifier' 'is'
		//'(' (attributes+=[AttributeDefinition] (',' attributes+=[AttributeDefinition])*)? ')'
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//'identifier'
		public Keyword getIdentifierKeyword_0() { return cIdentifierKeyword_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(attributes+=[AttributeDefinition] (',' attributes+=[AttributeDefinition])*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//attributes+=[AttributeDefinition]
		public Assignment getAttributesAssignment_3_0() { return cAttributesAssignment_3_0; }
		
		//[AttributeDefinition]
		public CrossReference getAttributesAttributeDefinitionCrossReference_3_0_0() { return cAttributesAttributeDefinitionCrossReference_3_0_0; }
		
		//ID
		public RuleCall getAttributesAttributeDefinitionIDTerminalRuleCall_3_0_0_1() { return cAttributesAttributeDefinitionIDTerminalRuleCall_3_0_0_1; }
		
		//(',' attributes+=[AttributeDefinition])*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//attributes+=[AttributeDefinition]
		public Assignment getAttributesAssignment_3_1_1() { return cAttributesAssignment_3_1_1; }
		
		//[AttributeDefinition]
		public CrossReference getAttributesAttributeDefinitionCrossReference_3_1_1_0() { return cAttributesAttributeDefinitionCrossReference_3_1_1_0; }
		
		//ID
		public RuleCall getAttributesAttributeDefinitionIDTerminalRuleCall_3_1_1_0_1() { return cAttributesAttributeDefinitionIDTerminalRuleCall_3_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_6() { return cPragmaListParserRuleCall_6; }
	}
	public class EventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.EventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeEventTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPragmaListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//EventDefinition:
		//    type=EventType? 'event' name=ID
		//    ParameterList
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//type=EventType? 'event' name=ID
		//ParameterList
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//type=EventType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//EventType
		public RuleCall getTypeEventTypeEnumRuleCall_0_0() { return cTypeEventTypeEnumRuleCall_0_0; }
		
		//'event'
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_5() { return cPragmaListParserRuleCall_5; }
	}
	public class StateDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StateDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStateTypeSyntaxParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPragmaListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//StateDeclaration:
		//    type=StateTypeSyntax? 'state' name=ID
		//    ParameterList
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//type=StateTypeSyntax? 'state' name=ID
		//ParameterList
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//type=StateTypeSyntax?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//StateTypeSyntax
		public RuleCall getTypeStateTypeSyntaxParserRuleCall_0_0() { return cTypeStateTypeSyntaxParserRuleCall_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_5() { return cPragmaListParserRuleCall_5; }
	}
	public class StateTypeSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StateTypeSyntax");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAssignerKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cStartKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cCreationKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTerminalKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//StateTypeSyntax returns StateType:
		//    'assigner' 'start'? | 'creation' | 'terminal';
		@Override public ParserRule getRule() { return rule; }
		
		//'assigner' 'start'? | 'creation' | 'terminal'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'assigner' 'start'?
		public Group getGroup_0() { return cGroup_0; }
		
		//'assigner'
		public Keyword getAssignerKeyword_0_0() { return cAssignerKeyword_0_0; }
		
		//'start'?
		public Keyword getStartKeyword_0_1() { return cStartKeyword_0_1; }
		
		//'creation'
		public Keyword getCreationKeyword_1() { return cCreationKeyword_1; }
		
		//'terminal'
		public Keyword getTerminalKeyword_2() { return cTerminalKeyword_2; }
	}
	public class TransitionTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TransitionTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTransTableTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRowsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRowsTransitionRowParserRuleCall_3_0 = (RuleCall)cRowsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTransitionKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cPragmaListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//TransitionTable:
		//    type=TransTableType? 'transition' 'is'
		//    rows+=TransitionRow+
		//    'end' 'transition'?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//type=TransTableType? 'transition' 'is'
		//rows+=TransitionRow+
		//'end' 'transition'?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//type=TransTableType?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//TransTableType
		public RuleCall getTypeTransTableTypeEnumRuleCall_0_0() { return cTypeTransTableTypeEnumRuleCall_0_0; }
		
		//'transition'
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//rows+=TransitionRow+
		public Assignment getRowsAssignment_3() { return cRowsAssignment_3; }
		
		//TransitionRow
		public RuleCall getRowsTransitionRowParserRuleCall_3_0() { return cRowsTransitionRowParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'transition'?
		public Keyword getTransitionKeyword_5() { return cTransitionKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_7() { return cPragmaListParserRuleCall_7; }
	}
	public class TransitionRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TransitionRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cStartStateDeclarationCrossReference_0_0_0 = (CrossReference)cStartAssignment_0_0.eContents().get(0);
		private final RuleCall cStartStateDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cStartStateDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Assignment cNonExistantAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Alternatives cNonExistantAlternatives_0_1_0 = (Alternatives)cNonExistantAssignment_0_1.eContents().get(0);
		private final Keyword cNonExistantNon_ExistentKeyword_0_1_0_0 = (Keyword)cNonExistantAlternatives_0_1_0.eContents().get(0);
		private final Keyword cNonExistantNon_ExistantKeyword_0_1_0_1 = (Keyword)cNonExistantAlternatives_0_1_0.eContents().get(1);
		private final Keyword cNonExistantNon_existentKeyword_0_1_0_2 = (Keyword)cNonExistantAlternatives_0_1_0.eContents().get(2);
		private final Keyword cNonExistantNon_existantKeyword_0_1_0_3 = (Keyword)cNonExistantAlternatives_0_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cOptionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cOptionsTransitionOptionParserRuleCall_2_0_0 = (RuleCall)cOptionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cOptionsTransitionOptionParserRuleCall_2_1_1_0 = (RuleCall)cOptionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cPragmaListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//TransitionRow:
		//    (start=[StateDeclaration] | nonExistant?=('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant'))
		//    '(' (options+=TransitionOption (',' options+=TransitionOption)*)? ')'
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//(start=[StateDeclaration] | nonExistant?=('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant'))
		//'(' (options+=TransitionOption (',' options+=TransitionOption)*)? ')'
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//(start=[StateDeclaration] | nonExistant?=('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant'))
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//start=[StateDeclaration]
		public Assignment getStartAssignment_0_0() { return cStartAssignment_0_0; }
		
		//[StateDeclaration]
		public CrossReference getStartStateDeclarationCrossReference_0_0_0() { return cStartStateDeclarationCrossReference_0_0_0; }
		
		//ID
		public RuleCall getStartStateDeclarationIDTerminalRuleCall_0_0_0_1() { return cStartStateDeclarationIDTerminalRuleCall_0_0_0_1; }
		
		//nonExistant?=('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant')
		public Assignment getNonExistantAssignment_0_1() { return cNonExistantAssignment_0_1; }
		
		//('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant')
		public Alternatives getNonExistantAlternatives_0_1_0() { return cNonExistantAlternatives_0_1_0; }
		
		//'Non_Existent'
		public Keyword getNonExistantNon_ExistentKeyword_0_1_0_0() { return cNonExistantNon_ExistentKeyword_0_1_0_0; }
		
		//'Non_Existant'
		public Keyword getNonExistantNon_ExistantKeyword_0_1_0_1() { return cNonExistantNon_ExistantKeyword_0_1_0_1; }
		
		//'non_existent'
		public Keyword getNonExistantNon_existentKeyword_0_1_0_2() { return cNonExistantNon_existentKeyword_0_1_0_2; }
		
		//'non_existant'
		public Keyword getNonExistantNon_existantKeyword_0_1_0_3() { return cNonExistantNon_existantKeyword_0_1_0_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(options+=TransitionOption (',' options+=TransitionOption)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//options+=TransitionOption
		public Assignment getOptionsAssignment_2_0() { return cOptionsAssignment_2_0; }
		
		//TransitionOption
		public RuleCall getOptionsTransitionOptionParserRuleCall_2_0_0() { return cOptionsTransitionOptionParserRuleCall_2_0_0; }
		
		//(',' options+=TransitionOption)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//options+=TransitionOption
		public Assignment getOptionsAssignment_2_1_1() { return cOptionsAssignment_2_1_1; }
		
		//TransitionOption
		public RuleCall getOptionsTransitionOptionParserRuleCall_2_1_1_0() { return cOptionsTransitionOptionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_5() { return cPragmaListParserRuleCall_5; }
	}
	public class TransitionOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TransitionOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cEventObjectAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cEventObjectObjectDefinitionCrossReference_0_0_0 = (CrossReference)cEventObjectAssignment_0_0.eContents().get(0);
		private final RuleCall cEventObjectObjectDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cEventObjectObjectDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEventEventDefinitionCrossReference_1_0 = (CrossReference)cEventAssignment_1.eContents().get(0);
		private final RuleCall cEventEventDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cEventEventDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cEndStateAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final CrossReference cEndStateStateDeclarationCrossReference_3_0_0 = (CrossReference)cEndStateAssignment_3_0.eContents().get(0);
		private final RuleCall cEndStateStateDeclarationIDTerminalRuleCall_3_0_0_1 = (RuleCall)cEndStateStateDeclarationCrossReference_3_0_0.eContents().get(1);
		private final Assignment cIgnoreAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cIgnoreIgnoreKeyword_3_1_0 = (Keyword)cIgnoreAssignment_3_1.eContents().get(0);
		private final Assignment cCannotHappenAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final Alternatives cCannotHappenAlternatives_3_2_0 = (Alternatives)cCannotHappenAssignment_3_2.eContents().get(0);
		private final Keyword cCannotHappenCannot_HappenKeyword_3_2_0_0 = (Keyword)cCannotHappenAlternatives_3_2_0.eContents().get(0);
		private final Keyword cCannotHappenCannot_happenKeyword_3_2_0_1 = (Keyword)cCannotHappenAlternatives_3_2_0.eContents().get(1);
		
		//TransitionOption:
		//    (eventObject=[ObjectDefinition] '.')? event=[EventDefinition] '=>'
		//    (endState=[StateDeclaration] | ignore?='Ignore' | cannotHappen?=('Cannot_Happen' | 'cannot_happen'));
		@Override public ParserRule getRule() { return rule; }
		
		//(eventObject=[ObjectDefinition] '.')? event=[EventDefinition] '=>'
		//(endState=[StateDeclaration] | ignore?='Ignore' | cannotHappen?=('Cannot_Happen' | 'cannot_happen'))
		public Group getGroup() { return cGroup; }
		
		//(eventObject=[ObjectDefinition] '.')?
		public Group getGroup_0() { return cGroup_0; }
		
		//eventObject=[ObjectDefinition]
		public Assignment getEventObjectAssignment_0_0() { return cEventObjectAssignment_0_0; }
		
		//[ObjectDefinition]
		public CrossReference getEventObjectObjectDefinitionCrossReference_0_0_0() { return cEventObjectObjectDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getEventObjectObjectDefinitionIDTerminalRuleCall_0_0_0_1() { return cEventObjectObjectDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//event=[EventDefinition]
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }
		
		//[EventDefinition]
		public CrossReference getEventEventDefinitionCrossReference_1_0() { return cEventEventDefinitionCrossReference_1_0; }
		
		//ID
		public RuleCall getEventEventDefinitionIDTerminalRuleCall_1_0_1() { return cEventEventDefinitionIDTerminalRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//(endState=[StateDeclaration] | ignore?='Ignore' | cannotHappen?=('Cannot_Happen' | 'cannot_happen'))
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//endState=[StateDeclaration]
		public Assignment getEndStateAssignment_3_0() { return cEndStateAssignment_3_0; }
		
		//[StateDeclaration]
		public CrossReference getEndStateStateDeclarationCrossReference_3_0_0() { return cEndStateStateDeclarationCrossReference_3_0_0; }
		
		//ID
		public RuleCall getEndStateStateDeclarationIDTerminalRuleCall_3_0_0_1() { return cEndStateStateDeclarationIDTerminalRuleCall_3_0_0_1; }
		
		//ignore?='Ignore'
		public Assignment getIgnoreAssignment_3_1() { return cIgnoreAssignment_3_1; }
		
		//'Ignore'
		public Keyword getIgnoreIgnoreKeyword_3_1_0() { return cIgnoreIgnoreKeyword_3_1_0; }
		
		//cannotHappen?=('Cannot_Happen' | 'cannot_happen')
		public Assignment getCannotHappenAssignment_3_2() { return cCannotHappenAssignment_3_2; }
		
		//('Cannot_Happen' | 'cannot_happen')
		public Alternatives getCannotHappenAlternatives_3_2_0() { return cCannotHappenAlternatives_3_2_0; }
		
		//'Cannot_Happen'
		public Keyword getCannotHappenCannot_HappenKeyword_3_2_0_0() { return cCannotHappenCannot_HappenKeyword_3_2_0_0; }
		
		//'cannot_happen'
		public Keyword getCannotHappenCannot_happenKeyword_3_2_0_1() { return cCannotHappenCannot_happenKeyword_3_2_0_1; }
	}
	public class DomainServiceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DomainServiceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cServiceKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReturnKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cReturnTypeAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPragmaListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////---------------------------------------------------------
		//// Service Declaration
		////---------------------------------------------------------
		//DomainServiceDeclaration:
		//    visibility=Visibility?
		//    ('service' | 'function') name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility?
		//('service' | 'function') name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('service' | 'function')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'service'
		public Keyword getServiceKeyword_1_0() { return cServiceKeyword_1_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1_1() { return cFunctionKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'return'
		public Keyword getReturnKeyword_4_0() { return cReturnKeyword_4_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_6() { return cPragmaListParserRuleCall_6; }
	}
	public class RelationshipDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RelationshipDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationshipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cRegularRelationshipDefinitionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cAssocRelationshipDefinitionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSubtypeRelationshipDefinitionParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cPragmaListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////---------------------------------------------------------
		//// Relationship Definition
		////---------------------------------------------------------
		//RelationshipDefinition:
		//    'relationship'
		//    (RegularRelationshipDefinition
		//    | AssocRelationshipDefinition
		//    | SubtypeRelationshipDefinition)
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//'relationship'
		//(RegularRelationshipDefinition
		//| AssocRelationshipDefinition
		//| SubtypeRelationshipDefinition)
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_0() { return cRelationshipKeyword_0; }
		
		//(RegularRelationshipDefinition
		//| AssocRelationshipDefinition
		//| SubtypeRelationshipDefinition)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//RegularRelationshipDefinition
		public RuleCall getRegularRelationshipDefinitionParserRuleCall_1_0() { return cRegularRelationshipDefinitionParserRuleCall_1_0; }
		
		//AssocRelationshipDefinition
		public RuleCall getAssocRelationshipDefinitionParserRuleCall_1_1() { return cAssocRelationshipDefinitionParserRuleCall_1_1; }
		
		//SubtypeRelationshipDefinition
		public RuleCall getSubtypeRelationshipDefinitionParserRuleCall_1_2() { return cSubtypeRelationshipDefinitionParserRuleCall_1_2; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_3() { return cPragmaListParserRuleCall_3; }
	}
	public class RegularRelationshipDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RegularRelationshipDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cForwardsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cForwardsRelationshipEndParserRuleCall_2_0 = (RuleCall)cForwardsAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBackwardsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBackwardsRelationshipEndParserRuleCall_4_0 = (RuleCall)cBackwardsAssignment_4.eContents().get(0);
		
		//RegularRelationshipDefinition:
		//    name=ID 'is'
		//    forwards=RelationshipEnd ','
		//    backwards=RelationshipEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'is'
		//forwards=RelationshipEnd ','
		//backwards=RelationshipEnd
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//forwards=RelationshipEnd
		public Assignment getForwardsAssignment_2() { return cForwardsAssignment_2; }
		
		//RelationshipEnd
		public RuleCall getForwardsRelationshipEndParserRuleCall_2_0() { return cForwardsRelationshipEndParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//backwards=RelationshipEnd
		public Assignment getBackwardsAssignment_4() { return cBackwardsAssignment_4; }
		
		//RelationshipEnd
		public RuleCall getBackwardsRelationshipEndParserRuleCall_4_0() { return cBackwardsRelationshipEndParserRuleCall_4_0; }
	}
	public class AssocRelationshipDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AssocRelationshipDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cForwardsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cForwardsRelationshipEndParserRuleCall_2_0 = (RuleCall)cForwardsAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBackwardsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBackwardsRelationshipEndParserRuleCall_4_0 = (RuleCall)cBackwardsAssignment_4.eContents().get(0);
		private final Keyword cUsingKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOneAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cOneOneKeyword_6_0 = (Keyword)cOneAssignment_6.eContents().get(0);
		private final Assignment cObjectAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cObjectObjectDeclarationCrossReference_7_0 = (CrossReference)cObjectAssignment_7.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_7_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_7_0.eContents().get(1);
		
		//AssocRelationshipDefinition:
		//    name=ID 'is'
		//    forwards=RelationshipEnd ','
		//    backwards=RelationshipEnd
		//    'using' one?='one'? object=[ObjectDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'is'
		//forwards=RelationshipEnd ','
		//backwards=RelationshipEnd
		//'using' one?='one'? object=[ObjectDeclaration]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//forwards=RelationshipEnd
		public Assignment getForwardsAssignment_2() { return cForwardsAssignment_2; }
		
		//RelationshipEnd
		public RuleCall getForwardsRelationshipEndParserRuleCall_2_0() { return cForwardsRelationshipEndParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//backwards=RelationshipEnd
		public Assignment getBackwardsAssignment_4() { return cBackwardsAssignment_4; }
		
		//RelationshipEnd
		public RuleCall getBackwardsRelationshipEndParserRuleCall_4_0() { return cBackwardsRelationshipEndParserRuleCall_4_0; }
		
		//'using'
		public Keyword getUsingKeyword_5() { return cUsingKeyword_5; }
		
		//one?='one'?
		public Assignment getOneAssignment_6() { return cOneAssignment_6; }
		
		//'one'
		public Keyword getOneOneKeyword_6_0() { return cOneOneKeyword_6_0; }
		
		//object=[ObjectDeclaration]
		public Assignment getObjectAssignment_7() { return cObjectAssignment_7; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_7_0() { return cObjectObjectDeclarationCrossReference_7_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_7_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_7_0_1; }
	}
	public class RelationshipEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromObjectDeclarationCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromObjectDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cFromObjectDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cConditionalityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionalityConditionalityEnumRuleCall_1_0 = (RuleCall)cConditionalityAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityMultiplicityEnumRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToObjectDeclarationCrossReference_4_0 = (CrossReference)cToAssignment_4.eContents().get(0);
		private final RuleCall cToObjectDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cToObjectDeclarationCrossReference_4_0.eContents().get(1);
		
		//RelationshipEnd:
		//    from=[ObjectDeclaration]
		//    conditionality=Conditionality name=ID
		//    multiplicity=Multiplicity
		//    to=[ObjectDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//from=[ObjectDeclaration]
		//conditionality=Conditionality name=ID
		//multiplicity=Multiplicity
		//to=[ObjectDeclaration]
		public Group getGroup() { return cGroup; }
		
		//from=[ObjectDeclaration]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[ObjectDeclaration]
		public CrossReference getFromObjectDeclarationCrossReference_0_0() { return cFromObjectDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getFromObjectDeclarationIDTerminalRuleCall_0_0_1() { return cFromObjectDeclarationIDTerminalRuleCall_0_0_1; }
		
		//conditionality=Conditionality
		public Assignment getConditionalityAssignment_1() { return cConditionalityAssignment_1; }
		
		//Conditionality
		public RuleCall getConditionalityConditionalityEnumRuleCall_1_0() { return cConditionalityConditionalityEnumRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//multiplicity=Multiplicity
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }
		
		//Multiplicity
		public RuleCall getMultiplicityMultiplicityEnumRuleCall_3_0() { return cMultiplicityMultiplicityEnumRuleCall_3_0; }
		
		//to=[ObjectDeclaration]
		public Assignment getToAssignment_4() { return cToAssignment_4; }
		
		//[ObjectDeclaration]
		public CrossReference getToObjectDeclarationCrossReference_4_0() { return cToObjectDeclarationCrossReference_4_0; }
		
		//ID
		public RuleCall getToObjectDeclarationIDTerminalRuleCall_4_0_1() { return cToObjectDeclarationIDTerminalRuleCall_4_0_1; }
	}
	public class SubtypeRelationshipDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SubtypeRelationshipDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSupertypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSupertypeObjectDeclarationCrossReference_2_0 = (CrossReference)cSupertypeAssignment_2.eContents().get(0);
		private final RuleCall cSupertypeObjectDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cSupertypeObjectDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cIs_aKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cSubtypesAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final CrossReference cSubtypesObjectDeclarationCrossReference_5_0_0 = (CrossReference)cSubtypesAssignment_5_0.eContents().get(0);
		private final RuleCall cSubtypesObjectDeclarationIDTerminalRuleCall_5_0_0_1 = (RuleCall)cSubtypesObjectDeclarationCrossReference_5_0_0.eContents().get(1);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cSubtypesAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final CrossReference cSubtypesObjectDeclarationCrossReference_5_1_1_0 = (CrossReference)cSubtypesAssignment_5_1_1.eContents().get(0);
		private final RuleCall cSubtypesObjectDeclarationIDTerminalRuleCall_5_1_1_0_1 = (RuleCall)cSubtypesObjectDeclarationCrossReference_5_1_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SubtypeRelationshipDefinition:
		//    name=ID 'is'
		//    supertype=[ObjectDeclaration] 'is_a'
		//    '(' (subtypes+=[ObjectDeclaration] (',' subtypes+=[ObjectDeclaration])*)?')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'is'
		//supertype=[ObjectDeclaration] 'is_a'
		//'(' (subtypes+=[ObjectDeclaration] (',' subtypes+=[ObjectDeclaration])*)?')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//supertype=[ObjectDeclaration]
		public Assignment getSupertypeAssignment_2() { return cSupertypeAssignment_2; }
		
		//[ObjectDeclaration]
		public CrossReference getSupertypeObjectDeclarationCrossReference_2_0() { return cSupertypeObjectDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getSupertypeObjectDeclarationIDTerminalRuleCall_2_0_1() { return cSupertypeObjectDeclarationIDTerminalRuleCall_2_0_1; }
		
		//'is_a'
		public Keyword getIs_aKeyword_3() { return cIs_aKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//(subtypes+=[ObjectDeclaration] (',' subtypes+=[ObjectDeclaration])*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//subtypes+=[ObjectDeclaration]
		public Assignment getSubtypesAssignment_5_0() { return cSubtypesAssignment_5_0; }
		
		//[ObjectDeclaration]
		public CrossReference getSubtypesObjectDeclarationCrossReference_5_0_0() { return cSubtypesObjectDeclarationCrossReference_5_0_0; }
		
		//ID
		public RuleCall getSubtypesObjectDeclarationIDTerminalRuleCall_5_0_0_1() { return cSubtypesObjectDeclarationIDTerminalRuleCall_5_0_0_1; }
		
		//(',' subtypes+=[ObjectDeclaration])*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//subtypes+=[ObjectDeclaration]
		public Assignment getSubtypesAssignment_5_1_1() { return cSubtypesAssignment_5_1_1; }
		
		//[ObjectDeclaration]
		public CrossReference getSubtypesObjectDeclarationCrossReference_5_1_1_0() { return cSubtypesObjectDeclarationCrossReference_5_1_1_0; }
		
		//ID
		public RuleCall getSubtypesObjectDeclarationIDTerminalRuleCall_5_1_1_0_1() { return cSubtypesObjectDeclarationIDTerminalRuleCall_5_1_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class RelationshipNavigationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationshipAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRelationshipRelationshipDefinitionCrossReference_0_0 = (CrossReference)cRelationshipAssignment_0.eContents().get(0);
		private final RuleCall cRelationshipRelationshipDefinitionScopedNameParserRuleCall_0_0_1 = (RuleCall)cRelationshipRelationshipDefinitionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cObjectOrRoleAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final CrossReference cObjectOrRoleObjectOrRoleCrossReference_1_1_0_0 = (CrossReference)cObjectOrRoleAssignment_1_1_0.eContents().get(0);
		private final RuleCall cObjectOrRoleObjectOrRoleIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cObjectOrRoleObjectOrRoleCrossReference_1_1_0_0.eContents().get(1);
		private final Assignment cObjectOrRoleAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final CrossReference cObjectOrRoleObjectOrRoleCrossReference_1_1_1_0 = (CrossReference)cObjectOrRoleAssignment_1_1_1.eContents().get(0);
		private final RuleCall cObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_1_1_1_0_1 = (RuleCall)cObjectOrRoleObjectOrRoleCrossReference_1_1_1_0.eContents().get(1);
		
		//RelationshipNavigation:
		//    relationship=[RelationshipDefinition|ScopedName]
		//    ('.' (objectOrRole=[ObjectOrRole] | objectOrRole=[ObjectOrRole|ObjectOrRoleName]))?;
		@Override public ParserRule getRule() { return rule; }
		
		//relationship=[RelationshipDefinition|ScopedName]
		//('.' (objectOrRole=[ObjectOrRole] | objectOrRole=[ObjectOrRole|ObjectOrRoleName]))?
		public Group getGroup() { return cGroup; }
		
		//relationship=[RelationshipDefinition|ScopedName]
		public Assignment getRelationshipAssignment_0() { return cRelationshipAssignment_0; }
		
		//[RelationshipDefinition|ScopedName]
		public CrossReference getRelationshipRelationshipDefinitionCrossReference_0_0() { return cRelationshipRelationshipDefinitionCrossReference_0_0; }
		
		//ScopedName
		public RuleCall getRelationshipRelationshipDefinitionScopedNameParserRuleCall_0_0_1() { return cRelationshipRelationshipDefinitionScopedNameParserRuleCall_0_0_1; }
		
		//('.' (objectOrRole=[ObjectOrRole] | objectOrRole=[ObjectOrRole|ObjectOrRoleName]))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(objectOrRole=[ObjectOrRole] | objectOrRole=[ObjectOrRole|ObjectOrRoleName])
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//objectOrRole=[ObjectOrRole]
		public Assignment getObjectOrRoleAssignment_1_1_0() { return cObjectOrRoleAssignment_1_1_0; }
		
		//[ObjectOrRole]
		public CrossReference getObjectOrRoleObjectOrRoleCrossReference_1_1_0_0() { return cObjectOrRoleObjectOrRoleCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getObjectOrRoleObjectOrRoleIDTerminalRuleCall_1_1_0_0_1() { return cObjectOrRoleObjectOrRoleIDTerminalRuleCall_1_1_0_0_1; }
		
		//objectOrRole=[ObjectOrRole|ObjectOrRoleName]
		public Assignment getObjectOrRoleAssignment_1_1_1() { return cObjectOrRoleAssignment_1_1_1; }
		
		//[ObjectOrRole|ObjectOrRoleName]
		public CrossReference getObjectOrRoleObjectOrRoleCrossReference_1_1_1_0() { return cObjectOrRoleObjectOrRoleCrossReference_1_1_1_0; }
		
		//ObjectOrRoleName
		public RuleCall getObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_1_1_1_0_1() { return cObjectOrRoleObjectOrRoleObjectOrRoleNameParserRuleCall_1_1_1_0_1; }
	}
	public class DomainServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DomainServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cServiceKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDomainDomainDefinitionCrossReference_2_0 = (CrossReference)cDomainAssignment_2.eContents().get(0);
		private final RuleCall cDomainDomainDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cDomainDomainDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cReturnKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0 = (RuleCall)cReturnTypeAssignment_6_1.eContents().get(0);
		private final Keyword cIsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyCodeBlockParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Keyword cServiceKeyword_9_0 = (Keyword)cAlternatives_9.eContents().get(0);
		private final Keyword cFunctionKeyword_9_1 = (Keyword)cAlternatives_9.eContents().get(1);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cPragmaListParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		////---------------------------------------------------------
		//// Dynamic Behaviour
		////---------------------------------------------------------
		//DomainServiceDefinition:
		//    visibility=Visibility?
		//    ('service' | 'function')
		//    domain=[DomainDefinition] '::' name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    'is' body=CodeBlock
		//    ('service' | 'function')?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility?
		//('service' | 'function')
		//domain=[DomainDefinition] '::' name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//'is' body=CodeBlock
		//('service' | 'function')?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('service' | 'function')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'service'
		public Keyword getServiceKeyword_1_0() { return cServiceKeyword_1_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1_1() { return cFunctionKeyword_1_1; }
		
		//domain=[DomainDefinition]
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }
		
		//[DomainDefinition]
		public CrossReference getDomainDomainDefinitionCrossReference_2_0() { return cDomainDomainDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getDomainDomainDefinitionIDTerminalRuleCall_2_0_1() { return cDomainDomainDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3() { return cColonColonKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_5() { return cParameterListParserRuleCall_5; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'return'
		public Keyword getReturnKeyword_6_0() { return cReturnKeyword_6_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_6_1() { return cReturnTypeAssignment_6_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0; }
		
		//'is'
		public Keyword getIsKeyword_7() { return cIsKeyword_7; }
		
		//body=CodeBlock
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//CodeBlock
		public RuleCall getBodyCodeBlockParserRuleCall_8_0() { return cBodyCodeBlockParserRuleCall_8_0; }
		
		//('service' | 'function')?
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//'service'
		public Keyword getServiceKeyword_9_0() { return cServiceKeyword_9_0; }
		
		//'function'
		public Keyword getFunctionKeyword_9_1() { return cFunctionKeyword_9_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_11() { return cPragmaListParserRuleCall_11; }
	}
	public class ObjectServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ObjectServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Assignment cInstanceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cInstanceInstanceKeyword_1_0 = (Keyword)cInstanceAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cDeferredKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRelationshipAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRelationshipRelationshipDefinitionCrossReference_2_1_0 = (CrossReference)cRelationshipAssignment_2_1.eContents().get(0);
		private final RuleCall cRelationshipRelationshipDefinitionIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRelationshipRelationshipDefinitionCrossReference_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cServiceKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cFunctionKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDomainDomainDefinitionCrossReference_4_0 = (CrossReference)cDomainAssignment_4.eContents().get(0);
		private final RuleCall cDomainDomainDefinitionIDTerminalRuleCall_4_0_1 = (RuleCall)cDomainDomainDefinitionCrossReference_4_0.eContents().get(1);
		private final Keyword cColonColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cObjectAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cObjectObjectDeclarationCrossReference_6_0 = (CrossReference)cObjectAssignment_6.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_6_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_6_0.eContents().get(1);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cNameAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNameIDTerminalRuleCall_8_0 = (RuleCall)cNameAssignment_8.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cReturnKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cReturnTypeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_10_1_0 = (RuleCall)cReturnTypeAssignment_10_1.eContents().get(0);
		private final Keyword cIsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cBodyAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cBodyCodeBlockParserRuleCall_12_0 = (RuleCall)cBodyAssignment_12.eContents().get(0);
		private final Alternatives cAlternatives_13 = (Alternatives)cGroup.eContents().get(13);
		private final Keyword cServiceKeyword_13_0 = (Keyword)cAlternatives_13.eContents().get(0);
		private final Keyword cFunctionKeyword_13_1 = (Keyword)cAlternatives_13.eContents().get(1);
		private final Keyword cSemicolonKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final RuleCall cPragmaListParserRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		
		//ObjectServiceDefinition:
		//    visibility=Visibility? instance?='instance'? ('deferred' relationship=[RelationshipDefinition])?
		//    ('service' | 'function')
		//    domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    'is' body=CodeBlock
		//    ('service' | 'function')?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility? instance?='instance'? ('deferred' relationship=[RelationshipDefinition])?
		//('service' | 'function')
		//domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//'is' body=CodeBlock
		//('service' | 'function')?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//instance?='instance'?
		public Assignment getInstanceAssignment_1() { return cInstanceAssignment_1; }
		
		//'instance'
		public Keyword getInstanceInstanceKeyword_1_0() { return cInstanceInstanceKeyword_1_0; }
		
		//('deferred' relationship=[RelationshipDefinition])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'deferred'
		public Keyword getDeferredKeyword_2_0() { return cDeferredKeyword_2_0; }
		
		//relationship=[RelationshipDefinition]
		public Assignment getRelationshipAssignment_2_1() { return cRelationshipAssignment_2_1; }
		
		//[RelationshipDefinition]
		public CrossReference getRelationshipRelationshipDefinitionCrossReference_2_1_0() { return cRelationshipRelationshipDefinitionCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRelationshipRelationshipDefinitionIDTerminalRuleCall_2_1_0_1() { return cRelationshipRelationshipDefinitionIDTerminalRuleCall_2_1_0_1; }
		
		//('service' | 'function')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'service'
		public Keyword getServiceKeyword_3_0() { return cServiceKeyword_3_0; }
		
		//'function'
		public Keyword getFunctionKeyword_3_1() { return cFunctionKeyword_3_1; }
		
		//domain=[DomainDefinition]
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }
		
		//[DomainDefinition]
		public CrossReference getDomainDomainDefinitionCrossReference_4_0() { return cDomainDomainDefinitionCrossReference_4_0; }
		
		//ID
		public RuleCall getDomainDomainDefinitionIDTerminalRuleCall_4_0_1() { return cDomainDomainDefinitionIDTerminalRuleCall_4_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_5() { return cColonColonKeyword_5; }
		
		//object=[ObjectDeclaration]
		public Assignment getObjectAssignment_6() { return cObjectAssignment_6; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_6_0() { return cObjectObjectDeclarationCrossReference_6_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_6_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_6_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
		
		//name=ID
		public Assignment getNameAssignment_8() { return cNameAssignment_8; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_8_0() { return cNameIDTerminalRuleCall_8_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_9() { return cParameterListParserRuleCall_9; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'return'
		public Keyword getReturnKeyword_10_0() { return cReturnKeyword_10_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_10_1() { return cReturnTypeAssignment_10_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_10_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_10_1_0; }
		
		//'is'
		public Keyword getIsKeyword_11() { return cIsKeyword_11; }
		
		//body=CodeBlock
		public Assignment getBodyAssignment_12() { return cBodyAssignment_12; }
		
		//CodeBlock
		public RuleCall getBodyCodeBlockParserRuleCall_12_0() { return cBodyCodeBlockParserRuleCall_12_0; }
		
		//('service' | 'function')?
		public Alternatives getAlternatives_13() { return cAlternatives_13; }
		
		//'service'
		public Keyword getServiceKeyword_13_0() { return cServiceKeyword_13_0; }
		
		//'function'
		public Keyword getFunctionKeyword_13_1() { return cFunctionKeyword_13_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_14() { return cSemicolonKeyword_14; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_15() { return cPragmaListParserRuleCall_15; }
	}
	public class TerminatorServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TerminatorServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cServiceKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cFunctionKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDomainDomainDefinitionCrossReference_2_0 = (CrossReference)cDomainAssignment_2.eContents().get(0);
		private final RuleCall cDomainDomainDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cDomainDomainDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTerminatorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTerminatorTerminatorDefinitionCrossReference_4_0 = (CrossReference)cTerminatorAssignment_4.eContents().get(0);
		private final RuleCall cTerminatorTerminatorDefinitionIDTerminalRuleCall_4_0_1 = (RuleCall)cTerminatorTerminatorDefinitionCrossReference_4_0.eContents().get(1);
		private final Keyword cTildeGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnTypeAbstractTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cReturnTypeAssignment_8_1.eContents().get(0);
		private final Keyword cIsKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cBodyAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cBodyCodeBlockParserRuleCall_10_0 = (RuleCall)cBodyAssignment_10.eContents().get(0);
		private final Alternatives cAlternatives_11 = (Alternatives)cGroup.eContents().get(11);
		private final Keyword cServiceKeyword_11_0 = (Keyword)cAlternatives_11.eContents().get(0);
		private final Keyword cFunctionKeyword_11_1 = (Keyword)cAlternatives_11.eContents().get(1);
		private final Keyword cSemicolonKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final RuleCall cPragmaListParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//TerminatorServiceDefinition:
		//    visibility=Visibility?
		//    ('service' | 'function')
		//    domain=[DomainDefinition] '::' terminator=[TerminatorDefinition] '~>' name=ID
		//    ParameterList
		//    ('return' returnType=AbstractTypeReference)?
		//    'is' body=CodeBlock
		//    ('service' | 'function')?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=Visibility?
		//('service' | 'function')
		//domain=[DomainDefinition] '::' terminator=[TerminatorDefinition] '~>' name=ID
		//ParameterList
		//('return' returnType=AbstractTypeReference)?
		//'is' body=CodeBlock
		//('service' | 'function')?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//visibility=Visibility?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//Visibility
		public RuleCall getVisibilityVisibilityEnumRuleCall_0_0() { return cVisibilityVisibilityEnumRuleCall_0_0; }
		
		//('service' | 'function')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'service'
		public Keyword getServiceKeyword_1_0() { return cServiceKeyword_1_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1_1() { return cFunctionKeyword_1_1; }
		
		//domain=[DomainDefinition]
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }
		
		//[DomainDefinition]
		public CrossReference getDomainDomainDefinitionCrossReference_2_0() { return cDomainDomainDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getDomainDomainDefinitionIDTerminalRuleCall_2_0_1() { return cDomainDomainDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3() { return cColonColonKeyword_3; }
		
		//terminator=[TerminatorDefinition]
		public Assignment getTerminatorAssignment_4() { return cTerminatorAssignment_4; }
		
		//[TerminatorDefinition]
		public CrossReference getTerminatorTerminatorDefinitionCrossReference_4_0() { return cTerminatorTerminatorDefinitionCrossReference_4_0; }
		
		//ID
		public RuleCall getTerminatorTerminatorDefinitionIDTerminalRuleCall_4_0_1() { return cTerminatorTerminatorDefinitionIDTerminalRuleCall_4_0_1; }
		
		//'~>'
		public Keyword getTildeGreaterThanSignKeyword_5() { return cTildeGreaterThanSignKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_7() { return cParameterListParserRuleCall_7; }
		
		//('return' returnType=AbstractTypeReference)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'return'
		public Keyword getReturnKeyword_8_0() { return cReturnKeyword_8_0; }
		
		//returnType=AbstractTypeReference
		public Assignment getReturnTypeAssignment_8_1() { return cReturnTypeAssignment_8_1; }
		
		//AbstractTypeReference
		public RuleCall getReturnTypeAbstractTypeReferenceParserRuleCall_8_1_0() { return cReturnTypeAbstractTypeReferenceParserRuleCall_8_1_0; }
		
		//'is'
		public Keyword getIsKeyword_9() { return cIsKeyword_9; }
		
		//body=CodeBlock
		public Assignment getBodyAssignment_10() { return cBodyAssignment_10; }
		
		//CodeBlock
		public RuleCall getBodyCodeBlockParserRuleCall_10_0() { return cBodyCodeBlockParserRuleCall_10_0; }
		
		//('service' | 'function')?
		public Alternatives getAlternatives_11() { return cAlternatives_11; }
		
		//'service'
		public Keyword getServiceKeyword_11_0() { return cServiceKeyword_11_0; }
		
		//'function'
		public Keyword getFunctionKeyword_11_1() { return cFunctionKeyword_11_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_12() { return cSemicolonKeyword_12; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_13() { return cPragmaListParserRuleCall_13; }
	}
	public class StateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStateTypeSyntaxParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cStateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDomainDomainDefinitionCrossReference_2_0 = (CrossReference)cDomainAssignment_2.eContents().get(0);
		private final RuleCall cDomainDomainDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cDomainDomainDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cColonColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cObjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cObjectObjectDeclarationCrossReference_4_0 = (CrossReference)cObjectAssignment_4.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_4_0.eContents().get(1);
		private final Keyword cFullStopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final RuleCall cParameterListParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cIsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBodyCodeBlockParserRuleCall_9_0 = (RuleCall)cBodyAssignment_9.eContents().get(0);
		private final Keyword cStateKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final RuleCall cPragmaListParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//StateDefinition:
		//    type=StateTypeSyntax? 'state'
		//    domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
		//    ParameterList
		//    'is' body=CodeBlock
		//    'state'?
		//    ';'? PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//type=StateTypeSyntax? 'state'
		//domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
		//ParameterList
		//'is' body=CodeBlock
		//'state'?
		//';'? PragmaList
		public Group getGroup() { return cGroup; }
		
		//type=StateTypeSyntax?
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//StateTypeSyntax
		public RuleCall getTypeStateTypeSyntaxParserRuleCall_0_0() { return cTypeStateTypeSyntaxParserRuleCall_0_0; }
		
		//'state'
		public Keyword getStateKeyword_1() { return cStateKeyword_1; }
		
		//domain=[DomainDefinition]
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }
		
		//[DomainDefinition]
		public CrossReference getDomainDomainDefinitionCrossReference_2_0() { return cDomainDomainDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getDomainDomainDefinitionIDTerminalRuleCall_2_0_1() { return cDomainDomainDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'::'
		public Keyword getColonColonKeyword_3() { return cColonColonKeyword_3; }
		
		//object=[ObjectDeclaration]
		public Assignment getObjectAssignment_4() { return cObjectAssignment_4; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_4_0() { return cObjectObjectDeclarationCrossReference_4_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_4_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_4_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_5() { return cFullStopKeyword_5; }
		
		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_7() { return cParameterListParserRuleCall_7; }
		
		//'is'
		public Keyword getIsKeyword_8() { return cIsKeyword_8; }
		
		//body=CodeBlock
		public Assignment getBodyAssignment_9() { return cBodyAssignment_9; }
		
		//CodeBlock
		public RuleCall getBodyCodeBlockParserRuleCall_9_0() { return cBodyCodeBlockParserRuleCall_9_0; }
		
		//'state'?
		public Keyword getStateKeyword_10() { return cStateKeyword_10; }
		
		//';'?
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_12() { return cPragmaListParserRuleCall_12; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockStatementParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssignStatementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExitStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cReturnStatementParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cDelayStatementParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cRaiseStatementParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cDeleteStatementParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cEraseStatementParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cScheduleStatementParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cCancelTimerStatementParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cGenerateStatementParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cIfStatementParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cCaseStatementParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cForStatementParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cWhileStatementParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPragmaListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////---------------------------------------------------------
		//// Statements
		////---------------------------------------------------------
		//Statement:
		//    (CodeBlockStatement
		//    | AssignStatement
		//    | ExitStatement
		//    | ReturnStatement
		//    | DelayStatement
		//    | RaiseStatement
		//    | DeleteStatement
		//    | EraseStatement
		//    | ScheduleStatement
		//    | CancelTimerStatement
		//    | GenerateStatement
		//    | IfStatement
		//    | CaseStatement
		//    | ForStatement
		//    | WhileStatement)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//(CodeBlockStatement
		//| AssignStatement
		//| ExitStatement
		//| ReturnStatement
		//| DelayStatement
		//| RaiseStatement
		//| DeleteStatement
		//| EraseStatement
		//| ScheduleStatement
		//| CancelTimerStatement
		//| GenerateStatement
		//| IfStatement
		//| CaseStatement
		//| ForStatement
		//| WhileStatement)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//(CodeBlockStatement
		//| AssignStatement
		//| ExitStatement
		//| ReturnStatement
		//| DelayStatement
		//| RaiseStatement
		//| DeleteStatement
		//| EraseStatement
		//| ScheduleStatement
		//| CancelTimerStatement
		//| GenerateStatement
		//| IfStatement
		//| CaseStatement
		//| ForStatement
		//| WhileStatement)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//CodeBlockStatement
		public RuleCall getCodeBlockStatementParserRuleCall_0_0() { return cCodeBlockStatementParserRuleCall_0_0; }
		
		//AssignStatement
		public RuleCall getAssignStatementParserRuleCall_0_1() { return cAssignStatementParserRuleCall_0_1; }
		
		//ExitStatement
		public RuleCall getExitStatementParserRuleCall_0_2() { return cExitStatementParserRuleCall_0_2; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_0_3() { return cReturnStatementParserRuleCall_0_3; }
		
		//DelayStatement
		public RuleCall getDelayStatementParserRuleCall_0_4() { return cDelayStatementParserRuleCall_0_4; }
		
		//RaiseStatement
		public RuleCall getRaiseStatementParserRuleCall_0_5() { return cRaiseStatementParserRuleCall_0_5; }
		
		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_0_6() { return cDeleteStatementParserRuleCall_0_6; }
		
		//EraseStatement
		public RuleCall getEraseStatementParserRuleCall_0_7() { return cEraseStatementParserRuleCall_0_7; }
		
		//ScheduleStatement
		public RuleCall getScheduleStatementParserRuleCall_0_8() { return cScheduleStatementParserRuleCall_0_8; }
		
		//CancelTimerStatement
		public RuleCall getCancelTimerStatementParserRuleCall_0_9() { return cCancelTimerStatementParserRuleCall_0_9; }
		
		//GenerateStatement
		public RuleCall getGenerateStatementParserRuleCall_0_10() { return cGenerateStatementParserRuleCall_0_10; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0_11() { return cIfStatementParserRuleCall_0_11; }
		
		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_0_12() { return cCaseStatementParserRuleCall_0_12; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_0_13() { return cForStatementParserRuleCall_0_13; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_0_14() { return cWhileStatementParserRuleCall_0_14; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_2() { return cPragmaListParserRuleCall_2; }
	}
	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AssignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAssignStatementLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//AssignStatement returns Expression:
		//    Expression ({AssignStatement.lhs=current} ':=' rhs=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression ({AssignStatement.lhs=current} ':=' rhs=Expression)?
		public Group getGroup() { return cGroup; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }
		
		//({AssignStatement.lhs=current} ':=' rhs=Expression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssignStatement.lhs=current}
		public Action getAssignStatementLhsAction_1_0() { return cAssignStatementLhsAction_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//rhs=Expression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Expression
		public RuleCall getRhsExpressionParserRuleCall_1_2_0() { return cRhsExpressionParserRuleCall_1_2_0; }
	}
	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ExitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_2_1_0 = (RuleCall)cConditionAssignment_2_1.eContents().get(0);
		
		//ExitStatement:
		//    {ExitStatement} 'exit' ('when' condition=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ExitStatement} 'exit' ('when' condition=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{ExitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }
		
		//'exit'
		public Keyword getExitKeyword_1() { return cExitKeyword_1; }
		
		//('when' condition=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2_1() { return cConditionAssignment_2_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_1_0() { return cConditionExpressionParserRuleCall_2_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ReturnStatement:
		//    'return' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class DelayStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DelayStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DelayStatement:
		//    'delay' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'delay' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'delay'
		public Keyword getDelayKeyword_0() { return cDelayKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class RaiseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RaiseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExceptionExceptionDeclarationCrossReference_1_0 = (CrossReference)cExceptionAssignment_1.eContents().get(0);
		private final RuleCall cExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1 = (RuleCall)cExceptionExceptionDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//RaiseStatement:
		//    'raise' exception=[ExceptionDeclaration|ScopedName]
		//    ('(' argument=Expression? ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'raise' exception=[ExceptionDeclaration|ScopedName]
		//('(' argument=Expression? ')')?
		public Group getGroup() { return cGroup; }
		
		//'raise'
		public Keyword getRaiseKeyword_0() { return cRaiseKeyword_0; }
		
		//exception=[ExceptionDeclaration|ScopedName]
		public Assignment getExceptionAssignment_1() { return cExceptionAssignment_1; }
		
		//[ExceptionDeclaration|ScopedName]
		public CrossReference getExceptionExceptionDeclarationCrossReference_1_0() { return cExceptionExceptionDeclarationCrossReference_1_0; }
		
		//ScopedName
		public RuleCall getExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1() { return cExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1; }
		
		//('(' argument=Expression? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//argument=Expression?
		public Assignment getArgumentAssignment_2_1() { return cArgumentAssignment_2_1; }
		
		//Expression
		public RuleCall getArgumentExpressionParserRuleCall_2_1_0() { return cArgumentExpressionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DeleteStatement:
		//    'delete' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'delete' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'delete'
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class EraseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.EraseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEraseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//EraseStatement:
		//    'erase' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'erase' value=Expression
		public Group getGroup() { return cGroup; }
		
		//'erase'
		public Keyword getEraseKeyword_0() { return cEraseKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}
	public class ScheduleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ScheduleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimerIdExpressionParserRuleCall_1_0 = (RuleCall)cTimerIdAssignment_1.eContents().get(0);
		private final Assignment cGenerateStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGenerateStatementGenerateStatementParserRuleCall_2_0 = (RuleCall)cGenerateStatementAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeScheduleTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeExpressionParserRuleCall_4_0 = (RuleCall)cTimeAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDeltaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPeriodAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPeriodExpressionParserRuleCall_5_1_0 = (RuleCall)cPeriodAssignment_5_1.eContents().get(0);
		
		//ScheduleStatement:
		//    'schedule' timerId=Expression
		//    generateStatement=GenerateStatement
		//    type=ScheduleType time=Expression ('delta' period=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'schedule' timerId=Expression
		//generateStatement=GenerateStatement
		//type=ScheduleType time=Expression ('delta' period=Expression)?
		public Group getGroup() { return cGroup; }
		
		//'schedule'
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }
		
		//timerId=Expression
		public Assignment getTimerIdAssignment_1() { return cTimerIdAssignment_1; }
		
		//Expression
		public RuleCall getTimerIdExpressionParserRuleCall_1_0() { return cTimerIdExpressionParserRuleCall_1_0; }
		
		//generateStatement=GenerateStatement
		public Assignment getGenerateStatementAssignment_2() { return cGenerateStatementAssignment_2; }
		
		//GenerateStatement
		public RuleCall getGenerateStatementGenerateStatementParserRuleCall_2_0() { return cGenerateStatementGenerateStatementParserRuleCall_2_0; }
		
		//type=ScheduleType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ScheduleType
		public RuleCall getTypeScheduleTypeEnumRuleCall_3_0() { return cTypeScheduleTypeEnumRuleCall_3_0; }
		
		//time=Expression
		public Assignment getTimeAssignment_4() { return cTimeAssignment_4; }
		
		//Expression
		public RuleCall getTimeExpressionParserRuleCall_4_0() { return cTimeExpressionParserRuleCall_4_0; }
		
		//('delta' period=Expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'delta'
		public Keyword getDeltaKeyword_5_0() { return cDeltaKeyword_5_0; }
		
		//period=Expression
		public Assignment getPeriodAssignment_5_1() { return cPeriodAssignment_5_1; }
		
		//Expression
		public RuleCall getPeriodExpressionParserRuleCall_5_1_0() { return cPeriodExpressionParserRuleCall_5_1_0; }
	}
	public class CancelTimerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CancelTimerStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCancelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimerIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimerIdExpressionParserRuleCall_1_0 = (RuleCall)cTimerIdAssignment_1.eContents().get(0);
		
		//CancelTimerStatement:
		//    'cancel' timerId=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'cancel' timerId=Expression
		public Group getGroup() { return cGroup; }
		
		//'cancel'
		public Keyword getCancelKeyword_0() { return cCancelKeyword_0; }
		
		//timerId=Expression
		public Assignment getTimerIdAssignment_1() { return cTimerIdAssignment_1; }
		
		//Expression
		public RuleCall getTimerIdExpressionParserRuleCall_1_0() { return cTimerIdExpressionParserRuleCall_1_0; }
	}
	public class GenerateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.GenerateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cObjectAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cObjectObjectDeclarationCrossReference_1_0_0 = (CrossReference)cObjectAssignment_1_0.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationScopedNameParserRuleCall_1_0_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventDefinitionCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cToKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cToAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cToExpressionParserRuleCall_6_1_0 = (RuleCall)cToAssignment_6_1.eContents().get(0);
		
		//GenerateStatement:
		//    'generate' (object=[ObjectDeclaration|ScopedName] '.')? event=[EventDefinition]
		//    '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ('to' to=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'generate' (object=[ObjectDeclaration|ScopedName] '.')? event=[EventDefinition]
		//'(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ('to' to=Expression)?
		public Group getGroup() { return cGroup; }
		
		//'generate'
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }
		
		//(object=[ObjectDeclaration|ScopedName] '.')?
		public Group getGroup_1() { return cGroup_1; }
		
		//object=[ObjectDeclaration|ScopedName]
		public Assignment getObjectAssignment_1_0() { return cObjectAssignment_1_0; }
		
		//[ObjectDeclaration|ScopedName]
		public CrossReference getObjectObjectDeclarationCrossReference_1_0_0() { return cObjectObjectDeclarationCrossReference_1_0_0; }
		
		//ScopedName
		public RuleCall getObjectObjectDeclarationScopedNameParserRuleCall_1_0_0_1() { return cObjectObjectDeclarationScopedNameParserRuleCall_1_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//event=[EventDefinition]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }
		
		//[EventDefinition]
		public CrossReference getEventEventDefinitionCrossReference_2_0() { return cEventEventDefinitionCrossReference_2_0; }
		
		//ID
		public RuleCall getEventEventDefinitionIDTerminalRuleCall_2_0_1() { return cEventEventDefinitionIDTerminalRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_0_0() { return cArgumentsExpressionParserRuleCall_4_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_4_1_1_0() { return cArgumentsExpressionParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//('to' to=Expression)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'to'
		public Keyword getToKeyword_6_0() { return cToKeyword_6_0; }
		
		//to=Expression
		public Assignment getToAssignment_6_1() { return cToAssignment_6_1; }
		
		//Expression
		public RuleCall getToExpressionParserRuleCall_6_1_0() { return cToExpressionParserRuleCall_6_1_0; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cElseIfsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElseIfsElsifBlockParserRuleCall_4_0 = (RuleCall)cElseIfsAssignment_4.eContents().get(0);
		private final Assignment cElseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElseElseBlockParserRuleCall_5_0 = (RuleCall)cElseAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cIfKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfStatement:
		//    'if' condition=Expression 'then'
		//    statements+=Statement*
		//    elseIfs+=ElsifBlock*
		//    else=ElseBlock?
		//    'end' 'if'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' condition=Expression 'then'
		//statements+=Statement*
		//elseIfs+=ElsifBlock*
		//else=ElseBlock?
		//'end' 'if'?
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//elseIfs+=ElsifBlock*
		public Assignment getElseIfsAssignment_4() { return cElseIfsAssignment_4; }
		
		//ElsifBlock
		public RuleCall getElseIfsElsifBlockParserRuleCall_4_0() { return cElseIfsElsifBlockParserRuleCall_4_0; }
		
		//else=ElseBlock?
		public Assignment getElseAssignment_5() { return cElseAssignment_5; }
		
		//ElseBlock
		public RuleCall getElseElseBlockParserRuleCall_5_0() { return cElseElseBlockParserRuleCall_5_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
		
		//'if'?
		public Keyword getIfKeyword_7() { return cIfKeyword_7; }
	}
	public class ElsifBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ElsifBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElsifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//ElsifBlock:
		//    'elsif' condition=Expression 'then'
		//    statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'elsif' condition=Expression 'then'
		//statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//'elsif'
		public Keyword getElsifKeyword_0() { return cElsifKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}
	public class ElseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ElseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElseBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		//ElseBlock:
		//    {ElseBlock} 'else' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElseBlock} 'else' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{ElseBlock}
		public Action getElseBlockAction_0() { return cElseBlockAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLoopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLoopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WhileStatement:
		//    'while' condition=Expression
		//    'loop'
		//    statements+=Statement*
		//    'end' 'loop'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'while' condition=Expression
		//'loop'
		//statements+=Statement*
		//'end' 'loop'?
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//condition=Expression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_1_0() { return cConditionExpressionParserRuleCall_1_0; }
		
		//'loop'
		public Keyword getLoopKeyword_2() { return cLoopKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
		
		//'loop'?
		public Keyword getLoopKeyword_5() { return cLoopKeyword_5; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlternativesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlternativesCaseAlternativeParserRuleCall_3_0 = (RuleCall)cAlternativesAssignment_3.eContents().get(0);
		private final Assignment cDefaultAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultCaseOthersParserRuleCall_4_0 = (RuleCall)cDefaultAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cCaseKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CaseStatement:
		//    'case' value=Expression 'is'
		//    alternatives+=CaseAlternative*
		//    default=CaseOthers?
		//    'end' 'case'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' value=Expression 'is'
		//alternatives+=CaseAlternative*
		//default=CaseOthers?
		//'end' 'case'?
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//alternatives+=CaseAlternative*
		public Assignment getAlternativesAssignment_3() { return cAlternativesAssignment_3; }
		
		//CaseAlternative
		public RuleCall getAlternativesCaseAlternativeParserRuleCall_3_0() { return cAlternativesCaseAlternativeParserRuleCall_3_0; }
		
		//default=CaseOthers?
		public Assignment getDefaultAssignment_4() { return cDefaultAssignment_4; }
		
		//CaseOthers
		public RuleCall getDefaultCaseOthersParserRuleCall_4_0() { return cDefaultCaseOthersParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
		
		//'case'?
		public Keyword getCaseKeyword_6() { return cCaseKeyword_6; }
	}
	public class CaseAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CaseAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChoicesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChoicesExpressionParserRuleCall_1_0 = (RuleCall)cChoicesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cChoicesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cChoicesExpressionParserRuleCall_2_1_0 = (RuleCall)cChoicesAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//CaseAlternative:
		//    'when' choices+=Expression ('|' choices+=Expression)* '=>' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' choices+=Expression ('|' choices+=Expression)* '=>' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//choices+=Expression
		public Assignment getChoicesAssignment_1() { return cChoicesAssignment_1; }
		
		//Expression
		public RuleCall getChoicesExpressionParserRuleCall_1_0() { return cChoicesExpressionParserRuleCall_1_0; }
		
		//('|' choices+=Expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//choices+=Expression
		public Assignment getChoicesAssignment_2_1() { return cChoicesAssignment_2_1; }
		
		//Expression
		public RuleCall getChoicesExpressionParserRuleCall_2_1_0() { return cChoicesExpressionParserRuleCall_2_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
	}
	public class CaseOthersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CaseOthers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaseOthersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOthersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//CaseOthers:
		//    {CaseOthers} 'when' 'others' '=>' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{CaseOthers} 'when' 'others' '=>' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{CaseOthers}
		public Action getCaseOthersAction_0() { return cCaseOthersAction_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'others'
		public Keyword getOthersKeyword_2() { return cOthersKeyword_2; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableLoopVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReverseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cReverseReverseKeyword_3_0 = (Keyword)cReverseAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cLoopKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cStatementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_6_0 = (RuleCall)cStatementsAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLoopKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForStatement:
		//    'for' variable=LoopVariable 'in' reverse?='reverse'? expression=Expression
		//    'loop'
		//    statements+=Statement*
		//    'end' 'loop'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' variable=LoopVariable 'in' reverse?='reverse'? expression=Expression
		//'loop'
		//statements+=Statement*
		//'end' 'loop'?
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//variable=LoopVariable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//LoopVariable
		public RuleCall getVariableLoopVariableParserRuleCall_1_0() { return cVariableLoopVariableParserRuleCall_1_0; }
		
		//'in'
		public Keyword getInKeyword_2() { return cInKeyword_2; }
		
		//reverse?='reverse'?
		public Assignment getReverseAssignment_3() { return cReverseAssignment_3; }
		
		//'reverse'
		public Keyword getReverseReverseKeyword_3_0() { return cReverseReverseKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
		
		//'loop'
		public Keyword getLoopKeyword_5() { return cLoopKeyword_5; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_6() { return cStatementsAssignment_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_0() { return cStatementsStatementParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
		
		//'loop'?
		public Keyword getLoopKeyword_8() { return cLoopKeyword_8; }
	}
	public class LoopVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LoopVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//LoopVariable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class CodeBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CodeBlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeclareKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cCodeBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////---------------------------------------------------------
		//// Code Blocks
		////---------------------------------------------------------
		//CodeBlockStatement:
		//    'declare'? CodeBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//'declare'? CodeBlock
		public Group getGroup() { return cGroup; }
		
		//'declare'?
		public Keyword getDeclareKeyword_0() { return cDeclareKeyword_0; }
		
		//CodeBlock
		public RuleCall getCodeBlockParserRuleCall_1() { return cCodeBlockParserRuleCall_1; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CodeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCodeBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExceptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExceptionHandlerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExceptionHandlerExceptionHandlerParserRuleCall_4_1_0 = (RuleCall)cExceptionHandlerAssignment_4_1.eContents().get(0);
		private final Assignment cDefaultHandlerAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDefaultHandlerDefaultExceptionHandlerParserRuleCall_4_2_0 = (RuleCall)cDefaultHandlerAssignment_4_2.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CodeBlock:
		//    {CodeBlock}
		//    variables+=VariableDeclaration*
		//    'begin'
		//    statements+=Statement*
		//    ('exception'
		//    exceptionHandler+=ExceptionHandler*
		//    defaultHandler=DefaultExceptionHandler?)?
		//    'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{CodeBlock}
		//variables+=VariableDeclaration*
		//'begin'
		//statements+=Statement*
		//('exception'
		//exceptionHandler+=ExceptionHandler*
		//defaultHandler=DefaultExceptionHandler?)?
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{CodeBlock}
		public Action getCodeBlockAction_0() { return cCodeBlockAction_0; }
		
		//variables+=VariableDeclaration*
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//('exception'
		//exceptionHandler+=ExceptionHandler*
		//defaultHandler=DefaultExceptionHandler?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'exception'
		public Keyword getExceptionKeyword_4_0() { return cExceptionKeyword_4_0; }
		
		//exceptionHandler+=ExceptionHandler*
		public Assignment getExceptionHandlerAssignment_4_1() { return cExceptionHandlerAssignment_4_1; }
		
		//ExceptionHandler
		public RuleCall getExceptionHandlerExceptionHandlerParserRuleCall_4_1_0() { return cExceptionHandlerExceptionHandlerParserRuleCall_4_1_0; }
		
		//defaultHandler=DefaultExceptionHandler?
		public Assignment getDefaultHandlerAssignment_4_2() { return cDefaultHandlerAssignment_4_2; }
		
		//DefaultExceptionHandler
		public RuleCall getDefaultHandlerDefaultExceptionHandlerParserRuleCall_4_2_0() { return cDefaultHandlerDefaultExceptionHandlerParserRuleCall_4_2_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReadOnlyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyReadonlyKeyword_2_0 = (Keyword)cReadOnlyAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAbstractTypeReferenceWithCAParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cPragmaListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//VariableDeclaration:
		//    name=ID ':'
		//    readOnly='readonly'? type=AbstractTypeReferenceWithCA
		//    (':=' expression=Expression)?
		//    ';' PragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':'
		//readOnly='readonly'? type=AbstractTypeReferenceWithCA
		//(':=' expression=Expression)?
		//';' PragmaList
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//readOnly='readonly'?
		public Assignment getReadOnlyAssignment_2() { return cReadOnlyAssignment_2; }
		
		//'readonly'
		public Keyword getReadOnlyReadonlyKeyword_2_0() { return cReadOnlyReadonlyKeyword_2_0; }
		
		//type=AbstractTypeReferenceWithCA
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//AbstractTypeReferenceWithCA
		public RuleCall getTypeAbstractTypeReferenceWithCAParserRuleCall_3_0() { return cTypeAbstractTypeReferenceWithCAParserRuleCall_3_0; }
		
		//(':=' expression=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_4_0() { return cColonEqualsSignKeyword_4_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4_1() { return cExpressionAssignment_4_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_1_0() { return cExpressionExpressionParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//PragmaList
		public RuleCall getPragmaListParserRuleCall_6() { return cPragmaListParserRuleCall_6; }
	}
	public class ExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ExceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExceptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExceptionExceptionDeclarationCrossReference_1_0 = (CrossReference)cExceptionAssignment_1.eContents().get(0);
		private final RuleCall cExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1 = (RuleCall)cExceptionExceptionDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//ExceptionHandler:
		//    'when' exception=[ExceptionDeclaration|ScopedName] '=>' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//'when' exception=[ExceptionDeclaration|ScopedName] '=>' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//'when'
		public Keyword getWhenKeyword_0() { return cWhenKeyword_0; }
		
		//exception=[ExceptionDeclaration|ScopedName]
		public Assignment getExceptionAssignment_1() { return cExceptionAssignment_1; }
		
		//[ExceptionDeclaration|ScopedName]
		public CrossReference getExceptionExceptionDeclarationCrossReference_1_0() { return cExceptionExceptionDeclarationCrossReference_1_0; }
		
		//ScopedName
		public RuleCall getExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1() { return cExceptionExceptionDeclarationScopedNameParserRuleCall_1_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}
	public class DefaultExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DefaultExceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultExceptionHandlerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOthersKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		
		//DefaultExceptionHandler:
		//    {DefaultExceptionHandler} 'when' 'others' '=>' statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefaultExceptionHandler} 'when' 'others' '=>' statements+=Statement*
		public Group getGroup() { return cGroup; }
		
		//{DefaultExceptionHandler}
		public Action getDefaultExceptionHandlerAction_0() { return cDefaultExceptionHandlerAction_0; }
		
		//'when'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//'others'
		public Keyword getOthersKeyword_2() { return cOthersKeyword_2; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
	}
	public class FindConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindCondition");
		private final RuleCall cFindLogicalOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Find Condition Definition
		////---------------------------------------------------------
		//FindCondition returns Expression:
		//    FindLogicalOr;
		@Override public ParserRule getRule() { return rule; }
		
		//FindLogicalOr
		public RuleCall getFindLogicalOrParserRuleCall() { return cFindLogicalOrParserRuleCall; }
	}
	public class FindLogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindLogicalOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindLogicalXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsFindLogicalXorParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//FindLogicalOr returns Expression:
		//    FindLogicalXor ({LogicalOr.lhs=current} 'or' rhs=FindLogicalXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//FindLogicalXor ({LogicalOr.lhs=current} 'or' rhs=FindLogicalXor)*
		public Group getGroup() { return cGroup; }
		
		//FindLogicalXor
		public RuleCall getFindLogicalXorParserRuleCall_0() { return cFindLogicalXorParserRuleCall_0; }
		
		//({LogicalOr.lhs=current} 'or' rhs=FindLogicalXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOr.lhs=current}
		public Action getLogicalOrLhsAction_1_0() { return cLogicalOrLhsAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//rhs=FindLogicalXor
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//FindLogicalXor
		public RuleCall getRhsFindLogicalXorParserRuleCall_1_2_0() { return cRhsFindLogicalXorParserRuleCall_1_2_0; }
	}
	public class FindLogicalXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindLogicalXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindLogicalAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalXorLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cXorKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsFindLogicalAndParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//FindLogicalXor returns Expression:
		//    FindLogicalAnd ({LogicalXor.lhs=current} 'xor' rhs=FindLogicalAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//FindLogicalAnd ({LogicalXor.lhs=current} 'xor' rhs=FindLogicalAnd)*
		public Group getGroup() { return cGroup; }
		
		//FindLogicalAnd
		public RuleCall getFindLogicalAndParserRuleCall_0() { return cFindLogicalAndParserRuleCall_0; }
		
		//({LogicalXor.lhs=current} 'xor' rhs=FindLogicalAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalXor.lhs=current}
		public Action getLogicalXorLhsAction_1_0() { return cLogicalXorLhsAction_1_0; }
		
		//'xor'
		public Keyword getXorKeyword_1_1() { return cXorKeyword_1_1; }
		
		//rhs=FindLogicalAnd
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//FindLogicalAnd
		public RuleCall getRhsFindLogicalAndParserRuleCall_1_2_0() { return cRhsFindLogicalAndParserRuleCall_1_2_0; }
	}
	public class FindLogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindLogicalAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsFindPrimaryParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//FindLogicalAnd returns Expression:
		//    FindPrimary ({LogicalAnd.lhs=current} 'and' rhs=FindPrimary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//FindPrimary ({LogicalAnd.lhs=current} 'and' rhs=FindPrimary)*
		public Group getGroup() { return cGroup; }
		
		//FindPrimary
		public RuleCall getFindPrimaryParserRuleCall_0() { return cFindPrimaryParserRuleCall_0; }
		
		//({LogicalAnd.lhs=current} 'and' rhs=FindPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalAnd.lhs=current}
		public Action getLogicalAndLhsAction_1_0() { return cLogicalAndLhsAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//rhs=FindPrimary
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//FindPrimary
		public RuleCall getRhsFindPrimaryParserRuleCall_1_2_0() { return cRhsFindPrimaryParserRuleCall_1_2_0; }
	}
	public class FindPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFindEqualityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFindUnaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FindPrimary returns Expression:
		//    FindEquality
		//    | FindUnary;
		@Override public ParserRule getRule() { return rule; }
		
		//FindEquality
		//| FindUnary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FindEquality
		public RuleCall getFindEqualityParserRuleCall_0() { return cFindEqualityParserRuleCall_0; }
		
		//FindUnary
		public RuleCall getFindUnaryParserRuleCall_1() { return cFindUnaryParserRuleCall_1; }
	}
	public class FindUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cFindUnaryParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cFindConditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FindUnary returns Expression:
		//    'not' FindUnary
		//    | '(' FindCondition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'not' FindUnary
		//| '(' FindCondition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not' FindUnary
		public Group getGroup_0() { return cGroup_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//FindUnary
		public RuleCall getFindUnaryParserRuleCall_0_1() { return cFindUnaryParserRuleCall_0_1; }
		
		//'(' FindCondition ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//FindCondition
		public RuleCall getFindConditionParserRuleCall_1_1() { return cFindConditionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class FindEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindEquality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindRelationExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsAdditiveExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//FindEquality returns Expression:
		//    FindRelationExp
		//    ({Equality.lhs=current} operator=('=' | '/=') rhs=AdditiveExp)?;
		@Override public ParserRule getRule() { return rule; }
		
		//FindRelationExp
		//({Equality.lhs=current} operator=('=' | '/=') rhs=AdditiveExp)?
		public Group getGroup() { return cGroup; }
		
		//FindRelationExp
		public RuleCall getFindRelationExpParserRuleCall_0() { return cFindRelationExpParserRuleCall_0; }
		
		//({Equality.lhs=current} operator=('=' | '/=') rhs=AdditiveExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.lhs=current}
		public Action getEqualityLhsAction_1_0() { return cEqualityLhsAction_1_0; }
		
		//operator=('=' | '/=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '/=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'/='
		public Keyword getOperatorSolidusEqualsSignKeyword_1_1_0_1() { return cOperatorSolidusEqualsSignKeyword_1_1_0_1; }
		
		//rhs=AdditiveExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//AdditiveExp
		public RuleCall getRhsAdditiveExpParserRuleCall_1_2_0() { return cRhsAdditiveExpParserRuleCall_1_2_0; }
	}
	public class FindRelationExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindRelationExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsAdditiveExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//FindRelationExp returns Expression:
		//    FindName
		//    ({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)?;
		@Override public ParserRule getRule() { return rule; }
		
		//FindName
		//({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)?
		public Group getGroup() { return cGroup; }
		
		//FindName
		public RuleCall getFindNameParserRuleCall_0() { return cFindNameParserRuleCall_0; }
		
		//({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalExp.lhs=current}
		public Action getRelationalExpLhsAction_1_0() { return cRelationalExpLhsAction_1_0; }
		
		//operator=('<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//rhs=AdditiveExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//AdditiveExp
		public RuleCall getRhsAdditiveExpParserRuleCall_1_2_0() { return cRhsAdditiveExpParserRuleCall_1_2_0; }
	}
	public class FindNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindReceiverAttributeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSimpleFeatureCallReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cFeatureAbstractFeatureCrossReference_1_0_2_0 = (CrossReference)cFeatureAssignment_1_0_2.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cIndexedExpressionReceiverAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cBracketsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cBracketsExpressionParserRuleCall_1_1_2_0 = (RuleCall)cBracketsAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		
		//FindName returns Expression:
		//    FindReceiverAttribute
		//    ( {SimpleFeatureCall.receiver = current} '.' feature=[AbstractFeature]
		//    | {IndexedExpression.receiver = current} '[' brackets=Expression ']')*;
		@Override public ParserRule getRule() { return rule; }
		
		//FindReceiverAttribute
		//( {SimpleFeatureCall.receiver = current} '.' feature=[AbstractFeature]
		//| {IndexedExpression.receiver = current} '[' brackets=Expression ']')*
		public Group getGroup() { return cGroup; }
		
		//FindReceiverAttribute
		public RuleCall getFindReceiverAttributeParserRuleCall_0() { return cFindReceiverAttributeParserRuleCall_0; }
		
		//( {SimpleFeatureCall.receiver = current} '.' feature=[AbstractFeature]
		//| {IndexedExpression.receiver = current} '[' brackets=Expression ']')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{SimpleFeatureCall.receiver = current} '.' feature=[AbstractFeature]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{SimpleFeatureCall.receiver = current}
		public Action getSimpleFeatureCallReceiverAction_1_0_0() { return cSimpleFeatureCallReceiverAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//feature=[AbstractFeature]
		public Assignment getFeatureAssignment_1_0_2() { return cFeatureAssignment_1_0_2; }
		
		//[AbstractFeature]
		public CrossReference getFeatureAbstractFeatureCrossReference_1_0_2_0() { return cFeatureAbstractFeatureCrossReference_1_0_2_0; }
		
		//ID
		public RuleCall getFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1() { return cFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1; }
		
		//{IndexedExpression.receiver = current} '[' brackets=Expression ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{IndexedExpression.receiver = current}
		public Action getIndexedExpressionReceiverAction_1_1_0() { return cIndexedExpressionReceiverAction_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }
		
		//brackets=Expression
		public Assignment getBracketsAssignment_1_1_2() { return cBracketsAssignment_1_1_2; }
		
		//Expression
		public RuleCall getBracketsExpressionParserRuleCall_1_1_2_0() { return cBracketsExpressionParserRuleCall_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
	}
	public class FindReceiverAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindReceiverAttribute");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureAttributeDefinitionCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureAttributeDefinitionIDTerminalRuleCall_0_1 = (RuleCall)cFeatureAttributeDefinitionCrossReference_0.eContents().get(1);
		
		//FindReceiverAttribute returns SimpleFeatureCall:
		//    feature=[AttributeDefinition];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[AttributeDefinition]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//[AttributeDefinition]
		public CrossReference getFeatureAttributeDefinitionCrossReference_0() { return cFeatureAttributeDefinitionCrossReference_0; }
		
		//ID
		public RuleCall getFeatureAttributeDefinitionIDTerminalRuleCall_0_1() { return cFeatureAttributeDefinitionIDTerminalRuleCall_0_1; }
	}
	public class ConstExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ConstExpression");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Expression Definition
		////---------------------------------------------------------
		//ConstExpression:
		//    Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Expression");
		private final RuleCall cStreamExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns Expression:
		//    StreamExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//StreamExpression
		public RuleCall getStreamExpressionParserRuleCall() { return cStreamExpressionParserRuleCall; }
	}
	public class StreamExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StreamExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRangeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cStreamExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorStreamOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsRangeExpressionParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//StreamExpression returns Expression:
		//    RangeExpression ({StreamExpression.lhs=current} operator=StreamOperator rhs=RangeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RangeExpression ({StreamExpression.lhs=current} operator=StreamOperator rhs=RangeExpression)*
		public Group getGroup() { return cGroup; }
		
		//RangeExpression
		public RuleCall getRangeExpressionParserRuleCall_0() { return cRangeExpressionParserRuleCall_0; }
		
		//({StreamExpression.lhs=current} operator=StreamOperator rhs=RangeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{StreamExpression.lhs=current}
		public Action getStreamExpressionLhsAction_1_0() { return cStreamExpressionLhsAction_1_0; }
		
		//operator=StreamOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//StreamOperator
		public RuleCall getOperatorStreamOperatorParserRuleCall_1_1_0() { return cOperatorStreamOperatorParserRuleCall_1_1_0; }
		
		//rhs=RangeExpression
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//RangeExpression
		public RuleCall getRhsRangeExpressionParserRuleCall_1_2_0() { return cRhsRangeExpressionParserRuleCall_1_2_0; }
	}
	public class StreamOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StreamOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//StreamOperator:
		//    '<<'
		//    | '>>'
		//    | '<<<'
		//    | '>>>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<<'
		//| '>>'
		//| '<<<'
		//| '>>>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_0() { return cLessThanSignLessThanSignKeyword_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1() { return cGreaterThanSignGreaterThanSignKeyword_1; }
		
		//'<<<'
		public Keyword getLessThanSignLessThanSignLessThanSignKeyword_2() { return cLessThanSignLessThanSignLessThanSignKeyword_2; }
		
		//'>>>'
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_3() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_3; }
	}
	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRangeExpressionFromAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorFullStopFullStopKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cToAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cToLogicalOrParserRuleCall_1_2_0 = (RuleCall)cToAssignment_1_2.eContents().get(0);
		
		//RangeExpression returns Expression:
		//    LogicalOr ({RangeExpression.from=current} operator='..' to=LogicalOr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOr ({RangeExpression.from=current} operator='..' to=LogicalOr)?
		public Group getGroup() { return cGroup; }
		
		//LogicalOr
		public RuleCall getLogicalOrParserRuleCall_0() { return cLogicalOrParserRuleCall_0; }
		
		//({RangeExpression.from=current} operator='..' to=LogicalOr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{RangeExpression.from=current}
		public Action getRangeExpressionFromAction_1_0() { return cRangeExpressionFromAction_1_0; }
		
		//operator='..'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'..'
		public Keyword getOperatorFullStopFullStopKeyword_1_1_0() { return cOperatorFullStopFullStopKeyword_1_1_0; }
		
		//to=LogicalOr
		public Assignment getToAssignment_1_2() { return cToAssignment_1_2; }
		
		//LogicalOr
		public RuleCall getToLogicalOrParserRuleCall_1_2_0() { return cToLogicalOrParserRuleCall_1_2_0; }
	}
	public class LogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LogicalOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalOrLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorOrKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsLogicalXorParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//LogicalOr returns Expression:
		//    LogicalXor ({LogicalOr.lhs=current} operator='or' rhs=LogicalXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalXor ({LogicalOr.lhs=current} operator='or' rhs=LogicalXor)*
		public Group getGroup() { return cGroup; }
		
		//LogicalXor
		public RuleCall getLogicalXorParserRuleCall_0() { return cLogicalXorParserRuleCall_0; }
		
		//({LogicalOr.lhs=current} operator='or' rhs=LogicalXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalOr.lhs=current}
		public Action getLogicalOrLhsAction_1_0() { return cLogicalOrLhsAction_1_0; }
		
		//operator='or'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'or'
		public Keyword getOperatorOrKeyword_1_1_0() { return cOperatorOrKeyword_1_1_0; }
		
		//rhs=LogicalXor
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//LogicalXor
		public RuleCall getRhsLogicalXorParserRuleCall_1_2_0() { return cRhsLogicalXorParserRuleCall_1_2_0; }
	}
	public class LogicalXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LogicalXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalXorLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorXorKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsLogicalAndParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//LogicalXor returns Expression:
		//    LogicalAnd ({LogicalXor.lhs=current} operator='xor' rhs=LogicalAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAnd ({LogicalXor.lhs=current} operator='xor' rhs=LogicalAnd)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAnd
		public RuleCall getLogicalAndParserRuleCall_0() { return cLogicalAndParserRuleCall_0; }
		
		//({LogicalXor.lhs=current} operator='xor' rhs=LogicalAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalXor.lhs=current}
		public Action getLogicalXorLhsAction_1_0() { return cLogicalXorLhsAction_1_0; }
		
		//operator='xor'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'xor'
		public Keyword getOperatorXorKeyword_1_1_0() { return cOperatorXorKeyword_1_1_0; }
		
		//rhs=LogicalAnd
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//LogicalAnd
		public RuleCall getRhsLogicalAndParserRuleCall_1_2_0() { return cRhsLogicalAndParserRuleCall_1_2_0; }
	}
	public class LogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LogicalAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cLogicalAndLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAndKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsEqualityParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//LogicalAnd returns Expression:
		//    Equality ({LogicalAnd.lhs=current} operator='and' rhs=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({LogicalAnd.lhs=current} operator='and' rhs=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({LogicalAnd.lhs=current} operator='and' rhs=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LogicalAnd.lhs=current}
		public Action getLogicalAndLhsAction_1_0() { return cLogicalAndLhsAction_1_0; }
		
		//operator='and'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//'and'
		public Keyword getOperatorAndKeyword_1_1_0() { return cOperatorAndKeyword_1_1_0; }
		
		//rhs=Equality
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//Equality
		public RuleCall getRhsEqualityParserRuleCall_1_2_0() { return cRhsEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsRelationalExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//Equality returns Expression:
		//    RelationalExp ({Equality.lhs=current} operator=('=' | '/=') rhs=RelationalExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExp ({Equality.lhs=current} operator=('=' | '/=') rhs=RelationalExp)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExp
		public RuleCall getRelationalExpParserRuleCall_0() { return cRelationalExpParserRuleCall_0; }
		
		//({Equality.lhs=current} operator=('=' | '/=') rhs=RelationalExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.lhs=current}
		public Action getEqualityLhsAction_1_0() { return cEqualityLhsAction_1_0; }
		
		//operator=('=' | '/=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('=' | '/=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignKeyword_1_1_0_0; }
		
		//'/='
		public Keyword getOperatorSolidusEqualsSignKeyword_1_1_0_1() { return cOperatorSolidusEqualsSignKeyword_1_1_0_1; }
		
		//rhs=RelationalExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//RelationalExp
		public RuleCall getRhsRelationalExpParserRuleCall_1_2_0() { return cRhsRelationalExpParserRuleCall_1_2_0; }
	}
	public class RelationalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RelationalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cRelationalExpLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsAdditiveExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//RelationalExp returns Expression:
		//    AdditiveExp ({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditiveExp ({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)*
		public Group getGroup() { return cGroup; }
		
		//AdditiveExp
		public RuleCall getAdditiveExpParserRuleCall_0() { return cAdditiveExpParserRuleCall_0; }
		
		//({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalExp.lhs=current}
		public Action getRelationalExpLhsAction_1_0() { return cRelationalExpLhsAction_1_0; }
		
		//operator=('<' | '>' | '<=' | '>=')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('<' | '>' | '<=' | '>=')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_0() { return cOperatorLessThanSignKeyword_1_1_0_0; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_1() { return cOperatorGreaterThanSignKeyword_1_1_0_1; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_2; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3; }
		
		//rhs=AdditiveExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//AdditiveExp
		public RuleCall getRhsAdditiveExpParserRuleCall_1_2_0() { return cRhsAdditiveExpParserRuleCall_1_2_0; }
	}
	public class AdditiveExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditiveExpLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorAmpersandKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorUnionKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorNot_inKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsMultExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//AdditiveExp returns Expression:
		//    MultExp ({AdditiveExp.lhs=current} operator=('+' | '-' | '&' | 'union' | 'not_in') rhs=MultExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultExp ({AdditiveExp.lhs=current} operator=('+' | '-' | '&' | 'union' | 'not_in') rhs=MultExp)*
		public Group getGroup() { return cGroup; }
		
		//MultExp
		public RuleCall getMultExpParserRuleCall_0() { return cMultExpParserRuleCall_0; }
		
		//({AdditiveExp.lhs=current} operator=('+' | '-' | '&' | 'union' | 'not_in') rhs=MultExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AdditiveExp.lhs=current}
		public Action getAdditiveExpLhsAction_1_0() { return cAdditiveExpLhsAction_1_0; }
		
		//operator=('+' | '-' | '&' | 'union' | 'not_in')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('+' | '-' | '&' | 'union' | 'not_in')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//'&'
		public Keyword getOperatorAmpersandKeyword_1_1_0_2() { return cOperatorAmpersandKeyword_1_1_0_2; }
		
		//'union'
		public Keyword getOperatorUnionKeyword_1_1_0_3() { return cOperatorUnionKeyword_1_1_0_3; }
		
		//'not_in'
		public Keyword getOperatorNot_inKeyword_1_1_0_4() { return cOperatorNot_inKeyword_1_1_0_4; }
		
		//rhs=MultExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//MultExp
		public RuleCall getRhsMultExpParserRuleCall_1_2_0() { return cRhsMultExpParserRuleCall_1_2_0; }
	}
	public class MultExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.MultExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultExpLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorModKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorAsteriskAsteriskKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorRemKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorIntersectionKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Keyword cOperatorDisunionKeyword_1_1_0_6 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(6);
		private final Assignment cRhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRhsUnaryExpParserRuleCall_1_2_0 = (RuleCall)cRhsAssignment_1_2.eContents().get(0);
		
		//MultExp returns Expression:
		//    UnaryExp ({MultExp.lhs=current} operator=('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
		//    rhs=UnaryExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExp ({MultExp.lhs=current} operator=('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
		//rhs=UnaryExp)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExp
		public RuleCall getUnaryExpParserRuleCall_0() { return cUnaryExpParserRuleCall_0; }
		
		//({MultExp.lhs=current} operator=('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
		//   rhs=UnaryExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultExp.lhs=current}
		public Action getMultExpLhsAction_1_0() { return cMultExpLhsAction_1_0; }
		
		//operator=('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//'mod'
		public Keyword getOperatorModKeyword_1_1_0_2() { return cOperatorModKeyword_1_1_0_2; }
		
		//'**'
		public Keyword getOperatorAsteriskAsteriskKeyword_1_1_0_3() { return cOperatorAsteriskAsteriskKeyword_1_1_0_3; }
		
		//'rem'
		public Keyword getOperatorRemKeyword_1_1_0_4() { return cOperatorRemKeyword_1_1_0_4; }
		
		//'intersection'
		public Keyword getOperatorIntersectionKeyword_1_1_0_5() { return cOperatorIntersectionKeyword_1_1_0_5; }
		
		//'disunion'
		public Keyword getOperatorDisunionKeyword_1_1_0_6() { return cOperatorDisunionKeyword_1_1_0_6; }
		
		//rhs=UnaryExp
		public Assignment getRhsAssignment_1_2() { return cRhsAssignment_1_2; }
		
		//UnaryExp
		public RuleCall getRhsUnaryExpParserRuleCall_1_2_0() { return cRhsUnaryExpParserRuleCall_1_2_0; }
	}
	public class UnaryExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.UnaryExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExpAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandUnaryExpParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cLinkExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//UnaryExp returns Expression:
		//    {UnaryExp}
		//    operator=UnaryOperator operand=UnaryExp
		//    | LinkExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryExp}
		//operator=UnaryOperator operand=UnaryExp
		//| LinkExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryExp}
		//operator=UnaryOperator operand=UnaryExp
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryExp}
		public Action getUnaryExpAction_0_0() { return cUnaryExpAction_0_0; }
		
		//operator=UnaryOperator
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_0_1_0() { return cOperatorUnaryOperatorParserRuleCall_0_1_0; }
		
		//operand=UnaryExp
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//UnaryExp
		public RuleCall getOperandUnaryExpParserRuleCall_0_2_0() { return cOperandUnaryExpParserRuleCall_0_2_0; }
		
		//LinkExpression
		public RuleCall getLinkExpressionParserRuleCall_1() { return cLinkExpressionParserRuleCall_1; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNotKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAbsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOperator:
		//    '-'
		//    | '+'
		//    | 'not'
		//    | 'abs';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		//| '+'
		//| 'not'
		//| 'abs'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }
		
		//'not'
		public Keyword getNotKeyword_2() { return cNotKeyword_2; }
		
		//'abs'
		public Keyword getAbsKeyword_3() { return cAbsKeyword_3; }
	}
	public class LinkExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LinkExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNavigateExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLinkExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeLinkTypeEnumRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Assignment cLhsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLhsNavigateExpressionParserRuleCall_1_2_0 = (RuleCall)cLhsAssignment_1_2.eContents().get(0);
		private final Assignment cNavigationAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNavigationRelationshipNavigationParserRuleCall_1_3_0 = (RuleCall)cNavigationAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cRhsAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cRhsNavigateExpressionParserRuleCall_1_4_0_0 = (RuleCall)cRhsAssignment_1_4_0.eContents().get(0);
		private final Group cGroup_1_4_1 = (Group)cGroup_1_4.eContents().get(1);
		private final Keyword cUsingKeyword_1_4_1_0 = (Keyword)cGroup_1_4_1.eContents().get(0);
		private final Assignment cAssocAssignment_1_4_1_1 = (Assignment)cGroup_1_4_1.eContents().get(1);
		private final RuleCall cAssocNavigateExpressionParserRuleCall_1_4_1_1_0 = (RuleCall)cAssocAssignment_1_4_1_1.eContents().get(0);
		
		//LinkExpression returns Expression:
		//    NavigateExpression
		//    | {LinkExpression} type=LinkType
		//    lhs=NavigateExpression
		//    navigation=RelationshipNavigation
		//    (=> rhs=NavigateExpression ('using' assoc=NavigateExpression)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NavigateExpression
		//| {LinkExpression} type=LinkType
		//lhs=NavigateExpression
		//navigation=RelationshipNavigation
		//(=> rhs=NavigateExpression ('using' assoc=NavigateExpression)?)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NavigateExpression
		public RuleCall getNavigateExpressionParserRuleCall_0() { return cNavigateExpressionParserRuleCall_0; }
		
		//{LinkExpression} type=LinkType
		//   lhs=NavigateExpression
		//   navigation=RelationshipNavigation
		//   (=> rhs=NavigateExpression ('using' assoc=NavigateExpression)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{LinkExpression}
		public Action getLinkExpressionAction_1_0() { return cLinkExpressionAction_1_0; }
		
		//type=LinkType
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//LinkType
		public RuleCall getTypeLinkTypeEnumRuleCall_1_1_0() { return cTypeLinkTypeEnumRuleCall_1_1_0; }
		
		//lhs=NavigateExpression
		public Assignment getLhsAssignment_1_2() { return cLhsAssignment_1_2; }
		
		//NavigateExpression
		public RuleCall getLhsNavigateExpressionParserRuleCall_1_2_0() { return cLhsNavigateExpressionParserRuleCall_1_2_0; }
		
		//navigation=RelationshipNavigation
		public Assignment getNavigationAssignment_1_3() { return cNavigationAssignment_1_3; }
		
		//RelationshipNavigation
		public RuleCall getNavigationRelationshipNavigationParserRuleCall_1_3_0() { return cNavigationRelationshipNavigationParserRuleCall_1_3_0; }
		
		//(=> rhs=NavigateExpression ('using' assoc=NavigateExpression)?)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//=> rhs=NavigateExpression
		public Assignment getRhsAssignment_1_4_0() { return cRhsAssignment_1_4_0; }
		
		//NavigateExpression
		public RuleCall getRhsNavigateExpressionParserRuleCall_1_4_0_0() { return cRhsNavigateExpressionParserRuleCall_1_4_0_0; }
		
		//('using' assoc=NavigateExpression)?
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }
		
		//'using'
		public Keyword getUsingKeyword_1_4_1_0() { return cUsingKeyword_1_4_1_0; }
		
		//assoc=NavigateExpression
		public Assignment getAssocAssignment_1_4_1_1() { return cAssocAssignment_1_4_1_1; }
		
		//NavigateExpression
		public RuleCall getAssocNavigateExpressionParserRuleCall_1_4_1_1_0() { return cAssocNavigateExpressionParserRuleCall_1_4_1_1_0; }
	}
	public class NavigateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExtendedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cNavigateExpressionLhsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cNavigationAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cNavigationRelationshipNavigationParserRuleCall_1_1_0_1_0 = (RuleCall)cNavigationAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cWhereAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cWhereFindConditionParserRuleCall_1_1_0_2_1_0 = (RuleCall)cWhereAssignment_1_1_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_2_2 = (Keyword)cGroup_1_1_0_2.eContents().get(2);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cWithKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cWithAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cWithExtendedExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cWithAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Assignment cNavigationAssignment_1_1_1_3 = (Assignment)cGroup_1_1_1.eContents().get(3);
		private final RuleCall cNavigationRelationshipNavigationParserRuleCall_1_1_1_3_0 = (RuleCall)cNavigationAssignment_1_1_1_3.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cAlternatives_1_1.eContents().get(2);
		private final Keyword cOrdered_byKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cOrderAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cOrderSortOrderParserRuleCall_1_1_2_1_0 = (RuleCall)cOrderAssignment_1_1_2_1.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cAlternatives_1_1.eContents().get(3);
		private final Keyword cReverse_ordered_byKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cReverseOrderAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cReverseOrderSortOrderParserRuleCall_1_1_3_1_0 = (RuleCall)cReverseOrderAssignment_1_1_3_1.eContents().get(0);
		
		//NavigateExpression returns Expression:
		//    ExtendedExpression
		//    ({NavigateExpression.lhs=current}
		//        ( '->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
		//        | 'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
		//        | 'ordered_by' order=SortOrder
		//        | 'reverse_ordered_by' reverseOrder=SortOrder))*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExtendedExpression
		//({NavigateExpression.lhs=current}
		//    ( '->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
		//    | 'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
		//    | 'ordered_by' order=SortOrder
		//    | 'reverse_ordered_by' reverseOrder=SortOrder))*
		public Group getGroup() { return cGroup; }
		
		//ExtendedExpression
		public RuleCall getExtendedExpressionParserRuleCall_0() { return cExtendedExpressionParserRuleCall_0; }
		
		//({NavigateExpression.lhs=current}
		//    ( '->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
		//    | 'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
		//    | 'ordered_by' order=SortOrder
		//    | 'reverse_ordered_by' reverseOrder=SortOrder))*
		public Group getGroup_1() { return cGroup_1; }
		
		//{NavigateExpression.lhs=current}
		public Action getNavigateExpressionLhsAction_1_0() { return cNavigateExpressionLhsAction_1_0; }
		
		//( '->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
		//| 'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
		//| 'ordered_by' order=SortOrder
		//| 'reverse_ordered_by' reverseOrder=SortOrder)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_0_0() { return cHyphenMinusGreaterThanSignKeyword_1_1_0_0; }
		
		//navigation=RelationshipNavigation
		public Assignment getNavigationAssignment_1_1_0_1() { return cNavigationAssignment_1_1_0_1; }
		
		//RelationshipNavigation
		public RuleCall getNavigationRelationshipNavigationParserRuleCall_1_1_0_1_0() { return cNavigationRelationshipNavigationParserRuleCall_1_1_0_1_0; }
		
		//('(' where=FindCondition? ')')?
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0_2_0() { return cLeftParenthesisKeyword_1_1_0_2_0; }
		
		//where=FindCondition?
		public Assignment getWhereAssignment_1_1_0_2_1() { return cWhereAssignment_1_1_0_2_1; }
		
		//FindCondition
		public RuleCall getWhereFindConditionParserRuleCall_1_1_0_2_1_0() { return cWhereFindConditionParserRuleCall_1_1_0_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_0_2_2() { return cRightParenthesisKeyword_1_1_0_2_2; }
		
		//'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'with'
		public Keyword getWithKeyword_1_1_1_0() { return cWithKeyword_1_1_1_0; }
		
		//^with=ExtendedExpression
		public Assignment getWithAssignment_1_1_1_1() { return cWithAssignment_1_1_1_1; }
		
		//ExtendedExpression
		public RuleCall getWithExtendedExpressionParserRuleCall_1_1_1_1_0() { return cWithExtendedExpressionParserRuleCall_1_1_1_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_1_1_2; }
		
		//navigation=RelationshipNavigation
		public Assignment getNavigationAssignment_1_1_1_3() { return cNavigationAssignment_1_1_1_3; }
		
		//RelationshipNavigation
		public RuleCall getNavigationRelationshipNavigationParserRuleCall_1_1_1_3_0() { return cNavigationRelationshipNavigationParserRuleCall_1_1_1_3_0; }
		
		//'ordered_by' order=SortOrder
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//'ordered_by'
		public Keyword getOrdered_byKeyword_1_1_2_0() { return cOrdered_byKeyword_1_1_2_0; }
		
		//order=SortOrder
		public Assignment getOrderAssignment_1_1_2_1() { return cOrderAssignment_1_1_2_1; }
		
		//SortOrder
		public RuleCall getOrderSortOrderParserRuleCall_1_1_2_1_0() { return cOrderSortOrderParserRuleCall_1_1_2_1_0; }
		
		//'reverse_ordered_by' reverseOrder=SortOrder
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'reverse_ordered_by'
		public Keyword getReverse_ordered_byKeyword_1_1_3_0() { return cReverse_ordered_byKeyword_1_1_3_0; }
		
		//reverseOrder=SortOrder
		public Assignment getReverseOrderAssignment_1_1_3_1() { return cReverseOrderAssignment_1_1_3_1; }
		
		//SortOrder
		public RuleCall getReverseOrderSortOrderParserRuleCall_1_1_3_1_0() { return cReverseOrderSortOrderParserRuleCall_1_1_3_1_0; }
	}
	public class ExtendedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ExtendedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFindExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExtendedExpression returns Expression:
		//    PostfixExpression
		//    | CreateExpression
		//    | FindExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//PostfixExpression
		//| CreateExpression
		//| FindExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PostfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }
		
		//CreateExpression
		public RuleCall getCreateExpressionParserRuleCall_1() { return cCreateExpressionParserRuleCall_1; }
		
		//FindExpression
		public RuleCall getFindExpressionParserRuleCall_2() { return cFindExpressionParserRuleCall_2; }
	}
	public class SortOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SortOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSortOrderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cComponentsSortOrderComponentParserRuleCall_2_0_0 = (RuleCall)cComponentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cComponentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cComponentsSortOrderComponentParserRuleCall_2_1_1_0 = (RuleCall)cComponentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SortOrder:
		//    {SortOrder} '('
		//    (components+=SortOrderComponent
		//    (',' components+=SortOrderComponent)*)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SortOrder} '('
		//(components+=SortOrderComponent
		//(',' components+=SortOrderComponent)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{SortOrder}
		public Action getSortOrderAction_0() { return cSortOrderAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(components+=SortOrderComponent
		//(',' components+=SortOrderComponent)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//components+=SortOrderComponent
		public Assignment getComponentsAssignment_2_0() { return cComponentsAssignment_2_0; }
		
		//SortOrderComponent
		public RuleCall getComponentsSortOrderComponentParserRuleCall_2_0_0() { return cComponentsSortOrderComponentParserRuleCall_2_0_0; }
		
		//(',' components+=SortOrderComponent)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//components+=SortOrderComponent
		public Assignment getComponentsAssignment_2_1_1() { return cComponentsAssignment_2_1_1; }
		
		//SortOrderComponent
		public RuleCall getComponentsSortOrderComponentParserRuleCall_2_1_1_0() { return cComponentsSortOrderComponentParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SortOrderComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SortOrderComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReverseAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReverseReverseKeyword_0_0 = (Keyword)cReverseAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureSortOrderFeatureParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//SortOrderComponent:
		//    reverse?='reverse'? feature=SortOrderFeature;
		@Override public ParserRule getRule() { return rule; }
		
		//reverse?='reverse'? feature=SortOrderFeature
		public Group getGroup() { return cGroup; }
		
		//reverse?='reverse'?
		public Assignment getReverseAssignment_0() { return cReverseAssignment_0; }
		
		//'reverse'
		public Keyword getReverseReverseKeyword_0_0() { return cReverseReverseKeyword_0_0; }
		
		//feature=SortOrderFeature
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//SortOrderFeature
		public RuleCall getFeatureSortOrderFeatureParserRuleCall_1_0() { return cFeatureSortOrderFeatureParserRuleCall_1_0; }
	}
	public class SortOrderFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SortOrderFeature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSortOrderFeatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureAbstractFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cSimpleFeatureCallReceiverAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cFeatureAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cFeatureAbstractFeatureCrossReference_2_2_0 = (CrossReference)cFeatureAssignment_2_2.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureIDTerminalRuleCall_2_2_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_2_2_0.eContents().get(1);
		
		//SortOrderFeature returns SimpleFeatureCall:
		//    {SortOrderFeature} feature=[AbstractFeature]
		//    ({SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SortOrderFeature} feature=[AbstractFeature]
		//({SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature])*
		public Group getGroup() { return cGroup; }
		
		//{SortOrderFeature}
		public Action getSortOrderFeatureAction_0() { return cSortOrderFeatureAction_0; }
		
		//feature=[AbstractFeature]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[AbstractFeature]
		public CrossReference getFeatureAbstractFeatureCrossReference_1_0() { return cFeatureAbstractFeatureCrossReference_1_0; }
		
		//ID
		public RuleCall getFeatureAbstractFeatureIDTerminalRuleCall_1_0_1() { return cFeatureAbstractFeatureIDTerminalRuleCall_1_0_1; }
		
		//({SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature])*
		public Group getGroup_2() { return cGroup_2; }
		
		//{SimpleFeatureCall.receiver=current}
		public Action getSimpleFeatureCallReceiverAction_2_0() { return cSimpleFeatureCallReceiverAction_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }
		
		//feature=[AbstractFeature]
		public Assignment getFeatureAssignment_2_2() { return cFeatureAssignment_2_2; }
		
		//[AbstractFeature]
		public CrossReference getFeatureAbstractFeatureCrossReference_2_2_0() { return cFeatureAbstractFeatureCrossReference_2_2_0; }
		
		//ID
		public RuleCall getFeatureAbstractFeatureIDTerminalRuleCall_2_2_0_1() { return cFeatureAbstractFeatureIDTerminalRuleCall_2_2_0_1; }
	}
	public class CreateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CreateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUniqueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cUniqueUniqueKeyword_1_0 = (Keyword)cUniqueAssignment_1.eContents().get(0);
		private final Assignment cObjectAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cObjectObjectDeclarationCrossReference_2_0 = (CrossReference)cObjectAssignment_2.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cArgumentsCreateArgumentParserRuleCall_4_0_0 = (RuleCall)cArgumentsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cArgumentsCreateArgumentParserRuleCall_4_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CreateExpression:
		//    'create' unique?='unique'? object=[ObjectDeclaration] '('
		//    (arguments+=CreateArgument (',' arguments+=CreateArgument)*)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' unique?='unique'? object=[ObjectDeclaration] '('
		//(arguments+=CreateArgument (',' arguments+=CreateArgument)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//unique?='unique'?
		public Assignment getUniqueAssignment_1() { return cUniqueAssignment_1; }
		
		//'unique'
		public Keyword getUniqueUniqueKeyword_1_0() { return cUniqueUniqueKeyword_1_0; }
		
		//object=[ObjectDeclaration]
		public Assignment getObjectAssignment_2() { return cObjectAssignment_2; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_2_0() { return cObjectObjectDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_2_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(arguments+=CreateArgument (',' arguments+=CreateArgument)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//arguments+=CreateArgument
		public Assignment getArgumentsAssignment_4_0() { return cArgumentsAssignment_4_0; }
		
		//CreateArgument
		public RuleCall getArgumentsCreateArgumentParserRuleCall_4_0_0() { return cArgumentsCreateArgumentParserRuleCall_4_0_0; }
		
		//(',' arguments+=CreateArgument)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//arguments+=CreateArgument
		public Assignment getArgumentsAssignment_4_1_1() { return cArgumentsAssignment_4_1_1; }
		
		//CreateArgument
		public RuleCall getArgumentsCreateArgumentParserRuleCall_4_1_1_0() { return cArgumentsCreateArgumentParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CreateArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CreateArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAttributeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cAttributeAttributeDefinitionCrossReference_0_0_0 = (CrossReference)cAttributeAssignment_0_0.eContents().get(0);
		private final RuleCall cAttributeAttributeDefinitionIDTerminalRuleCall_0_0_0_1 = (RuleCall)cAttributeAttributeDefinitionCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCurrent_StateKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCurrentStateAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cCurrentStateStateDeclarationCrossReference_1_2_0 = (CrossReference)cCurrentStateAssignment_1_2.eContents().get(0);
		private final RuleCall cCurrentStateStateDeclarationIDTerminalRuleCall_1_2_0_1 = (RuleCall)cCurrentStateStateDeclarationCrossReference_1_2_0.eContents().get(1);
		
		//CreateArgument:
		//    attribute=[AttributeDefinition] '=>' value=Expression
		//    | 'Current_State' '=>' currentState=[StateDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[AttributeDefinition] '=>' value=Expression
		//| 'Current_State' '=>' currentState=[StateDeclaration]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attribute=[AttributeDefinition] '=>' value=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//attribute=[AttributeDefinition]
		public Assignment getAttributeAssignment_0_0() { return cAttributeAssignment_0_0; }
		
		//[AttributeDefinition]
		public CrossReference getAttributeAttributeDefinitionCrossReference_0_0_0() { return cAttributeAttributeDefinitionCrossReference_0_0_0; }
		
		//ID
		public RuleCall getAttributeAttributeDefinitionIDTerminalRuleCall_0_0_0_1() { return cAttributeAttributeDefinitionIDTerminalRuleCall_0_0_0_1; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }
		
		//value=Expression
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_0_2_0() { return cValueExpressionParserRuleCall_0_2_0; }
		
		//'Current_State' '=>' currentState=[StateDeclaration]
		public Group getGroup_1() { return cGroup_1; }
		
		//'Current_State'
		public Keyword getCurrent_StateKeyword_1_0() { return cCurrent_StateKeyword_1_0; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//currentState=[StateDeclaration]
		public Assignment getCurrentStateAssignment_1_2() { return cCurrentStateAssignment_1_2; }
		
		//[StateDeclaration]
		public CrossReference getCurrentStateStateDeclarationCrossReference_1_2_0() { return cCurrentStateStateDeclarationCrossReference_1_2_0; }
		
		//ID
		public RuleCall getCurrentStateStateDeclarationIDTerminalRuleCall_1_2_0_1() { return cCurrentStateStateDeclarationIDTerminalRuleCall_1_2_0_1; }
	}
	public class FindExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFindTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionPostfixNoActionCallExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWhereAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWhereFindConditionParserRuleCall_3_0 = (RuleCall)cWhereAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FindExpression:
		//    type=FindType expression=PostfixNoActionCallExpression
		//    '(' where=FindCondition? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=FindType expression=PostfixNoActionCallExpression
		//'(' where=FindCondition? ')'
		public Group getGroup() { return cGroup; }
		
		//type=FindType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//FindType
		public RuleCall getTypeFindTypeEnumRuleCall_0_0() { return cTypeFindTypeEnumRuleCall_0_0; }
		
		//expression=PostfixNoActionCallExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//PostfixNoActionCallExpression
		public RuleCall getExpressionPostfixNoActionCallExpressionParserRuleCall_1_0() { return cExpressionPostfixNoActionCallExpressionParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//where=FindCondition?
		public Assignment getWhereAssignment_3() { return cWhereAssignment_3; }
		
		//FindCondition
		public RuleCall getWhereFindConditionParserRuleCall_3_0() { return cWhereFindConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PostfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cActionCallReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1_0_2_0 = (Assignment)cGroup_1_0_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_0_2_0_0 = (RuleCall)cArgumentsAssignment_1_0_2_0.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cGroup_1_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_1_0 = (Keyword)cGroup_1_0_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_0_2_1_1 = (Assignment)cGroup_1_0_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_0_2_1_1_0 = (RuleCall)cArgumentsAssignment_1_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cSimpleFeatureCallReceiverAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final CrossReference cFeatureAbstractFeatureCrossReference_1_1_2_0 = (CrossReference)cFeatureAssignment_1_1_2.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureIDTerminalRuleCall_1_1_2_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_1_1_2_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cTerminatorActionCallReceiverAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cTildeGreaterThanSignKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cTerminatorActionAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final CrossReference cTerminatorActionAbstractFeatureCrossReference_1_2_2_0 = (CrossReference)cTerminatorActionAssignment_1_2_2.eContents().get(0);
		private final RuleCall cTerminatorActionAbstractFeatureIDTerminalRuleCall_1_2_2_0_1 = (RuleCall)cTerminatorActionAbstractFeatureCrossReference_1_2_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_2_4 = (Group)cGroup_1_2.eContents().get(4);
		private final Assignment cArgumentsAssignment_1_2_4_0 = (Assignment)cGroup_1_2_4.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_4_0_0 = (RuleCall)cArgumentsAssignment_1_2_4_0.eContents().get(0);
		private final Group cGroup_1_2_4_1 = (Group)cGroup_1_2_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_4_1_0 = (Keyword)cGroup_1_2_4_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_4_1_1 = (Assignment)cGroup_1_2_4_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_2_4_1_1_0 = (RuleCall)cArgumentsAssignment_1_2_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_5 = (Keyword)cGroup_1_2.eContents().get(5);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cIndexedExpressionReceiverAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cBracketsAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cBracketsExpressionParserRuleCall_1_3_2_0 = (RuleCall)cBracketsAssignment_1_3_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cCharacteristicCallReceiverAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cApostropheKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final Assignment cCharacteristicAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final CrossReference cCharacteristicCharacteristicCrossReference_1_4_2_0 = (CrossReference)cCharacteristicAssignment_1_4_2.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicCharacteristicIDParserRuleCall_1_4_2_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_1_4_2_0.eContents().get(1);
		private final Group cGroup_1_4_3 = (Group)cGroup_1_4.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_4_3_0 = (Keyword)cGroup_1_4_3.eContents().get(0);
		private final Group cGroup_1_4_3_1 = (Group)cGroup_1_4_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_4_3_1_0 = (Assignment)cGroup_1_4_3_1.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_4_3_1_0_0 = (RuleCall)cArgumentsAssignment_1_4_3_1_0.eContents().get(0);
		private final Group cGroup_1_4_3_1_1 = (Group)cGroup_1_4_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_4_3_1_1_0 = (Keyword)cGroup_1_4_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_4_3_1_1_1 = (Assignment)cGroup_1_4_3_1_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_1_4_3_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_4_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4_3_2 = (Keyword)cGroup_1_4_3.eContents().get(2);
		
		//PostfixExpression returns Expression:
		//    PrimaryExpression
		//    ( {ActionCall.receiver=current} =>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//    | {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//    | {TerminatorActionCall.receiver=current} '~>' terminatorAction=[AbstractFeature] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//    | {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//    | {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic|CharacteristicID] (=> '('
		//        (arguments+=Expression (',' arguments+=Expression)*)?
		//      ')')?
		//    )*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression
		//( {ActionCall.receiver=current} =>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//| {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//| {TerminatorActionCall.receiver=current} '~>' terminatorAction=[AbstractFeature] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//| {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//| {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic|CharacteristicID] (=> '('
		//    (arguments+=Expression (',' arguments+=Expression)*)?
		//  ')')?
		//)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//( {ActionCall.receiver=current} =>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//| {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//| {TerminatorActionCall.receiver=current} '~>' terminatorAction=[AbstractFeature] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		//| {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//| {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic|CharacteristicID] (=> '('
		//    (arguments+=Expression (',' arguments+=Expression)*)?
		//  ')')?
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{ActionCall.receiver=current} =>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{ActionCall.receiver=current}
		public Action getActionCallReceiverAction_1_0_0() { return cActionCallReceiverAction_1_0_0; }
		
		//=>'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_0_2_0() { return cArgumentsAssignment_1_0_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_0_2_0_0() { return cArgumentsExpressionParserRuleCall_1_0_2_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_2_1_0() { return cCommaKeyword_1_0_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_0_2_1_1() { return cArgumentsAssignment_1_0_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_0_2_1_1_0() { return cArgumentsExpressionParserRuleCall_1_0_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }
		
		//{SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{SimpleFeatureCall.receiver=current}
		public Action getSimpleFeatureCallReceiverAction_1_1_0() { return cSimpleFeatureCallReceiverAction_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//feature=[AbstractFeature]
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }
		
		//[AbstractFeature]
		public CrossReference getFeatureAbstractFeatureCrossReference_1_1_2_0() { return cFeatureAbstractFeatureCrossReference_1_1_2_0; }
		
		//ID
		public RuleCall getFeatureAbstractFeatureIDTerminalRuleCall_1_1_2_0_1() { return cFeatureAbstractFeatureIDTerminalRuleCall_1_1_2_0_1; }
		
		//{TerminatorActionCall.receiver=current} '~>' terminatorAction=[AbstractFeature] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{TerminatorActionCall.receiver=current}
		public Action getTerminatorActionCallReceiverAction_1_2_0() { return cTerminatorActionCallReceiverAction_1_2_0; }
		
		//'~>'
		public Keyword getTildeGreaterThanSignKeyword_1_2_1() { return cTildeGreaterThanSignKeyword_1_2_1; }
		
		//terminatorAction=[AbstractFeature]
		public Assignment getTerminatorActionAssignment_1_2_2() { return cTerminatorActionAssignment_1_2_2; }
		
		//[AbstractFeature]
		public CrossReference getTerminatorActionAbstractFeatureCrossReference_1_2_2_0() { return cTerminatorActionAbstractFeatureCrossReference_1_2_2_0; }
		
		//ID
		public RuleCall getTerminatorActionAbstractFeatureIDTerminalRuleCall_1_2_2_0_1() { return cTerminatorActionAbstractFeatureIDTerminalRuleCall_1_2_2_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2_3() { return cLeftParenthesisKeyword_1_2_3; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_1_2_4() { return cGroup_1_2_4; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_4_0() { return cArgumentsAssignment_1_2_4_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_4_0_0() { return cArgumentsExpressionParserRuleCall_1_2_4_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_1_2_4_1() { return cGroup_1_2_4_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_4_1_0() { return cCommaKeyword_1_2_4_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_2_4_1_1() { return cArgumentsAssignment_1_2_4_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_2_4_1_1_0() { return cArgumentsExpressionParserRuleCall_1_2_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2_5() { return cRightParenthesisKeyword_1_2_5; }
		
		//{IndexedExpression.receiver=current} '[' brackets=Expression ']'
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//{IndexedExpression.receiver=current}
		public Action getIndexedExpressionReceiverAction_1_3_0() { return cIndexedExpressionReceiverAction_1_3_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3_1() { return cLeftSquareBracketKeyword_1_3_1; }
		
		//brackets=Expression
		public Assignment getBracketsAssignment_1_3_2() { return cBracketsAssignment_1_3_2; }
		
		//Expression
		public RuleCall getBracketsExpressionParserRuleCall_1_3_2_0() { return cBracketsExpressionParserRuleCall_1_3_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3_3() { return cRightSquareBracketKeyword_1_3_3; }
		
		//{CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic|CharacteristicID] (=> '('
		//       (arguments+=Expression (',' arguments+=Expression)*)?
		//     ')')?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//{CharacteristicCall.receiver=current}
		public Action getCharacteristicCallReceiverAction_1_4_0() { return cCharacteristicCallReceiverAction_1_4_0; }
		
		//'\''
		public Keyword getApostropheKeyword_1_4_1() { return cApostropheKeyword_1_4_1; }
		
		//characteristic=[Characteristic|CharacteristicID]
		public Assignment getCharacteristicAssignment_1_4_2() { return cCharacteristicAssignment_1_4_2; }
		
		//[Characteristic|CharacteristicID]
		public CrossReference getCharacteristicCharacteristicCrossReference_1_4_2_0() { return cCharacteristicCharacteristicCrossReference_1_4_2_0; }
		
		//CharacteristicID
		public RuleCall getCharacteristicCharacteristicCharacteristicIDParserRuleCall_1_4_2_0_1() { return cCharacteristicCharacteristicCharacteristicIDParserRuleCall_1_4_2_0_1; }
		
		//(=> '('
		//       (arguments+=Expression (',' arguments+=Expression)*)?
		//     ')')?
		public Group getGroup_1_4_3() { return cGroup_1_4_3; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_1_4_3_0() { return cLeftParenthesisKeyword_1_4_3_0; }
		
		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_1_4_3_1() { return cGroup_1_4_3_1; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_4_3_1_0() { return cArgumentsAssignment_1_4_3_1_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_4_3_1_0_0() { return cArgumentsExpressionParserRuleCall_1_4_3_1_0_0; }
		
		//(',' arguments+=Expression)*
		public Group getGroup_1_4_3_1_1() { return cGroup_1_4_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_4_3_1_1_0() { return cCommaKeyword_1_4_3_1_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_1_4_3_1_1_1() { return cArgumentsAssignment_1_4_3_1_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_1_4_3_1_1_1_0() { return cArgumentsExpressionParserRuleCall_1_4_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4_3_2() { return cRightParenthesisKeyword_1_4_3_2; }
	}
	public class CharacteristicIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CharacteristicID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDeltaKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//CharacteristicID:
		//        ID | 'range' |'delta';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'range' |'delta'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'range'
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//'delta'
		public Keyword getDeltaKeyword_2() { return cDeltaKeyword_2; }
	}
	public class PostfixNoActionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PostfixNoActionCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryNoActionCallExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cSimpleFeatureCallReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cFeatureAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cFeatureAbstractFeatureCrossReference_1_0_2_0 = (CrossReference)cFeatureAssignment_1_0_2.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cIndexedExpressionReceiverAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cBracketsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cBracketsExpressionParserRuleCall_1_1_2_0 = (RuleCall)cBracketsAssignment_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cCharacteristicCallReceiverAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cApostropheKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cCharacteristicAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final CrossReference cCharacteristicCharacteristicCrossReference_1_2_2_0 = (CrossReference)cCharacteristicAssignment_1_2_2.eContents().get(0);
		private final RuleCall cCharacteristicCharacteristicIDTerminalRuleCall_1_2_2_0_1 = (RuleCall)cCharacteristicCharacteristicCrossReference_1_2_2_0.eContents().get(1);
		
		//PostfixNoActionCallExpression returns Expression:
		//    PrimaryNoActionCallExpression
		//    ( {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//    | {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//    | {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic])*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryNoActionCallExpression
		//( {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//| {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//| {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic])*
		public Group getGroup() { return cGroup; }
		
		//PrimaryNoActionCallExpression
		public RuleCall getPrimaryNoActionCallExpressionParserRuleCall_0() { return cPrimaryNoActionCallExpressionParserRuleCall_0; }
		
		//( {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		//| {IndexedExpression.receiver=current} '[' brackets=Expression ']'
		//| {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic])*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{SimpleFeatureCall.receiver=current}
		public Action getSimpleFeatureCallReceiverAction_1_0_0() { return cSimpleFeatureCallReceiverAction_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }
		
		//feature=[AbstractFeature]
		public Assignment getFeatureAssignment_1_0_2() { return cFeatureAssignment_1_0_2; }
		
		//[AbstractFeature]
		public CrossReference getFeatureAbstractFeatureCrossReference_1_0_2_0() { return cFeatureAbstractFeatureCrossReference_1_0_2_0; }
		
		//ID
		public RuleCall getFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1() { return cFeatureAbstractFeatureIDTerminalRuleCall_1_0_2_0_1; }
		
		//{IndexedExpression.receiver=current} '[' brackets=Expression ']'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{IndexedExpression.receiver=current}
		public Action getIndexedExpressionReceiverAction_1_1_0() { return cIndexedExpressionReceiverAction_1_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_1() { return cLeftSquareBracketKeyword_1_1_1; }
		
		//brackets=Expression
		public Assignment getBracketsAssignment_1_1_2() { return cBracketsAssignment_1_1_2; }
		
		//Expression
		public RuleCall getBracketsExpressionParserRuleCall_1_1_2_0() { return cBracketsExpressionParserRuleCall_1_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1_3() { return cRightSquareBracketKeyword_1_1_3; }
		
		//{CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic]
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//{CharacteristicCall.receiver=current}
		public Action getCharacteristicCallReceiverAction_1_2_0() { return cCharacteristicCallReceiverAction_1_2_0; }
		
		//'\''
		public Keyword getApostropheKeyword_1_2_1() { return cApostropheKeyword_1_2_1; }
		
		//characteristic=[Characteristic]
		public Assignment getCharacteristicAssignment_1_2_2() { return cCharacteristicAssignment_1_2_2; }
		
		//[Characteristic]
		public CrossReference getCharacteristicCharacteristicCrossReference_1_2_2_0() { return cCharacteristicCharacteristicCrossReference_1_2_2_0; }
		
		//ID
		public RuleCall getCharacteristicCharacteristicIDTerminalRuleCall_1_2_2_0_1() { return cCharacteristicCharacteristicIDTerminalRuleCall_1_2_2_0_1; }
	}
	public class PrimaryNoActionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PrimaryNoActionCallExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleFeatureCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeNameExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryNoActionCallExpression returns Expression:
		//    Literal
		//    | ParenthesisedExpression
		//    | SimpleFeatureCall
		//    | TypeNameExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal
		//| ParenthesisedExpression
		//| SimpleFeatureCall
		//| TypeNameExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//ParenthesisedExpression
		public RuleCall getParenthesisedExpressionParserRuleCall_1() { return cParenthesisedExpressionParserRuleCall_1; }
		
		//SimpleFeatureCall
		public RuleCall getSimpleFeatureCallParserRuleCall_2() { return cSimpleFeatureCallParserRuleCall_2; }
		
		//TypeNameExpression
		public RuleCall getTypeNameExpressionParserRuleCall_3() { return cTypeNameExpressionParserRuleCall_3; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParenthesisedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimpleFeatureCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeNameExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimaryExpression returns Expression:
		//    Literal
		//    | ParenthesisedExpression
		//    | SimpleFeatureCall
		//    | TypeNameExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal
		//| ParenthesisedExpression
		//| SimpleFeatureCall
		//| TypeNameExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//ParenthesisedExpression
		public RuleCall getParenthesisedExpressionParserRuleCall_1() { return cParenthesisedExpressionParserRuleCall_1; }
		
		//SimpleFeatureCall
		public RuleCall getSimpleFeatureCallParserRuleCall_2() { return cSimpleFeatureCallParserRuleCall_2; }
		
		//TypeNameExpression
		public RuleCall getTypeNameExpressionParserRuleCall_3() { return cTypeNameExpressionParserRuleCall_3; }
	}
	public class TypeNameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TypeNameExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstanceTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbstractCollectionTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeNameExpression returns Expression:
		//    InstanceTypeReference
		//    | AbstractCollectionTypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//InstanceTypeReference
		//| AbstractCollectionTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InstanceTypeReference
		public RuleCall getInstanceTypeReferenceParserRuleCall_0() { return cInstanceTypeReferenceParserRuleCall_0; }
		
		//AbstractCollectionTypeReference
		public RuleCall getAbstractCollectionTypeReferenceParserRuleCall_1() { return cAbstractCollectionTypeReferenceParserRuleCall_1; }
	}
	public class SimpleFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SimpleFeatureCall");
		private final Assignment cFeatureAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cFeatureAbstractFeatureCrossReference_0 = (CrossReference)cFeatureAssignment.eContents().get(0);
		private final RuleCall cFeatureAbstractFeatureScopedNameParserRuleCall_0_1 = (RuleCall)cFeatureAbstractFeatureCrossReference_0.eContents().get(1);
		
		//SimpleFeatureCall:
		//    feature=[AbstractFeature|ScopedName];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[AbstractFeature|ScopedName]
		public Assignment getFeatureAssignment() { return cFeatureAssignment; }
		
		//[AbstractFeature|ScopedName]
		public CrossReference getFeatureAbstractFeatureCrossReference_0() { return cFeatureAbstractFeatureCrossReference_0; }
		
		//ScopedName
		public RuleCall getFeatureAbstractFeatureScopedNameParserRuleCall_0_1() { return cFeatureAbstractFeatureScopedNameParserRuleCall_0_1; }
	}
	public class ParenthesisedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ParenthesisedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Action cStructureAggregateExpressionElementsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParenthesisedExpression returns Expression:
		//    '(' Expression
		//        ({StructureAggregateExpression.elements+=current} (',' elements+=Expression)+)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression
		//    ({StructureAggregateExpression.elements+=current} (',' elements+=Expression)+)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//({StructureAggregateExpression.elements+=current} (',' elements+=Expression)+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//{StructureAggregateExpression.elements+=current}
		public Action getStructureAggregateExpressionElementsAction_2_0() { return cStructureAggregateExpressionElementsAction_2_0; }
		
		//(',' elements+=Expression)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCharacterLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDurationLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimestampLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNullLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFlushLiteralParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cThisLiteralParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cConsoleLiteralParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cEndlLiteralParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLineNoLiteralParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cFileNameLiteralParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		////---------------------------------------------------------
		//// Literals
		////---------------------------------------------------------
		//Literal returns Expression:
		//    IntegerLiteral
		//    | RealLiteral
		//    | CharacterLiteral
		//    | StringLiteral
		//    | DurationLiteral
		//    | TimestampLiteral
		//    | BooleanLiteral
		//    | NullLiteral
		//    | FlushLiteral
		//    | ThisLiteral
		//    | ConsoleLiteral
		//    | EndlLiteral
		//    | LineNoLiteral
		//    | FileNameLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral
		//| RealLiteral
		//| CharacterLiteral
		//| StringLiteral
		//| DurationLiteral
		//| TimestampLiteral
		//| BooleanLiteral
		//| NullLiteral
		//| FlushLiteral
		//| ThisLiteral
		//| ConsoleLiteral
		//| EndlLiteral
		//| LineNoLiteral
		//| FileNameLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
		
		//CharacterLiteral
		public RuleCall getCharacterLiteralParserRuleCall_2() { return cCharacterLiteralParserRuleCall_2; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
		
		//DurationLiteral
		public RuleCall getDurationLiteralParserRuleCall_4() { return cDurationLiteralParserRuleCall_4; }
		
		//TimestampLiteral
		public RuleCall getTimestampLiteralParserRuleCall_5() { return cTimestampLiteralParserRuleCall_5; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_6() { return cBooleanLiteralParserRuleCall_6; }
		
		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_7() { return cNullLiteralParserRuleCall_7; }
		
		//FlushLiteral
		public RuleCall getFlushLiteralParserRuleCall_8() { return cFlushLiteralParserRuleCall_8; }
		
		//ThisLiteral
		public RuleCall getThisLiteralParserRuleCall_9() { return cThisLiteralParserRuleCall_9; }
		
		//ConsoleLiteral
		public RuleCall getConsoleLiteralParserRuleCall_10() { return cConsoleLiteralParserRuleCall_10; }
		
		//EndlLiteral
		public RuleCall getEndlLiteralParserRuleCall_11() { return cEndlLiteralParserRuleCall_11; }
		
		//LineNoLiteral
		public RuleCall getLineNoLiteralParserRuleCall_12() { return cLineNoLiteralParserRuleCall_12; }
		
		//FileNameLiteral
		public RuleCall getFileNameLiteralParserRuleCall_13() { return cFileNameLiteralParserRuleCall_13; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.RealLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RealLiteral:
		//    value=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=REAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_0() { return cValueREALTerminalRuleCall_0; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//    value=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INTEGER
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0() { return cValueINTEGERTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class CharacterLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CharacterLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCHARTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CharacterLiteral:
		//    value=CHAR;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CHAR
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CHAR
		public RuleCall getValueCHARTerminalRuleCall_0() { return cValueCHARTerminalRuleCall_0; }
	}
	public class DurationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DurationLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDURATIONTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DurationLiteral:
		//    value=DURATION;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DURATION
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DURATION
		public RuleCall getValueDURATIONTerminalRuleCall_0() { return cValueDURATIONTerminalRuleCall_0; }
	}
	public class TimestampLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TimestampLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTIMESTAMPTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//TimestampLiteral:
		//    value=TIMESTAMP;
		@Override public ParserRule getRule() { return rule; }
		
		//value=TIMESTAMP
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//TIMESTAMP
		public RuleCall getValueTIMESTAMPTerminalRuleCall_0() { return cValueTIMESTAMPTerminalRuleCall_0; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BooleanLiteral:
		//    value?='true' | {BooleanLiteral} 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//value?='true' | {BooleanLiteral} 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?='true'
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//{BooleanLiteral} 'false'
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanLiteral}
		public Action getBooleanLiteralAction_1_0() { return cBooleanLiteralAction_1_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NullLiteral:
		//    {NullLiteral} 'null';
		@Override public ParserRule getRule() { return rule; }
		
		//{NullLiteral} 'null'
		public Group getGroup() { return cGroup; }
		
		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class FlushLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FlushLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFlushLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFlushKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FlushLiteral:
		//    {FlushLiteral} 'flush';
		@Override public ParserRule getRule() { return rule; }
		
		//{FlushLiteral} 'flush'
		public Group getGroup() { return cGroup; }
		
		//{FlushLiteral}
		public Action getFlushLiteralAction_0() { return cFlushLiteralAction_0; }
		
		//'flush'
		public Keyword getFlushKeyword_1() { return cFlushKeyword_1; }
	}
	public class ThisLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ThisLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThisLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ThisLiteral:
		//    {ThisLiteral} 'this';
		@Override public ParserRule getRule() { return rule; }
		
		//{ThisLiteral} 'this'
		public Group getGroup() { return cGroup; }
		
		//{ThisLiteral}
		public Action getThisLiteralAction_0() { return cThisLiteralAction_0; }
		
		//'this'
		public Keyword getThisKeyword_1() { return cThisKeyword_1; }
	}
	public class ConsoleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ConsoleLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConsoleLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConsoleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConsoleLiteral:
		//    {ConsoleLiteral} 'console';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConsoleLiteral} 'console'
		public Group getGroup() { return cGroup; }
		
		//{ConsoleLiteral}
		public Action getConsoleLiteralAction_0() { return cConsoleLiteralAction_0; }
		
		//'console'
		public Keyword getConsoleKeyword_1() { return cConsoleKeyword_1; }
	}
	public class EndlLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.EndlLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndlLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEndlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EndlLiteral:
		//    {EndlLiteral} 'endl';
		@Override public ParserRule getRule() { return rule; }
		
		//{EndlLiteral} 'endl'
		public Group getGroup() { return cGroup; }
		
		//{EndlLiteral}
		public Action getEndlLiteralAction_0() { return cEndlLiteralAction_0; }
		
		//'endl'
		public Keyword getEndlKeyword_1() { return cEndlKeyword_1; }
	}
	public class LineNoLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LineNoLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLineNoLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLINEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LineNoLiteral:
		//    {LineNoLiteral} '#LINE#';
		@Override public ParserRule getRule() { return rule; }
		
		//{LineNoLiteral} '#LINE#'
		public Group getGroup() { return cGroup; }
		
		//{LineNoLiteral}
		public Action getLineNoLiteralAction_0() { return cLineNoLiteralAction_0; }
		
		//'#LINE#'
		public Keyword getLINEKeyword_1() { return cLINEKeyword_1; }
	}
	public class FileNameLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FileNameLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFileNameLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFILEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FileNameLiteral:
		//    {FileNameLiteral} '#FILE#';
		@Override public ParserRule getRule() { return rule; }
		
		//{FileNameLiteral} '#FILE#'
		public Group getGroup() { return cGroup; }
		
		//{FileNameLiteral}
		public Action getFileNameLiteralAction_0() { return cFileNameLiteralAction_0; }
		
		//'#FILE#'
		public Keyword getFILEKeyword_1() { return cFILEKeyword_1; }
	}
	
	public class VisibilityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Visibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPublicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPublicPublicKeyword_0_0 = (Keyword)cPublicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPrivateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPrivatePrivateKeyword_1_0 = (Keyword)cPrivateEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Visibility:
		//    public | private;
		public EnumRule getRule() { return rule; }
		
		//public | private
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//public
		public EnumLiteralDeclaration getPublicEnumLiteralDeclaration_0() { return cPublicEnumLiteralDeclaration_0; }
		
		public Keyword getPublicPublicKeyword_0_0() { return cPublicPublicKeyword_0_0; }
		
		//private
		public EnumLiteralDeclaration getPrivateEnumLiteralDeclaration_1() { return cPrivateEnumLiteralDeclaration_1; }
		
		public Keyword getPrivatePrivateKeyword_1_0() { return cPrivatePrivateKeyword_1_0; }
	}
	public class EventTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.EventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAssignerEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAssignerAssignerKeyword_0_0 = (Keyword)cAssignerEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCreationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCreationCreationKeyword_1_0 = (Keyword)cCreationEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EventType:
		//    assigner
		//    | creation;
		public EnumRule getRule() { return rule; }
		
		//assigner
		//| creation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//assigner
		public EnumLiteralDeclaration getAssignerEnumLiteralDeclaration_0() { return cAssignerEnumLiteralDeclaration_0; }
		
		public Keyword getAssignerAssignerKeyword_0_0() { return cAssignerAssignerKeyword_0_0; }
		
		//creation
		public EnumLiteralDeclaration getCreationEnumLiteralDeclaration_1() { return cCreationEnumLiteralDeclaration_1; }
		
		public Keyword getCreationCreationKeyword_1_0() { return cCreationCreationKeyword_1_0; }
	}
	public class TransTableTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TransTableType");
		private final EnumLiteralDeclaration cAssignerEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAssignerAssignerKeyword_0 = (Keyword)cAssignerEnumLiteralDeclaration.eContents().get(0);
		
		//enum TransTableType:
		//    assigner;
		public EnumRule getRule() { return rule; }
		
		//assigner
		public EnumLiteralDeclaration getAssignerEnumLiteralDeclaration() { return cAssignerEnumLiteralDeclaration; }
		
		public Keyword getAssignerAssignerKeyword_0() { return cAssignerAssignerKeyword_0; }
	}
	public class ParameterModeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ParameterMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterMode:
		//    in
		//    | out;
		public EnumRule getRule() { return rule; }
		
		//in
		//| out
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	public class ConditionalityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Conditionality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnconditionallyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnconditionallyUnconditionallyKeyword_0_0 = (Keyword)cUnconditionallyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConditionallyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConditionallyConditionallyKeyword_1_0 = (Keyword)cConditionallyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Conditionality:
		//    unconditionally
		//    | conditionally;
		public EnumRule getRule() { return rule; }
		
		//unconditionally
		//| conditionally
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unconditionally
		public EnumLiteralDeclaration getUnconditionallyEnumLiteralDeclaration_0() { return cUnconditionallyEnumLiteralDeclaration_0; }
		
		public Keyword getUnconditionallyUnconditionallyKeyword_0_0() { return cUnconditionallyUnconditionallyKeyword_0_0; }
		
		//conditionally
		public EnumLiteralDeclaration getConditionallyEnumLiteralDeclaration_1() { return cConditionallyEnumLiteralDeclaration_1; }
		
		public Keyword getConditionallyConditionallyKeyword_1_0() { return cConditionallyConditionallyKeyword_1_0; }
	}
	public class MultiplicityElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.Multiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOneOneKeyword_0_0 = (Keyword)cOneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cManyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cManyManyKeyword_1_0 = (Keyword)cManyEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Multiplicity:
		//    one
		//    | many;
		public EnumRule getRule() { return rule; }
		
		//one
		//| many
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_0() { return cOneEnumLiteralDeclaration_0; }
		
		public Keyword getOneOneKeyword_0_0() { return cOneOneKeyword_0_0; }
		
		//many
		public EnumLiteralDeclaration getManyEnumLiteralDeclaration_1() { return cManyEnumLiteralDeclaration_1; }
		
		public Keyword getManyManyKeyword_1_0() { return cManyManyKeyword_1_0; }
	}
	public class LinkTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.LinkType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLinkEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLinkLinkKeyword_0_0 = (Keyword)cLinkEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnlinkEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnlinkUnlinkKeyword_1_0 = (Keyword)cUnlinkEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LinkType:
		//    link
		//    | unlink;
		public EnumRule getRule() { return rule; }
		
		//link
		//| unlink
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//link
		public EnumLiteralDeclaration getLinkEnumLiteralDeclaration_0() { return cLinkEnumLiteralDeclaration_0; }
		
		public Keyword getLinkLinkKeyword_0_0() { return cLinkLinkKeyword_0_0; }
		
		//unlink
		public EnumLiteralDeclaration getUnlinkEnumLiteralDeclaration_1() { return cUnlinkEnumLiteralDeclaration_1; }
		
		public Keyword getUnlinkUnlinkKeyword_1_0() { return cUnlinkUnlinkKeyword_1_0; }
	}
	public class ScheduleTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ScheduleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAtAtKeyword_0_0 = (Keyword)cAtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDelayEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDelayDelayKeyword_1_0 = (Keyword)cDelayEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ScheduleType:
		//    at
		//    | delay;
		public EnumRule getRule() { return rule; }
		
		//at
		//| delay
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//at
		public EnumLiteralDeclaration getAtEnumLiteralDeclaration_0() { return cAtEnumLiteralDeclaration_0; }
		
		public Keyword getAtAtKeyword_0_0() { return cAtAtKeyword_0_0; }
		
		//delay
		public EnumLiteralDeclaration getDelayEnumLiteralDeclaration_1() { return cDelayEnumLiteralDeclaration_1; }
		
		public Keyword getDelayDelayKeyword_1_0() { return cDelayDelayKeyword_1_0; }
	}
	public class FindTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.FindType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFindEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFindFindKeyword_0_0 = (Keyword)cFindEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFindEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFindFind_allKeyword_1_0 = (Keyword)cFindEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFind_oneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFind_oneFind_oneKeyword_2_0 = (Keyword)cFind_oneEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFind_onlyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFind_onlyFind_onlyKeyword_3_0 = (Keyword)cFind_onlyEnumLiteralDeclaration_3.eContents().get(0);
		
		///* SuppressWarnings[all] */
		//enum FindType:
		//    find
		//    | find='find_all'
		//    | find_one
		//    | find_only;
		public EnumRule getRule() { return rule; }
		
		//find
		//| find='find_all'
		//| find_one
		//| find_only
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//find
		public EnumLiteralDeclaration getFindEnumLiteralDeclaration_0() { return cFindEnumLiteralDeclaration_0; }
		
		public Keyword getFindFindKeyword_0_0() { return cFindFindKeyword_0_0; }
		
		//find='find_all'
		public EnumLiteralDeclaration getFindEnumLiteralDeclaration_1() { return cFindEnumLiteralDeclaration_1; }
		
		//'find_all'
		public Keyword getFindFind_allKeyword_1_0() { return cFindFind_allKeyword_1_0; }
		
		//find_one
		public EnumLiteralDeclaration getFind_oneEnumLiteralDeclaration_2() { return cFind_oneEnumLiteralDeclaration_2; }
		
		public Keyword getFind_oneFind_oneKeyword_2_0() { return cFind_oneFind_oneKeyword_2_0; }
		
		//find_only
		public EnumLiteralDeclaration getFind_onlyEnumLiteralDeclaration_3() { return cFind_onlyEnumLiteralDeclaration_3; }
		
		public Keyword getFind_onlyFind_onlyKeyword_3_0() { return cFind_onlyFind_onlyKeyword_3_0; }
	}
	
	private final MaslModelElements pMaslModel;
	private final AbstractTopLevelElementElements pAbstractTopLevelElement;
	private final ScopedNameElements pScopedName;
	private final PragmaListElements pPragmaList;
	private final PragmaElements pPragma;
	private final PragmaValueElements pPragmaValue;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final VisibilityElements eVisibility;
	private final ProjectDefinitionElements pProjectDefinition;
	private final DomainDefinitionElements pDomainDefinition;
	private final BuiltinLibraryDefinitionElements pBuiltinLibraryDefinition;
	private final BuiltinTypeDeclarationElements pBuiltinTypeDeclaration;
	private final CharacteristicElements pCharacteristic;
	private final TypeParameterElements pTypeParameter;
	private final AbstractTypeReferenceWithRangeElements pAbstractTypeReferenceWithRange;
	private final RangeTypeReferenceElements pRangeTypeReference;
	private final ExceptionDeclarationElements pExceptionDeclaration;
	private final TypeForwardDeclarationElements pTypeForwardDeclaration;
	private final TypeDeclarationElements pTypeDeclaration;
	private final AbstractTypeDefinitionElements pAbstractTypeDefinition;
	private final ConstrainedTypeDefinitionElements pConstrainedTypeDefinition;
	private final AbstractTypeConstraintElements pAbstractTypeConstraint;
	private final RangeConstraintElements pRangeConstraint;
	private final DeltaConstraintElements pDeltaConstraint;
	private final DigitsConstraintElements pDigitsConstraint;
	private final StructureTypeDefinitionElements pStructureTypeDefinition;
	private final StructureComponentDefinitionElements pStructureComponentDefinition;
	private final EnumerationTypeDefinitionElements pEnumerationTypeDefinition;
	private final EnumeratorElements pEnumerator;
	private final UnconstrainedArrayDefinitionElements pUnconstrainedArrayDefinition;
	private final AbstractTypeReferenceElements pAbstractTypeReference;
	private final AbstractTypeReferenceWithCAElements pAbstractTypeReferenceWithCA;
	private final InstanceTypeReferenceElements pInstanceTypeReference;
	private final NamedTypeReferenceElements pNamedTypeReference;
	private final ConstrainedArrayTypeReferenceElements pConstrainedArrayTypeReference;
	private final AbstractCollectionTypeReferenceElements pAbstractCollectionTypeReference;
	private final SequenceTypeReferenceElements pSequenceTypeReference;
	private final ArrayTypeReferenceElements pArrayTypeReference;
	private final SetTypeReferenceElements pSetTypeReference;
	private final BagTypeReferenceElements pBagTypeReference;
	private final DictionaryTypeReferenceElements pDictionaryTypeReference;
	private final AbstractDictKeyTypeRefElements pAbstractDictKeyTypeRef;
	private final TerminatorDefinitionElements pTerminatorDefinition;
	private final TerminatorServiceDeclarationElements pTerminatorServiceDeclaration;
	private final ObjectDeclarationElements pObjectDeclaration;
	private final ObjectDefinitionElements pObjectDefinition;
	private final AttributeDefinitionElements pAttributeDefinition;
	private final AttributeReferentialElements pAttributeReferential;
	private final ObjectOrRoleNameElements pObjectOrRoleName;
	private final ObjectServiceDeclarationElements pObjectServiceDeclaration;
	private final IdentifierDefinitionElements pIdentifierDefinition;
	private final EventDefinitionElements pEventDefinition;
	private final EventTypeElements eEventType;
	private final StateDeclarationElements pStateDeclaration;
	private final StateTypeSyntaxElements pStateTypeSyntax;
	private final TransitionTableElements pTransitionTable;
	private final TransTableTypeElements eTransTableType;
	private final TransitionRowElements pTransitionRow;
	private final TransitionOptionElements pTransitionOption;
	private final DomainServiceDeclarationElements pDomainServiceDeclaration;
	private final ParameterModeElements eParameterMode;
	private final RelationshipDefinitionElements pRelationshipDefinition;
	private final RegularRelationshipDefinitionElements pRegularRelationshipDefinition;
	private final AssocRelationshipDefinitionElements pAssocRelationshipDefinition;
	private final RelationshipEndElements pRelationshipEnd;
	private final SubtypeRelationshipDefinitionElements pSubtypeRelationshipDefinition;
	private final ConditionalityElements eConditionality;
	private final MultiplicityElements eMultiplicity;
	private final RelationshipNavigationElements pRelationshipNavigation;
	private final DomainServiceDefinitionElements pDomainServiceDefinition;
	private final ObjectServiceDefinitionElements pObjectServiceDefinition;
	private final TerminatorServiceDefinitionElements pTerminatorServiceDefinition;
	private final StateDefinitionElements pStateDefinition;
	private final StatementElements pStatement;
	private final AssignStatementElements pAssignStatement;
	private final ExitStatementElements pExitStatement;
	private final ReturnStatementElements pReturnStatement;
	private final DelayStatementElements pDelayStatement;
	private final RaiseStatementElements pRaiseStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final EraseStatementElements pEraseStatement;
	private final LinkTypeElements eLinkType;
	private final ScheduleStatementElements pScheduleStatement;
	private final CancelTimerStatementElements pCancelTimerStatement;
	private final ScheduleTypeElements eScheduleType;
	private final GenerateStatementElements pGenerateStatement;
	private final IfStatementElements pIfStatement;
	private final ElsifBlockElements pElsifBlock;
	private final ElseBlockElements pElseBlock;
	private final WhileStatementElements pWhileStatement;
	private final CaseStatementElements pCaseStatement;
	private final CaseAlternativeElements pCaseAlternative;
	private final CaseOthersElements pCaseOthers;
	private final ForStatementElements pForStatement;
	private final LoopVariableElements pLoopVariable;
	private final CodeBlockStatementElements pCodeBlockStatement;
	private final CodeBlockElements pCodeBlock;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExceptionHandlerElements pExceptionHandler;
	private final DefaultExceptionHandlerElements pDefaultExceptionHandler;
	private final FindConditionElements pFindCondition;
	private final FindLogicalOrElements pFindLogicalOr;
	private final FindLogicalXorElements pFindLogicalXor;
	private final FindLogicalAndElements pFindLogicalAnd;
	private final FindPrimaryElements pFindPrimary;
	private final FindUnaryElements pFindUnary;
	private final FindEqualityElements pFindEquality;
	private final FindRelationExpElements pFindRelationExp;
	private final FindNameElements pFindName;
	private final FindReceiverAttributeElements pFindReceiverAttribute;
	private final ConstExpressionElements pConstExpression;
	private final ExpressionElements pExpression;
	private final StreamExpressionElements pStreamExpression;
	private final StreamOperatorElements pStreamOperator;
	private final RangeExpressionElements pRangeExpression;
	private final LogicalOrElements pLogicalOr;
	private final LogicalXorElements pLogicalXor;
	private final LogicalAndElements pLogicalAnd;
	private final EqualityElements pEquality;
	private final RelationalExpElements pRelationalExp;
	private final AdditiveExpElements pAdditiveExp;
	private final MultExpElements pMultExp;
	private final UnaryExpElements pUnaryExp;
	private final UnaryOperatorElements pUnaryOperator;
	private final LinkExpressionElements pLinkExpression;
	private final NavigateExpressionElements pNavigateExpression;
	private final ExtendedExpressionElements pExtendedExpression;
	private final SortOrderElements pSortOrder;
	private final SortOrderComponentElements pSortOrderComponent;
	private final SortOrderFeatureElements pSortOrderFeature;
	private final CreateExpressionElements pCreateExpression;
	private final CreateArgumentElements pCreateArgument;
	private final FindExpressionElements pFindExpression;
	private final FindTypeElements eFindType;
	private final PostfixExpressionElements pPostfixExpression;
	private final CharacteristicIDElements pCharacteristicID;
	private final PostfixNoActionCallExpressionElements pPostfixNoActionCallExpression;
	private final PrimaryNoActionCallExpressionElements pPrimaryNoActionCallExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final TypeNameExpressionElements pTypeNameExpression;
	private final SimpleFeatureCallElements pSimpleFeatureCall;
	private final ParenthesisedExpressionElements pParenthesisedExpression;
	private final LiteralElements pLiteral;
	private final RealLiteralElements pRealLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final StringLiteralElements pStringLiteral;
	private final CharacterLiteralElements pCharacterLiteral;
	private final DurationLiteralElements pDurationLiteral;
	private final TimestampLiteralElements pTimestampLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NullLiteralElements pNullLiteral;
	private final FlushLiteralElements pFlushLiteral;
	private final ThisLiteralElements pThisLiteral;
	private final ConsoleLiteralElements pConsoleLiteral;
	private final EndlLiteralElements pEndlLiteral;
	private final LineNoLiteralElements pLineNoLiteral;
	private final FileNameLiteralElements pFileNameLiteral;
	private final TerminalRule tID;
	private final TerminalRule tREAL;
	private final TerminalRule tINTEGER;
	private final TerminalRule tSTRING;
	private final TerminalRule tCHAR;
	private final TerminalRule tDURATION;
	private final TerminalRule tTIMESTAMP;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MASLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pMaslModel = new MaslModelElements();
		this.pAbstractTopLevelElement = new AbstractTopLevelElementElements();
		this.pScopedName = new ScopedNameElements();
		this.pPragmaList = new PragmaListElements();
		this.pPragma = new PragmaElements();
		this.pPragmaValue = new PragmaValueElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.eVisibility = new VisibilityElements();
		this.pProjectDefinition = new ProjectDefinitionElements();
		this.pDomainDefinition = new DomainDefinitionElements();
		this.pBuiltinLibraryDefinition = new BuiltinLibraryDefinitionElements();
		this.pBuiltinTypeDeclaration = new BuiltinTypeDeclarationElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pTypeParameter = new TypeParameterElements();
		this.pAbstractTypeReferenceWithRange = new AbstractTypeReferenceWithRangeElements();
		this.pRangeTypeReference = new RangeTypeReferenceElements();
		this.pExceptionDeclaration = new ExceptionDeclarationElements();
		this.pTypeForwardDeclaration = new TypeForwardDeclarationElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pAbstractTypeDefinition = new AbstractTypeDefinitionElements();
		this.pConstrainedTypeDefinition = new ConstrainedTypeDefinitionElements();
		this.pAbstractTypeConstraint = new AbstractTypeConstraintElements();
		this.pRangeConstraint = new RangeConstraintElements();
		this.pDeltaConstraint = new DeltaConstraintElements();
		this.pDigitsConstraint = new DigitsConstraintElements();
		this.pStructureTypeDefinition = new StructureTypeDefinitionElements();
		this.pStructureComponentDefinition = new StructureComponentDefinitionElements();
		this.pEnumerationTypeDefinition = new EnumerationTypeDefinitionElements();
		this.pEnumerator = new EnumeratorElements();
		this.pUnconstrainedArrayDefinition = new UnconstrainedArrayDefinitionElements();
		this.pAbstractTypeReference = new AbstractTypeReferenceElements();
		this.pAbstractTypeReferenceWithCA = new AbstractTypeReferenceWithCAElements();
		this.pInstanceTypeReference = new InstanceTypeReferenceElements();
		this.pNamedTypeReference = new NamedTypeReferenceElements();
		this.pConstrainedArrayTypeReference = new ConstrainedArrayTypeReferenceElements();
		this.pAbstractCollectionTypeReference = new AbstractCollectionTypeReferenceElements();
		this.pSequenceTypeReference = new SequenceTypeReferenceElements();
		this.pArrayTypeReference = new ArrayTypeReferenceElements();
		this.pSetTypeReference = new SetTypeReferenceElements();
		this.pBagTypeReference = new BagTypeReferenceElements();
		this.pDictionaryTypeReference = new DictionaryTypeReferenceElements();
		this.pAbstractDictKeyTypeRef = new AbstractDictKeyTypeRefElements();
		this.pTerminatorDefinition = new TerminatorDefinitionElements();
		this.pTerminatorServiceDeclaration = new TerminatorServiceDeclarationElements();
		this.pObjectDeclaration = new ObjectDeclarationElements();
		this.pObjectDefinition = new ObjectDefinitionElements();
		this.pAttributeDefinition = new AttributeDefinitionElements();
		this.pAttributeReferential = new AttributeReferentialElements();
		this.pObjectOrRoleName = new ObjectOrRoleNameElements();
		this.pObjectServiceDeclaration = new ObjectServiceDeclarationElements();
		this.pIdentifierDefinition = new IdentifierDefinitionElements();
		this.pEventDefinition = new EventDefinitionElements();
		this.eEventType = new EventTypeElements();
		this.pStateDeclaration = new StateDeclarationElements();
		this.pStateTypeSyntax = new StateTypeSyntaxElements();
		this.pTransitionTable = new TransitionTableElements();
		this.eTransTableType = new TransTableTypeElements();
		this.pTransitionRow = new TransitionRowElements();
		this.pTransitionOption = new TransitionOptionElements();
		this.pDomainServiceDeclaration = new DomainServiceDeclarationElements();
		this.eParameterMode = new ParameterModeElements();
		this.pRelationshipDefinition = new RelationshipDefinitionElements();
		this.pRegularRelationshipDefinition = new RegularRelationshipDefinitionElements();
		this.pAssocRelationshipDefinition = new AssocRelationshipDefinitionElements();
		this.pRelationshipEnd = new RelationshipEndElements();
		this.pSubtypeRelationshipDefinition = new SubtypeRelationshipDefinitionElements();
		this.eConditionality = new ConditionalityElements();
		this.eMultiplicity = new MultiplicityElements();
		this.pRelationshipNavigation = new RelationshipNavigationElements();
		this.pDomainServiceDefinition = new DomainServiceDefinitionElements();
		this.pObjectServiceDefinition = new ObjectServiceDefinitionElements();
		this.pTerminatorServiceDefinition = new TerminatorServiceDefinitionElements();
		this.pStateDefinition = new StateDefinitionElements();
		this.pStatement = new StatementElements();
		this.pAssignStatement = new AssignStatementElements();
		this.pExitStatement = new ExitStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pDelayStatement = new DelayStatementElements();
		this.pRaiseStatement = new RaiseStatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pEraseStatement = new EraseStatementElements();
		this.eLinkType = new LinkTypeElements();
		this.pScheduleStatement = new ScheduleStatementElements();
		this.pCancelTimerStatement = new CancelTimerStatementElements();
		this.eScheduleType = new ScheduleTypeElements();
		this.pGenerateStatement = new GenerateStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pElsifBlock = new ElsifBlockElements();
		this.pElseBlock = new ElseBlockElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseAlternative = new CaseAlternativeElements();
		this.pCaseOthers = new CaseOthersElements();
		this.pForStatement = new ForStatementElements();
		this.pLoopVariable = new LoopVariableElements();
		this.pCodeBlockStatement = new CodeBlockStatementElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExceptionHandler = new ExceptionHandlerElements();
		this.pDefaultExceptionHandler = new DefaultExceptionHandlerElements();
		this.pFindCondition = new FindConditionElements();
		this.pFindLogicalOr = new FindLogicalOrElements();
		this.pFindLogicalXor = new FindLogicalXorElements();
		this.pFindLogicalAnd = new FindLogicalAndElements();
		this.pFindPrimary = new FindPrimaryElements();
		this.pFindUnary = new FindUnaryElements();
		this.pFindEquality = new FindEqualityElements();
		this.pFindRelationExp = new FindRelationExpElements();
		this.pFindName = new FindNameElements();
		this.pFindReceiverAttribute = new FindReceiverAttributeElements();
		this.pConstExpression = new ConstExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pStreamExpression = new StreamExpressionElements();
		this.pStreamOperator = new StreamOperatorElements();
		this.pRangeExpression = new RangeExpressionElements();
		this.pLogicalOr = new LogicalOrElements();
		this.pLogicalXor = new LogicalXorElements();
		this.pLogicalAnd = new LogicalAndElements();
		this.pEquality = new EqualityElements();
		this.pRelationalExp = new RelationalExpElements();
		this.pAdditiveExp = new AdditiveExpElements();
		this.pMultExp = new MultExpElements();
		this.pUnaryExp = new UnaryExpElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pLinkExpression = new LinkExpressionElements();
		this.pNavigateExpression = new NavigateExpressionElements();
		this.pExtendedExpression = new ExtendedExpressionElements();
		this.pSortOrder = new SortOrderElements();
		this.pSortOrderComponent = new SortOrderComponentElements();
		this.pSortOrderFeature = new SortOrderFeatureElements();
		this.pCreateExpression = new CreateExpressionElements();
		this.pCreateArgument = new CreateArgumentElements();
		this.pFindExpression = new FindExpressionElements();
		this.eFindType = new FindTypeElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pCharacteristicID = new CharacteristicIDElements();
		this.pPostfixNoActionCallExpression = new PostfixNoActionCallExpressionElements();
		this.pPrimaryNoActionCallExpression = new PrimaryNoActionCallExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pTypeNameExpression = new TypeNameExpressionElements();
		this.pSimpleFeatureCall = new SimpleFeatureCallElements();
		this.pParenthesisedExpression = new ParenthesisedExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pCharacterLiteral = new CharacterLiteralElements();
		this.pDurationLiteral = new DurationLiteralElements();
		this.pTimestampLiteral = new TimestampLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNullLiteral = new NullLiteralElements();
		this.pFlushLiteral = new FlushLiteralElements();
		this.pThisLiteral = new ThisLiteralElements();
		this.pConsoleLiteral = new ConsoleLiteralElements();
		this.pEndlLiteral = new EndlLiteralElements();
		this.pLineNoLiteral = new LineNoLiteralElements();
		this.pFileNameLiteral = new FileNameLiteralElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ID");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.REAL");
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.INTEGER");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.STRING");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.CHAR");
		this.tDURATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.DURATION");
		this.tTIMESTAMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.TIMESTAMP");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.xtext.masl.MASL.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtuml.bp.xtext.masl.MASL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//MaslModel:
	//    BuiltinLibraryDefinition
	//    | {MaslModel} elements+=AbstractTopLevelElement*;
	public MaslModelElements getMaslModelAccess() {
		return pMaslModel;
	}
	
	public ParserRule getMaslModelRule() {
		return getMaslModelAccess().getRule();
	}
	
	//AbstractTopLevelElement:
	//    ProjectDefinition
	//    | DomainDefinition
	//    | DomainServiceDefinition
	//    | ObjectServiceDefinition
	//    | StateDefinition
	//    | TerminatorServiceDefinition;
	public AbstractTopLevelElementElements getAbstractTopLevelElementAccess() {
		return pAbstractTopLevelElement;
	}
	
	public ParserRule getAbstractTopLevelElementRule() {
		return getAbstractTopLevelElementAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Common rules and fragments
	////---------------------------------------------------------
	//ScopedName:
	//    (ID '::')? ID;
	public ScopedNameElements getScopedNameAccess() {
		return pScopedName;
	}
	
	public ParserRule getScopedNameRule() {
		return getScopedNameAccess().getRule();
	}
	
	//fragment PragmaList returns Pragmatized:
	//    (pragmas+=Pragma ';')*;
	public PragmaListElements getPragmaListAccess() {
		return pPragmaList;
	}
	
	public ParserRule getPragmaListRule() {
		return getPragmaListAccess().getRule();
	}
	
	//Pragma:
	//    'pragma' name=ID
	//    '('
	//    (values+=PragmaValue (',' values+=PragmaValue)*)?
	//    ')';
	public PragmaElements getPragmaAccess() {
		return pPragma;
	}
	
	public ParserRule getPragmaRule() {
		return getPragmaAccess().getRule();
	}
	
	//PragmaValue:
	//    name=ID | value=Literal;
	public PragmaValueElements getPragmaValueAccess() {
		return pPragmaValue;
	}
	
	public ParserRule getPragmaValueRule() {
		return getPragmaValueAccess().getRule();
	}
	
	//fragment ParameterList returns Parameterized:
	//    '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')';
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' mode=ParameterMode type=AbstractTypeReference;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//enum Visibility:
	//    public | private;
	public VisibilityElements getVisibilityAccess() {
		return eVisibility;
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Project Definition
	////---------------------------------------------------------
	//ProjectDefinition:
	//    'project' name=ID 'is'
	//    domains+=DomainDefinition*
	//    'end' 'project'?
	//    ';'? PragmaList;
	public ProjectDefinitionElements getProjectDefinitionAccess() {
		return pProjectDefinition;
	}
	
	public ParserRule getProjectDefinitionRule() {
		return getProjectDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Domain Definition
	////---------------------------------------------------------
	//DomainDefinition:
	//    'domain' name=ID 'is'
	//    (
	//        objects+=ObjectDeclaration
	//        | services+=DomainServiceDeclaration
	//        | terminators+=TerminatorDefinition
	//        | relationships+=RelationshipDefinition
	//        | objectDefs+=ObjectDefinition
	//        | typeForwards+=TypeForwardDeclaration
	//        | types+=TypeDeclaration
	//        | exceptions+=ExceptionDeclaration
	//    )*
	//    'end' 'domain'?
	//    ';'? PragmaList;
	public DomainDefinitionElements getDomainDefinitionAccess() {
		return pDomainDefinition;
	}
	
	public ParserRule getDomainDefinitionRule() {
		return getDomainDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Library Definition
	////---------------------------------------------------------
	//BuiltinLibraryDefinition:
	//    {BuiltinLibraryDefinition}
	//    'builtin' 'is'
	//    (types+=BuiltinTypeDeclaration
	//    | exceptions+=ExceptionDeclaration
	//    | characteristics+=Characteristic)*
	//    'end' 'builtin'? ';';
	public BuiltinLibraryDefinitionElements getBuiltinLibraryDefinitionAccess() {
		return pBuiltinLibraryDefinition;
	}
	
	public ParserRule getBuiltinLibraryDefinitionRule() {
		return getBuiltinLibraryDefinitionAccess().getRule();
	}
	
	//BuiltinTypeDeclaration returns TypeDeclaration:
	//    TypeDeclaration
	//    | {BuiltinTypeDeclaration} anonymous?='anonymous'? 'builtin' name=ID ';';
	public BuiltinTypeDeclarationElements getBuiltinTypeDeclarationAccess() {
		return pBuiltinTypeDeclaration;
	}
	
	public ParserRule getBuiltinTypeDeclarationRule() {
		return getBuiltinTypeDeclarationAccess().getRule();
	}
	
	//Characteristic:
	//     ('<' typeParams+=TypeParameter (',' typeParams+=TypeParameter)* '>')?
	//     ((forValue?='(' receiverType=AbstractTypeReference ')') | (receiverType=AbstractTypeReference))
	//     '\'' name=CharacteristicID
	//     ParameterList?
	//     ('return' returnType=AbstractTypeReferenceWithRange)? ';';
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//TypeParameter:
	//     ^enum?='enum'? name=ID;
	public TypeParameterElements getTypeParameterAccess() {
		return pTypeParameter;
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}
	
	//AbstractTypeReferenceWithRange returns AbstractTypeReference:
	//    AbstractTypeReference
	//    | RangeTypeReference;
	public AbstractTypeReferenceWithRangeElements getAbstractTypeReferenceWithRangeAccess() {
		return pAbstractTypeReferenceWithRange;
	}
	
	public ParserRule getAbstractTypeReferenceWithRangeRule() {
		return getAbstractTypeReferenceWithRangeAccess().getRule();
	}
	
	//RangeTypeReference:
	//    anonymous?='anonymous'? 'range' 'of' elementType=AbstractTypeReference;
	public RangeTypeReferenceElements getRangeTypeReferenceAccess() {
		return pRangeTypeReference;
	}
	
	public ParserRule getRangeTypeReferenceRule() {
		return getRangeTypeReferenceAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Exception Declaration
	////---------------------------------------------------------
	//ExceptionDeclaration:
	//    visibility=Visibility? 'exception' name=ID
	//    ';' PragmaList;
	public ExceptionDeclarationElements getExceptionDeclarationAccess() {
		return pExceptionDeclaration;
	}
	
	public ParserRule getExceptionDeclarationRule() {
		return getExceptionDeclarationAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Type Definition
	////---------------------------------------------------------
	//TypeForwardDeclaration:
	//    visibility=Visibility? ('type' | subtype?='subtype') name=ID
	//    ';' PragmaList;
	public TypeForwardDeclarationElements getTypeForwardDeclarationAccess() {
		return pTypeForwardDeclaration;
	}
	
	public ParserRule getTypeForwardDeclarationRule() {
		return getTypeForwardDeclarationAccess().getRule();
	}
	
	//TypeDeclaration:
	//    visibility=Visibility? ('type' | subtype?='subtype') name=ID 'is'
	//    definition=AbstractTypeDefinition
	//    ';' ';'? PragmaList;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//AbstractTypeDefinition:
	//    StructureTypeDefinition
	//    | EnumerationTypeDefinition
	//    | ConstrainedTypeDefinition
	//    | AbstractTypeReferenceWithCA
	//    | UnconstrainedArrayDefinition;
	public AbstractTypeDefinitionElements getAbstractTypeDefinitionAccess() {
		return pAbstractTypeDefinition;
	}
	
	public ParserRule getAbstractTypeDefinitionRule() {
		return getAbstractTypeDefinitionAccess().getRule();
	}
	
	//ConstrainedTypeDefinition:
	//    type=NamedTypeReference constraint=AbstractTypeConstraint;
	public ConstrainedTypeDefinitionElements getConstrainedTypeDefinitionAccess() {
		return pConstrainedTypeDefinition;
	}
	
	public ParserRule getConstrainedTypeDefinitionRule() {
		return getConstrainedTypeDefinitionAccess().getRule();
	}
	
	//AbstractTypeConstraint:
	//    RangeConstraint
	//    | DeltaConstraint
	//    | DigitsConstraint;
	public AbstractTypeConstraintElements getAbstractTypeConstraintAccess() {
		return pAbstractTypeConstraint;
	}
	
	public ParserRule getAbstractTypeConstraintRule() {
		return getAbstractTypeConstraintAccess().getRule();
	}
	
	//RangeConstraint:
	//    'range' range=Expression;
	public RangeConstraintElements getRangeConstraintAccess() {
		return pRangeConstraint;
	}
	
	public ParserRule getRangeConstraintRule() {
		return getRangeConstraintAccess().getRule();
	}
	
	//DeltaConstraint:
	//    'delta' delta=ConstExpression constraint=RangeConstraint;
	public DeltaConstraintElements getDeltaConstraintAccess() {
		return pDeltaConstraint;
	}
	
	public ParserRule getDeltaConstraintRule() {
		return getDeltaConstraintAccess().getRule();
	}
	
	//DigitsConstraint:
	//    'digits' digits=ConstExpression constraint=RangeConstraint;
	public DigitsConstraintElements getDigitsConstraintAccess() {
		return pDigitsConstraint;
	}
	
	public ParserRule getDigitsConstraintRule() {
		return getDigitsConstraintAccess().getRule();
	}
	
	//StructureTypeDefinition:
	//    {StructureTypeDefinition}
	//    'structure'
	//    components+=StructureComponentDefinition*
	//    'end' 'structure'?;
	public StructureTypeDefinitionElements getStructureTypeDefinitionAccess() {
		return pStructureTypeDefinition;
	}
	
	public ParserRule getStructureTypeDefinitionRule() {
		return getStructureTypeDefinitionAccess().getRule();
	}
	
	//StructureComponentDefinition:
	//    name=ID ':' type=AbstractTypeReference
	//    (':=' defaultValue=ConstExpression)?
	//    ';' PragmaList;
	public StructureComponentDefinitionElements getStructureComponentDefinitionAccess() {
		return pStructureComponentDefinition;
	}
	
	public ParserRule getStructureComponentDefinitionRule() {
		return getStructureComponentDefinitionAccess().getRule();
	}
	
	//EnumerationTypeDefinition:
	//    {EnumerationTypeDefinition}
	//    'enum'
	//    '(' (enumerators+=Enumerator (',' enumerators+=Enumerator)*)? ')';
	public EnumerationTypeDefinitionElements getEnumerationTypeDefinitionAccess() {
		return pEnumerationTypeDefinition;
	}
	
	public ParserRule getEnumerationTypeDefinitionRule() {
		return getEnumerationTypeDefinitionAccess().getRule();
	}
	
	//Enumerator:
	//    name=ID (('=' | ':=') expression=ConstExpression)?;
	public EnumeratorElements getEnumeratorAccess() {
		return pEnumerator;
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}
	
	//UnconstrainedArrayDefinition:
	//    'array' '(' indexType=NamedTypeReference 'range' '<>' ')'
	//    'of' elementType=AbstractTypeReference;
	public UnconstrainedArrayDefinitionElements getUnconstrainedArrayDefinitionAccess() {
		return pUnconstrainedArrayDefinition;
	}
	
	public ParserRule getUnconstrainedArrayDefinitionRule() {
		return getUnconstrainedArrayDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Type Reference
	////---------------------------------------------------------
	//AbstractTypeReference:
	//    NamedTypeReference
	//    | InstanceTypeReference
	//    | AbstractCollectionTypeReference;
	public AbstractTypeReferenceElements getAbstractTypeReferenceAccess() {
		return pAbstractTypeReference;
	}
	
	public ParserRule getAbstractTypeReferenceRule() {
		return getAbstractTypeReferenceAccess().getRule();
	}
	
	////    | DeprecatedTypeReference;
	//AbstractTypeReferenceWithCA returns AbstractTypeReference:
	//    AbstractTypeReference
	//    | ConstrainedArrayTypeReference;
	public AbstractTypeReferenceWithCAElements getAbstractTypeReferenceWithCAAccess() {
		return pAbstractTypeReferenceWithCA;
	}
	
	public ParserRule getAbstractTypeReferenceWithCARule() {
		return getAbstractTypeReferenceWithCAAccess().getRule();
	}
	
	////DeprecatedTypeReference:
	////    typeName=('instance'
	////    | 'event'
	////    | 'service');
	//InstanceTypeReference:
	//    anonymous?='anonymous'? 'instance' 'of' instance=[ObjectDeclaration|ScopedName];
	public InstanceTypeReferenceElements getInstanceTypeReferenceAccess() {
		return pInstanceTypeReference;
	}
	
	public ParserRule getInstanceTypeReferenceRule() {
		return getInstanceTypeReferenceAccess().getRule();
	}
	
	//NamedTypeReference:
	//    anonymous?='anonymous'? type=[TypeDeclaration|ScopedName];
	public NamedTypeReferenceElements getNamedTypeReferenceAccess() {
		return pNamedTypeReference;
	}
	
	public ParserRule getNamedTypeReferenceRule() {
		return getNamedTypeReferenceAccess().getRule();
	}
	
	//ConstrainedArrayTypeReference:
	//    unconstrained=[TypeDeclaration|ScopedName] '(' constraint=Expression ')';
	public ConstrainedArrayTypeReferenceElements getConstrainedArrayTypeReferenceAccess() {
		return pConstrainedArrayTypeReference;
	}
	
	public ParserRule getConstrainedArrayTypeReferenceRule() {
		return getConstrainedArrayTypeReferenceAccess().getRule();
	}
	
	//AbstractCollectionTypeReference:
	//    SequenceTypeReference
	//    | ArrayTypeReference
	//    | SetTypeReference
	//    | BagTypeReference
	//    | DictionaryTypeReference;
	public AbstractCollectionTypeReferenceElements getAbstractCollectionTypeReferenceAccess() {
		return pAbstractCollectionTypeReference;
	}
	
	public ParserRule getAbstractCollectionTypeReferenceRule() {
		return getAbstractCollectionTypeReferenceAccess().getRule();
	}
	
	//SequenceTypeReference:
	//    anonymous?='anonymous'?
	//    'sequence' ('(' expression=Expression ')')? 'of' elementType=AbstractTypeReference;
	public SequenceTypeReferenceElements getSequenceTypeReferenceAccess() {
		return pSequenceTypeReference;
	}
	
	public ParserRule getSequenceTypeReferenceRule() {
		return getSequenceTypeReferenceAccess().getRule();
	}
	
	//ArrayTypeReference:
	//    anonymous?='anonymous'?
	//    'array' '(' (indexType=RangeTypeReference | expression=Expression) ')' 'of' elementType=AbstractTypeReference;
	public ArrayTypeReferenceElements getArrayTypeReferenceAccess() {
		return pArrayTypeReference;
	}
	
	public ParserRule getArrayTypeReferenceRule() {
		return getArrayTypeReferenceAccess().getRule();
	}
	
	//SetTypeReference:
	//    anonymous?='anonymous'?
	//    'set' 'of' elementType=AbstractTypeReference;
	public SetTypeReferenceElements getSetTypeReferenceAccess() {
		return pSetTypeReference;
	}
	
	public ParserRule getSetTypeReferenceRule() {
		return getSetTypeReferenceAccess().getRule();
	}
	
	//BagTypeReference:
	//    anonymous?='anonymous'?
	//    'bag' 'of' elementType=AbstractTypeReference;
	public BagTypeReferenceElements getBagTypeReferenceAccess() {
		return pBagTypeReference;
	}
	
	public ParserRule getBagTypeReferenceRule() {
		return getBagTypeReferenceAccess().getRule();
	}
	
	//DictionaryTypeReference:
	//    {DictionaryTypeReference}
	//    anonymous?='anonymous'?
	//    'dictionary' (keyType=AbstractDictKeyTypeRef? 'of' elementType=AbstractTypeReference)?;
	public DictionaryTypeReferenceElements getDictionaryTypeReferenceAccess() {
		return pDictionaryTypeReference;
	}
	
	public ParserRule getDictionaryTypeReferenceRule() {
		return getDictionaryTypeReferenceAccess().getRule();
	}
	
	//AbstractDictKeyTypeRef returns AbstractTypeReference:
	//    NamedTypeReference | InstanceTypeReference;
	public AbstractDictKeyTypeRefElements getAbstractDictKeyTypeRefAccess() {
		return pAbstractDictKeyTypeRef;
	}
	
	public ParserRule getAbstractDictKeyTypeRefRule() {
		return getAbstractDictKeyTypeRefAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Terminator Definition
	////---------------------------------------------------------
	//TerminatorDefinition:
	//    'terminator' name=ID 'is'
	//    services+=TerminatorServiceDeclaration*
	//    'end' 'terminator'?
	//    ';' PragmaList;
	public TerminatorDefinitionElements getTerminatorDefinitionAccess() {
		return pTerminatorDefinition;
	}
	
	public ParserRule getTerminatorDefinitionRule() {
		return getTerminatorDefinitionAccess().getRule();
	}
	
	//TerminatorServiceDeclaration:
	//    visibility=Visibility? ('service'|'function') name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    ';' PragmaList;
	public TerminatorServiceDeclarationElements getTerminatorServiceDeclarationAccess() {
		return pTerminatorServiceDeclaration;
	}
	
	public ParserRule getTerminatorServiceDeclarationRule() {
		return getTerminatorServiceDeclarationAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Object Definition
	////---------------------------------------------------------
	//ObjectDeclaration:
	//    'object' name=ID
	//    ';' PragmaList;
	public ObjectDeclarationElements getObjectDeclarationAccess() {
		return pObjectDeclaration;
	}
	
	public ParserRule getObjectDeclarationRule() {
		return getObjectDeclarationAccess().getRule();
	}
	
	//ObjectDefinition:
	//    'object' name=ID 'is'
	//    (attributes+=AttributeDefinition
	//    | identifiers+=IdentifierDefinition
	//    | services+=ObjectServiceDeclaration
	//    | events+=EventDefinition
	//    | states+=StateDeclaration
	//    | transitions+=TransitionTable)*
	//    'end' 'object'?
	//    ';' PragmaList;
	public ObjectDefinitionElements getObjectDefinitionAccess() {
		return pObjectDefinition;
	}
	
	public ParserRule getObjectDefinitionRule() {
		return getObjectDefinitionAccess().getRule();
	}
	
	//AttributeDefinition:
	//    name=ID ':'
	//    preferred?='preferred'? unique?='unique'?
	//    ('referential'
	//     '(' (referentials+=AttributeReferential (',' referentials+=AttributeReferential)*)? ')'
	//    )?
	//    type=AbstractTypeReference
	//    (':=' defaultValue=ConstExpression)?
	//    ';' PragmaList;
	public AttributeDefinitionElements getAttributeDefinitionAccess() {
		return pAttributeDefinition;
	}
	
	public ParserRule getAttributeDefinitionRule() {
		return getAttributeDefinitionAccess().getRule();
	}
	
	//AttributeReferential returns RelationshipNavigation:
	//    {AttributeReferential}
	//    relationship=[RelationshipDefinition|ScopedName]
	//    '.'
	//    ( objectOrRole=[ObjectOrRole|ObjectOrRoleName] '.' attribute=[AttributeDefinition]
	//    | objectOrRole=[ObjectOrRole|ID] '.' attribute=[AttributeDefinition]
	//    | attribute=[AttributeDefinition]);
	public AttributeReferentialElements getAttributeReferentialAccess() {
		return pAttributeReferential;
	}
	
	public ParserRule getAttributeReferentialRule() {
		return getAttributeReferentialAccess().getRule();
	}
	
	//ObjectOrRoleName:
	//    ID '.' ID;
	public ObjectOrRoleNameElements getObjectOrRoleNameAccess() {
		return pObjectOrRoleName;
	}
	
	public ParserRule getObjectOrRoleNameRule() {
		return getObjectOrRoleNameAccess().getRule();
	}
	
	//ObjectServiceDeclaration:
	//    visibility=Visibility?
	//    instance?='instance'?
	//    ('deferred' '(' relationship=[RelationshipDefinition] ')')?
	//    ('service'|'function') name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    ';' PragmaList;
	public ObjectServiceDeclarationElements getObjectServiceDeclarationAccess() {
		return pObjectServiceDeclaration;
	}
	
	public ParserRule getObjectServiceDeclarationRule() {
		return getObjectServiceDeclarationAccess().getRule();
	}
	
	//IdentifierDefinition:
	//    'identifier' 'is'
	//    '(' (attributes+=[AttributeDefinition] (',' attributes+=[AttributeDefinition])*)? ')'
	//    ';' PragmaList;
	public IdentifierDefinitionElements getIdentifierDefinitionAccess() {
		return pIdentifierDefinition;
	}
	
	public ParserRule getIdentifierDefinitionRule() {
		return getIdentifierDefinitionAccess().getRule();
	}
	
	//EventDefinition:
	//    type=EventType? 'event' name=ID
	//    ParameterList
	//    ';' PragmaList;
	public EventDefinitionElements getEventDefinitionAccess() {
		return pEventDefinition;
	}
	
	public ParserRule getEventDefinitionRule() {
		return getEventDefinitionAccess().getRule();
	}
	
	//enum EventType:
	//    assigner
	//    | creation;
	public EventTypeElements getEventTypeAccess() {
		return eEventType;
	}
	
	public EnumRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	//StateDeclaration:
	//    type=StateTypeSyntax? 'state' name=ID
	//    ParameterList
	//    ';' PragmaList;
	public StateDeclarationElements getStateDeclarationAccess() {
		return pStateDeclaration;
	}
	
	public ParserRule getStateDeclarationRule() {
		return getStateDeclarationAccess().getRule();
	}
	
	//StateTypeSyntax returns StateType:
	//    'assigner' 'start'? | 'creation' | 'terminal';
	public StateTypeSyntaxElements getStateTypeSyntaxAccess() {
		return pStateTypeSyntax;
	}
	
	public ParserRule getStateTypeSyntaxRule() {
		return getStateTypeSyntaxAccess().getRule();
	}
	
	//TransitionTable:
	//    type=TransTableType? 'transition' 'is'
	//    rows+=TransitionRow+
	//    'end' 'transition'?
	//    ';' PragmaList;
	public TransitionTableElements getTransitionTableAccess() {
		return pTransitionTable;
	}
	
	public ParserRule getTransitionTableRule() {
		return getTransitionTableAccess().getRule();
	}
	
	//enum TransTableType:
	//    assigner;
	public TransTableTypeElements getTransTableTypeAccess() {
		return eTransTableType;
	}
	
	public EnumRule getTransTableTypeRule() {
		return getTransTableTypeAccess().getRule();
	}
	
	//TransitionRow:
	//    (start=[StateDeclaration] | nonExistant?=('Non_Existent' | 'Non_Existant' | 'non_existent' | 'non_existant'))
	//    '(' (options+=TransitionOption (',' options+=TransitionOption)*)? ')'
	//    ';' PragmaList;
	public TransitionRowElements getTransitionRowAccess() {
		return pTransitionRow;
	}
	
	public ParserRule getTransitionRowRule() {
		return getTransitionRowAccess().getRule();
	}
	
	//TransitionOption:
	//    (eventObject=[ObjectDefinition] '.')? event=[EventDefinition] '=>'
	//    (endState=[StateDeclaration] | ignore?='Ignore' | cannotHappen?=('Cannot_Happen' | 'cannot_happen'));
	public TransitionOptionElements getTransitionOptionAccess() {
		return pTransitionOption;
	}
	
	public ParserRule getTransitionOptionRule() {
		return getTransitionOptionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Service Declaration
	////---------------------------------------------------------
	//DomainServiceDeclaration:
	//    visibility=Visibility?
	//    ('service' | 'function') name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    ';' PragmaList;
	public DomainServiceDeclarationElements getDomainServiceDeclarationAccess() {
		return pDomainServiceDeclaration;
	}
	
	public ParserRule getDomainServiceDeclarationRule() {
		return getDomainServiceDeclarationAccess().getRule();
	}
	
	//enum ParameterMode:
	//    in
	//    | out;
	public ParameterModeElements getParameterModeAccess() {
		return eParameterMode;
	}
	
	public EnumRule getParameterModeRule() {
		return getParameterModeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Relationship Definition
	////---------------------------------------------------------
	//RelationshipDefinition:
	//    'relationship'
	//    (RegularRelationshipDefinition
	//    | AssocRelationshipDefinition
	//    | SubtypeRelationshipDefinition)
	//    ';' PragmaList;
	public RelationshipDefinitionElements getRelationshipDefinitionAccess() {
		return pRelationshipDefinition;
	}
	
	public ParserRule getRelationshipDefinitionRule() {
		return getRelationshipDefinitionAccess().getRule();
	}
	
	//RegularRelationshipDefinition:
	//    name=ID 'is'
	//    forwards=RelationshipEnd ','
	//    backwards=RelationshipEnd;
	public RegularRelationshipDefinitionElements getRegularRelationshipDefinitionAccess() {
		return pRegularRelationshipDefinition;
	}
	
	public ParserRule getRegularRelationshipDefinitionRule() {
		return getRegularRelationshipDefinitionAccess().getRule();
	}
	
	//AssocRelationshipDefinition:
	//    name=ID 'is'
	//    forwards=RelationshipEnd ','
	//    backwards=RelationshipEnd
	//    'using' one?='one'? object=[ObjectDeclaration];
	public AssocRelationshipDefinitionElements getAssocRelationshipDefinitionAccess() {
		return pAssocRelationshipDefinition;
	}
	
	public ParserRule getAssocRelationshipDefinitionRule() {
		return getAssocRelationshipDefinitionAccess().getRule();
	}
	
	//RelationshipEnd:
	//    from=[ObjectDeclaration]
	//    conditionality=Conditionality name=ID
	//    multiplicity=Multiplicity
	//    to=[ObjectDeclaration];
	public RelationshipEndElements getRelationshipEndAccess() {
		return pRelationshipEnd;
	}
	
	public ParserRule getRelationshipEndRule() {
		return getRelationshipEndAccess().getRule();
	}
	
	//SubtypeRelationshipDefinition:
	//    name=ID 'is'
	//    supertype=[ObjectDeclaration] 'is_a'
	//    '(' (subtypes+=[ObjectDeclaration] (',' subtypes+=[ObjectDeclaration])*)?')';
	public SubtypeRelationshipDefinitionElements getSubtypeRelationshipDefinitionAccess() {
		return pSubtypeRelationshipDefinition;
	}
	
	public ParserRule getSubtypeRelationshipDefinitionRule() {
		return getSubtypeRelationshipDefinitionAccess().getRule();
	}
	
	//enum Conditionality:
	//    unconditionally
	//    | conditionally;
	public ConditionalityElements getConditionalityAccess() {
		return eConditionality;
	}
	
	public EnumRule getConditionalityRule() {
		return getConditionalityAccess().getRule();
	}
	
	//enum Multiplicity:
	//    one
	//    | many;
	public MultiplicityElements getMultiplicityAccess() {
		return eMultiplicity;
	}
	
	public EnumRule getMultiplicityRule() {
		return getMultiplicityAccess().getRule();
	}
	
	//RelationshipNavigation:
	//    relationship=[RelationshipDefinition|ScopedName]
	//    ('.' (objectOrRole=[ObjectOrRole] | objectOrRole=[ObjectOrRole|ObjectOrRoleName]))?;
	public RelationshipNavigationElements getRelationshipNavigationAccess() {
		return pRelationshipNavigation;
	}
	
	public ParserRule getRelationshipNavigationRule() {
		return getRelationshipNavigationAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Dynamic Behaviour
	////---------------------------------------------------------
	//DomainServiceDefinition:
	//    visibility=Visibility?
	//    ('service' | 'function')
	//    domain=[DomainDefinition] '::' name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    'is' body=CodeBlock
	//    ('service' | 'function')?
	//    ';'? PragmaList;
	public DomainServiceDefinitionElements getDomainServiceDefinitionAccess() {
		return pDomainServiceDefinition;
	}
	
	public ParserRule getDomainServiceDefinitionRule() {
		return getDomainServiceDefinitionAccess().getRule();
	}
	
	//ObjectServiceDefinition:
	//    visibility=Visibility? instance?='instance'? ('deferred' relationship=[RelationshipDefinition])?
	//    ('service' | 'function')
	//    domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    'is' body=CodeBlock
	//    ('service' | 'function')?
	//    ';'? PragmaList;
	public ObjectServiceDefinitionElements getObjectServiceDefinitionAccess() {
		return pObjectServiceDefinition;
	}
	
	public ParserRule getObjectServiceDefinitionRule() {
		return getObjectServiceDefinitionAccess().getRule();
	}
	
	//TerminatorServiceDefinition:
	//    visibility=Visibility?
	//    ('service' | 'function')
	//    domain=[DomainDefinition] '::' terminator=[TerminatorDefinition] '~>' name=ID
	//    ParameterList
	//    ('return' returnType=AbstractTypeReference)?
	//    'is' body=CodeBlock
	//    ('service' | 'function')?
	//    ';'? PragmaList;
	public TerminatorServiceDefinitionElements getTerminatorServiceDefinitionAccess() {
		return pTerminatorServiceDefinition;
	}
	
	public ParserRule getTerminatorServiceDefinitionRule() {
		return getTerminatorServiceDefinitionAccess().getRule();
	}
	
	//StateDefinition:
	//    type=StateTypeSyntax? 'state'
	//    domain=[DomainDefinition] '::' object=[ObjectDeclaration] '.' name=ID
	//    ParameterList
	//    'is' body=CodeBlock
	//    'state'?
	//    ';'? PragmaList;
	public StateDefinitionElements getStateDefinitionAccess() {
		return pStateDefinition;
	}
	
	public ParserRule getStateDefinitionRule() {
		return getStateDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Statements
	////---------------------------------------------------------
	//Statement:
	//    (CodeBlockStatement
	//    | AssignStatement
	//    | ExitStatement
	//    | ReturnStatement
	//    | DelayStatement
	//    | RaiseStatement
	//    | DeleteStatement
	//    | EraseStatement
	//    | ScheduleStatement
	//    | CancelTimerStatement
	//    | GenerateStatement
	//    | IfStatement
	//    | CaseStatement
	//    | ForStatement
	//    | WhileStatement)?
	//    ';' PragmaList;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AssignStatement returns Expression:
	//    Expression ({AssignStatement.lhs=current} ':=' rhs=Expression)?;
	public AssignStatementElements getAssignStatementAccess() {
		return pAssignStatement;
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}
	
	//ExitStatement:
	//    {ExitStatement} 'exit' ('when' condition=Expression)?;
	public ExitStatementElements getExitStatementAccess() {
		return pExitStatement;
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//    'return' value=Expression;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//DelayStatement:
	//    'delay' value=Expression;
	public DelayStatementElements getDelayStatementAccess() {
		return pDelayStatement;
	}
	
	public ParserRule getDelayStatementRule() {
		return getDelayStatementAccess().getRule();
	}
	
	//RaiseStatement:
	//    'raise' exception=[ExceptionDeclaration|ScopedName]
	//    ('(' argument=Expression? ')')?;
	public RaiseStatementElements getRaiseStatementAccess() {
		return pRaiseStatement;
	}
	
	public ParserRule getRaiseStatementRule() {
		return getRaiseStatementAccess().getRule();
	}
	
	//DeleteStatement:
	//    'delete' value=Expression;
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//EraseStatement:
	//    'erase' value=Expression;
	public EraseStatementElements getEraseStatementAccess() {
		return pEraseStatement;
	}
	
	public ParserRule getEraseStatementRule() {
		return getEraseStatementAccess().getRule();
	}
	
	//enum LinkType:
	//    link
	//    | unlink;
	public LinkTypeElements getLinkTypeAccess() {
		return eLinkType;
	}
	
	public EnumRule getLinkTypeRule() {
		return getLinkTypeAccess().getRule();
	}
	
	//ScheduleStatement:
	//    'schedule' timerId=Expression
	//    generateStatement=GenerateStatement
	//    type=ScheduleType time=Expression ('delta' period=Expression)?;
	public ScheduleStatementElements getScheduleStatementAccess() {
		return pScheduleStatement;
	}
	
	public ParserRule getScheduleStatementRule() {
		return getScheduleStatementAccess().getRule();
	}
	
	//CancelTimerStatement:
	//    'cancel' timerId=Expression;
	public CancelTimerStatementElements getCancelTimerStatementAccess() {
		return pCancelTimerStatement;
	}
	
	public ParserRule getCancelTimerStatementRule() {
		return getCancelTimerStatementAccess().getRule();
	}
	
	//enum ScheduleType:
	//    at
	//    | delay;
	public ScheduleTypeElements getScheduleTypeAccess() {
		return eScheduleType;
	}
	
	public EnumRule getScheduleTypeRule() {
		return getScheduleTypeAccess().getRule();
	}
	
	//GenerateStatement:
	//    'generate' (object=[ObjectDeclaration|ScopedName] '.')? event=[EventDefinition]
	//    '(' (arguments+=Expression (',' arguments+=Expression)*)? ')' ('to' to=Expression)?;
	public GenerateStatementElements getGenerateStatementAccess() {
		return pGenerateStatement;
	}
	
	public ParserRule getGenerateStatementRule() {
		return getGenerateStatementAccess().getRule();
	}
	
	//IfStatement:
	//    'if' condition=Expression 'then'
	//    statements+=Statement*
	//    elseIfs+=ElsifBlock*
	//    else=ElseBlock?
	//    'end' 'if'?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//ElsifBlock:
	//    'elsif' condition=Expression 'then'
	//    statements+=Statement*;
	public ElsifBlockElements getElsifBlockAccess() {
		return pElsifBlock;
	}
	
	public ParserRule getElsifBlockRule() {
		return getElsifBlockAccess().getRule();
	}
	
	//ElseBlock:
	//    {ElseBlock} 'else' statements+=Statement*;
	public ElseBlockElements getElseBlockAccess() {
		return pElseBlock;
	}
	
	public ParserRule getElseBlockRule() {
		return getElseBlockAccess().getRule();
	}
	
	//WhileStatement:
	//    'while' condition=Expression
	//    'loop'
	//    statements+=Statement*
	//    'end' 'loop'?;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//CaseStatement:
	//    'case' value=Expression 'is'
	//    alternatives+=CaseAlternative*
	//    default=CaseOthers?
	//    'end' 'case'?;
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//CaseAlternative:
	//    'when' choices+=Expression ('|' choices+=Expression)* '=>' statements+=Statement*;
	public CaseAlternativeElements getCaseAlternativeAccess() {
		return pCaseAlternative;
	}
	
	public ParserRule getCaseAlternativeRule() {
		return getCaseAlternativeAccess().getRule();
	}
	
	//CaseOthers:
	//    {CaseOthers} 'when' 'others' '=>' statements+=Statement*;
	public CaseOthersElements getCaseOthersAccess() {
		return pCaseOthers;
	}
	
	public ParserRule getCaseOthersRule() {
		return getCaseOthersAccess().getRule();
	}
	
	//ForStatement:
	//    'for' variable=LoopVariable 'in' reverse?='reverse'? expression=Expression
	//    'loop'
	//    statements+=Statement*
	//    'end' 'loop'?;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//LoopVariable:
	//    name=ID;
	public LoopVariableElements getLoopVariableAccess() {
		return pLoopVariable;
	}
	
	public ParserRule getLoopVariableRule() {
		return getLoopVariableAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Code Blocks
	////---------------------------------------------------------
	//CodeBlockStatement:
	//    'declare'? CodeBlock;
	public CodeBlockStatementElements getCodeBlockStatementAccess() {
		return pCodeBlockStatement;
	}
	
	public ParserRule getCodeBlockStatementRule() {
		return getCodeBlockStatementAccess().getRule();
	}
	
	//CodeBlock:
	//    {CodeBlock}
	//    variables+=VariableDeclaration*
	//    'begin'
	//    statements+=Statement*
	//    ('exception'
	//    exceptionHandler+=ExceptionHandler*
	//    defaultHandler=DefaultExceptionHandler?)?
	//    'end';
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//VariableDeclaration:
	//    name=ID ':'
	//    readOnly='readonly'? type=AbstractTypeReferenceWithCA
	//    (':=' expression=Expression)?
	//    ';' PragmaList;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//ExceptionHandler:
	//    'when' exception=[ExceptionDeclaration|ScopedName] '=>' statements+=Statement*;
	public ExceptionHandlerElements getExceptionHandlerAccess() {
		return pExceptionHandler;
	}
	
	public ParserRule getExceptionHandlerRule() {
		return getExceptionHandlerAccess().getRule();
	}
	
	//DefaultExceptionHandler:
	//    {DefaultExceptionHandler} 'when' 'others' '=>' statements+=Statement*;
	public DefaultExceptionHandlerElements getDefaultExceptionHandlerAccess() {
		return pDefaultExceptionHandler;
	}
	
	public ParserRule getDefaultExceptionHandlerRule() {
		return getDefaultExceptionHandlerAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Find Condition Definition
	////---------------------------------------------------------
	//FindCondition returns Expression:
	//    FindLogicalOr;
	public FindConditionElements getFindConditionAccess() {
		return pFindCondition;
	}
	
	public ParserRule getFindConditionRule() {
		return getFindConditionAccess().getRule();
	}
	
	//FindLogicalOr returns Expression:
	//    FindLogicalXor ({LogicalOr.lhs=current} 'or' rhs=FindLogicalXor)*;
	public FindLogicalOrElements getFindLogicalOrAccess() {
		return pFindLogicalOr;
	}
	
	public ParserRule getFindLogicalOrRule() {
		return getFindLogicalOrAccess().getRule();
	}
	
	//FindLogicalXor returns Expression:
	//    FindLogicalAnd ({LogicalXor.lhs=current} 'xor' rhs=FindLogicalAnd)*;
	public FindLogicalXorElements getFindLogicalXorAccess() {
		return pFindLogicalXor;
	}
	
	public ParserRule getFindLogicalXorRule() {
		return getFindLogicalXorAccess().getRule();
	}
	
	//FindLogicalAnd returns Expression:
	//    FindPrimary ({LogicalAnd.lhs=current} 'and' rhs=FindPrimary)*;
	public FindLogicalAndElements getFindLogicalAndAccess() {
		return pFindLogicalAnd;
	}
	
	public ParserRule getFindLogicalAndRule() {
		return getFindLogicalAndAccess().getRule();
	}
	
	//FindPrimary returns Expression:
	//    FindEquality
	//    | FindUnary;
	public FindPrimaryElements getFindPrimaryAccess() {
		return pFindPrimary;
	}
	
	public ParserRule getFindPrimaryRule() {
		return getFindPrimaryAccess().getRule();
	}
	
	//FindUnary returns Expression:
	//    'not' FindUnary
	//    | '(' FindCondition ')';
	public FindUnaryElements getFindUnaryAccess() {
		return pFindUnary;
	}
	
	public ParserRule getFindUnaryRule() {
		return getFindUnaryAccess().getRule();
	}
	
	//FindEquality returns Expression:
	//    FindRelationExp
	//    ({Equality.lhs=current} operator=('=' | '/=') rhs=AdditiveExp)?;
	public FindEqualityElements getFindEqualityAccess() {
		return pFindEquality;
	}
	
	public ParserRule getFindEqualityRule() {
		return getFindEqualityAccess().getRule();
	}
	
	//FindRelationExp returns Expression:
	//    FindName
	//    ({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)?;
	public FindRelationExpElements getFindRelationExpAccess() {
		return pFindRelationExp;
	}
	
	public ParserRule getFindRelationExpRule() {
		return getFindRelationExpAccess().getRule();
	}
	
	//FindName returns Expression:
	//    FindReceiverAttribute
	//    ( {SimpleFeatureCall.receiver = current} '.' feature=[AbstractFeature]
	//    | {IndexedExpression.receiver = current} '[' brackets=Expression ']')*;
	public FindNameElements getFindNameAccess() {
		return pFindName;
	}
	
	public ParserRule getFindNameRule() {
		return getFindNameAccess().getRule();
	}
	
	//FindReceiverAttribute returns SimpleFeatureCall:
	//    feature=[AttributeDefinition];
	public FindReceiverAttributeElements getFindReceiverAttributeAccess() {
		return pFindReceiverAttribute;
	}
	
	public ParserRule getFindReceiverAttributeRule() {
		return getFindReceiverAttributeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Expression Definition
	////---------------------------------------------------------
	//ConstExpression:
	//    Expression;
	public ConstExpressionElements getConstExpressionAccess() {
		return pConstExpression;
	}
	
	public ParserRule getConstExpressionRule() {
		return getConstExpressionAccess().getRule();
	}
	
	//Expression returns Expression:
	//    StreamExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//StreamExpression returns Expression:
	//    RangeExpression ({StreamExpression.lhs=current} operator=StreamOperator rhs=RangeExpression)*;
	public StreamExpressionElements getStreamExpressionAccess() {
		return pStreamExpression;
	}
	
	public ParserRule getStreamExpressionRule() {
		return getStreamExpressionAccess().getRule();
	}
	
	//StreamOperator:
	//    '<<'
	//    | '>>'
	//    | '<<<'
	//    | '>>>';
	public StreamOperatorElements getStreamOperatorAccess() {
		return pStreamOperator;
	}
	
	public ParserRule getStreamOperatorRule() {
		return getStreamOperatorAccess().getRule();
	}
	
	//RangeExpression returns Expression:
	//    LogicalOr ({RangeExpression.from=current} operator='..' to=LogicalOr)?;
	public RangeExpressionElements getRangeExpressionAccess() {
		return pRangeExpression;
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//LogicalOr returns Expression:
	//    LogicalXor ({LogicalOr.lhs=current} operator='or' rhs=LogicalXor)*;
	public LogicalOrElements getLogicalOrAccess() {
		return pLogicalOr;
	}
	
	public ParserRule getLogicalOrRule() {
		return getLogicalOrAccess().getRule();
	}
	
	//LogicalXor returns Expression:
	//    LogicalAnd ({LogicalXor.lhs=current} operator='xor' rhs=LogicalAnd)*;
	public LogicalXorElements getLogicalXorAccess() {
		return pLogicalXor;
	}
	
	public ParserRule getLogicalXorRule() {
		return getLogicalXorAccess().getRule();
	}
	
	//LogicalAnd returns Expression:
	//    Equality ({LogicalAnd.lhs=current} operator='and' rhs=Equality)*;
	public LogicalAndElements getLogicalAndAccess() {
		return pLogicalAnd;
	}
	
	public ParserRule getLogicalAndRule() {
		return getLogicalAndAccess().getRule();
	}
	
	//Equality returns Expression:
	//    RelationalExp ({Equality.lhs=current} operator=('=' | '/=') rhs=RelationalExp)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//RelationalExp returns Expression:
	//    AdditiveExp ({RelationalExp.lhs=current} operator=('<' | '>' | '<=' | '>=') rhs=AdditiveExp)*;
	public RelationalExpElements getRelationalExpAccess() {
		return pRelationalExp;
	}
	
	public ParserRule getRelationalExpRule() {
		return getRelationalExpAccess().getRule();
	}
	
	//AdditiveExp returns Expression:
	//    MultExp ({AdditiveExp.lhs=current} operator=('+' | '-' | '&' | 'union' | 'not_in') rhs=MultExp)*;
	public AdditiveExpElements getAdditiveExpAccess() {
		return pAdditiveExp;
	}
	
	public ParserRule getAdditiveExpRule() {
		return getAdditiveExpAccess().getRule();
	}
	
	//MultExp returns Expression:
	//    UnaryExp ({MultExp.lhs=current} operator=('*' | '/' | 'mod' | '**' | 'rem' | 'intersection' | 'disunion')
	//    rhs=UnaryExp)*;
	public MultExpElements getMultExpAccess() {
		return pMultExp;
	}
	
	public ParserRule getMultExpRule() {
		return getMultExpAccess().getRule();
	}
	
	//UnaryExp returns Expression:
	//    {UnaryExp}
	//    operator=UnaryOperator operand=UnaryExp
	//    | LinkExpression;
	public UnaryExpElements getUnaryExpAccess() {
		return pUnaryExp;
	}
	
	public ParserRule getUnaryExpRule() {
		return getUnaryExpAccess().getRule();
	}
	
	//UnaryOperator:
	//    '-'
	//    | '+'
	//    | 'not'
	//    | 'abs';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//LinkExpression returns Expression:
	//    NavigateExpression
	//    | {LinkExpression} type=LinkType
	//    lhs=NavigateExpression
	//    navigation=RelationshipNavigation
	//    (=> rhs=NavigateExpression ('using' assoc=NavigateExpression)?)?;
	public LinkExpressionElements getLinkExpressionAccess() {
		return pLinkExpression;
	}
	
	public ParserRule getLinkExpressionRule() {
		return getLinkExpressionAccess().getRule();
	}
	
	//NavigateExpression returns Expression:
	//    ExtendedExpression
	//    ({NavigateExpression.lhs=current}
	//        ( '->' navigation=RelationshipNavigation ('(' where=FindCondition? ')')?
	//        | 'with' ^with=ExtendedExpression '->' navigation=RelationshipNavigation
	//        | 'ordered_by' order=SortOrder
	//        | 'reverse_ordered_by' reverseOrder=SortOrder))*;
	public NavigateExpressionElements getNavigateExpressionAccess() {
		return pNavigateExpression;
	}
	
	public ParserRule getNavigateExpressionRule() {
		return getNavigateExpressionAccess().getRule();
	}
	
	//ExtendedExpression returns Expression:
	//    PostfixExpression
	//    | CreateExpression
	//    | FindExpression;
	public ExtendedExpressionElements getExtendedExpressionAccess() {
		return pExtendedExpression;
	}
	
	public ParserRule getExtendedExpressionRule() {
		return getExtendedExpressionAccess().getRule();
	}
	
	//SortOrder:
	//    {SortOrder} '('
	//    (components+=SortOrderComponent
	//    (',' components+=SortOrderComponent)*)?
	//    ')';
	public SortOrderElements getSortOrderAccess() {
		return pSortOrder;
	}
	
	public ParserRule getSortOrderRule() {
		return getSortOrderAccess().getRule();
	}
	
	//SortOrderComponent:
	//    reverse?='reverse'? feature=SortOrderFeature;
	public SortOrderComponentElements getSortOrderComponentAccess() {
		return pSortOrderComponent;
	}
	
	public ParserRule getSortOrderComponentRule() {
		return getSortOrderComponentAccess().getRule();
	}
	
	//SortOrderFeature returns SimpleFeatureCall:
	//    {SortOrderFeature} feature=[AbstractFeature]
	//    ({SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature])*;
	public SortOrderFeatureElements getSortOrderFeatureAccess() {
		return pSortOrderFeature;
	}
	
	public ParserRule getSortOrderFeatureRule() {
		return getSortOrderFeatureAccess().getRule();
	}
	
	//CreateExpression:
	//    'create' unique?='unique'? object=[ObjectDeclaration] '('
	//    (arguments+=CreateArgument (',' arguments+=CreateArgument)*)?
	//    ')';
	public CreateExpressionElements getCreateExpressionAccess() {
		return pCreateExpression;
	}
	
	public ParserRule getCreateExpressionRule() {
		return getCreateExpressionAccess().getRule();
	}
	
	//CreateArgument:
	//    attribute=[AttributeDefinition] '=>' value=Expression
	//    | 'Current_State' '=>' currentState=[StateDeclaration];
	public CreateArgumentElements getCreateArgumentAccess() {
		return pCreateArgument;
	}
	
	public ParserRule getCreateArgumentRule() {
		return getCreateArgumentAccess().getRule();
	}
	
	//FindExpression:
	//    type=FindType expression=PostfixNoActionCallExpression
	//    '(' where=FindCondition? ')';
	public FindExpressionElements getFindExpressionAccess() {
		return pFindExpression;
	}
	
	public ParserRule getFindExpressionRule() {
		return getFindExpressionAccess().getRule();
	}
	
	///* SuppressWarnings[all] */
	//enum FindType:
	//    find
	//    | find='find_all'
	//    | find_one
	//    | find_only;
	public FindTypeElements getFindTypeAccess() {
		return eFindType;
	}
	
	public EnumRule getFindTypeRule() {
		return getFindTypeAccess().getRule();
	}
	
	//PostfixExpression returns Expression:
	//    PrimaryExpression
	//    ( {ActionCall.receiver=current} =>'(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
	//    | {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
	//    | {TerminatorActionCall.receiver=current} '~>' terminatorAction=[AbstractFeature] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
	//    | {IndexedExpression.receiver=current} '[' brackets=Expression ']'
	//    | {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic|CharacteristicID] (=> '('
	//        (arguments+=Expression (',' arguments+=Expression)*)?
	//      ')')?
	//    )*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//CharacteristicID:
	//        ID | 'range' |'delta';
	public CharacteristicIDElements getCharacteristicIDAccess() {
		return pCharacteristicID;
	}
	
	public ParserRule getCharacteristicIDRule() {
		return getCharacteristicIDAccess().getRule();
	}
	
	//PostfixNoActionCallExpression returns Expression:
	//    PrimaryNoActionCallExpression
	//    ( {SimpleFeatureCall.receiver=current} '.' feature=[AbstractFeature]
	//    | {IndexedExpression.receiver=current} '[' brackets=Expression ']'
	//    | {CharacteristicCall.receiver=current} '\'' characteristic=[Characteristic])*;
	public PostfixNoActionCallExpressionElements getPostfixNoActionCallExpressionAccess() {
		return pPostfixNoActionCallExpression;
	}
	
	public ParserRule getPostfixNoActionCallExpressionRule() {
		return getPostfixNoActionCallExpressionAccess().getRule();
	}
	
	//PrimaryNoActionCallExpression returns Expression:
	//    Literal
	//    | ParenthesisedExpression
	//    | SimpleFeatureCall
	//    | TypeNameExpression;
	public PrimaryNoActionCallExpressionElements getPrimaryNoActionCallExpressionAccess() {
		return pPrimaryNoActionCallExpression;
	}
	
	public ParserRule getPrimaryNoActionCallExpressionRule() {
		return getPrimaryNoActionCallExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//    Literal
	//    | ParenthesisedExpression
	//    | SimpleFeatureCall
	//    | TypeNameExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//TypeNameExpression returns Expression:
	//    InstanceTypeReference
	//    | AbstractCollectionTypeReference;
	public TypeNameExpressionElements getTypeNameExpressionAccess() {
		return pTypeNameExpression;
	}
	
	public ParserRule getTypeNameExpressionRule() {
		return getTypeNameExpressionAccess().getRule();
	}
	
	//SimpleFeatureCall:
	//    feature=[AbstractFeature|ScopedName];
	public SimpleFeatureCallElements getSimpleFeatureCallAccess() {
		return pSimpleFeatureCall;
	}
	
	public ParserRule getSimpleFeatureCallRule() {
		return getSimpleFeatureCallAccess().getRule();
	}
	
	//ParenthesisedExpression returns Expression:
	//    '(' Expression
	//        ({StructureAggregateExpression.elements+=current} (',' elements+=Expression)+)?
	//    ')';
	public ParenthesisedExpressionElements getParenthesisedExpressionAccess() {
		return pParenthesisedExpression;
	}
	
	public ParserRule getParenthesisedExpressionRule() {
		return getParenthesisedExpressionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Literals
	////---------------------------------------------------------
	//Literal returns Expression:
	//    IntegerLiteral
	//    | RealLiteral
	//    | CharacterLiteral
	//    | StringLiteral
	//    | DurationLiteral
	//    | TimestampLiteral
	//    | BooleanLiteral
	//    | NullLiteral
	//    | FlushLiteral
	//    | ThisLiteral
	//    | ConsoleLiteral
	//    | EndlLiteral
	//    | LineNoLiteral
	//    | FileNameLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//    value=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//    value=INTEGER;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//CharacterLiteral:
	//    value=CHAR;
	public CharacterLiteralElements getCharacterLiteralAccess() {
		return pCharacterLiteral;
	}
	
	public ParserRule getCharacterLiteralRule() {
		return getCharacterLiteralAccess().getRule();
	}
	
	//DurationLiteral:
	//    value=DURATION;
	public DurationLiteralElements getDurationLiteralAccess() {
		return pDurationLiteral;
	}
	
	public ParserRule getDurationLiteralRule() {
		return getDurationLiteralAccess().getRule();
	}
	
	//TimestampLiteral:
	//    value=TIMESTAMP;
	public TimestampLiteralElements getTimestampLiteralAccess() {
		return pTimestampLiteral;
	}
	
	public ParserRule getTimestampLiteralRule() {
		return getTimestampLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//    value?='true' | {BooleanLiteral} 'false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//NullLiteral:
	//    {NullLiteral} 'null';
	public NullLiteralElements getNullLiteralAccess() {
		return pNullLiteral;
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}
	
	//FlushLiteral:
	//    {FlushLiteral} 'flush';
	public FlushLiteralElements getFlushLiteralAccess() {
		return pFlushLiteral;
	}
	
	public ParserRule getFlushLiteralRule() {
		return getFlushLiteralAccess().getRule();
	}
	
	//ThisLiteral:
	//    {ThisLiteral} 'this';
	public ThisLiteralElements getThisLiteralAccess() {
		return pThisLiteral;
	}
	
	public ParserRule getThisLiteralRule() {
		return getThisLiteralAccess().getRule();
	}
	
	//ConsoleLiteral:
	//    {ConsoleLiteral} 'console';
	public ConsoleLiteralElements getConsoleLiteralAccess() {
		return pConsoleLiteral;
	}
	
	public ParserRule getConsoleLiteralRule() {
		return getConsoleLiteralAccess().getRule();
	}
	
	//EndlLiteral:
	//    {EndlLiteral} 'endl';
	public EndlLiteralElements getEndlLiteralAccess() {
		return pEndlLiteral;
	}
	
	public ParserRule getEndlLiteralRule() {
		return getEndlLiteralAccess().getRule();
	}
	
	//LineNoLiteral:
	//    {LineNoLiteral} '#LINE#';
	public LineNoLiteralElements getLineNoLiteralAccess() {
		return pLineNoLiteral;
	}
	
	public ParserRule getLineNoLiteralRule() {
		return getLineNoLiteralAccess().getRule();
	}
	
	//FileNameLiteral:
	//    {FileNameLiteral} '#FILE#';
	public FileNameLiteralElements getFileNameLiteralAccess() {
		return pFileNameLiteral;
	}
	
	public ParserRule getFileNameLiteralRule() {
		return getFileNameLiteralAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Dummy terminal rules.
	//// Antlr's lexer is not capable of lexing MASLs literals.
	//// The real rules are defined in MASL.flex.
	////---------------------------------------------------------
	//terminal ID:             ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal REAL: 			INTEGER '.' INTEGER;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal INTEGER: 		('0'..'9')+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//terminal STRING: 		'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal CHAR:			'\'' . '\'';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal DURATION:		'@P' -> '@';
	public TerminalRule getDURATIONRule() {
		return tDURATION;
	}
	
	//terminal TIMESTAMP:		'@' -> '@';
	public TerminalRule getTIMESTAMPRule() {
		return tTIMESTAMP;
	}
	
	//terminal SL_COMMENT: 	'//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS: 			(' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER: 	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
