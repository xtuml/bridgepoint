/*
 * generated by Xtext 2.39.0
 */
package org.xtuml.bp.xtext.masl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtuml.bp.xtext.masl.services.MASLGrammarAccess;

@SuppressWarnings("all")
public class MASLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MASLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AttributeDefinition___ReferentialKeyword_4_0_LeftParenthesisKeyword_4_1_RightParenthesisKeyword_4_3__q;
	protected AbstractElementAlias match_BuiltinLibraryDefinition_BuiltinKeyword_5_q;
	protected AbstractElementAlias match_CaseStatement_CaseKeyword_6_q;
	protected AbstractElementAlias match_CodeBlockStatement_DeclareKeyword_0_q;
	protected AbstractElementAlias match_CodeBlock_ExceptionKeyword_4_0_q;
	protected AbstractElementAlias match_DomainDefinition_DomainKeyword_5_q;
	protected AbstractElementAlias match_DomainDefinition_SemicolonKeyword_6_q;
	protected AbstractElementAlias match_DomainServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0;
	protected AbstractElementAlias match_DomainServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0;
	protected AbstractElementAlias match_DomainServiceDefinition_SemicolonKeyword_10_q;
	protected AbstractElementAlias match_DomainServiceDefinition___FunctionKeyword_9_1_or_ServiceKeyword_9_0__q;
	protected AbstractElementAlias match_Enumerator_ColonEqualsSignKeyword_1_0_1_or_EqualsSignKeyword_1_0_0;
	protected AbstractElementAlias match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__a;
	protected AbstractElementAlias match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__p;
	protected AbstractElementAlias match_ForStatement_LoopKeyword_8_q;
	protected AbstractElementAlias match_IfStatement_IfKeyword_7_q;
	protected AbstractElementAlias match_NavigateExpression___LeftParenthesisKeyword_1_1_0_2_0_RightParenthesisKeyword_1_1_0_2_2__q;
	protected AbstractElementAlias match_ObjectDefinition_ObjectKeyword_5_q;
	protected AbstractElementAlias match_ObjectServiceDeclaration_FunctionKeyword_3_1_or_ServiceKeyword_3_0;
	protected AbstractElementAlias match_ObjectServiceDefinition_FunctionKeyword_3_1_or_ServiceKeyword_3_0;
	protected AbstractElementAlias match_ObjectServiceDefinition_SemicolonKeyword_14_q;
	protected AbstractElementAlias match_ObjectServiceDefinition___FunctionKeyword_13_1_or_ServiceKeyword_13_0__q;
	protected AbstractElementAlias match_ParenthesisedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_ParenthesisedExpression_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_PostfixExpression___LeftParenthesisKeyword_1_4_3_0_RightParenthesisKeyword_1_4_3_2__q;
	protected AbstractElementAlias match_ProjectDefinition_ProjectKeyword_5_q;
	protected AbstractElementAlias match_ProjectDefinition_SemicolonKeyword_6_q;
	protected AbstractElementAlias match_RaiseStatement___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q;
	protected AbstractElementAlias match_StateDefinition_SemicolonKeyword_11_q;
	protected AbstractElementAlias match_StateDefinition_StateKeyword_10_q;
	protected AbstractElementAlias match_StructureTypeDefinition_StructureKeyword_4_q;
	protected AbstractElementAlias match_TerminatorDefinition_TerminatorKeyword_5_q;
	protected AbstractElementAlias match_TerminatorServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0;
	protected AbstractElementAlias match_TerminatorServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0;
	protected AbstractElementAlias match_TerminatorServiceDefinition_SemicolonKeyword_12_q;
	protected AbstractElementAlias match_TerminatorServiceDefinition___FunctionKeyword_11_1_or_ServiceKeyword_11_0__q;
	protected AbstractElementAlias match_TransitionTable_TransitionKeyword_5_q;
	protected AbstractElementAlias match_TypeDeclaration_SemicolonKeyword_6_q;
	protected AbstractElementAlias match_WhileStatement_LoopKeyword_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MASLGrammarAccess) access;
		match_AttributeDefinition___ReferentialKeyword_4_0_LeftParenthesisKeyword_4_1_RightParenthesisKeyword_4_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAttributeDefinitionAccess().getReferentialKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getAttributeDefinitionAccess().getLeftParenthesisKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getAttributeDefinitionAccess().getRightParenthesisKeyword_4_3()));
		match_BuiltinLibraryDefinition_BuiltinKeyword_5_q = new TokenAlias(false, true, grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinKeyword_5());
		match_CaseStatement_CaseKeyword_6_q = new TokenAlias(false, true, grammarAccess.getCaseStatementAccess().getCaseKeyword_6());
		match_CodeBlockStatement_DeclareKeyword_0_q = new TokenAlias(false, true, grammarAccess.getCodeBlockStatementAccess().getDeclareKeyword_0());
		match_CodeBlock_ExceptionKeyword_4_0_q = new TokenAlias(false, true, grammarAccess.getCodeBlockAccess().getExceptionKeyword_4_0());
		match_DomainDefinition_DomainKeyword_5_q = new TokenAlias(false, true, grammarAccess.getDomainDefinitionAccess().getDomainKeyword_5());
		match_DomainDefinition_SemicolonKeyword_6_q = new TokenAlias(false, true, grammarAccess.getDomainDefinitionAccess().getSemicolonKeyword_6());
		match_DomainServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDomainServiceDeclarationAccess().getFunctionKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getDomainServiceDeclarationAccess().getServiceKeyword_1_0()));
		match_DomainServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_1_0()));
		match_DomainServiceDefinition_SemicolonKeyword_10_q = new TokenAlias(false, true, grammarAccess.getDomainServiceDefinitionAccess().getSemicolonKeyword_10());
		match_DomainServiceDefinition___FunctionKeyword_9_1_or_ServiceKeyword_9_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_9_1()), new TokenAlias(false, false, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_9_0()));
		match_Enumerator_ColonEqualsSignKeyword_1_0_1_or_EqualsSignKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEnumeratorAccess().getColonEqualsSignKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_0_0()));
		match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__a = new GroupAlias(true, true, new TokenAlias(true, true, grammarAccess.getFindUnaryAccess().getNotKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getFindUnaryAccess().getLeftParenthesisKeyword_1_0()));
		match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__p = new GroupAlias(true, false, new TokenAlias(true, true, grammarAccess.getFindUnaryAccess().getNotKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getFindUnaryAccess().getLeftParenthesisKeyword_1_0()));
		match_ForStatement_LoopKeyword_8_q = new TokenAlias(false, true, grammarAccess.getForStatementAccess().getLoopKeyword_8());
		match_IfStatement_IfKeyword_7_q = new TokenAlias(false, true, grammarAccess.getIfStatementAccess().getIfKeyword_7());
		match_NavigateExpression___LeftParenthesisKeyword_1_1_0_2_0_RightParenthesisKeyword_1_1_0_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getLeftParenthesisKeyword_1_1_0_2_0()), new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getRightParenthesisKeyword_1_1_0_2_2()));
		match_ObjectDefinition_ObjectKeyword_5_q = new TokenAlias(false, true, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_5());
		match_ObjectServiceDeclaration_FunctionKeyword_3_1_or_ServiceKeyword_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectServiceDeclarationAccess().getFunctionKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getObjectServiceDeclarationAccess().getServiceKeyword_3_0()));
		match_ObjectServiceDefinition_FunctionKeyword_3_1_or_ServiceKeyword_3_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_3_0()));
		match_ObjectServiceDefinition_SemicolonKeyword_14_q = new TokenAlias(false, true, grammarAccess.getObjectServiceDefinitionAccess().getSemicolonKeyword_14());
		match_ObjectServiceDefinition___FunctionKeyword_13_1_or_ServiceKeyword_13_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_13_1()), new TokenAlias(false, false, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_13_0()));
		match_ParenthesisedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getParenthesisedExpressionAccess().getLeftParenthesisKeyword_0());
		match_ParenthesisedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getParenthesisedExpressionAccess().getLeftParenthesisKeyword_0());
		match_PostfixExpression___LeftParenthesisKeyword_1_4_3_0_RightParenthesisKeyword_1_4_3_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_4_3_0()), new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_4_3_2()));
		match_ProjectDefinition_ProjectKeyword_5_q = new TokenAlias(false, true, grammarAccess.getProjectDefinitionAccess().getProjectKeyword_5());
		match_ProjectDefinition_SemicolonKeyword_6_q = new TokenAlias(false, true, grammarAccess.getProjectDefinitionAccess().getSemicolonKeyword_6());
		match_RaiseStatement___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getRaiseStatementAccess().getLeftParenthesisKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getRaiseStatementAccess().getRightParenthesisKeyword_2_2()));
		match_StateDefinition_SemicolonKeyword_11_q = new TokenAlias(false, true, grammarAccess.getStateDefinitionAccess().getSemicolonKeyword_11());
		match_StateDefinition_StateKeyword_10_q = new TokenAlias(false, true, grammarAccess.getStateDefinitionAccess().getStateKeyword_10());
		match_StructureTypeDefinition_StructureKeyword_4_q = new TokenAlias(false, true, grammarAccess.getStructureTypeDefinitionAccess().getStructureKeyword_4());
		match_TerminatorDefinition_TerminatorKeyword_5_q = new TokenAlias(false, true, grammarAccess.getTerminatorDefinitionAccess().getTerminatorKeyword_5());
		match_TerminatorServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTerminatorServiceDeclarationAccess().getFunctionKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getTerminatorServiceDeclarationAccess().getServiceKeyword_1_0()));
		match_TerminatorServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_1_0()));
		match_TerminatorServiceDefinition_SemicolonKeyword_12_q = new TokenAlias(false, true, grammarAccess.getTerminatorServiceDefinitionAccess().getSemicolonKeyword_12());
		match_TerminatorServiceDefinition___FunctionKeyword_11_1_or_ServiceKeyword_11_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_11_1()), new TokenAlias(false, false, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_11_0()));
		match_TransitionTable_TransitionKeyword_5_q = new TokenAlias(false, true, grammarAccess.getTransitionTableAccess().getTransitionKeyword_5());
		match_TypeDeclaration_SemicolonKeyword_6_q = new TokenAlias(false, true, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_6());
		match_WhileStatement_LoopKeyword_5_q = new TokenAlias(false, true, grammarAccess.getWhileStatementAccess().getLoopKeyword_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AttributeDefinition___ReferentialKeyword_4_0_LeftParenthesisKeyword_4_1_RightParenthesisKeyword_4_3__q.equals(syntax))
				emit_AttributeDefinition___ReferentialKeyword_4_0_LeftParenthesisKeyword_4_1_RightParenthesisKeyword_4_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BuiltinLibraryDefinition_BuiltinKeyword_5_q.equals(syntax))
				emit_BuiltinLibraryDefinition_BuiltinKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CaseStatement_CaseKeyword_6_q.equals(syntax))
				emit_CaseStatement_CaseKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CodeBlockStatement_DeclareKeyword_0_q.equals(syntax))
				emit_CodeBlockStatement_DeclareKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CodeBlock_ExceptionKeyword_4_0_q.equals(syntax))
				emit_CodeBlock_ExceptionKeyword_4_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainDefinition_DomainKeyword_5_q.equals(syntax))
				emit_DomainDefinition_DomainKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainDefinition_SemicolonKeyword_6_q.equals(syntax))
				emit_DomainDefinition_SemicolonKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0.equals(syntax))
				emit_DomainServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0.equals(syntax))
				emit_DomainServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainServiceDefinition_SemicolonKeyword_10_q.equals(syntax))
				emit_DomainServiceDefinition_SemicolonKeyword_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DomainServiceDefinition___FunctionKeyword_9_1_or_ServiceKeyword_9_0__q.equals(syntax))
				emit_DomainServiceDefinition___FunctionKeyword_9_1_or_ServiceKeyword_9_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Enumerator_ColonEqualsSignKeyword_1_0_1_or_EqualsSignKeyword_1_0_0.equals(syntax))
				emit_Enumerator_ColonEqualsSignKeyword_1_0_1_or_EqualsSignKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__a.equals(syntax))
				emit_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__p.equals(syntax))
				emit_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForStatement_LoopKeyword_8_q.equals(syntax))
				emit_ForStatement_LoopKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_IfStatement_IfKeyword_7_q.equals(syntax))
				emit_IfStatement_IfKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NavigateExpression___LeftParenthesisKeyword_1_1_0_2_0_RightParenthesisKeyword_1_1_0_2_2__q.equals(syntax))
				emit_NavigateExpression___LeftParenthesisKeyword_1_1_0_2_0_RightParenthesisKeyword_1_1_0_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDefinition_ObjectKeyword_5_q.equals(syntax))
				emit_ObjectDefinition_ObjectKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectServiceDeclaration_FunctionKeyword_3_1_or_ServiceKeyword_3_0.equals(syntax))
				emit_ObjectServiceDeclaration_FunctionKeyword_3_1_or_ServiceKeyword_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectServiceDefinition_FunctionKeyword_3_1_or_ServiceKeyword_3_0.equals(syntax))
				emit_ObjectServiceDefinition_FunctionKeyword_3_1_or_ServiceKeyword_3_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectServiceDefinition_SemicolonKeyword_14_q.equals(syntax))
				emit_ObjectServiceDefinition_SemicolonKeyword_14_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectServiceDefinition___FunctionKeyword_13_1_or_ServiceKeyword_13_0__q.equals(syntax))
				emit_ObjectServiceDefinition___FunctionKeyword_13_1_or_ServiceKeyword_13_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesisedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_ParenthesisedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ParenthesisedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_ParenthesisedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PostfixExpression___LeftParenthesisKeyword_1_4_3_0_RightParenthesisKeyword_1_4_3_2__q.equals(syntax))
				emit_PostfixExpression___LeftParenthesisKeyword_1_4_3_0_RightParenthesisKeyword_1_4_3_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProjectDefinition_ProjectKeyword_5_q.equals(syntax))
				emit_ProjectDefinition_ProjectKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ProjectDefinition_SemicolonKeyword_6_q.equals(syntax))
				emit_ProjectDefinition_SemicolonKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RaiseStatement___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q.equals(syntax))
				emit_RaiseStatement___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateDefinition_SemicolonKeyword_11_q.equals(syntax))
				emit_StateDefinition_SemicolonKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateDefinition_StateKeyword_10_q.equals(syntax))
				emit_StateDefinition_StateKeyword_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StructureTypeDefinition_StructureKeyword_4_q.equals(syntax))
				emit_StructureTypeDefinition_StructureKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TerminatorDefinition_TerminatorKeyword_5_q.equals(syntax))
				emit_TerminatorDefinition_TerminatorKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TerminatorServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0.equals(syntax))
				emit_TerminatorServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TerminatorServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0.equals(syntax))
				emit_TerminatorServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TerminatorServiceDefinition_SemicolonKeyword_12_q.equals(syntax))
				emit_TerminatorServiceDefinition_SemicolonKeyword_12_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TerminatorServiceDefinition___FunctionKeyword_11_1_or_ServiceKeyword_11_0__q.equals(syntax))
				emit_TerminatorServiceDefinition___FunctionKeyword_11_1_or_ServiceKeyword_11_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TransitionTable_TransitionKeyword_5_q.equals(syntax))
				emit_TransitionTable_TransitionKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TypeDeclaration_SemicolonKeyword_6_q.equals(syntax))
				emit_TypeDeclaration_SemicolonKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_WhileStatement_LoopKeyword_5_q.equals(syntax))
				emit_WhileStatement_LoopKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('referential' '(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ':' (ambiguity) type=AbstractTypeReference
	 *     preferred?='preferred' (ambiguity) type=AbstractTypeReference
	 *     unique?='unique' (ambiguity) type=AbstractTypeReference
	 
	 * </pre>
	 */
	protected void emit_AttributeDefinition___ReferentialKeyword_4_0_LeftParenthesisKeyword_4_1_RightParenthesisKeyword_4_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'builtin'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'builtin' 'is' 'end' (ambiguity) ';' (rule start)
	 *     characteristics+=Characteristic 'end' (ambiguity) ';' (rule end)
	 *     exceptions+=ExceptionDeclaration 'end' (ambiguity) ';' (rule end)
	 *     types+=BuiltinTypeDeclaration 'end' (ambiguity) ';' (rule end)
	 
	 * </pre>
	 */
	protected void emit_BuiltinLibraryDefinition_BuiltinKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'case'?
	 *
	 * This ambiguous syntax occurs at:
	 *     alternatives+=CaseAlternative 'end' (ambiguity) ';' (rule end)
	 *     alternatives+=CaseAlternative 'end' (ambiguity) ';' pragmas+=Pragma
	 *     alternatives+=CaseAlternative 'end' (ambiguity) (rule end)
	 *     default=CaseOthers 'end' (ambiguity) ';' (rule end)
	 *     default=CaseOthers 'end' (ambiguity) ';' pragmas+=Pragma
	 *     default=CaseOthers 'end' (ambiguity) (rule end)
	 *     value=Expression 'is' 'end' (ambiguity) ';' (rule end)
	 *     value=Expression 'is' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     value=Expression 'is' 'end' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_CaseStatement_CaseKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'declare'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'begin' 'exception' defaultHandler=DefaultExceptionHandler
	 *     (rule start) (ambiguity) 'begin' 'exception' exceptionHandler+=ExceptionHandler
	 *     (rule start) (ambiguity) 'begin' 'exception'? 'end' ';' (rule start)
	 *     (rule start) (ambiguity) 'begin' 'exception'? 'end' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'begin' 'exception'? 'end' (rule start)
	 *     (rule start) (ambiguity) 'begin' statements+=Statement
	 *     (rule start) (ambiguity) variables+=VariableDeclaration
	 
	 * </pre>
	 */
	protected void emit_CodeBlockStatement_DeclareKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'exception'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'begin' (ambiguity) 'end' (rule start)
	 *     (rule start) 'declare'? 'begin' (ambiguity) 'end' ';' (rule start)
	 *     (rule start) 'declare'? 'begin' (ambiguity) 'end' ';' pragmas+=Pragma
	 *     (rule start) 'declare'? 'begin' (ambiguity) 'end' (rule start)
	 *     statements+=Statement (ambiguity) 'end' ';' (rule end)
	 *     statements+=Statement (ambiguity) 'end' ';' pragmas+=Pragma
	 *     statements+=Statement (ambiguity) 'end' (rule end)
	 *     variables+=VariableDeclaration 'begin' (ambiguity) 'end' ';' (rule end)
	 *     variables+=VariableDeclaration 'begin' (ambiguity) 'end' ';' pragmas+=Pragma
	 *     variables+=VariableDeclaration 'begin' (ambiguity) 'end' (rule end)
	 
	 * </pre>
	 */
	protected void emit_CodeBlock_ExceptionKeyword_4_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'domain'?
	 *
	 * This ambiguous syntax occurs at:
	 *     exceptions+=ExceptionDeclaration 'end' (ambiguity) ';'? (rule end)
	 *     exceptions+=ExceptionDeclaration 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     name=ID 'is' 'end' (ambiguity) ';'? (rule end)
	 *     name=ID 'is' 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     objectDefs+=ObjectDefinition 'end' (ambiguity) ';'? (rule end)
	 *     objectDefs+=ObjectDefinition 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     objects+=ObjectDeclaration 'end' (ambiguity) ';'? (rule end)
	 *     objects+=ObjectDeclaration 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     relationships+=RelationshipDefinition 'end' (ambiguity) ';'? (rule end)
	 *     relationships+=RelationshipDefinition 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     services+=DomainServiceDeclaration 'end' (ambiguity) ';'? (rule end)
	 *     services+=DomainServiceDeclaration 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     terminators+=TerminatorDefinition 'end' (ambiguity) ';'? (rule end)
	 *     terminators+=TerminatorDefinition 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     typeForwards+=TypeForwardDeclaration 'end' (ambiguity) ';'? (rule end)
	 *     typeForwards+=TypeForwardDeclaration 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     types+=TypeDeclaration 'end' (ambiguity) ';'? (rule end)
	 *     types+=TypeDeclaration 'end' (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_DomainDefinition_DomainKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     exceptions+=ExceptionDeclaration 'end' 'domain'? (ambiguity) (rule end)
	 *     exceptions+=ExceptionDeclaration 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     name=ID 'is' 'end' 'domain'? (ambiguity) (rule end)
	 *     name=ID 'is' 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     objectDefs+=ObjectDefinition 'end' 'domain'? (ambiguity) (rule end)
	 *     objectDefs+=ObjectDefinition 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     objects+=ObjectDeclaration 'end' 'domain'? (ambiguity) (rule end)
	 *     objects+=ObjectDeclaration 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     relationships+=RelationshipDefinition 'end' 'domain'? (ambiguity) (rule end)
	 *     relationships+=RelationshipDefinition 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     services+=DomainServiceDeclaration 'end' 'domain'? (ambiguity) (rule end)
	 *     services+=DomainServiceDeclaration 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     terminators+=TerminatorDefinition 'end' 'domain'? (ambiguity) (rule end)
	 *     terminators+=TerminatorDefinition 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     typeForwards+=TypeForwardDeclaration 'end' 'domain'? (ambiguity) (rule end)
	 *     typeForwards+=TypeForwardDeclaration 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 *     types+=TypeDeclaration 'end' 'domain'? (ambiguity) (rule end)
	 *     types+=TypeDeclaration 'end' 'domain'? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_DomainDefinition_SemicolonKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     visibility=Visibility (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_DomainServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) domain=[DomainDefinition|ID]
	 *     visibility=Visibility (ambiguity) domain=[DomainDefinition|ID]
	 
	 * </pre>
	 */
	protected void emit_DomainServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) (rule end)
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_DomainServiceDefinition_SemicolonKeyword_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('service' | 'function')?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock (ambiguity) ';'? (rule end)
	 *     body=CodeBlock (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_DomainServiceDefinition___FunctionKeyword_9_1_or_ServiceKeyword_9_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '=' | ':='
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) expression=ConstExpression
	 
	 * </pre>
	 */
	protected void emit_Enumerator_ColonEqualsSignKeyword_1_0_1_or_EqualsSignKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('not'* '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) feature=[AttributeDefinition|ID]
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {IndexedExpression.receiver=}
	 *     (rule start) (ambiguity) {LogicalAnd.lhs=}
	 *     (rule start) (ambiguity) {LogicalOr.lhs=}
	 *     (rule start) (ambiguity) {LogicalXor.lhs=}
	 *     (rule start) (ambiguity) {RelationalExp.lhs=}
	 *     (rule start) (ambiguity) {SimpleFeatureCall.receiver=}
	 
	 * </pre>
	 */
	protected void emit_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('not'* '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) feature=[AttributeDefinition|ID]
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {IndexedExpression.receiver=}
	 *     (rule start) (ambiguity) {LogicalAnd.lhs=}
	 *     (rule start) (ambiguity) {LogicalOr.lhs=}
	 *     (rule start) (ambiguity) {LogicalXor.lhs=}
	 *     (rule start) (ambiguity) {RelationalExp.lhs=}
	 *     (rule start) (ambiguity) {SimpleFeatureCall.receiver=}
	 
	 * </pre>
	 */
	protected void emit_FindUnary___NotKeyword_0_0_a_LeftParenthesisKeyword_1_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'loop'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expression=Expression 'loop' 'end' (ambiguity) ';' (rule end)
	 *     expression=Expression 'loop' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     expression=Expression 'loop' 'end' (ambiguity) (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' pragmas+=Pragma
	 *     statements+=Statement 'end' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ForStatement_LoopKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'if'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=Expression 'then' 'end' (ambiguity) ';' (rule end)
	 *     condition=Expression 'then' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     condition=Expression 'then' 'end' (ambiguity) (rule end)
	 *     else=ElseBlock 'end' (ambiguity) ';' (rule end)
	 *     else=ElseBlock 'end' (ambiguity) ';' pragmas+=Pragma
	 *     else=ElseBlock 'end' (ambiguity) (rule end)
	 *     elseIfs+=ElsifBlock 'end' (ambiguity) ';' (rule end)
	 *     elseIfs+=ElsifBlock 'end' (ambiguity) ';' pragmas+=Pragma
	 *     elseIfs+=ElsifBlock 'end' (ambiguity) (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' pragmas+=Pragma
	 *     statements+=Statement 'end' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_IfStatement_IfKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     navigation=RelationshipNavigation (ambiguity) ')' (rule end)
	 *     navigation=RelationshipNavigation (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_NavigateExpression___LeftParenthesisKeyword_1_1_0_2_0_RightParenthesisKeyword_1_1_0_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'object'?
	 *
	 * This ambiguous syntax occurs at:
	 *     attributes+=AttributeDefinition 'end' (ambiguity) ';' (rule end)
	 *     attributes+=AttributeDefinition 'end' (ambiguity) ';' pragmas+=Pragma
	 *     events+=EventDefinition 'end' (ambiguity) ';' (rule end)
	 *     events+=EventDefinition 'end' (ambiguity) ';' pragmas+=Pragma
	 *     identifiers+=IdentifierDefinition 'end' (ambiguity) ';' (rule end)
	 *     identifiers+=IdentifierDefinition 'end' (ambiguity) ';' pragmas+=Pragma
	 *     name=ID 'is' 'end' (ambiguity) ';' (rule end)
	 *     name=ID 'is' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     services+=ObjectServiceDeclaration 'end' (ambiguity) ';' (rule end)
	 *     services+=ObjectServiceDeclaration 'end' (ambiguity) ';' pragmas+=Pragma
	 *     states+=StateDeclaration 'end' (ambiguity) ';' (rule end)
	 *     states+=StateDeclaration 'end' (ambiguity) ';' pragmas+=Pragma
	 *     transitions+=TransitionTable 'end' (ambiguity) ';' (rule end)
	 *     transitions+=TransitionTable 'end' (ambiguity) ';' pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_ObjectDefinition_ObjectKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     instance?='instance' (ambiguity) name=ID
	 *     relationship=[RelationshipDefinition|ID] ')' (ambiguity) name=ID
	 *     visibility=Visibility (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_ObjectServiceDeclaration_FunctionKeyword_3_1_or_ServiceKeyword_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) domain=[DomainDefinition|ID]
	 *     instance?='instance' (ambiguity) domain=[DomainDefinition|ID]
	 *     relationship=[RelationshipDefinition|ID] (ambiguity) domain=[DomainDefinition|ID]
	 *     visibility=Visibility (ambiguity) domain=[DomainDefinition|ID]
	 
	 * </pre>
	 */
	protected void emit_ObjectServiceDefinition_FunctionKeyword_3_1_or_ServiceKeyword_3_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) (rule end)
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_ObjectServiceDefinition_SemicolonKeyword_14_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('service' | 'function')?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock (ambiguity) ';'? (rule end)
	 *     body=CodeBlock (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_ObjectServiceDefinition___FunctionKeyword_13_1_or_ServiceKeyword_13_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#FILE#' ';' (rule start)
	 *     (rule start) (ambiguity) '#FILE#' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) '#FILE#' (rule start)
	 *     (rule start) (ambiguity) '#LINE#' ';' (rule start)
	 *     (rule start) (ambiguity) '#LINE#' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) '#LINE#' (rule start)
	 *     (rule start) (ambiguity) 'array' '(' expression=Expression
	 *     (rule start) (ambiguity) 'array' '(' indexType=RangeTypeReference
	 *     (rule start) (ambiguity) 'bag' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'console' ';' (rule start)
	 *     (rule start) (ambiguity) 'console' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'console' (rule start)
	 *     (rule start) (ambiguity) 'create' object=[ObjectDeclaration|ID]
	 *     (rule start) (ambiguity) 'create' unique?='unique'
	 *     (rule start) (ambiguity) 'dictionary' ';' (rule start)
	 *     (rule start) (ambiguity) 'dictionary' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'dictionary' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'dictionary' (rule start)
	 *     (rule start) (ambiguity) 'dictionary' keyType=AbstractDictKeyTypeRef
	 *     (rule start) (ambiguity) 'endl' ';' (rule start)
	 *     (rule start) (ambiguity) 'endl' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'endl' (rule start)
	 *     (rule start) (ambiguity) 'false' ';' (rule start)
	 *     (rule start) (ambiguity) 'false' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'flush' ';' (rule start)
	 *     (rule start) (ambiguity) 'flush' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'flush' (rule start)
	 *     (rule start) (ambiguity) 'instance' 'of' instance=[ObjectDeclaration|ScopedName]
	 *     (rule start) (ambiguity) 'null' ';' (rule start)
	 *     (rule start) (ambiguity) 'null' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'sequence' '(' expression=Expression
	 *     (rule start) (ambiguity) 'sequence' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'set' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'this' ';' (rule start)
	 *     (rule start) (ambiguity) 'this' ';' pragmas+=Pragma
	 *     (rule start) (ambiguity) 'this' (rule start)
	 *     (rule start) (ambiguity) anonymous?='anonymous'
	 *     (rule start) (ambiguity) feature=[AbstractFeature|ScopedName]
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) type=FindType
	 *     (rule start) (ambiguity) type=LinkType
	 *     (rule start) (ambiguity) value=CHAR
	 *     (rule start) (ambiguity) value=DURATION
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value=TIMESTAMP
	 *     (rule start) (ambiguity) value?='true'
	 *     (rule start) (ambiguity) {ActionCall.receiver=}
	 *     (rule start) (ambiguity) {AdditiveExp.lhs=}
	 *     (rule start) (ambiguity) {CharacteristicCall.receiver=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {IndexedExpression.receiver=}
	 *     (rule start) (ambiguity) {LogicalAnd.lhs=}
	 *     (rule start) (ambiguity) {LogicalOr.lhs=}
	 *     (rule start) (ambiguity) {LogicalXor.lhs=}
	 *     (rule start) (ambiguity) {MultExp.lhs=}
	 *     (rule start) (ambiguity) {NavigateExpression.lhs=}
	 *     (rule start) (ambiguity) {RangeExpression.from=}
	 *     (rule start) (ambiguity) {RelationalExp.lhs=}
	 *     (rule start) (ambiguity) {SimpleFeatureCall.receiver=}
	 *     (rule start) (ambiguity) {StreamExpression.lhs=}
	 *     (rule start) (ambiguity) {StructureAggregateExpression.elements+=}
	 *     (rule start) (ambiguity) {TerminatorActionCall.receiver=}
	 
	 * </pre>
	 */
	protected void emit_ParenthesisedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#FILE#' ')' (rule start)
	 *     (rule start) (ambiguity) '#FILE#' (rule start)
	 *     (rule start) (ambiguity) '#LINE#' ')' (rule start)
	 *     (rule start) (ambiguity) '#LINE#' (rule start)
	 *     (rule start) (ambiguity) 'array' '(' expression=Expression
	 *     (rule start) (ambiguity) 'array' '(' indexType=RangeTypeReference
	 *     (rule start) (ambiguity) 'bag' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'console' ')' (rule start)
	 *     (rule start) (ambiguity) 'console' (rule start)
	 *     (rule start) (ambiguity) 'create' object=[ObjectDeclaration|ID]
	 *     (rule start) (ambiguity) 'create' unique?='unique'
	 *     (rule start) (ambiguity) 'dictionary' ')' (rule start)
	 *     (rule start) (ambiguity) 'dictionary' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'dictionary' (rule start)
	 *     (rule start) (ambiguity) 'dictionary' keyType=AbstractDictKeyTypeRef
	 *     (rule start) (ambiguity) 'endl' ')' (rule start)
	 *     (rule start) (ambiguity) 'endl' (rule start)
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'flush' ')' (rule start)
	 *     (rule start) (ambiguity) 'flush' (rule start)
	 *     (rule start) (ambiguity) 'instance' 'of' instance=[ObjectDeclaration|ScopedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'sequence' '(' expression=Expression
	 *     (rule start) (ambiguity) 'sequence' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'set' 'of' elementType=AbstractTypeReference
	 *     (rule start) (ambiguity) 'this' ')' (rule start)
	 *     (rule start) (ambiguity) 'this' (rule start)
	 *     (rule start) (ambiguity) anonymous?='anonymous'
	 *     (rule start) (ambiguity) feature=[AbstractFeature|ScopedName]
	 *     (rule start) (ambiguity) operator=UnaryOperator
	 *     (rule start) (ambiguity) type=FindType
	 *     (rule start) (ambiguity) type=LinkType
	 *     (rule start) (ambiguity) value=CHAR
	 *     (rule start) (ambiguity) value=DURATION
	 *     (rule start) (ambiguity) value=INTEGER
	 *     (rule start) (ambiguity) value=REAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value=TIMESTAMP
	 *     (rule start) (ambiguity) value?='true'
	 *     (rule start) (ambiguity) {ActionCall.receiver=}
	 *     (rule start) (ambiguity) {AdditiveExp.lhs=}
	 *     (rule start) (ambiguity) {CharacteristicCall.receiver=}
	 *     (rule start) (ambiguity) {Equality.lhs=}
	 *     (rule start) (ambiguity) {IndexedExpression.receiver=}
	 *     (rule start) (ambiguity) {LogicalAnd.lhs=}
	 *     (rule start) (ambiguity) {LogicalOr.lhs=}
	 *     (rule start) (ambiguity) {LogicalXor.lhs=}
	 *     (rule start) (ambiguity) {MultExp.lhs=}
	 *     (rule start) (ambiguity) {NavigateExpression.lhs=}
	 *     (rule start) (ambiguity) {RangeExpression.from=}
	 *     (rule start) (ambiguity) {RelationalExp.lhs=}
	 *     (rule start) (ambiguity) {SimpleFeatureCall.receiver=}
	 *     (rule start) (ambiguity) {StreamExpression.lhs=}
	 *     (rule start) (ambiguity) {StructureAggregateExpression.elements+=}
	 *     (rule start) (ambiguity) {TerminatorActionCall.receiver=}
	 
	 * </pre>
	 */
	protected void emit_ParenthesisedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     characteristic=[Characteristic|CharacteristicID] (ambiguity) ')' (rule end)
	 *     characteristic=[Characteristic|CharacteristicID] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PostfixExpression___LeftParenthesisKeyword_1_4_3_0_RightParenthesisKeyword_1_4_3_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'project'?
	 *
	 * This ambiguous syntax occurs at:
	 *     domains+=DomainDefinition 'end' (ambiguity) ';'? (rule end)
	 *     domains+=DomainDefinition 'end' (ambiguity) ';'? pragmas+=Pragma
	 *     name=ID 'is' 'end' (ambiguity) ';'? (rule end)
	 *     name=ID 'is' 'end' (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_ProjectDefinition_ProjectKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     domains+=DomainDefinition 'end' 'project'? (ambiguity) (rule end)
	 *     domains+=DomainDefinition 'end' 'project'? (ambiguity) pragmas+=Pragma
	 *     name=ID 'is' 'end' 'project'? (ambiguity) (rule end)
	 *     name=ID 'is' 'end' 'project'? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_ProjectDefinition_SemicolonKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     exception=[ExceptionDeclaration|ScopedName] (ambiguity) ';' (rule end)
	 *     exception=[ExceptionDeclaration|ScopedName] (ambiguity) ';' pragmas+=Pragma
	 *     exception=[ExceptionDeclaration|ScopedName] (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_RaiseStatement___LeftParenthesisKeyword_2_0_RightParenthesisKeyword_2_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock 'state'? (ambiguity) (rule end)
	 *     body=CodeBlock 'state'? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_StateDefinition_SemicolonKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'state'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock (ambiguity) ';'? (rule end)
	 *     body=CodeBlock (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_StateDefinition_StateKeyword_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'structure'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'structure' 'end' (ambiguity) (rule start)
	 *     components+=StructureComponentDefinition 'end' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_StructureTypeDefinition_StructureKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'terminator'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID 'is' 'end' (ambiguity) ';' (rule end)
	 *     name=ID 'is' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     services+=TerminatorServiceDeclaration 'end' (ambiguity) ';' (rule end)
	 *     services+=TerminatorServiceDeclaration 'end' (ambiguity) ';' pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_TerminatorDefinition_TerminatorKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 *     visibility=Visibility (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_TerminatorServiceDeclaration_FunctionKeyword_1_1_or_ServiceKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'service' | 'function'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) domain=[DomainDefinition|ID]
	 *     visibility=Visibility (ambiguity) domain=[DomainDefinition|ID]
	 
	 * </pre>
	 */
	protected void emit_TerminatorServiceDefinition_FunctionKeyword_1_1_or_ServiceKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) (rule end)
	 *     body=CodeBlock ('service' | 'function')? (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_TerminatorServiceDefinition_SemicolonKeyword_12_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('service' | 'function')?
	 *
	 * This ambiguous syntax occurs at:
	 *     body=CodeBlock (ambiguity) ';'? (rule end)
	 *     body=CodeBlock (ambiguity) ';'? pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_TerminatorServiceDefinition___FunctionKeyword_11_1_or_ServiceKeyword_11_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'transition'?
	 *
	 * This ambiguous syntax occurs at:
	 *     rows+=TransitionRow 'end' (ambiguity) ';' (rule end)
	 *     rows+=TransitionRow 'end' (ambiguity) ';' pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_TransitionTable_TransitionKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     definition=AbstractTypeDefinition ';' (ambiguity) (rule end)
	 *     definition=AbstractTypeDefinition ';' (ambiguity) pragmas+=Pragma
	 
	 * </pre>
	 */
	protected void emit_TypeDeclaration_SemicolonKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'loop'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=Expression 'loop' 'end' (ambiguity) ';' (rule end)
	 *     condition=Expression 'loop' 'end' (ambiguity) ';' pragmas+=Pragma
	 *     condition=Expression 'loop' 'end' (ambiguity) (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' (rule end)
	 *     statements+=Statement 'end' (ambiguity) ';' pragmas+=Pragma
	 *     statements+=Statement 'end' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_WhileStatement_LoopKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
