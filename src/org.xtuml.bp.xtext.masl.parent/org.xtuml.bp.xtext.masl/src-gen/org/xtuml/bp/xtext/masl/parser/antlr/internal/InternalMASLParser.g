/*
 * generated by Xtext 2.39.0
 */
parser grammar InternalMASLParser;

options {
	tokenVocab=InternalMASLLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.xtuml.bp.xtext.masl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.bp.xtext.masl.services.MASLGrammarAccess;

}

@members {

 	private MASLGrammarAccess grammarAccess;

    public InternalMASLParser(TokenStream input, MASLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MaslModel";
   	}

   	@Override
   	protected MASLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMaslModel
entryRuleMaslModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaslModelRule()); }
	iv_ruleMaslModel=ruleMaslModel
	{ $current=$iv_ruleMaslModel.current; }
	EOF;

// Rule MaslModel
ruleMaslModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMaslModelAccess().getBuiltinLibraryDefinitionParserRuleCall_0());
		}
		this_BuiltinLibraryDefinition_0=ruleBuiltinLibraryDefinition
		{
			$current = $this_BuiltinLibraryDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getMaslModelAccess().getMaslModelAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMaslModelAccess().getElementsAbstractTopLevelElementParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleAbstractTopLevelElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMaslModelRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTopLevelElement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleAbstractTopLevelElement
entryRuleAbstractTopLevelElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTopLevelElementRule()); }
	iv_ruleAbstractTopLevelElement=ruleAbstractTopLevelElement
	{ $current=$iv_ruleAbstractTopLevelElement.current; }
	EOF;

// Rule AbstractTopLevelElement
ruleAbstractTopLevelElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getProjectDefinitionParserRuleCall_0());
		}
		this_ProjectDefinition_0=ruleProjectDefinition
		{
			$current = $this_ProjectDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getDomainDefinitionParserRuleCall_1());
		}
		this_DomainDefinition_1=ruleDomainDefinition
		{
			$current = $this_DomainDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getDomainServiceDefinitionParserRuleCall_2());
		}
		this_DomainServiceDefinition_2=ruleDomainServiceDefinition
		{
			$current = $this_DomainServiceDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getObjectServiceDefinitionParserRuleCall_3());
		}
		this_ObjectServiceDefinition_3=ruleObjectServiceDefinition
		{
			$current = $this_ObjectServiceDefinition_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getStateDefinitionParserRuleCall_4());
		}
		this_StateDefinition_4=ruleStateDefinition
		{
			$current = $this_StateDefinition_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTopLevelElementAccess().getTerminatorServiceDefinitionParserRuleCall_5());
		}
		this_TerminatorServiceDefinition_5=ruleTerminatorServiceDefinition
		{
			$current = $this_TerminatorServiceDefinition_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScopedName
entryRuleScopedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getScopedNameRule()); }
	iv_ruleScopedName=ruleScopedName
	{ $current=$iv_ruleScopedName.current.getText(); }
	EOF;

// Rule ScopedName
ruleScopedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getScopedNameAccess().getIDTerminalRuleCall_0_0());
			}
			kw=ColonColon
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getScopedNameAccess().getColonColonKeyword_0_1());
			}
		)?
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getScopedNameAccess().getIDTerminalRuleCall_1());
		}
	)
;


// Rule PragmaList
rulePragmaList[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPragmaListAccess().getPragmasPragmaParserRuleCall_0_0());
				}
				lv_pragmas_0_0=rulePragma
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPragmaListRule());
					}
					add(
						$current,
						"pragmas",
						lv_pragmas_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Pragma");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=Semicolon
		{
			newLeafNode(otherlv_1, grammarAccess.getPragmaListAccess().getSemicolonKeyword_1());
		}
	)*
;

// Entry rule entryRulePragma
entryRulePragma returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaRule()); }
	iv_rulePragma=rulePragma
	{ $current=$iv_rulePragma.current; }
	EOF;

// Rule Pragma
rulePragma returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Pragma
		{
			newLeafNode(otherlv_0, grammarAccess.getPragmaAccess().getPragmaKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPragmaAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPragmaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getPragmaAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPragmaAccess().getValuesPragmaValueParserRuleCall_3_0_0());
					}
					lv_values_3_0=rulePragmaValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPragmaRule());
						}
						add(
							$current,
							"values",
							lv_values_3_0,
							"org.xtuml.bp.xtext.masl.MASL.PragmaValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getPragmaAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPragmaAccess().getValuesPragmaValueParserRuleCall_3_1_1_0());
						}
						lv_values_5_0=rulePragmaValue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPragmaRule());
							}
							add(
								$current,
								"values",
								lv_values_5_0,
								"org.xtuml.bp.xtext.masl.MASL.PragmaValue");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getPragmaAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePragmaValue
entryRulePragmaValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPragmaValueRule()); }
	iv_rulePragmaValue=rulePragmaValue
	{ $current=$iv_rulePragmaValue.current; }
	EOF;

// Rule PragmaValue
rulePragmaValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getPragmaValueAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPragmaValueRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPragmaValueAccess().getValueLiteralParserRuleCall_1_0());
				}
				lv_value_1_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPragmaValueRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;


// Rule ParameterList
ruleParameterList[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_0_0());
					}
					lv_parameters_1_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_1_0,
							"org.xtuml.bp.xtext.masl.MASL.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=Comma
				{
					newLeafNode(otherlv_2, grammarAccess.getParameterListAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_1_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterListRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.xtuml.bp.xtext.masl.MASL.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getModeParameterModeEnumRuleCall_2_0());
				}
				lv_mode_2_0=ruleParameterMode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"mode",
						lv_mode_2_0,
						"org.xtuml.bp.xtext.masl.MASL.ParameterMode");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeAbstractTypeReferenceParserRuleCall_3_0());
				}
				lv_type_3_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProjectDefinition
entryRuleProjectDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProjectDefinitionRule()); }
	iv_ruleProjectDefinition=ruleProjectDefinition
	{ $current=$iv_ruleProjectDefinition.current; }
	EOF;

// Rule ProjectDefinition
ruleProjectDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Project
		{
			newLeafNode(otherlv_0, grammarAccess.getProjectDefinitionAccess().getProjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProjectDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProjectDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getProjectDefinitionAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProjectDefinitionAccess().getDomainsDomainDefinitionParserRuleCall_3_0());
				}
				lv_domains_3_0=ruleDomainDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProjectDefinitionRule());
					}
					add(
						$current,
						"domains",
						lv_domains_3_0,
						"org.xtuml.bp.xtext.masl.MASL.DomainDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=End
		{
			newLeafNode(otherlv_4, grammarAccess.getProjectDefinitionAccess().getEndKeyword_4());
		}
		(
			otherlv_5=Project
			{
				newLeafNode(otherlv_5, grammarAccess.getProjectDefinitionAccess().getProjectKeyword_5());
			}
		)?
		(
			otherlv_6=Semicolon
			{
				newLeafNode(otherlv_6, grammarAccess.getProjectDefinitionAccess().getSemicolonKeyword_6());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getProjectDefinitionRule());
			}
			newCompositeNode(grammarAccess.getProjectDefinitionAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_7=rulePragmaList[$current]
		{
			$current = $this_PragmaList_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDomainDefinition
entryRuleDomainDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainDefinitionRule()); }
	iv_ruleDomainDefinition=ruleDomainDefinition
	{ $current=$iv_ruleDomainDefinition.current; }
	EOF;

// Rule DomainDefinition
ruleDomainDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Domain
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainDefinitionAccess().getDomainKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDomainDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getDomainDefinitionAccess().getIsKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getObjectsObjectDeclarationParserRuleCall_3_0_0());
					}
					lv_objects_3_0=ruleObjectDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"objects",
							lv_objects_3_0,
							"org.xtuml.bp.xtext.masl.MASL.ObjectDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getServicesDomainServiceDeclarationParserRuleCall_3_1_0());
					}
					lv_services_4_0=ruleDomainServiceDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"services",
							lv_services_4_0,
							"org.xtuml.bp.xtext.masl.MASL.DomainServiceDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTerminatorsTerminatorDefinitionParserRuleCall_3_2_0());
					}
					lv_terminators_5_0=ruleTerminatorDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"terminators",
							lv_terminators_5_0,
							"org.xtuml.bp.xtext.masl.MASL.TerminatorDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getRelationshipsRelationshipDefinitionParserRuleCall_3_3_0());
					}
					lv_relationships_6_0=ruleRelationshipDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"relationships",
							lv_relationships_6_0,
							"org.xtuml.bp.xtext.masl.MASL.RelationshipDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getObjectDefsObjectDefinitionParserRuleCall_3_4_0());
					}
					lv_objectDefs_7_0=ruleObjectDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"objectDefs",
							lv_objectDefs_7_0,
							"org.xtuml.bp.xtext.masl.MASL.ObjectDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTypeForwardsTypeForwardDeclarationParserRuleCall_3_5_0());
					}
					lv_typeForwards_8_0=ruleTypeForwardDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"typeForwards",
							lv_typeForwards_8_0,
							"org.xtuml.bp.xtext.masl.MASL.TypeForwardDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getTypesTypeDeclarationParserRuleCall_3_6_0());
					}
					lv_types_9_0=ruleTypeDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"types",
							lv_types_9_0,
							"org.xtuml.bp.xtext.masl.MASL.TypeDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainDefinitionAccess().getExceptionsExceptionDeclarationParserRuleCall_3_7_0());
					}
					lv_exceptions_10_0=ruleExceptionDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
						}
						add(
							$current,
							"exceptions",
							lv_exceptions_10_0,
							"org.xtuml.bp.xtext.masl.MASL.ExceptionDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_11=End
		{
			newLeafNode(otherlv_11, grammarAccess.getDomainDefinitionAccess().getEndKeyword_4());
		}
		(
			otherlv_12=Domain
			{
				newLeafNode(otherlv_12, grammarAccess.getDomainDefinitionAccess().getDomainKeyword_5());
			}
		)?
		(
			otherlv_13=Semicolon
			{
				newLeafNode(otherlv_13, grammarAccess.getDomainDefinitionAccess().getSemicolonKeyword_6());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDomainDefinitionRule());
			}
			newCompositeNode(grammarAccess.getDomainDefinitionAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_14=rulePragmaList[$current]
		{
			$current = $this_PragmaList_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBuiltinLibraryDefinition
entryRuleBuiltinLibraryDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionRule()); }
	iv_ruleBuiltinLibraryDefinition=ruleBuiltinLibraryDefinition
	{ $current=$iv_ruleBuiltinLibraryDefinition.current; }
	EOF;

// Rule BuiltinLibraryDefinition
ruleBuiltinLibraryDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinLibraryDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1=Builtin
		{
			newLeafNode(otherlv_1, grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinKeyword_1());
		}
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getBuiltinLibraryDefinitionAccess().getIsKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionAccess().getTypesBuiltinTypeDeclarationParserRuleCall_3_0_0());
					}
					lv_types_3_0=ruleBuiltinTypeDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBuiltinLibraryDefinitionRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"org.xtuml.bp.xtext.masl.MASL.BuiltinTypeDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionAccess().getExceptionsExceptionDeclarationParserRuleCall_3_1_0());
					}
					lv_exceptions_4_0=ruleExceptionDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBuiltinLibraryDefinitionRule());
						}
						add(
							$current,
							"exceptions",
							lv_exceptions_4_0,
							"org.xtuml.bp.xtext.masl.MASL.ExceptionDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBuiltinLibraryDefinitionAccess().getCharacteristicsCharacteristicParserRuleCall_3_2_0());
					}
					lv_characteristics_5_0=ruleCharacteristic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBuiltinLibraryDefinitionRule());
						}
						add(
							$current,
							"characteristics",
							lv_characteristics_5_0,
							"org.xtuml.bp.xtext.masl.MASL.Characteristic");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=End
		{
			newLeafNode(otherlv_6, grammarAccess.getBuiltinLibraryDefinitionAccess().getEndKeyword_4());
		}
		(
			otherlv_7=Builtin
			{
				newLeafNode(otherlv_7, grammarAccess.getBuiltinLibraryDefinitionAccess().getBuiltinKeyword_5());
			}
		)?
		otherlv_8=Semicolon
		{
			newLeafNode(otherlv_8, grammarAccess.getBuiltinLibraryDefinitionAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleBuiltinTypeDeclaration
entryRuleBuiltinTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBuiltinTypeDeclarationRule()); }
	iv_ruleBuiltinTypeDeclaration=ruleBuiltinTypeDeclaration
	{ $current=$iv_ruleBuiltinTypeDeclaration.current; }
	EOF;

// Rule BuiltinTypeDeclaration
ruleBuiltinTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBuiltinTypeDeclarationAccess().getTypeDeclarationParserRuleCall_0());
		}
		this_TypeDeclaration_0=ruleTypeDeclaration
		{
			$current = $this_TypeDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBuiltinTypeDeclarationAccess().getBuiltinTypeDeclarationAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_anonymous_2_0=Anonymous
					{
						newLeafNode(lv_anonymous_2_0, grammarAccess.getBuiltinTypeDeclarationAccess().getAnonymousAnonymousKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBuiltinTypeDeclarationRule());
						}
						setWithLastConsumed($current, "anonymous", lv_anonymous_2_0 != null, "anonymous");
					}
				)
			)?
			otherlv_3=Builtin
			{
				newLeafNode(otherlv_3, grammarAccess.getBuiltinTypeDeclarationAccess().getBuiltinKeyword_1_2());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getBuiltinTypeDeclarationAccess().getNameIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBuiltinTypeDeclarationRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.xtuml.bp.xtext.masl.MASL.ID");
					}
				)
			)
			otherlv_5=Semicolon
			{
				newLeafNode(otherlv_5, grammarAccess.getBuiltinTypeDeclarationAccess().getSemicolonKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleCharacteristic
entryRuleCharacteristic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacteristicRule()); }
	iv_ruleCharacteristic=ruleCharacteristic
	{ $current=$iv_ruleCharacteristic.current; }
	EOF;

// Rule Characteristic
ruleCharacteristic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LessThanSign
			{
				newLeafNode(otherlv_0, grammarAccess.getCharacteristicAccess().getLessThanSignKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeParamsTypeParameterParserRuleCall_0_1_0());
					}
					lv_typeParams_1_0=ruleTypeParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
						}
						add(
							$current,
							"typeParams",
							lv_typeParams_1_0,
							"org.xtuml.bp.xtext.masl.MASL.TypeParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=Comma
				{
					newLeafNode(otherlv_2, grammarAccess.getCharacteristicAccess().getCommaKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCharacteristicAccess().getTypeParamsTypeParameterParserRuleCall_0_2_1_0());
						}
						lv_typeParams_3_0=ruleTypeParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
							}
							add(
								$current,
								"typeParams",
								lv_typeParams_3_0,
								"org.xtuml.bp.xtext.masl.MASL.TypeParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_4=GreaterThanSign
			{
				newLeafNode(otherlv_4, grammarAccess.getCharacteristicAccess().getGreaterThanSignKeyword_0_3());
			}
		)?
		(
			(
				(
					(
						lv_forValue_5_0=LeftParenthesis
						{
							newLeafNode(lv_forValue_5_0, grammarAccess.getCharacteristicAccess().getForValueLeftParenthesisKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getCharacteristicRule());
							}
							setWithLastConsumed($current, "forValue", lv_forValue_5_0 != null, "(");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getCharacteristicAccess().getReceiverTypeAbstractTypeReferenceParserRuleCall_1_0_1_0());
						}
						lv_receiverType_6_0=ruleAbstractTypeReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
							}
							set(
								$current,
								"receiverType",
								lv_receiverType_6_0,
								"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=RightParenthesis
				{
					newLeafNode(otherlv_7, grammarAccess.getCharacteristicAccess().getRightParenthesisKeyword_1_0_2());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getCharacteristicAccess().getReceiverTypeAbstractTypeReferenceParserRuleCall_1_1_0());
					}
					lv_receiverType_8_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
						}
						set(
							$current,
							"receiverType",
							lv_receiverType_8_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_9=Apostrophe
		{
			newLeafNode(otherlv_9, grammarAccess.getCharacteristicAccess().getApostropheKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCharacteristicAccess().getNameCharacteristicIDParserRuleCall_3_0());
				}
				lv_name_10_0=ruleCharacteristicID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
					}
					set(
						$current,
						"name",
						lv_name_10_0,
						"org.xtuml.bp.xtext.masl.MASL.CharacteristicID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharacteristicRule());
				}
				newCompositeNode(grammarAccess.getCharacteristicAccess().getParameterListParserRuleCall_4());
			}
			this_ParameterList_11=ruleParameterList[$current]
			{
				$current = $this_ParameterList_11.current;
				afterParserOrEnumRuleCall();
			}
		)?
		(
			otherlv_12=Return
			{
				newLeafNode(otherlv_12, grammarAccess.getCharacteristicAccess().getReturnKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCharacteristicAccess().getReturnTypeAbstractTypeReferenceWithRangeParserRuleCall_5_1_0());
					}
					lv_returnType_13_0=ruleAbstractTypeReferenceWithRange
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCharacteristicRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_13_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithRange");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_14=Semicolon
		{
			newLeafNode(otherlv_14, grammarAccess.getCharacteristicAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); }
	iv_ruleTypeParameter=ruleTypeParameter
	{ $current=$iv_ruleTypeParameter.current; }
	EOF;

// Rule TypeParameter
ruleTypeParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_enum_0_0=Enum
				{
					newLeafNode(lv_enum_0_0, grammarAccess.getTypeParameterAccess().getEnumEnumKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeParameterRule());
					}
					setWithLastConsumed($current, "enum", lv_enum_0_0 != null, "enum");
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTypeParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractTypeReferenceWithRange
entryRuleAbstractTypeReferenceWithRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeRule()); }
	iv_ruleAbstractTypeReferenceWithRange=ruleAbstractTypeReferenceWithRange
	{ $current=$iv_ruleAbstractTypeReferenceWithRange.current; }
	EOF;

// Rule AbstractTypeReferenceWithRange
ruleAbstractTypeReferenceWithRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeAccess().getAbstractTypeReferenceParserRuleCall_0());
		}
		this_AbstractTypeReference_0=ruleAbstractTypeReference
		{
			$current = $this_AbstractTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithRangeAccess().getRangeTypeReferenceParserRuleCall_1());
		}
		this_RangeTypeReference_1=ruleRangeTypeReference
		{
			$current = $this_RangeTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRangeTypeReference
entryRuleRangeTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeTypeReferenceRule()); }
	iv_ruleRangeTypeReference=ruleRangeTypeReference
	{ $current=$iv_ruleRangeTypeReference.current; }
	EOF;

// Rule RangeTypeReference
ruleRangeTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getRangeTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRangeTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Range
		{
			newLeafNode(otherlv_1, grammarAccess.getRangeTypeReferenceAccess().getRangeKeyword_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getRangeTypeReferenceAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_0());
				}
				lv_elementType_3_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeTypeReferenceRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_3_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionDeclarationRule()); }
	iv_ruleExceptionDeclaration=ruleExceptionDeclaration
	{ $current=$iv_ruleExceptionDeclaration.current; }
	EOF;

// Rule ExceptionDeclaration
ruleExceptionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExceptionDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=Exception
		{
			newLeafNode(otherlv_1, grammarAccess.getExceptionDeclarationAccess().getExceptionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getExceptionDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_3=Semicolon
		{
			newLeafNode(otherlv_3, grammarAccess.getExceptionDeclarationAccess().getSemicolonKeyword_3());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getExceptionDeclarationRule());
			}
			newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getPragmaListParserRuleCall_4());
		}
		this_PragmaList_4=rulePragmaList[$current]
		{
			$current = $this_PragmaList_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeForwardDeclaration
entryRuleTypeForwardDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeForwardDeclarationRule()); }
	iv_ruleTypeForwardDeclaration=ruleTypeForwardDeclaration
	{ $current=$iv_ruleTypeForwardDeclaration.current; }
	EOF;

// Rule TypeForwardDeclaration
ruleTypeForwardDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeForwardDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeForwardDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Type
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeForwardDeclarationAccess().getTypeKeyword_1_0());
			}
			    |
			(
				(
					lv_subtype_2_0=Subtype
					{
						newLeafNode(lv_subtype_2_0, grammarAccess.getTypeForwardDeclarationAccess().getSubtypeSubtypeKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
						}
						setWithLastConsumed($current, "subtype", lv_subtype_2_0 != null, "subtype");
					}
				)
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getTypeForwardDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeForwardDeclarationAccess().getSemicolonKeyword_3());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTypeForwardDeclarationRule());
			}
			newCompositeNode(grammarAccess.getTypeForwardDeclarationAccess().getPragmaListParserRuleCall_4());
		}
		this_PragmaList_5=rulePragmaList[$current]
		{
			$current = $this_PragmaList_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Type
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_1_0());
			}
			    |
			(
				(
					lv_subtype_2_0=Subtype
					{
						newLeafNode(lv_subtype_2_0, grammarAccess.getTypeDeclarationAccess().getSubtypeSubtypeKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTypeDeclarationRule());
						}
						setWithLastConsumed($current, "subtype", lv_subtype_2_0 != null, "subtype");
					}
				)
			)
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getTypeDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_4=Is
		{
			newLeafNode(otherlv_4, grammarAccess.getTypeDeclarationAccess().getIsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getDefinitionAbstractTypeDefinitionParserRuleCall_4_0());
				}
				lv_definition_5_0=ruleAbstractTypeDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
					}
					set(
						$current,
						"definition",
						lv_definition_5_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=Semicolon
		{
			newLeafNode(otherlv_6, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_5());
		}
		(
			otherlv_7=Semicolon
			{
				newLeafNode(otherlv_7, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_6());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTypeDeclarationRule());
			}
			newCompositeNode(grammarAccess.getTypeDeclarationAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_8=rulePragmaList[$current]
		{
			$current = $this_PragmaList_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAbstractTypeDefinition
entryRuleAbstractTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeDefinitionRule()); }
	iv_ruleAbstractTypeDefinition=ruleAbstractTypeDefinition
	{ $current=$iv_ruleAbstractTypeDefinition.current; }
	EOF;

// Rule AbstractTypeDefinition
ruleAbstractTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getStructureTypeDefinitionParserRuleCall_0());
		}
		this_StructureTypeDefinition_0=ruleStructureTypeDefinition
		{
			$current = $this_StructureTypeDefinition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getEnumerationTypeDefinitionParserRuleCall_1());
		}
		this_EnumerationTypeDefinition_1=ruleEnumerationTypeDefinition
		{
			$current = $this_EnumerationTypeDefinition_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getConstrainedTypeDefinitionParserRuleCall_2());
		}
		this_ConstrainedTypeDefinition_2=ruleConstrainedTypeDefinition
		{
			$current = $this_ConstrainedTypeDefinition_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getAbstractTypeReferenceWithCAParserRuleCall_3());
		}
		this_AbstractTypeReferenceWithCA_3=ruleAbstractTypeReferenceWithCA
		{
			$current = $this_AbstractTypeReferenceWithCA_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeDefinitionAccess().getUnconstrainedArrayDefinitionParserRuleCall_4());
		}
		this_UnconstrainedArrayDefinition_4=ruleUnconstrainedArrayDefinition
		{
			$current = $this_UnconstrainedArrayDefinition_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConstrainedTypeDefinition
entryRuleConstrainedTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstrainedTypeDefinitionRule()); }
	iv_ruleConstrainedTypeDefinition=ruleConstrainedTypeDefinition
	{ $current=$iv_ruleConstrainedTypeDefinition.current; }
	EOF;

// Rule ConstrainedTypeDefinition
ruleConstrainedTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainedTypeDefinitionAccess().getTypeNamedTypeReferenceParserRuleCall_0_0());
				}
				lv_type_0_0=ruleNamedTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainedTypeDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.NamedTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainedTypeDefinitionAccess().getConstraintAbstractTypeConstraintParserRuleCall_1_0());
				}
				lv_constraint_1_0=ruleAbstractTypeConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainedTypeDefinitionRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_1_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractTypeConstraint
entryRuleAbstractTypeConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeConstraintRule()); }
	iv_ruleAbstractTypeConstraint=ruleAbstractTypeConstraint
	{ $current=$iv_ruleAbstractTypeConstraint.current; }
	EOF;

// Rule AbstractTypeConstraint
ruleAbstractTypeConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getRangeConstraintParserRuleCall_0());
		}
		this_RangeConstraint_0=ruleRangeConstraint
		{
			$current = $this_RangeConstraint_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getDeltaConstraintParserRuleCall_1());
		}
		this_DeltaConstraint_1=ruleDeltaConstraint
		{
			$current = $this_DeltaConstraint_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeConstraintAccess().getDigitsConstraintParserRuleCall_2());
		}
		this_DigitsConstraint_2=ruleDigitsConstraint
		{
			$current = $this_DigitsConstraint_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRangeConstraint
entryRuleRangeConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeConstraintRule()); }
	iv_ruleRangeConstraint=ruleRangeConstraint
	{ $current=$iv_ruleRangeConstraint.current; }
	EOF;

// Rule RangeConstraint
ruleRangeConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Range
		{
			newLeafNode(otherlv_0, grammarAccess.getRangeConstraintAccess().getRangeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRangeConstraintAccess().getRangeExpressionParserRuleCall_1_0());
				}
				lv_range_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRangeConstraintRule());
					}
					set(
						$current,
						"range",
						lv_range_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeltaConstraint
entryRuleDeltaConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeltaConstraintRule()); }
	iv_ruleDeltaConstraint=ruleDeltaConstraint
	{ $current=$iv_ruleDeltaConstraint.current; }
	EOF;

// Rule DeltaConstraint
ruleDeltaConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Delta
		{
			newLeafNode(otherlv_0, grammarAccess.getDeltaConstraintAccess().getDeltaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeltaConstraintAccess().getDeltaConstExpressionParserRuleCall_1_0());
				}
				lv_delta_1_0=ruleConstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeltaConstraintRule());
					}
					set(
						$current,
						"delta",
						lv_delta_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDeltaConstraintAccess().getConstraintRangeConstraintParserRuleCall_2_0());
				}
				lv_constraint_2_0=ruleRangeConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeltaConstraintRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_2_0,
						"org.xtuml.bp.xtext.masl.MASL.RangeConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDigitsConstraint
entryRuleDigitsConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDigitsConstraintRule()); }
	iv_ruleDigitsConstraint=ruleDigitsConstraint
	{ $current=$iv_ruleDigitsConstraint.current; }
	EOF;

// Rule DigitsConstraint
ruleDigitsConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Digits
		{
			newLeafNode(otherlv_0, grammarAccess.getDigitsConstraintAccess().getDigitsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDigitsConstraintAccess().getDigitsConstExpressionParserRuleCall_1_0());
				}
				lv_digits_1_0=ruleConstExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDigitsConstraintRule());
					}
					set(
						$current,
						"digits",
						lv_digits_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDigitsConstraintAccess().getConstraintRangeConstraintParserRuleCall_2_0());
				}
				lv_constraint_2_0=ruleRangeConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDigitsConstraintRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_2_0,
						"org.xtuml.bp.xtext.masl.MASL.RangeConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStructureTypeDefinition
entryRuleStructureTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructureTypeDefinitionRule()); }
	iv_ruleStructureTypeDefinition=ruleStructureTypeDefinition
	{ $current=$iv_ruleStructureTypeDefinition.current; }
	EOF;

// Rule StructureTypeDefinition
ruleStructureTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStructureTypeDefinitionAccess().getStructureTypeDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1=Structure
		{
			newLeafNode(otherlv_1, grammarAccess.getStructureTypeDefinitionAccess().getStructureKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStructureTypeDefinitionAccess().getComponentsStructureComponentDefinitionParserRuleCall_2_0());
				}
				lv_components_2_0=ruleStructureComponentDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructureTypeDefinitionRule());
					}
					add(
						$current,
						"components",
						lv_components_2_0,
						"org.xtuml.bp.xtext.masl.MASL.StructureComponentDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=End
		{
			newLeafNode(otherlv_3, grammarAccess.getStructureTypeDefinitionAccess().getEndKeyword_3());
		}
		(
			otherlv_4=Structure
			{
				newLeafNode(otherlv_4, grammarAccess.getStructureTypeDefinitionAccess().getStructureKeyword_4());
			}
		)?
	)
;

// Entry rule entryRuleStructureComponentDefinition
entryRuleStructureComponentDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructureComponentDefinitionRule()); }
	iv_ruleStructureComponentDefinition=ruleStructureComponentDefinition
	{ $current=$iv_ruleStructureComponentDefinition.current; }
	EOF;

// Rule StructureComponentDefinition
ruleStructureComponentDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getStructureComponentDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructureComponentDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getStructureComponentDefinitionAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getTypeAbstractTypeReferenceParserRuleCall_2_0());
				}
				lv_type_2_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStructureComponentDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3=ColonEqualsSign
			{
				newLeafNode(otherlv_3, grammarAccess.getStructureComponentDefinitionAccess().getColonEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getDefaultValueConstExpressionParserRuleCall_3_1_0());
					}
					lv_defaultValue_4_0=ruleConstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructureComponentDefinitionRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_4_0,
							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=Semicolon
		{
			newLeafNode(otherlv_5, grammarAccess.getStructureComponentDefinitionAccess().getSemicolonKeyword_4());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStructureComponentDefinitionRule());
			}
			newCompositeNode(grammarAccess.getStructureComponentDefinitionAccess().getPragmaListParserRuleCall_5());
		}
		this_PragmaList_6=rulePragmaList[$current]
		{
			$current = $this_PragmaList_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEnumerationTypeDefinition
entryRuleEnumerationTypeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumerationTypeDefinitionRule()); }
	iv_ruleEnumerationTypeDefinition=ruleEnumerationTypeDefinition
	{ $current=$iv_ruleEnumerationTypeDefinition.current; }
	EOF;

// Rule EnumerationTypeDefinition
ruleEnumerationTypeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEnumerationTypeDefinitionAccess().getEnumerationTypeDefinitionAction_0(),
					$current);
			}
		)
		otherlv_1=Enum
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumerationTypeDefinitionAccess().getEnumKeyword_1());
		}
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getEnumerationTypeDefinitionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumeratorsEnumeratorParserRuleCall_3_0_0());
					}
					lv_enumerators_3_0=ruleEnumerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
						}
						add(
							$current,
							"enumerators",
							lv_enumerators_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Enumerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getEnumerationTypeDefinitionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEnumerationTypeDefinitionAccess().getEnumeratorsEnumeratorParserRuleCall_3_1_1_0());
						}
						lv_enumerators_5_0=ruleEnumerator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEnumerationTypeDefinitionRule());
							}
							add(
								$current,
								"enumerators",
								lv_enumerators_5_0,
								"org.xtuml.bp.xtext.masl.MASL.Enumerator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getEnumerationTypeDefinitionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumerator
entryRuleEnumerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumeratorRule()); }
	iv_ruleEnumerator=ruleEnumerator
	{ $current=$iv_ruleEnumerator.current; }
	EOF;

// Rule Enumerator
ruleEnumerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getEnumeratorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumeratorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		(
			(
				otherlv_1=EqualsSign
				{
					newLeafNode(otherlv_1, grammarAccess.getEnumeratorAccess().getEqualsSignKeyword_1_0_0());
				}
				    |
				otherlv_2=ColonEqualsSign
				{
					newLeafNode(otherlv_2, grammarAccess.getEnumeratorAccess().getColonEqualsSignKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumeratorAccess().getExpressionConstExpressionParserRuleCall_1_1_0());
					}
					lv_expression_3_0=ruleConstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumeratorRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleUnconstrainedArrayDefinition
entryRuleUnconstrainedArrayDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionRule()); }
	iv_ruleUnconstrainedArrayDefinition=ruleUnconstrainedArrayDefinition
	{ $current=$iv_ruleUnconstrainedArrayDefinition.current; }
	EOF;

// Rule UnconstrainedArrayDefinition
ruleUnconstrainedArrayDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Array
		{
			newLeafNode(otherlv_0, grammarAccess.getUnconstrainedArrayDefinitionAccess().getArrayKeyword_0());
		}
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getUnconstrainedArrayDefinitionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionAccess().getIndexTypeNamedTypeReferenceParserRuleCall_2_0());
				}
				lv_indexType_2_0=ruleNamedTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnconstrainedArrayDefinitionRule());
					}
					set(
						$current,
						"indexType",
						lv_indexType_2_0,
						"org.xtuml.bp.xtext.masl.MASL.NamedTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Range
		{
			newLeafNode(otherlv_3, grammarAccess.getUnconstrainedArrayDefinitionAccess().getRangeKeyword_3());
		}
		otherlv_4=LessThanSignGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getUnconstrainedArrayDefinitionAccess().getLessThanSignGreaterThanSignKeyword_4());
		}
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getUnconstrainedArrayDefinitionAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6=Of
		{
			newLeafNode(otherlv_6, grammarAccess.getUnconstrainedArrayDefinitionAccess().getOfKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUnconstrainedArrayDefinitionAccess().getElementTypeAbstractTypeReferenceParserRuleCall_7_0());
				}
				lv_elementType_7_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUnconstrainedArrayDefinitionRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_7_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAbstractTypeReference
entryRuleAbstractTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeReferenceRule()); }
	iv_ruleAbstractTypeReference=ruleAbstractTypeReference
	{ $current=$iv_ruleAbstractTypeReference.current; }
	EOF;

// Rule AbstractTypeReference
ruleAbstractTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getNamedTypeReferenceParserRuleCall_0());
		}
		this_NamedTypeReference_0=ruleNamedTypeReference
		{
			$current = $this_NamedTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getInstanceTypeReferenceParserRuleCall_1());
		}
		this_InstanceTypeReference_1=ruleInstanceTypeReference
		{
			$current = $this_InstanceTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceAccess().getAbstractCollectionTypeReferenceParserRuleCall_2());
		}
		this_AbstractCollectionTypeReference_2=ruleAbstractCollectionTypeReference
		{
			$current = $this_AbstractCollectionTypeReference_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAbstractTypeReferenceWithCA
entryRuleAbstractTypeReferenceWithCA returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCARule()); }
	iv_ruleAbstractTypeReferenceWithCA=ruleAbstractTypeReferenceWithCA
	{ $current=$iv_ruleAbstractTypeReferenceWithCA.current; }
	EOF;

// Rule AbstractTypeReferenceWithCA
ruleAbstractTypeReferenceWithCA returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCAAccess().getAbstractTypeReferenceParserRuleCall_0());
		}
		this_AbstractTypeReference_0=ruleAbstractTypeReference
		{
			$current = $this_AbstractTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractTypeReferenceWithCAAccess().getConstrainedArrayTypeReferenceParserRuleCall_1());
		}
		this_ConstrainedArrayTypeReference_1=ruleConstrainedArrayTypeReference
		{
			$current = $this_ConstrainedArrayTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInstanceTypeReference
entryRuleInstanceTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstanceTypeReferenceRule()); }
	iv_ruleInstanceTypeReference=ruleInstanceTypeReference
	{ $current=$iv_ruleInstanceTypeReference.current; }
	EOF;

// Rule InstanceTypeReference
ruleInstanceTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getInstanceTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstanceTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Instance
		{
			newLeafNode(otherlv_1, grammarAccess.getInstanceTypeReferenceAccess().getInstanceKeyword_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getInstanceTypeReferenceAccess().getOfKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstanceTypeReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInstanceTypeReferenceAccess().getInstanceObjectDeclarationCrossReference_3_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNamedTypeReference
entryRuleNamedTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNamedTypeReferenceRule()); }
	iv_ruleNamedTypeReference=ruleNamedTypeReference
	{ $current=$iv_ruleNamedTypeReference.current; }
	EOF;

// Rule NamedTypeReference
ruleNamedTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getNamedTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamedTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNamedTypeReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getNamedTypeReferenceAccess().getTypeTypeDeclarationCrossReference_1_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstrainedArrayTypeReference
entryRuleConstrainedArrayTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceRule()); }
	iv_ruleConstrainedArrayTypeReference=ruleConstrainedArrayTypeReference
	{ $current=$iv_ruleConstrainedArrayTypeReference.current; }
	EOF;

// Rule ConstrainedArrayTypeReference
ruleConstrainedArrayTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConstrainedArrayTypeReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceAccess().getUnconstrainedTypeDeclarationCrossReference_0_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getConstrainedArrayTypeReferenceAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstrainedArrayTypeReferenceAccess().getConstraintExpressionParserRuleCall_2_0());
				}
				lv_constraint_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstrainedArrayTypeReferenceRule());
					}
					set(
						$current,
						"constraint",
						lv_constraint_2_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getConstrainedArrayTypeReferenceAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAbstractCollectionTypeReference
entryRuleAbstractCollectionTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceRule()); }
	iv_ruleAbstractCollectionTypeReference=ruleAbstractCollectionTypeReference
	{ $current=$iv_ruleAbstractCollectionTypeReference.current; }
	EOF;

// Rule AbstractCollectionTypeReference
ruleAbstractCollectionTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getSequenceTypeReferenceParserRuleCall_0());
		}
		this_SequenceTypeReference_0=ruleSequenceTypeReference
		{
			$current = $this_SequenceTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getArrayTypeReferenceParserRuleCall_1());
		}
		this_ArrayTypeReference_1=ruleArrayTypeReference
		{
			$current = $this_ArrayTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getSetTypeReferenceParserRuleCall_2());
		}
		this_SetTypeReference_2=ruleSetTypeReference
		{
			$current = $this_SetTypeReference_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getBagTypeReferenceParserRuleCall_3());
		}
		this_BagTypeReference_3=ruleBagTypeReference
		{
			$current = $this_BagTypeReference_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCollectionTypeReferenceAccess().getDictionaryTypeReferenceParserRuleCall_4());
		}
		this_DictionaryTypeReference_4=ruleDictionaryTypeReference
		{
			$current = $this_DictionaryTypeReference_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSequenceTypeReference
entryRuleSequenceTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceTypeReferenceRule()); }
	iv_ruleSequenceTypeReference=ruleSequenceTypeReference
	{ $current=$iv_ruleSequenceTypeReference.current; }
	EOF;

// Rule SequenceTypeReference
ruleSequenceTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getSequenceTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSequenceTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Sequence
		{
			newLeafNode(otherlv_1, grammarAccess.getSequenceTypeReferenceAccess().getSequenceKeyword_1());
		}
		(
			otherlv_2=LeftParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getSequenceTypeReferenceAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSequenceTypeReferenceAccess().getExpressionExpressionParserRuleCall_2_1_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSequenceTypeReferenceRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getSequenceTypeReferenceAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		otherlv_5=Of
		{
			newLeafNode(otherlv_5, grammarAccess.getSequenceTypeReferenceAccess().getOfKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSequenceTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_4_0());
				}
				lv_elementType_6_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSequenceTypeReferenceRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_6_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayTypeReference
entryRuleArrayTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayTypeReferenceRule()); }
	iv_ruleArrayTypeReference=ruleArrayTypeReference
	{ $current=$iv_ruleArrayTypeReference.current; }
	EOF;

// Rule ArrayTypeReference
ruleArrayTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getArrayTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Array
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayTypeReferenceAccess().getArrayKeyword_1());
		}
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getArrayTypeReferenceAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayTypeReferenceAccess().getIndexTypeRangeTypeReferenceParserRuleCall_3_0_0());
					}
					lv_indexType_3_0=ruleRangeTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayTypeReferenceRule());
						}
						set(
							$current,
							"indexType",
							lv_indexType_3_0,
							"org.xtuml.bp.xtext.masl.MASL.RangeTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayTypeReferenceAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayTypeReferenceRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getArrayTypeReferenceAccess().getRightParenthesisKeyword_4());
		}
		otherlv_6=Of
		{
			newLeafNode(otherlv_6, grammarAccess.getArrayTypeReferenceAccess().getOfKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_6_0());
				}
				lv_elementType_7_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayTypeReferenceRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_7_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSetTypeReference
entryRuleSetTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetTypeReferenceRule()); }
	iv_ruleSetTypeReference=ruleSetTypeReference
	{ $current=$iv_ruleSetTypeReference.current; }
	EOF;

// Rule SetTypeReference
ruleSetTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getSetTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSetTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Set
		{
			newLeafNode(otherlv_1, grammarAccess.getSetTypeReferenceAccess().getSetKeyword_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getSetTypeReferenceAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSetTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_0());
				}
				lv_elementType_3_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSetTypeReferenceRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_3_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBagTypeReference
entryRuleBagTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBagTypeReferenceRule()); }
	iv_ruleBagTypeReference=ruleBagTypeReference
	{ $current=$iv_ruleBagTypeReference.current; }
	EOF;

// Rule BagTypeReference
ruleBagTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_anonymous_0_0=Anonymous
				{
					newLeafNode(lv_anonymous_0_0, grammarAccess.getBagTypeReferenceAccess().getAnonymousAnonymousKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBagTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_0_0 != null, "anonymous");
				}
			)
		)?
		otherlv_1=Bag
		{
			newLeafNode(otherlv_1, grammarAccess.getBagTypeReferenceAccess().getBagKeyword_1());
		}
		otherlv_2=Of
		{
			newLeafNode(otherlv_2, grammarAccess.getBagTypeReferenceAccess().getOfKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBagTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_0());
				}
				lv_elementType_3_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBagTypeReferenceRule());
					}
					set(
						$current,
						"elementType",
						lv_elementType_3_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDictionaryTypeReference
entryRuleDictionaryTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDictionaryTypeReferenceRule()); }
	iv_ruleDictionaryTypeReference=ruleDictionaryTypeReference
	{ $current=$iv_ruleDictionaryTypeReference.current; }
	EOF;

// Rule DictionaryTypeReference
ruleDictionaryTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDictionaryTypeReferenceAccess().getDictionaryTypeReferenceAction_0(),
					$current);
			}
		)
		(
			(
				lv_anonymous_1_0=Anonymous
				{
					newLeafNode(lv_anonymous_1_0, grammarAccess.getDictionaryTypeReferenceAccess().getAnonymousAnonymousKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDictionaryTypeReferenceRule());
					}
					setWithLastConsumed($current, "anonymous", lv_anonymous_1_0 != null, "anonymous");
				}
			)
		)?
		otherlv_2=Dictionary
		{
			newLeafNode(otherlv_2, grammarAccess.getDictionaryTypeReferenceAccess().getDictionaryKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDictionaryTypeReferenceAccess().getKeyTypeAbstractDictKeyTypeRefParserRuleCall_3_0_0());
					}
					lv_keyType_3_0=ruleAbstractDictKeyTypeRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDictionaryTypeReferenceRule());
						}
						set(
							$current,
							"keyType",
							lv_keyType_3_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractDictKeyTypeRef");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=Of
			{
				newLeafNode(otherlv_4, grammarAccess.getDictionaryTypeReferenceAccess().getOfKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDictionaryTypeReferenceAccess().getElementTypeAbstractTypeReferenceParserRuleCall_3_2_0());
					}
					lv_elementType_5_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDictionaryTypeReferenceRule());
						}
						set(
							$current,
							"elementType",
							lv_elementType_5_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAbstractDictKeyTypeRef
entryRuleAbstractDictKeyTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefRule()); }
	iv_ruleAbstractDictKeyTypeRef=ruleAbstractDictKeyTypeRef
	{ $current=$iv_ruleAbstractDictKeyTypeRef.current; }
	EOF;

// Rule AbstractDictKeyTypeRef
ruleAbstractDictKeyTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefAccess().getNamedTypeReferenceParserRuleCall_0());
		}
		this_NamedTypeReference_0=ruleNamedTypeReference
		{
			$current = $this_NamedTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractDictKeyTypeRefAccess().getInstanceTypeReferenceParserRuleCall_1());
		}
		this_InstanceTypeReference_1=ruleInstanceTypeReference
		{
			$current = $this_InstanceTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminatorDefinition
entryRuleTerminatorDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorDefinitionRule()); }
	iv_ruleTerminatorDefinition=ruleTerminatorDefinition
	{ $current=$iv_ruleTerminatorDefinition.current; }
	EOF;

// Rule TerminatorDefinition
ruleTerminatorDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Terminator
		{
			newLeafNode(otherlv_0, grammarAccess.getTerminatorDefinitionAccess().getTerminatorKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTerminatorDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminatorDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getTerminatorDefinitionAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getServicesTerminatorServiceDeclarationParserRuleCall_3_0());
				}
				lv_services_3_0=ruleTerminatorServiceDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorDefinitionRule());
					}
					add(
						$current,
						"services",
						lv_services_3_0,
						"org.xtuml.bp.xtext.masl.MASL.TerminatorServiceDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=End
		{
			newLeafNode(otherlv_4, grammarAccess.getTerminatorDefinitionAccess().getEndKeyword_4());
		}
		(
			otherlv_5=Terminator
			{
				newLeafNode(otherlv_5, grammarAccess.getTerminatorDefinitionAccess().getTerminatorKeyword_5());
			}
		)?
		otherlv_6=Semicolon
		{
			newLeafNode(otherlv_6, grammarAccess.getTerminatorDefinitionAccess().getSemicolonKeyword_6());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTerminatorDefinitionRule());
			}
			newCompositeNode(grammarAccess.getTerminatorDefinitionAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_7=rulePragmaList[$current]
		{
			$current = $this_PragmaList_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminatorServiceDeclaration
entryRuleTerminatorServiceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorServiceDeclarationRule()); }
	iv_ruleTerminatorServiceDeclaration=ruleTerminatorServiceDeclaration
	{ $current=$iv_ruleTerminatorServiceDeclaration.current; }
	EOF;

// Rule TerminatorServiceDeclaration
ruleTerminatorServiceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Service
			{
				newLeafNode(otherlv_1, grammarAccess.getTerminatorServiceDeclarationAccess().getServiceKeyword_1_0());
			}
			    |
			otherlv_2=Function
			{
				newLeafNode(otherlv_2, grammarAccess.getTerminatorServiceDeclarationAccess().getFunctionKeyword_1_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getTerminatorServiceDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getParameterListParserRuleCall_3());
		}
		this_ParameterList_4=ruleParameterList[$current]
		{
			$current = $this_ParameterList_4.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_5=Return
			{
				newLeafNode(otherlv_5, grammarAccess.getTerminatorServiceDeclarationAccess().getReturnKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0());
					}
					lv_returnType_6_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminatorServiceDeclarationRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_6_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7=Semicolon
		{
			newLeafNode(otherlv_7, grammarAccess.getTerminatorServiceDeclarationAccess().getSemicolonKeyword_5());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTerminatorServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getTerminatorServiceDeclarationAccess().getPragmaListParserRuleCall_6());
		}
		this_PragmaList_8=rulePragmaList[$current]
		{
			$current = $this_PragmaList_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObjectDeclaration
entryRuleObjectDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectDeclarationRule()); }
	iv_ruleObjectDeclaration=ruleObjectDeclaration
	{ $current=$iv_ruleObjectDeclaration.current; }
	EOF;

// Rule ObjectDeclaration
ruleObjectDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Object
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectDeclarationAccess().getObjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=Semicolon
		{
			newLeafNode(otherlv_2, grammarAccess.getObjectDeclarationAccess().getSemicolonKeyword_2());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectDeclarationRule());
			}
			newCompositeNode(grammarAccess.getObjectDeclarationAccess().getPragmaListParserRuleCall_3());
		}
		this_PragmaList_3=rulePragmaList[$current]
		{
			$current = $this_PragmaList_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObjectDefinition
entryRuleObjectDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectDefinitionRule()); }
	iv_ruleObjectDefinition=ruleObjectDefinition
	{ $current=$iv_ruleObjectDefinition.current; }
	EOF;

// Rule ObjectDefinition
ruleObjectDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Object
		{
			newLeafNode(otherlv_0, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjectDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getObjectDefinitionAccess().getIsKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getAttributesAttributeDefinitionParserRuleCall_3_0_0());
					}
					lv_attributes_3_0=ruleAttributeDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_3_0,
							"org.xtuml.bp.xtext.masl.MASL.AttributeDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getIdentifiersIdentifierDefinitionParserRuleCall_3_1_0());
					}
					lv_identifiers_4_0=ruleIdentifierDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"identifiers",
							lv_identifiers_4_0,
							"org.xtuml.bp.xtext.masl.MASL.IdentifierDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getServicesObjectServiceDeclarationParserRuleCall_3_2_0());
					}
					lv_services_5_0=ruleObjectServiceDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"services",
							lv_services_5_0,
							"org.xtuml.bp.xtext.masl.MASL.ObjectServiceDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getEventsEventDefinitionParserRuleCall_3_3_0());
					}
					lv_events_6_0=ruleEventDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"events",
							lv_events_6_0,
							"org.xtuml.bp.xtext.masl.MASL.EventDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getStatesStateDeclarationParserRuleCall_3_4_0());
					}
					lv_states_7_0=ruleStateDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"states",
							lv_states_7_0,
							"org.xtuml.bp.xtext.masl.MASL.StateDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectDefinitionAccess().getTransitionsTransitionTableParserRuleCall_3_5_0());
					}
					lv_transitions_8_0=ruleTransitionTable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectDefinitionRule());
						}
						add(
							$current,
							"transitions",
							lv_transitions_8_0,
							"org.xtuml.bp.xtext.masl.MASL.TransitionTable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9=End
		{
			newLeafNode(otherlv_9, grammarAccess.getObjectDefinitionAccess().getEndKeyword_4());
		}
		(
			otherlv_10=Object
			{
				newLeafNode(otherlv_10, grammarAccess.getObjectDefinitionAccess().getObjectKeyword_5());
			}
		)?
		otherlv_11=Semicolon
		{
			newLeafNode(otherlv_11, grammarAccess.getObjectDefinitionAccess().getSemicolonKeyword_6());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectDefinitionRule());
			}
			newCompositeNode(grammarAccess.getObjectDefinitionAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_12=rulePragmaList[$current]
		{
			$current = $this_PragmaList_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttributeDefinition
entryRuleAttributeDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeDefinitionRule()); }
	iv_ruleAttributeDefinition=ruleAttributeDefinition
	{ $current=$iv_ruleAttributeDefinition.current; }
	EOF;

// Rule AttributeDefinition
ruleAttributeDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getAttributeDefinitionAccess().getColonKeyword_1());
		}
		(
			(
				lv_preferred_2_0=Preferred
				{
					newLeafNode(lv_preferred_2_0, grammarAccess.getAttributeDefinitionAccess().getPreferredPreferredKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeDefinitionRule());
					}
					setWithLastConsumed($current, "preferred", lv_preferred_2_0 != null, "preferred");
				}
			)
		)?
		(
			(
				lv_unique_3_0=Unique
				{
					newLeafNode(lv_unique_3_0, grammarAccess.getAttributeDefinitionAccess().getUniqueUniqueKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeDefinitionRule());
					}
					setWithLastConsumed($current, "unique", lv_unique_3_0 != null, "unique");
				}
			)
		)?
		(
			otherlv_4=Referential
			{
				newLeafNode(otherlv_4, grammarAccess.getAttributeDefinitionAccess().getReferentialKeyword_4_0());
			}
			otherlv_5=LeftParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getAttributeDefinitionAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getReferentialsAttributeReferentialParserRuleCall_4_2_0_0());
						}
						lv_referentials_6_0=ruleAttributeReferential
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
							}
							add(
								$current,
								"referentials",
								lv_referentials_6_0,
								"org.xtuml.bp.xtext.masl.MASL.AttributeReferential");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_7=Comma
					{
						newLeafNode(otherlv_7, grammarAccess.getAttributeDefinitionAccess().getCommaKeyword_4_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getReferentialsAttributeReferentialParserRuleCall_4_2_1_1_0());
							}
							lv_referentials_8_0=ruleAttributeReferential
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
								}
								add(
									$current,
									"referentials",
									lv_referentials_8_0,
									"org.xtuml.bp.xtext.masl.MASL.AttributeReferential");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_9=RightParenthesis
			{
				newLeafNode(otherlv_9, grammarAccess.getAttributeDefinitionAccess().getRightParenthesisKeyword_4_3());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getTypeAbstractTypeReferenceParserRuleCall_5_0());
				}
				lv_type_10_0=ruleAbstractTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_10_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11=ColonEqualsSign
			{
				newLeafNode(otherlv_11, grammarAccess.getAttributeDefinitionAccess().getColonEqualsSignKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getDefaultValueConstExpressionParserRuleCall_6_1_0());
					}
					lv_defaultValue_12_0=ruleConstExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeDefinitionRule());
						}
						set(
							$current,
							"defaultValue",
							lv_defaultValue_12_0,
							"org.xtuml.bp.xtext.masl.MASL.ConstExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_13=Semicolon
		{
			newLeafNode(otherlv_13, grammarAccess.getAttributeDefinitionAccess().getSemicolonKeyword_7());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getAttributeDefinitionRule());
			}
			newCompositeNode(grammarAccess.getAttributeDefinitionAccess().getPragmaListParserRuleCall_8());
		}
		this_PragmaList_14=rulePragmaList[$current]
		{
			$current = $this_PragmaList_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttributeReferential
entryRuleAttributeReferential returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeReferentialRule()); }
	iv_ruleAttributeReferential=ruleAttributeReferential
	{ $current=$iv_ruleAttributeReferential.current; }
	EOF;

// Rule AttributeReferential
ruleAttributeReferential returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAttributeReferentialAccess().getAttributeReferentialAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeReferentialRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getAttributeReferentialAccess().getRelationshipRelationshipDefinitionCrossReference_1_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=FullStop
		{
			newLeafNode(otherlv_2, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_2());
		}
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeReferentialRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getAttributeReferentialAccess().getObjectOrRoleObjectOrRoleCrossReference_3_0_0_0());
						}
						ruleObjectOrRoleName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=FullStop
				{
					newLeafNode(otherlv_4, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_3_0_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeReferentialRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getAttributeReferentialAccess().getAttributeAttributeDefinitionCrossReference_3_0_2_0());
						}
					)
				)
			)
			    |
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeReferentialRule());
							}
						}
						otherlv_6=RULE_ID
						{
							newLeafNode(otherlv_6, grammarAccess.getAttributeReferentialAccess().getObjectOrRoleObjectOrRoleCrossReference_3_1_0_0());
						}
					)
				)
				otherlv_7=FullStop
				{
					newLeafNode(otherlv_7, grammarAccess.getAttributeReferentialAccess().getFullStopKeyword_3_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAttributeReferentialRule());
							}
						}
						otherlv_8=RULE_ID
						{
							newLeafNode(otherlv_8, grammarAccess.getAttributeReferentialAccess().getAttributeAttributeDefinitionCrossReference_3_1_2_0());
						}
					)
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeReferentialRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getAttributeReferentialAccess().getAttributeAttributeDefinitionCrossReference_3_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleObjectOrRoleName
entryRuleObjectOrRoleName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getObjectOrRoleNameRule()); }
	iv_ruleObjectOrRoleName=ruleObjectOrRoleName
	{ $current=$iv_ruleObjectOrRoleName.current.getText(); }
	EOF;

// Rule ObjectOrRoleName
ruleObjectOrRoleName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getObjectOrRoleNameAccess().getIDTerminalRuleCall_0());
		}
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getObjectOrRoleNameAccess().getFullStopKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getObjectOrRoleNameAccess().getIDTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleObjectServiceDeclaration
entryRuleObjectServiceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectServiceDeclarationRule()); }
	iv_ruleObjectServiceDeclaration=ruleObjectServiceDeclaration
	{ $current=$iv_ruleObjectServiceDeclaration.current; }
	EOF;

// Rule ObjectServiceDeclaration
ruleObjectServiceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_instance_1_0=Instance
				{
					newLeafNode(lv_instance_1_0, grammarAccess.getObjectServiceDeclarationAccess().getInstanceInstanceKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
					}
					setWithLastConsumed($current, "instance", lv_instance_1_0 != null, "instance");
				}
			)
		)?
		(
			otherlv_2=Deferred
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectServiceDeclarationAccess().getDeferredKeyword_2_0());
			}
			otherlv_3=LeftParenthesis
			{
				newLeafNode(otherlv_3, grammarAccess.getObjectServiceDeclarationAccess().getLeftParenthesisKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getObjectServiceDeclarationAccess().getRelationshipRelationshipDefinitionCrossReference_2_2_0());
					}
				)
			)
			otherlv_5=RightParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getObjectServiceDeclarationAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		(
			otherlv_6=Service
			{
				newLeafNode(otherlv_6, grammarAccess.getObjectServiceDeclarationAccess().getServiceKeyword_3_0());
			}
			    |
			otherlv_7=Function
			{
				newLeafNode(otherlv_7, grammarAccess.getObjectServiceDeclarationAccess().getFunctionKeyword_3_1());
			}
		)
		(
			(
				lv_name_8_0=RULE_ID
				{
					newLeafNode(lv_name_8_0, grammarAccess.getObjectServiceDeclarationAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_8_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getParameterListParserRuleCall_5());
		}
		this_ParameterList_9=ruleParameterList[$current]
		{
			$current = $this_ParameterList_9.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_10=Return
			{
				newLeafNode(otherlv_10, grammarAccess.getObjectServiceDeclarationAccess().getReturnKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0());
					}
					lv_returnType_11_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectServiceDeclarationRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_11_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_12=Semicolon
		{
			newLeafNode(otherlv_12, grammarAccess.getObjectServiceDeclarationAccess().getSemicolonKeyword_7());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getObjectServiceDeclarationAccess().getPragmaListParserRuleCall_8());
		}
		this_PragmaList_13=rulePragmaList[$current]
		{
			$current = $this_PragmaList_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIdentifierDefinition
entryRuleIdentifierDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdentifierDefinitionRule()); }
	iv_ruleIdentifierDefinition=ruleIdentifierDefinition
	{ $current=$iv_ruleIdentifierDefinition.current; }
	EOF;

// Rule IdentifierDefinition
ruleIdentifierDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Identifier
		{
			newLeafNode(otherlv_0, grammarAccess.getIdentifierDefinitionAccess().getIdentifierKeyword_0());
		}
		otherlv_1=Is
		{
			newLeafNode(otherlv_1, grammarAccess.getIdentifierDefinitionAccess().getIsKeyword_1());
		}
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getIdentifierDefinitionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getIdentifierDefinitionAccess().getAttributesAttributeDefinitionCrossReference_3_0_0());
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getIdentifierDefinitionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
							}
						}
						otherlv_5=RULE_ID
						{
							newLeafNode(otherlv_5, grammarAccess.getIdentifierDefinitionAccess().getAttributesAttributeDefinitionCrossReference_3_1_1_0());
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getIdentifierDefinitionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=Semicolon
		{
			newLeafNode(otherlv_7, grammarAccess.getIdentifierDefinitionAccess().getSemicolonKeyword_5());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getIdentifierDefinitionRule());
			}
			newCompositeNode(grammarAccess.getIdentifierDefinitionAccess().getPragmaListParserRuleCall_6());
		}
		this_PragmaList_8=rulePragmaList[$current]
		{
			$current = $this_PragmaList_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEventDefinition
entryRuleEventDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventDefinitionRule()); }
	iv_ruleEventDefinition=ruleEventDefinition
	{ $current=$iv_ruleEventDefinition.current; }
	EOF;

// Rule EventDefinition
ruleEventDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEventDefinitionAccess().getTypeEventTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleEventType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.EventType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=Event
		{
			newLeafNode(otherlv_1, grammarAccess.getEventDefinitionAccess().getEventKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEventDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getEventDefinitionRule());
			}
			newCompositeNode(grammarAccess.getEventDefinitionAccess().getParameterListParserRuleCall_3());
		}
		this_ParameterList_3=ruleParameterList[$current]
		{
			$current = $this_ParameterList_3.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getEventDefinitionAccess().getSemicolonKeyword_4());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getEventDefinitionRule());
			}
			newCompositeNode(grammarAccess.getEventDefinitionAccess().getPragmaListParserRuleCall_5());
		}
		this_PragmaList_5=rulePragmaList[$current]
		{
			$current = $this_PragmaList_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStateDeclaration
entryRuleStateDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateDeclarationRule()); }
	iv_ruleStateDeclaration=ruleStateDeclaration
	{ $current=$iv_ruleStateDeclaration.current; }
	EOF;

// Rule StateDeclaration
ruleStateDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStateDeclarationAccess().getTypeStateTypeSyntaxParserRuleCall_0_0());
				}
				lv_type_0_0=ruleStateTypeSyntax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.StateTypeSyntax");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=State
		{
			newLeafNode(otherlv_1, grammarAccess.getStateDeclarationAccess().getStateKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getStateDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStateDeclarationRule());
			}
			newCompositeNode(grammarAccess.getStateDeclarationAccess().getParameterListParserRuleCall_3());
		}
		this_ParameterList_3=ruleParameterList[$current]
		{
			$current = $this_ParameterList_3.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getStateDeclarationAccess().getSemicolonKeyword_4());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStateDeclarationRule());
			}
			newCompositeNode(grammarAccess.getStateDeclarationAccess().getPragmaListParserRuleCall_5());
		}
		this_PragmaList_5=rulePragmaList[$current]
		{
			$current = $this_PragmaList_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStateTypeSyntax
entryRuleStateTypeSyntax returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStateTypeSyntaxRule()); }
	iv_ruleStateTypeSyntax=ruleStateTypeSyntax
	{ $current=$iv_ruleStateTypeSyntax.current.getText(); }
	EOF;

// Rule StateTypeSyntax
ruleStateTypeSyntax returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw=Assigner
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getAssignerKeyword_0_0());
			}
			(
				kw=Start
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getStartKeyword_0_1());
				}
			)?
		)
		    |
		kw=Creation
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getCreationKeyword_1());
		}
		    |
		kw=Terminal
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStateTypeSyntaxAccess().getTerminalKeyword_2());
		}
	)
;

// Entry rule entryRuleTransitionTable
entryRuleTransitionTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionTableRule()); }
	iv_ruleTransitionTable=ruleTransitionTable
	{ $current=$iv_ruleTransitionTable.current; }
	EOF;

// Rule TransitionTable
ruleTransitionTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionTableAccess().getTypeTransTableTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleTransTableType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionTableRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.TransTableType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=Transition
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionTableAccess().getTransitionKeyword_1());
		}
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getTransitionTableAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionTableAccess().getRowsTransitionRowParserRuleCall_3_0());
				}
				lv_rows_3_0=ruleTransitionRow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionTableRule());
					}
					add(
						$current,
						"rows",
						lv_rows_3_0,
						"org.xtuml.bp.xtext.masl.MASL.TransitionRow");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=End
		{
			newLeafNode(otherlv_4, grammarAccess.getTransitionTableAccess().getEndKeyword_4());
		}
		(
			otherlv_5=Transition
			{
				newLeafNode(otherlv_5, grammarAccess.getTransitionTableAccess().getTransitionKeyword_5());
			}
		)?
		otherlv_6=Semicolon
		{
			newLeafNode(otherlv_6, grammarAccess.getTransitionTableAccess().getSemicolonKeyword_6());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTransitionTableRule());
			}
			newCompositeNode(grammarAccess.getTransitionTableAccess().getPragmaListParserRuleCall_7());
		}
		this_PragmaList_7=rulePragmaList[$current]
		{
			$current = $this_PragmaList_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTransitionRow
entryRuleTransitionRow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRowRule()); }
	iv_ruleTransitionRow=ruleTransitionRow
	{ $current=$iv_ruleTransitionRow.current; }
	EOF;

// Rule TransitionRow
ruleTransitionRow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionRowRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getTransitionRowAccess().getStartStateDeclarationCrossReference_0_0_0());
					}
				)
			)
			    |
			(
				(
					(
						lv_nonExistant_1_1=Non_Existent
						{
							newLeafNode(lv_nonExistant_1_1, grammarAccess.getTransitionRowAccess().getNonExistantNon_ExistentKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRowRule());
							}
							setWithLastConsumed($current, "nonExistant", lv_nonExistant_1_1 != null, null);
						}
						    |
						lv_nonExistant_1_2=Non_Existant
						{
							newLeafNode(lv_nonExistant_1_2, grammarAccess.getTransitionRowAccess().getNonExistantNon_ExistantKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRowRule());
							}
							setWithLastConsumed($current, "nonExistant", lv_nonExistant_1_2 != null, null);
						}
						    |
						lv_nonExistant_1_3=Non_existent
						{
							newLeafNode(lv_nonExistant_1_3, grammarAccess.getTransitionRowAccess().getNonExistantNon_existentKeyword_0_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRowRule());
							}
							setWithLastConsumed($current, "nonExistant", lv_nonExistant_1_3 != null, null);
						}
						    |
						lv_nonExistant_1_4=Non_existant
						{
							newLeafNode(lv_nonExistant_1_4, grammarAccess.getTransitionRowAccess().getNonExistantNon_existantKeyword_0_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionRowRule());
							}
							setWithLastConsumed($current, "nonExistant", lv_nonExistant_1_4 != null, null);
						}
					)
				)
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getTransitionRowAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTransitionRowAccess().getOptionsTransitionOptionParserRuleCall_2_0_0());
					}
					lv_options_3_0=ruleTransitionOption
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTransitionRowRule());
						}
						add(
							$current,
							"options",
							lv_options_3_0,
							"org.xtuml.bp.xtext.masl.MASL.TransitionOption");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=Comma
				{
					newLeafNode(otherlv_4, grammarAccess.getTransitionRowAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionRowAccess().getOptionsTransitionOptionParserRuleCall_2_1_1_0());
						}
						lv_options_5_0=ruleTransitionOption
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionRowRule());
							}
							add(
								$current,
								"options",
								lv_options_5_0,
								"org.xtuml.bp.xtext.masl.MASL.TransitionOption");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getTransitionRowAccess().getRightParenthesisKeyword_3());
		}
		otherlv_7=Semicolon
		{
			newLeafNode(otherlv_7, grammarAccess.getTransitionRowAccess().getSemicolonKeyword_4());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTransitionRowRule());
			}
			newCompositeNode(grammarAccess.getTransitionRowAccess().getPragmaListParserRuleCall_5());
		}
		this_PragmaList_8=rulePragmaList[$current]
		{
			$current = $this_PragmaList_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTransitionOption
entryRuleTransitionOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionOptionRule()); }
	iv_ruleTransitionOption=ruleTransitionOption
	{ $current=$iv_ruleTransitionOption.current; }
	EOF;

// Rule TransitionOption
ruleTransitionOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionOptionRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getTransitionOptionAccess().getEventObjectObjectDefinitionCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=FullStop
			{
				newLeafNode(otherlv_1, grammarAccess.getTransitionOptionAccess().getFullStopKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionOptionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getTransitionOptionAccess().getEventEventDefinitionCrossReference_1_0());
				}
			)
		)
		otherlv_3=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getTransitionOptionAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionOptionRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getTransitionOptionAccess().getEndStateStateDeclarationCrossReference_3_0_0());
					}
				)
			)
			    |
			(
				(
					lv_ignore_5_0=Ignore
					{
						newLeafNode(lv_ignore_5_0, grammarAccess.getTransitionOptionAccess().getIgnoreIgnoreKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTransitionOptionRule());
						}
						setWithLastConsumed($current, "ignore", lv_ignore_5_0 != null, "Ignore");
					}
				)
			)
			    |
			(
				(
					(
						lv_cannotHappen_6_1=Cannot_Happen
						{
							newLeafNode(lv_cannotHappen_6_1, grammarAccess.getTransitionOptionAccess().getCannotHappenCannot_HappenKeyword_3_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionOptionRule());
							}
							setWithLastConsumed($current, "cannotHappen", lv_cannotHappen_6_1 != null, null);
						}
						    |
						lv_cannotHappen_6_2=Cannot_happen
						{
							newLeafNode(lv_cannotHappen_6_2, grammarAccess.getTransitionOptionAccess().getCannotHappenCannot_happenKeyword_3_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTransitionOptionRule());
							}
							setWithLastConsumed($current, "cannotHappen", lv_cannotHappen_6_2 != null, null);
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleDomainServiceDeclaration
entryRuleDomainServiceDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainServiceDeclarationRule()); }
	iv_ruleDomainServiceDeclaration=ruleDomainServiceDeclaration
	{ $current=$iv_ruleDomainServiceDeclaration.current; }
	EOF;

// Rule DomainServiceDeclaration
ruleDomainServiceDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDeclarationRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Service
			{
				newLeafNode(otherlv_1, grammarAccess.getDomainServiceDeclarationAccess().getServiceKeyword_1_0());
			}
			    |
			otherlv_2=Function
			{
				newLeafNode(otherlv_2, grammarAccess.getDomainServiceDeclarationAccess().getFunctionKeyword_1_1());
			}
		)
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getDomainServiceDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getParameterListParserRuleCall_3());
		}
		this_ParameterList_4=ruleParameterList[$current]
		{
			$current = $this_ParameterList_4.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_5=Return
			{
				newLeafNode(otherlv_5, grammarAccess.getDomainServiceDeclarationAccess().getReturnKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_4_1_0());
					}
					lv_returnType_6_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainServiceDeclarationRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_6_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7=Semicolon
		{
			newLeafNode(otherlv_7, grammarAccess.getDomainServiceDeclarationAccess().getSemicolonKeyword_5());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDomainServiceDeclarationRule());
			}
			newCompositeNode(grammarAccess.getDomainServiceDeclarationAccess().getPragmaListParserRuleCall_6());
		}
		this_PragmaList_8=rulePragmaList[$current]
		{
			$current = $this_PragmaList_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelationshipDefinition
entryRuleRelationshipDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipDefinitionRule()); }
	iv_ruleRelationshipDefinition=ruleRelationshipDefinition
	{ $current=$iv_ruleRelationshipDefinition.current; }
	EOF;

// Rule RelationshipDefinition
ruleRelationshipDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Relationship
		{
			newLeafNode(otherlv_0, grammarAccess.getRelationshipDefinitionAccess().getRelationshipKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getRegularRelationshipDefinitionParserRuleCall_1_0());
			}
			this_RegularRelationshipDefinition_1=ruleRegularRelationshipDefinition
			{
				$current = $this_RegularRelationshipDefinition_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getAssocRelationshipDefinitionParserRuleCall_1_1());
			}
			this_AssocRelationshipDefinition_2=ruleAssocRelationshipDefinition
			{
				$current = $this_AssocRelationshipDefinition_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getSubtypeRelationshipDefinitionParserRuleCall_1_2());
			}
			this_SubtypeRelationshipDefinition_3=ruleSubtypeRelationshipDefinition
			{
				$current = $this_SubtypeRelationshipDefinition_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		otherlv_4=Semicolon
		{
			newLeafNode(otherlv_4, grammarAccess.getRelationshipDefinitionAccess().getSemicolonKeyword_2());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getRelationshipDefinitionRule());
			}
			newCompositeNode(grammarAccess.getRelationshipDefinitionAccess().getPragmaListParserRuleCall_3());
		}
		this_PragmaList_5=rulePragmaList[$current]
		{
			$current = $this_PragmaList_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRegularRelationshipDefinition
entryRuleRegularRelationshipDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegularRelationshipDefinitionRule()); }
	iv_ruleRegularRelationshipDefinition=ruleRegularRelationshipDefinition
	{ $current=$iv_ruleRegularRelationshipDefinition.current; }
	EOF;

// Rule RegularRelationshipDefinition
ruleRegularRelationshipDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getRegularRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRegularRelationshipDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Is
		{
			newLeafNode(otherlv_1, grammarAccess.getRegularRelationshipDefinitionAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRegularRelationshipDefinitionAccess().getForwardsRelationshipEndParserRuleCall_2_0());
				}
				lv_forwards_2_0=ruleRelationshipEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegularRelationshipDefinitionRule());
					}
					set(
						$current,
						"forwards",
						lv_forwards_2_0,
						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Comma
		{
			newLeafNode(otherlv_3, grammarAccess.getRegularRelationshipDefinitionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRegularRelationshipDefinitionAccess().getBackwardsRelationshipEndParserRuleCall_4_0());
				}
				lv_backwards_4_0=ruleRelationshipEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegularRelationshipDefinitionRule());
					}
					set(
						$current,
						"backwards",
						lv_backwards_4_0,
						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssocRelationshipDefinition
entryRuleAssocRelationshipDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssocRelationshipDefinitionRule()); }
	iv_ruleAssocRelationshipDefinition=ruleAssocRelationshipDefinition
	{ $current=$iv_ruleAssocRelationshipDefinition.current; }
	EOF;

// Rule AssocRelationshipDefinition
ruleAssocRelationshipDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAssocRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Is
		{
			newLeafNode(otherlv_1, grammarAccess.getAssocRelationshipDefinitionAccess().getIsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssocRelationshipDefinitionAccess().getForwardsRelationshipEndParserRuleCall_2_0());
				}
				lv_forwards_2_0=ruleRelationshipEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssocRelationshipDefinitionRule());
					}
					set(
						$current,
						"forwards",
						lv_forwards_2_0,
						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Comma
		{
			newLeafNode(otherlv_3, grammarAccess.getAssocRelationshipDefinitionAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssocRelationshipDefinitionAccess().getBackwardsRelationshipEndParserRuleCall_4_0());
				}
				lv_backwards_4_0=ruleRelationshipEnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssocRelationshipDefinitionRule());
					}
					set(
						$current,
						"backwards",
						lv_backwards_4_0,
						"org.xtuml.bp.xtext.masl.MASL.RelationshipEnd");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=Using
		{
			newLeafNode(otherlv_5, grammarAccess.getAssocRelationshipDefinitionAccess().getUsingKeyword_5());
		}
		(
			(
				lv_one_6_0=One
				{
					newLeafNode(lv_one_6_0, grammarAccess.getAssocRelationshipDefinitionAccess().getOneOneKeyword_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
					}
					setWithLastConsumed($current, "one", lv_one_6_0 != null, "one");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssocRelationshipDefinitionRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getAssocRelationshipDefinitionAccess().getObjectObjectDeclarationCrossReference_7_0());
				}
			)
		)
	)
;

// Entry rule entryRuleRelationshipEnd
entryRuleRelationshipEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipEndRule()); }
	iv_ruleRelationshipEnd=ruleRelationshipEnd
	{ $current=$iv_ruleRelationshipEnd.current; }
	EOF;

// Rule RelationshipEnd
ruleRelationshipEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationshipEndRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getRelationshipEndAccess().getFromObjectDeclarationCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipEndAccess().getConditionalityConditionalityEnumRuleCall_1_0());
				}
				lv_conditionality_1_0=ruleConditionality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipEndRule());
					}
					set(
						$current,
						"conditionality",
						lv_conditionality_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Conditionality");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getRelationshipEndAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationshipEndRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRelationshipEndAccess().getMultiplicityMultiplicityEnumRuleCall_3_0());
				}
				lv_multiplicity_3_0=ruleMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelationshipEndRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Multiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationshipEndRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getRelationshipEndAccess().getToObjectDeclarationCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleSubtypeRelationshipDefinition
entryRuleSubtypeRelationshipDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtypeRelationshipDefinitionRule()); }
	iv_ruleSubtypeRelationshipDefinition=ruleSubtypeRelationshipDefinition
	{ $current=$iv_ruleSubtypeRelationshipDefinition.current; }
	EOF;

// Rule SubtypeRelationshipDefinition
ruleSubtypeRelationshipDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSubtypeRelationshipDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Is
		{
			newLeafNode(otherlv_1, grammarAccess.getSubtypeRelationshipDefinitionAccess().getIsKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSupertypeObjectDeclarationCrossReference_2_0());
				}
			)
		)
		otherlv_3=Is_a
		{
			newLeafNode(otherlv_3, grammarAccess.getSubtypeRelationshipDefinitionAccess().getIs_aKeyword_3());
		}
		otherlv_4=LeftParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getSubtypeRelationshipDefinitionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSubtypesObjectDeclarationCrossReference_5_0_0());
					}
				)
			)
			(
				otherlv_6=Comma
				{
					newLeafNode(otherlv_6, grammarAccess.getSubtypeRelationshipDefinitionAccess().getCommaKeyword_5_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSubtypeRelationshipDefinitionRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getSubtypeRelationshipDefinitionAccess().getSubtypesObjectDeclarationCrossReference_5_1_1_0());
						}
					)
				)
			)*
		)?
		otherlv_8=RightParenthesis
		{
			newLeafNode(otherlv_8, grammarAccess.getSubtypeRelationshipDefinitionAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleRelationshipNavigation
entryRuleRelationshipNavigation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationshipNavigationRule()); }
	iv_ruleRelationshipNavigation=ruleRelationshipNavigation
	{ $current=$iv_ruleRelationshipNavigation.current; }
	EOF;

// Rule RelationshipNavigation
ruleRelationshipNavigation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRelationshipNavigationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRelationshipNavigationAccess().getRelationshipRelationshipDefinitionCrossReference_0_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=FullStop
			{
				newLeafNode(otherlv_1, grammarAccess.getRelationshipNavigationAccess().getFullStopKeyword_1_0());
			}
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationshipNavigationRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getRelationshipNavigationAccess().getObjectOrRoleObjectOrRoleCrossReference_1_1_0_0());
						}
					)
				)
				    |
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationshipNavigationRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getRelationshipNavigationAccess().getObjectOrRoleObjectOrRoleCrossReference_1_1_1_0());
						}
						ruleObjectOrRoleName
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleDomainServiceDefinition
entryRuleDomainServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainServiceDefinitionRule()); }
	iv_ruleDomainServiceDefinition=ruleDomainServiceDefinition
	{ $current=$iv_ruleDomainServiceDefinition.current; }
	EOF;

// Rule DomainServiceDefinition
ruleDomainServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Service
			{
				newLeafNode(otherlv_1, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_1_0());
			}
			    |
			otherlv_2=Function
			{
				newLeafNode(otherlv_2, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_1_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getDomainServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
				}
			)
		)
		otherlv_4=ColonColon
		{
			newLeafNode(otherlv_4, grammarAccess.getDomainServiceDefinitionAccess().getColonColonKeyword_3());
		}
		(
			(
				lv_name_5_0=RULE_ID
				{
					newLeafNode(lv_name_5_0, grammarAccess.getDomainServiceDefinitionAccess().getNameIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_5_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getParameterListParserRuleCall_5());
		}
		this_ParameterList_6=ruleParameterList[$current]
		{
			$current = $this_ParameterList_6.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_7=Return
			{
				newLeafNode(otherlv_7, grammarAccess.getDomainServiceDefinitionAccess().getReturnKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_6_1_0());
					}
					lv_returnType_8_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_8_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9=Is
		{
			newLeafNode(otherlv_9, grammarAccess.getDomainServiceDefinitionAccess().getIsKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_8_0());
				}
				lv_body_10_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainServiceDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_11=Service
			{
				newLeafNode(otherlv_11, grammarAccess.getDomainServiceDefinitionAccess().getServiceKeyword_9_0());
			}
			    |
			otherlv_12=Function
			{
				newLeafNode(otherlv_12, grammarAccess.getDomainServiceDefinitionAccess().getFunctionKeyword_9_1());
			}
		)?
		(
			otherlv_13=Semicolon
			{
				newLeafNode(otherlv_13, grammarAccess.getDomainServiceDefinitionAccess().getSemicolonKeyword_10());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getDomainServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getDomainServiceDefinitionAccess().getPragmaListParserRuleCall_11());
		}
		this_PragmaList_14=rulePragmaList[$current]
		{
			$current = $this_PragmaList_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleObjectServiceDefinition
entryRuleObjectServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectServiceDefinitionRule()); }
	iv_ruleObjectServiceDefinition=ruleObjectServiceDefinition
	{ $current=$iv_ruleObjectServiceDefinition.current; }
	EOF;

// Rule ObjectServiceDefinition
ruleObjectServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_instance_1_0=Instance
				{
					newLeafNode(lv_instance_1_0, grammarAccess.getObjectServiceDefinitionAccess().getInstanceInstanceKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
					}
					setWithLastConsumed($current, "instance", lv_instance_1_0 != null, "instance");
				}
			)
		)?
		(
			otherlv_2=Deferred
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectServiceDefinitionAccess().getDeferredKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getObjectServiceDefinitionAccess().getRelationshipRelationshipDefinitionCrossReference_2_1_0());
					}
				)
			)
		)?
		(
			otherlv_4=Service
			{
				newLeafNode(otherlv_4, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_3_0());
			}
			    |
			otherlv_5=Function
			{
				newLeafNode(otherlv_5, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_3_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getObjectServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_4_0());
				}
			)
		)
		otherlv_7=ColonColon
		{
			newLeafNode(otherlv_7, grammarAccess.getObjectServiceDefinitionAccess().getColonColonKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getObjectServiceDefinitionAccess().getObjectObjectDeclarationCrossReference_6_0());
				}
			)
		)
		otherlv_9=FullStop
		{
			newLeafNode(otherlv_9, grammarAccess.getObjectServiceDefinitionAccess().getFullStopKeyword_7());
		}
		(
			(
				lv_name_10_0=RULE_ID
				{
					newLeafNode(lv_name_10_0, grammarAccess.getObjectServiceDefinitionAccess().getNameIDTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_10_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getParameterListParserRuleCall_9());
		}
		this_ParameterList_11=ruleParameterList[$current]
		{
			$current = $this_ParameterList_11.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_12=Return
			{
				newLeafNode(otherlv_12, grammarAccess.getObjectServiceDefinitionAccess().getReturnKeyword_10_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_10_1_0());
					}
					lv_returnType_13_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_13_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_14=Is
		{
			newLeafNode(otherlv_14, grammarAccess.getObjectServiceDefinitionAccess().getIsKeyword_11());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_12_0());
				}
				lv_body_15_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectServiceDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_15_0,
						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_16=Service
			{
				newLeafNode(otherlv_16, grammarAccess.getObjectServiceDefinitionAccess().getServiceKeyword_13_0());
			}
			    |
			otherlv_17=Function
			{
				newLeafNode(otherlv_17, grammarAccess.getObjectServiceDefinitionAccess().getFunctionKeyword_13_1());
			}
		)?
		(
			otherlv_18=Semicolon
			{
				newLeafNode(otherlv_18, grammarAccess.getObjectServiceDefinitionAccess().getSemicolonKeyword_14());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getObjectServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getObjectServiceDefinitionAccess().getPragmaListParserRuleCall_15());
		}
		this_PragmaList_19=rulePragmaList[$current]
		{
			$current = $this_PragmaList_19.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTerminatorServiceDefinition
entryRuleTerminatorServiceDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminatorServiceDefinitionRule()); }
	iv_ruleTerminatorServiceDefinition=ruleTerminatorServiceDefinition
	{ $current=$iv_ruleTerminatorServiceDefinition.current; }
	EOF;

// Rule TerminatorServiceDefinition
ruleTerminatorServiceDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getVisibilityVisibilityEnumRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibility
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.xtuml.bp.xtext.masl.MASL.Visibility");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_1=Service
			{
				newLeafNode(otherlv_1, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_1_0());
			}
			    |
			otherlv_2=Function
			{
				newLeafNode(otherlv_2, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_1_1());
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getTerminatorServiceDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
				}
			)
		)
		otherlv_4=ColonColon
		{
			newLeafNode(otherlv_4, grammarAccess.getTerminatorServiceDefinitionAccess().getColonColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getTerminatorServiceDefinitionAccess().getTerminatorTerminatorDefinitionCrossReference_4_0());
				}
			)
		)
		otherlv_6=TildeGreaterThanSign
		{
			newLeafNode(otherlv_6, grammarAccess.getTerminatorServiceDefinitionAccess().getTildeGreaterThanSignKeyword_5());
		}
		(
			(
				lv_name_7_0=RULE_ID
				{
					newLeafNode(lv_name_7_0, grammarAccess.getTerminatorServiceDefinitionAccess().getNameIDTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_7_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getParameterListParserRuleCall_7());
		}
		this_ParameterList_8=ruleParameterList[$current]
		{
			$current = $this_ParameterList_8.current;
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_9=Return
			{
				newLeafNode(otherlv_9, grammarAccess.getTerminatorServiceDefinitionAccess().getReturnKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getReturnTypeAbstractTypeReferenceParserRuleCall_8_1_0());
					}
					lv_returnType_10_0=ruleAbstractTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
						}
						set(
							$current,
							"returnType",
							lv_returnType_10_0,
							"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_11=Is
		{
			newLeafNode(otherlv_11, grammarAccess.getTerminatorServiceDefinitionAccess().getIsKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getBodyCodeBlockParserRuleCall_10_0());
				}
				lv_body_12_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminatorServiceDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_12_0,
						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_13=Service
			{
				newLeafNode(otherlv_13, grammarAccess.getTerminatorServiceDefinitionAccess().getServiceKeyword_11_0());
			}
			    |
			otherlv_14=Function
			{
				newLeafNode(otherlv_14, grammarAccess.getTerminatorServiceDefinitionAccess().getFunctionKeyword_11_1());
			}
		)?
		(
			otherlv_15=Semicolon
			{
				newLeafNode(otherlv_15, grammarAccess.getTerminatorServiceDefinitionAccess().getSemicolonKeyword_12());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getTerminatorServiceDefinitionRule());
			}
			newCompositeNode(grammarAccess.getTerminatorServiceDefinitionAccess().getPragmaListParserRuleCall_13());
		}
		this_PragmaList_16=rulePragmaList[$current]
		{
			$current = $this_PragmaList_16.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStateDefinition
entryRuleStateDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateDefinitionRule()); }
	iv_ruleStateDefinition=ruleStateDefinition
	{ $current=$iv_ruleStateDefinition.current; }
	EOF;

// Rule StateDefinition
ruleStateDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStateDefinitionAccess().getTypeStateTypeSyntaxParserRuleCall_0_0());
				}
				lv_type_0_0=ruleStateTypeSyntax
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateDefinitionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.StateTypeSyntax");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1=State
		{
			newLeafNode(otherlv_1, grammarAccess.getStateDefinitionAccess().getStateKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDefinitionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getStateDefinitionAccess().getDomainDomainDefinitionCrossReference_2_0());
				}
			)
		)
		otherlv_3=ColonColon
		{
			newLeafNode(otherlv_3, grammarAccess.getStateDefinitionAccess().getColonColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDefinitionRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getStateDefinitionAccess().getObjectObjectDeclarationCrossReference_4_0());
				}
			)
		)
		otherlv_5=FullStop
		{
			newLeafNode(otherlv_5, grammarAccess.getStateDefinitionAccess().getFullStopKeyword_5());
		}
		(
			(
				lv_name_6_0=RULE_ID
				{
					newLeafNode(lv_name_6_0, grammarAccess.getStateDefinitionAccess().getNameIDTerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_6_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStateDefinitionRule());
			}
			newCompositeNode(grammarAccess.getStateDefinitionAccess().getParameterListParserRuleCall_7());
		}
		this_ParameterList_7=ruleParameterList[$current]
		{
			$current = $this_ParameterList_7.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_8=Is
		{
			newLeafNode(otherlv_8, grammarAccess.getStateDefinitionAccess().getIsKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateDefinitionAccess().getBodyCodeBlockParserRuleCall_9_0());
				}
				lv_body_9_0=ruleCodeBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_9_0,
						"org.xtuml.bp.xtext.masl.MASL.CodeBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_10=State
			{
				newLeafNode(otherlv_10, grammarAccess.getStateDefinitionAccess().getStateKeyword_10());
			}
		)?
		(
			otherlv_11=Semicolon
			{
				newLeafNode(otherlv_11, grammarAccess.getStateDefinitionAccess().getSemicolonKeyword_11());
			}
		)?
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStateDefinitionRule());
			}
			newCompositeNode(grammarAccess.getStateDefinitionAccess().getPragmaListParserRuleCall_12());
		}
		this_PragmaList_12=rulePragmaList[$current]
		{
			$current = $this_PragmaList_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getCodeBlockStatementParserRuleCall_0_0());
			}
			this_CodeBlockStatement_0=ruleCodeBlockStatement
			{
				$current = $this_CodeBlockStatement_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getAssignStatementParserRuleCall_0_1());
			}
			this_AssignStatement_1=ruleAssignStatement
			{
				$current = $this_AssignStatement_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_0_2());
			}
			this_ExitStatement_2=ruleExitStatement
			{
				$current = $this_ExitStatement_2.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_3());
			}
			this_ReturnStatement_3=ruleReturnStatement
			{
				$current = $this_ReturnStatement_3.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDelayStatementParserRuleCall_0_4());
			}
			this_DelayStatement_4=ruleDelayStatement
			{
				$current = $this_DelayStatement_4.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_0_5());
			}
			this_RaiseStatement_5=ruleRaiseStatement
			{
				$current = $this_RaiseStatement_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDeleteStatementParserRuleCall_0_6());
			}
			this_DeleteStatement_6=ruleDeleteStatement
			{
				$current = $this_DeleteStatement_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getEraseStatementParserRuleCall_0_7());
			}
			this_EraseStatement_7=ruleEraseStatement
			{
				$current = $this_EraseStatement_7.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getScheduleStatementParserRuleCall_0_8());
			}
			this_ScheduleStatement_8=ruleScheduleStatement
			{
				$current = $this_ScheduleStatement_8.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getCancelTimerStatementParserRuleCall_0_9());
			}
			this_CancelTimerStatement_9=ruleCancelTimerStatement
			{
				$current = $this_CancelTimerStatement_9.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getGenerateStatementParserRuleCall_0_10());
			}
			this_GenerateStatement_10=ruleGenerateStatement
			{
				$current = $this_GenerateStatement_10.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0_11());
			}
			this_IfStatement_11=ruleIfStatement
			{
				$current = $this_IfStatement_11.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getCaseStatementParserRuleCall_0_12());
			}
			this_CaseStatement_12=ruleCaseStatement
			{
				$current = $this_CaseStatement_12.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_0_13());
			}
			this_ForStatement_13=ruleForStatement
			{
				$current = $this_ForStatement_13.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_0_14());
			}
			this_WhileStatement_14=ruleWhileStatement
			{
				$current = $this_WhileStatement_14.current;
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_15=Semicolon
		{
			newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_1());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getStatementRule());
			}
			newCompositeNode(grammarAccess.getStatementAccess().getPragmaListParserRuleCall_2());
		}
		this_PragmaList_16=rulePragmaList[$current]
		{
			$current = $this_PragmaList_16.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignStatement
entryRuleAssignStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignStatementRule()); }
	iv_ruleAssignStatement=ruleAssignStatement
	{ $current=$iv_ruleAssignStatement.current; }
	EOF;

// Rule AssignStatement
ruleAssignStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignStatementAccess().getExpressionParserRuleCall_0());
		}
		this_Expression_0=ruleExpression
		{
			$current = $this_Expression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAssignStatementAccess().getAssignStatementLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2=ColonEqualsSign
			{
				newLeafNode(otherlv_2, grammarAccess.getAssignStatementAccess().getColonEqualsSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignStatementAccess().getRhsExpressionParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignStatementRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExitStatement
entryRuleExitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExitStatementRule()); }
	iv_ruleExitStatement=ruleExitStatement
	{ $current=$iv_ruleExitStatement.current; }
	EOF;

// Rule ExitStatement
ruleExitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExitStatementAccess().getExitStatementAction_0(),
					$current);
			}
		)
		otherlv_1=Exit
		{
			newLeafNode(otherlv_1, grammarAccess.getExitStatementAccess().getExitKeyword_1());
		}
		(
			otherlv_2=When
			{
				newLeafNode(otherlv_2, grammarAccess.getExitStatementAccess().getWhenKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExitStatementAccess().getConditionExpressionParserRuleCall_2_1_0());
					}
					lv_condition_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExitStatementRule());
						}
						set(
							$current,
							"condition",
							lv_condition_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Return
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDelayStatement
entryRuleDelayStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelayStatementRule()); }
	iv_ruleDelayStatement=ruleDelayStatement
	{ $current=$iv_ruleDelayStatement.current; }
	EOF;

// Rule DelayStatement
ruleDelayStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Delay
		{
			newLeafNode(otherlv_0, grammarAccess.getDelayStatementAccess().getDelayKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDelayStatementAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDelayStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRaiseStatement
entryRuleRaiseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRaiseStatementRule()); }
	iv_ruleRaiseStatement=ruleRaiseStatement
	{ $current=$iv_ruleRaiseStatement.current; }
	EOF;

// Rule RaiseStatement
ruleRaiseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Raise
		{
			newLeafNode(otherlv_0, grammarAccess.getRaiseStatementAccess().getRaiseKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRaiseStatementRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRaiseStatementAccess().getExceptionExceptionDeclarationCrossReference_1_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=LeftParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getRaiseStatementAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRaiseStatementAccess().getArgumentExpressionParserRuleCall_2_1_0());
					}
					lv_argument_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRaiseStatementRule());
						}
						set(
							$current,
							"argument",
							lv_argument_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getRaiseStatementAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteStatementRule()); }
	iv_ruleDeleteStatement=ruleDeleteStatement
	{ $current=$iv_ruleDeleteStatement.current; }
	EOF;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Delete
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteStatementAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteStatementAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEraseStatement
entryRuleEraseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEraseStatementRule()); }
	iv_ruleEraseStatement=ruleEraseStatement
	{ $current=$iv_ruleEraseStatement.current; }
	EOF;

// Rule EraseStatement
ruleEraseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Erase
		{
			newLeafNode(otherlv_0, grammarAccess.getEraseStatementAccess().getEraseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEraseStatementAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEraseStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScheduleStatement
entryRuleScheduleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleStatementRule()); }
	iv_ruleScheduleStatement=ruleScheduleStatement
	{ $current=$iv_ruleScheduleStatement.current; }
	EOF;

// Rule ScheduleStatement
ruleScheduleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Schedule
		{
			newLeafNode(otherlv_0, grammarAccess.getScheduleStatementAccess().getScheduleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTimerIdExpressionParserRuleCall_1_0());
				}
				lv_timerId_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
					}
					set(
						$current,
						"timerId",
						lv_timerId_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleStatementAccess().getGenerateStatementGenerateStatementParserRuleCall_2_0());
				}
				lv_generateStatement_2_0=ruleGenerateStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
					}
					set(
						$current,
						"generateStatement",
						lv_generateStatement_2_0,
						"org.xtuml.bp.xtext.masl.MASL.GenerateStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTypeScheduleTypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleScheduleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtuml.bp.xtext.masl.MASL.ScheduleType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleStatementAccess().getTimeExpressionParserRuleCall_4_0());
				}
				lv_time_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
					}
					set(
						$current,
						"time",
						lv_time_4_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=Delta
			{
				newLeafNode(otherlv_5, grammarAccess.getScheduleStatementAccess().getDeltaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScheduleStatementAccess().getPeriodExpressionParserRuleCall_5_1_0());
					}
					lv_period_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScheduleStatementRule());
						}
						set(
							$current,
							"period",
							lv_period_6_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleCancelTimerStatement
entryRuleCancelTimerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCancelTimerStatementRule()); }
	iv_ruleCancelTimerStatement=ruleCancelTimerStatement
	{ $current=$iv_ruleCancelTimerStatement.current; }
	EOF;

// Rule CancelTimerStatement
ruleCancelTimerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Cancel
		{
			newLeafNode(otherlv_0, grammarAccess.getCancelTimerStatementAccess().getCancelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCancelTimerStatementAccess().getTimerIdExpressionParserRuleCall_1_0());
				}
				lv_timerId_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCancelTimerStatementRule());
					}
					set(
						$current,
						"timerId",
						lv_timerId_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGenerateStatement
entryRuleGenerateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenerateStatementRule()); }
	iv_ruleGenerateStatement=ruleGenerateStatement
	{ $current=$iv_ruleGenerateStatement.current; }
	EOF;

// Rule GenerateStatement
ruleGenerateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Generate
		{
			newLeafNode(otherlv_0, grammarAccess.getGenerateStatementAccess().getGenerateKeyword_0());
		}
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGenerateStatementRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getGenerateStatementAccess().getObjectObjectDeclarationCrossReference_1_0_0());
					}
					ruleScopedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=FullStop
			{
				newLeafNode(otherlv_2, grammarAccess.getGenerateStatementAccess().getFullStopKeyword_1_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGenerateStatementRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getGenerateStatementAccess().getEventEventDefinitionCrossReference_2_0());
				}
			)
		)
		otherlv_4=LeftParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getGenerateStatementAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getGenerateStatementAccess().getArgumentsExpressionParserRuleCall_4_0_0());
					}
					lv_arguments_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_5_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=Comma
				{
					newLeafNode(otherlv_6, grammarAccess.getGenerateStatementAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getGenerateStatementAccess().getArgumentsExpressionParserRuleCall_4_1_1_0());
						}
						lv_arguments_7_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_7_0,
								"org.xtuml.bp.xtext.masl.MASL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8=RightParenthesis
		{
			newLeafNode(otherlv_8, grammarAccess.getGenerateStatementAccess().getRightParenthesisKeyword_5());
		}
		(
			otherlv_9=To
			{
				newLeafNode(otherlv_9, grammarAccess.getGenerateStatementAccess().getToKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGenerateStatementAccess().getToExpressionParserRuleCall_6_1_0());
					}
					lv_to_10_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGenerateStatementRule());
						}
						set(
							$current,
							"to",
							lv_to_10_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=If
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Then
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfsElsifBlockParserRuleCall_4_0());
				}
				lv_elseIfs_4_0=ruleElsifBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"elseIfs",
						lv_elseIfs_4_0,
						"org.xtuml.bp.xtext.masl.MASL.ElsifBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getElseElseBlockParserRuleCall_5_0());
				}
				lv_else_5_0=ruleElseBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"else",
						lv_else_5_0,
						"org.xtuml.bp.xtext.masl.MASL.ElseBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=End
		{
			newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getEndKeyword_6());
		}
		(
			otherlv_7=If
			{
				newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getIfKeyword_7());
			}
		)?
	)
;

// Entry rule entryRuleElsifBlock
entryRuleElsifBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElsifBlockRule()); }
	iv_ruleElsifBlock=ruleElsifBlock
	{ $current=$iv_ruleElsifBlock.current; }
	EOF;

// Rule ElsifBlock
ruleElsifBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Elsif
		{
			newLeafNode(otherlv_0, grammarAccess.getElsifBlockAccess().getElsifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElsifBlockAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElsifBlockRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Then
		{
			newLeafNode(otherlv_2, grammarAccess.getElsifBlockAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElsifBlockAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElsifBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleElseBlock
entryRuleElseBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseBlockRule()); }
	iv_ruleElseBlock=ruleElseBlock
	{ $current=$iv_ruleElseBlock.current; }
	EOF;

// Rule ElseBlock
ruleElseBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getElseBlockAccess().getElseBlockAction_0(),
					$current);
			}
		)
		otherlv_1=Else
		{
			newLeafNode(otherlv_1, grammarAccess.getElseBlockAccess().getElseKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseBlockAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=While
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_1_0());
				}
				lv_condition_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Loop
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getLoopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=End
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getEndKeyword_4());
		}
		(
			otherlv_5=Loop
			{
				newLeafNode(otherlv_5, grammarAccess.getWhileStatementAccess().getLoopKeyword_5());
			}
		)?
	)
;

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	iv_ruleCaseStatement=ruleCaseStatement
	{ $current=$iv_ruleCaseStatement.current; }
	EOF;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Case
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getValueExpressionParserRuleCall_1_0());
				}
				lv_value_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Is
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getIsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getAlternativesCaseAlternativeParserRuleCall_3_0());
				}
				lv_alternatives_3_0=ruleCaseAlternative
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					add(
						$current,
						"alternatives",
						lv_alternatives_3_0,
						"org.xtuml.bp.xtext.masl.MASL.CaseAlternative");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getDefaultCaseOthersParserRuleCall_4_0());
				}
				lv_default_4_0=ruleCaseOthers
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"default",
						lv_default_4_0,
						"org.xtuml.bp.xtext.masl.MASL.CaseOthers");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=End
		{
			newLeafNode(otherlv_5, grammarAccess.getCaseStatementAccess().getEndKeyword_5());
		}
		(
			otherlv_6=Case
			{
				newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getCaseKeyword_6());
			}
		)?
	)
;

// Entry rule entryRuleCaseAlternative
entryRuleCaseAlternative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseAlternativeRule()); }
	iv_ruleCaseAlternative=ruleCaseAlternative
	{ $current=$iv_ruleCaseAlternative.current; }
	EOF;

// Rule CaseAlternative
ruleCaseAlternative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=When
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseAlternativeAccess().getWhenKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAlternativeAccess().getChoicesExpressionParserRuleCall_1_0());
				}
				lv_choices_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
					}
					add(
						$current,
						"choices",
						lv_choices_1_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=VerticalLine
			{
				newLeafNode(otherlv_2, grammarAccess.getCaseAlternativeAccess().getVerticalLineKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseAlternativeAccess().getChoicesExpressionParserRuleCall_2_1_0());
					}
					lv_choices_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
						}
						add(
							$current,
							"choices",
							lv_choices_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_4, grammarAccess.getCaseAlternativeAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAlternativeAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_5_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseAlternativeRule());
					}
					add(
						$current,
						"statements",
						lv_statements_5_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCaseOthers
entryRuleCaseOthers returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseOthersRule()); }
	iv_ruleCaseOthers=ruleCaseOthers
	{ $current=$iv_ruleCaseOthers.current; }
	EOF;

// Rule CaseOthers
ruleCaseOthers returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCaseOthersAccess().getCaseOthersAction_0(),
					$current);
			}
		)
		otherlv_1=When
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseOthersAccess().getWhenKeyword_1());
		}
		otherlv_2=Others
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseOthersAccess().getOthersKeyword_2());
		}
		otherlv_3=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getCaseOthersAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseOthersAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseOthersRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=For
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getVariableLoopVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleLoopVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.xtuml.bp.xtext.masl.MASL.LoopVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=In
		{
			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getInKeyword_2());
		}
		(
			(
				lv_reverse_3_0=Reverse
				{
					newLeafNode(lv_reverse_3_0, grammarAccess.getForStatementAccess().getReverseReverseKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForStatementRule());
					}
					setWithLastConsumed($current, "reverse", lv_reverse_3_0 != null, "reverse");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getExpressionExpressionParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"org.xtuml.bp.xtext.masl.MASL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=Loop
		{
			newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getLoopKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getStatementsStatementParserRuleCall_6_0());
				}
				lv_statements_6_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					add(
						$current,
						"statements",
						lv_statements_6_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7=End
		{
			newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getEndKeyword_7());
		}
		(
			otherlv_8=Loop
			{
				newLeafNode(otherlv_8, grammarAccess.getForStatementAccess().getLoopKeyword_8());
			}
		)?
	)
;

// Entry rule entryRuleLoopVariable
entryRuleLoopVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoopVariableRule()); }
	iv_ruleLoopVariable=ruleLoopVariable
	{ $current=$iv_ruleLoopVariable.current; }
	EOF;

// Rule LoopVariable
ruleLoopVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getLoopVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLoopVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.xtuml.bp.xtext.masl.MASL.ID");
			}
		)
	)
;

// Entry rule entryRuleCodeBlockStatement
entryRuleCodeBlockStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeBlockStatementRule()); }
	iv_ruleCodeBlockStatement=ruleCodeBlockStatement
	{ $current=$iv_ruleCodeBlockStatement.current; }
	EOF;

// Rule CodeBlockStatement
ruleCodeBlockStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=Declare
			{
				newLeafNode(otherlv_0, grammarAccess.getCodeBlockStatementAccess().getDeclareKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getCodeBlockStatementAccess().getCodeBlockParserRuleCall_1());
		}
		this_CodeBlock_1=ruleCodeBlock
		{
			$current = $this_CodeBlock_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCodeBlock
entryRuleCodeBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCodeBlockRule()); }
	iv_ruleCodeBlock=ruleCodeBlock
	{ $current=$iv_ruleCodeBlock.current; }
	EOF;

// Rule CodeBlock
ruleCodeBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCodeBlockAccess().getCodeBlockAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCodeBlockAccess().getVariablesVariableDeclarationParserRuleCall_1_0());
				}
				lv_variables_1_0=ruleVariableDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
					}
					add(
						$current,
						"variables",
						lv_variables_1_0,
						"org.xtuml.bp.xtext.masl.MASL.VariableDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_2=Begin
		{
			newLeafNode(otherlv_2, grammarAccess.getCodeBlockAccess().getBeginKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCodeBlockAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4=Exception
			{
				newLeafNode(otherlv_4, grammarAccess.getCodeBlockAccess().getExceptionKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCodeBlockAccess().getExceptionHandlerExceptionHandlerParserRuleCall_4_1_0());
					}
					lv_exceptionHandler_5_0=ruleExceptionHandler
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
						}
						add(
							$current,
							"exceptionHandler",
							lv_exceptionHandler_5_0,
							"org.xtuml.bp.xtext.masl.MASL.ExceptionHandler");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getCodeBlockAccess().getDefaultHandlerDefaultExceptionHandlerParserRuleCall_4_2_0());
					}
					lv_defaultHandler_6_0=ruleDefaultExceptionHandler
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCodeBlockRule());
						}
						set(
							$current,
							"defaultHandler",
							lv_defaultHandler_6_0,
							"org.xtuml.bp.xtext.masl.MASL.DefaultExceptionHandler");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
		otherlv_7=End
		{
			newLeafNode(otherlv_7, grammarAccess.getCodeBlockAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.xtuml.bp.xtext.masl.MASL.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				lv_readOnly_2_0=Readonly
				{
					newLeafNode(lv_readOnly_2_0, grammarAccess.getVariableDeclarationAccess().getReadOnlyReadonlyKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed($current, "readOnly", lv_readOnly_2_0, "readonly");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeAbstractTypeReferenceWithCAParserRuleCall_3_0());
				}
				lv_type_3_0=ruleAbstractTypeReferenceWithCA
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"org.xtuml.bp.xtext.masl.MASL.AbstractTypeReferenceWithCA");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=ColonEqualsSign
			{
				newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getColonEqualsSignKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_4_1_0());
					}
					lv_expression_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=Semicolon
		{
			newLeafNode(otherlv_6, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_5());
		}
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getVariableDeclarationRule());
			}
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getPragmaListParserRuleCall_6());
		}
		this_PragmaList_7=rulePragmaList[$current]
		{
			$current = $this_PragmaList_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExceptionHandler
entryRuleExceptionHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExceptionHandlerRule()); }
	iv_ruleExceptionHandler=ruleExceptionHandler
	{ $current=$iv_ruleExceptionHandler.current; }
	EOF;

// Rule ExceptionHandler
ruleExceptionHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=When
		{
			newLeafNode(otherlv_0, grammarAccess.getExceptionHandlerAccess().getWhenKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExceptionHandlerRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getExceptionHandlerAccess().getExceptionExceptionDeclarationCrossReference_1_0());
				}
				ruleScopedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_2, grammarAccess.getExceptionHandlerAccess().getEqualsSignGreaterThanSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExceptionHandlerAccess().getStatementsStatementParserRuleCall_3_0());
				}
				lv_statements_3_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExceptionHandlerRule());
					}
					add(
						$current,
						"statements",
						lv_statements_3_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDefaultExceptionHandler
entryRuleDefaultExceptionHandler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultExceptionHandlerRule()); }
	iv_ruleDefaultExceptionHandler=ruleDefaultExceptionHandler
	{ $current=$iv_ruleDefaultExceptionHandler.current; }
	EOF;

// Rule DefaultExceptionHandler
ruleDefaultExceptionHandler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefaultExceptionHandlerAccess().getDefaultExceptionHandlerAction_0(),
					$current);
			}
		)
		otherlv_1=When
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultExceptionHandlerAccess().getWhenKeyword_1());
		}
		otherlv_2=Others
		{
			newLeafNode(otherlv_2, grammarAccess.getDefaultExceptionHandlerAccess().getOthersKeyword_2());
		}
		otherlv_3=EqualsSignGreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getDefaultExceptionHandlerAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultExceptionHandlerAccess().getStatementsStatementParserRuleCall_4_0());
				}
				lv_statements_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultExceptionHandlerRule());
					}
					add(
						$current,
						"statements",
						lv_statements_4_0,
						"org.xtuml.bp.xtext.masl.MASL.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleFindCondition
entryRuleFindCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindConditionRule()); }
	iv_ruleFindCondition=ruleFindCondition
	{ $current=$iv_ruleFindCondition.current; }
	EOF;

// Rule FindCondition
ruleFindCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getFindConditionAccess().getFindLogicalOrParserRuleCall());
	}
	this_FindLogicalOr_0=ruleFindLogicalOr
	{
		$current = $this_FindLogicalOr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleFindLogicalOr
entryRuleFindLogicalOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindLogicalOrRule()); }
	iv_ruleFindLogicalOr=ruleFindLogicalOr
	{ $current=$iv_ruleFindLogicalOr.current; }
	EOF;

// Rule FindLogicalOr
ruleFindLogicalOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindLogicalOrAccess().getFindLogicalXorParserRuleCall_0());
		}
		this_FindLogicalXor_0=ruleFindLogicalXor
		{
			$current = $this_FindLogicalXor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFindLogicalOrAccess().getLogicalOrLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2=Or
			{
				newLeafNode(otherlv_2, grammarAccess.getFindLogicalOrAccess().getOrKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFindLogicalOrAccess().getRhsFindLogicalXorParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleFindLogicalXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindLogicalOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.FindLogicalXor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFindLogicalXor
entryRuleFindLogicalXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindLogicalXorRule()); }
	iv_ruleFindLogicalXor=ruleFindLogicalXor
	{ $current=$iv_ruleFindLogicalXor.current; }
	EOF;

// Rule FindLogicalXor
ruleFindLogicalXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindLogicalXorAccess().getFindLogicalAndParserRuleCall_0());
		}
		this_FindLogicalAnd_0=ruleFindLogicalAnd
		{
			$current = $this_FindLogicalAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFindLogicalXorAccess().getLogicalXorLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2=Xor
			{
				newLeafNode(otherlv_2, grammarAccess.getFindLogicalXorAccess().getXorKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFindLogicalXorAccess().getRhsFindLogicalAndParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleFindLogicalAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindLogicalXorRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.FindLogicalAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFindLogicalAnd
entryRuleFindLogicalAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindLogicalAndRule()); }
	iv_ruleFindLogicalAnd=ruleFindLogicalAnd
	{ $current=$iv_ruleFindLogicalAnd.current; }
	EOF;

// Rule FindLogicalAnd
ruleFindLogicalAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindLogicalAndAccess().getFindPrimaryParserRuleCall_0());
		}
		this_FindPrimary_0=ruleFindPrimary
		{
			$current = $this_FindPrimary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFindLogicalAndAccess().getLogicalAndLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2=And
			{
				newLeafNode(otherlv_2, grammarAccess.getFindLogicalAndAccess().getAndKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFindLogicalAndAccess().getRhsFindPrimaryParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleFindPrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindLogicalAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.FindPrimary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFindPrimary
entryRuleFindPrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindPrimaryRule()); }
	iv_ruleFindPrimary=ruleFindPrimary
	{ $current=$iv_ruleFindPrimary.current; }
	EOF;

// Rule FindPrimary
ruleFindPrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindPrimaryAccess().getFindEqualityParserRuleCall_0());
		}
		this_FindEquality_0=ruleFindEquality
		{
			$current = $this_FindEquality_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFindPrimaryAccess().getFindUnaryParserRuleCall_1());
		}
		this_FindUnary_1=ruleFindUnary
		{
			$current = $this_FindUnary_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFindUnary
entryRuleFindUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindUnaryRule()); }
	iv_ruleFindUnary=ruleFindUnary
	{ $current=$iv_ruleFindUnary.current; }
	EOF;

// Rule FindUnary
ruleFindUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=Not
			{
				newLeafNode(otherlv_0, grammarAccess.getFindUnaryAccess().getNotKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getFindUnaryAccess().getFindUnaryParserRuleCall_0_1());
			}
			this_FindUnary_1=ruleFindUnary
			{
				$current = $this_FindUnary_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2=LeftParenthesis
			{
				newLeafNode(otherlv_2, grammarAccess.getFindUnaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getFindUnaryAccess().getFindConditionParserRuleCall_1_1());
			}
			this_FindCondition_3=ruleFindCondition
			{
				$current = $this_FindCondition_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getFindUnaryAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleFindEquality
entryRuleFindEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindEqualityRule()); }
	iv_ruleFindEquality=ruleFindEquality
	{ $current=$iv_ruleFindEquality.current; }
	EOF;

// Rule FindEquality
ruleFindEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindEqualityAccess().getFindRelationExpParserRuleCall_0());
		}
		this_FindRelationExp_0=ruleFindRelationExp
		{
			$current = $this_FindRelationExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFindEqualityAccess().getEqualityLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=EqualsSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getFindEqualityAccess().getOperatorEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=SolidusEqualsSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getFindEqualityAccess().getOperatorSolidusEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFindEqualityAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleAdditiveExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFindRelationExp
entryRuleFindRelationExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindRelationExpRule()); }
	iv_ruleFindRelationExp=ruleFindRelationExp
	{ $current=$iv_ruleFindRelationExp.current; }
	EOF;

// Rule FindRelationExp
ruleFindRelationExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindRelationExpAccess().getFindNameParserRuleCall_0());
		}
		this_FindName_0=ruleFindName
		{
			$current = $this_FindName_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getFindRelationExpAccess().getRelationalExpLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=LessThanSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getFindRelationExpAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindRelationExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=GreaterThanSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getFindRelationExpAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindRelationExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=LessThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getFindRelationExpAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindRelationExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4=GreaterThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getFindRelationExpAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindRelationExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFindRelationExpAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleAdditiveExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFindRelationExpRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFindName
entryRuleFindName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindNameRule()); }
	iv_ruleFindName=ruleFindName
	{ $current=$iv_ruleFindName.current; }
	EOF;

// Rule FindName
ruleFindName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFindNameAccess().getFindReceiverAttributeParserRuleCall_0());
		}
		this_FindReceiverAttribute_0=ruleFindReceiverAttribute
		{
			$current = $this_FindReceiverAttribute_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getFindNameAccess().getSimpleFeatureCallReceiverAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=FullStop
				{
					newLeafNode(otherlv_2, grammarAccess.getFindNameAccess().getFullStopKeyword_1_0_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFindNameRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getFindNameAccess().getFeatureAbstractFeatureCrossReference_1_0_2_0());
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getFindNameAccess().getIndexedExpressionReceiverAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=LeftSquareBracket
				{
					newLeafNode(otherlv_5, grammarAccess.getFindNameAccess().getLeftSquareBracketKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFindNameAccess().getBracketsExpressionParserRuleCall_1_1_2_0());
						}
						lv_brackets_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFindNameRule());
							}
							set(
								$current,
								"brackets",
								lv_brackets_6_0,
								"org.xtuml.bp.xtext.masl.MASL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=RightSquareBracket
				{
					newLeafNode(otherlv_7, grammarAccess.getFindNameAccess().getRightSquareBracketKeyword_1_1_3());
				}
			)
		)*
	)
;

// Entry rule entryRuleFindReceiverAttribute
entryRuleFindReceiverAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindReceiverAttributeRule()); }
	iv_ruleFindReceiverAttribute=ruleFindReceiverAttribute
	{ $current=$iv_ruleFindReceiverAttribute.current; }
	EOF;

// Rule FindReceiverAttribute
ruleFindReceiverAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFindReceiverAttributeRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getFindReceiverAttributeAccess().getFeatureAttributeDefinitionCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleConstExpression
entryRuleConstExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstExpressionRule()); }
	iv_ruleConstExpression=ruleConstExpression
	{ $current=$iv_ruleConstExpression.current; }
	EOF;

// Rule ConstExpression
ruleConstExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstExpressionAccess().getExpressionParserRuleCall());
	}
	this_Expression_0=ruleExpression
	{
		$current = $this_Expression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getStreamExpressionParserRuleCall());
	}
	this_StreamExpression_0=ruleStreamExpression
	{
		$current = $this_StreamExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStreamExpression
entryRuleStreamExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStreamExpressionRule()); }
	iv_ruleStreamExpression=ruleStreamExpression
	{ $current=$iv_ruleStreamExpression.current; }
	EOF;

// Rule StreamExpression
ruleStreamExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStreamExpressionAccess().getRangeExpressionParserRuleCall_0());
		}
		this_RangeExpression_0=ruleRangeExpression
		{
			$current = $this_RangeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getStreamExpressionAccess().getStreamExpressionLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStreamExpressionAccess().getOperatorStreamOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleStreamOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStreamExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"org.xtuml.bp.xtext.masl.MASL.StreamOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getStreamExpressionAccess().getRhsRangeExpressionParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleRangeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStreamExpressionRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.RangeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleStreamOperator
entryRuleStreamOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStreamOperatorRule()); }
	iv_ruleStreamOperator=ruleStreamOperator
	{ $current=$iv_ruleStreamOperator.current.getText(); }
	EOF;

// Rule StreamOperator
ruleStreamOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=LessThanSignLessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getLessThanSignLessThanSignKeyword_0());
		}
		    |
		kw=GreaterThanSignGreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw=LessThanSignLessThanSignLessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getLessThanSignLessThanSignLessThanSignKeyword_2());
		}
		    |
		kw=GreaterThanSignGreaterThanSignGreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStreamOperatorAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleRangeExpression
entryRuleRangeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRangeExpressionRule()); }
	iv_ruleRangeExpression=ruleRangeExpression
	{ $current=$iv_ruleRangeExpression.current; }
	EOF;

// Rule RangeExpression
ruleRangeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRangeExpressionAccess().getLogicalOrParserRuleCall_0());
		}
		this_LogicalOr_0=ruleLogicalOr
		{
			$current = $this_LogicalOr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRangeExpressionAccess().getRangeExpressionFromAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=FullStopFullStop
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getRangeExpressionAccess().getOperatorFullStopFullStopKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRangeExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "..");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRangeExpressionAccess().getToLogicalOrParserRuleCall_1_2_0());
					}
					lv_to_3_0=ruleLogicalOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRangeExpressionRule());
						}
						set(
							$current,
							"to",
							lv_to_3_0,
							"org.xtuml.bp.xtext.masl.MASL.LogicalOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLogicalOr
entryRuleLogicalOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrRule()); }
	iv_ruleLogicalOr=ruleLogicalOr
	{ $current=$iv_ruleLogicalOr.current; }
	EOF;

// Rule LogicalOr
ruleLogicalOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOrAccess().getLogicalXorParserRuleCall_0());
		}
		this_LogicalXor_0=ruleLogicalXor
		{
			$current = $this_LogicalXor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalOrAccess().getLogicalOrLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=Or
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalOrAccess().getOperatorOrKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicalOrRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "or");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrAccess().getRhsLogicalXorParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleLogicalXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.LogicalXor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalXor
entryRuleLogicalXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalXorRule()); }
	iv_ruleLogicalXor=ruleLogicalXor
	{ $current=$iv_ruleLogicalXor.current; }
	EOF;

// Rule LogicalXor
ruleLogicalXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalXorAccess().getLogicalAndParserRuleCall_0());
		}
		this_LogicalAnd_0=ruleLogicalAnd
		{
			$current = $this_LogicalAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalXorAccess().getLogicalXorLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=Xor
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalXorAccess().getOperatorXorKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicalXorRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "xor");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalXorAccess().getRhsLogicalAndParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleLogicalAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalXorRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.LogicalAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalAnd
entryRuleLogicalAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndRule()); }
	iv_ruleLogicalAnd=ruleLogicalAnd
	{ $current=$iv_ruleLogicalAnd.current; }
	EOF;

// Rule LogicalAnd
ruleLogicalAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalAndAccess().getLogicalAndLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_operator_2_0=And
					{
						newLeafNode(lv_operator_2_0, grammarAccess.getLogicalAndAccess().getOperatorAndKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLogicalAndRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_0, "and");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndAccess().getRhsEqualityParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getRelationalExpParserRuleCall_0());
		}
		this_RelationalExp_0=ruleRelationalExp
		{
			$current = $this_RelationalExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=EqualsSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getEqualityAccess().getOperatorEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=SolidusEqualsSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getEqualityAccess().getOperatorSolidusEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRhsRelationalExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleRelationalExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.RelationalExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationalExp
entryRuleRelationalExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExpRule()); }
	iv_ruleRelationalExp=ruleRelationalExp
	{ $current=$iv_ruleRelationalExp.current; }
	EOF;

// Rule RelationalExp
ruleRelationalExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExpAccess().getAdditiveExpParserRuleCall_0());
		}
		this_AdditiveExp_0=ruleAdditiveExp
		{
			$current = $this_AdditiveExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationalExpAccess().getRelationalExpLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=LessThanSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getRelationalExpAccess().getOperatorLessThanSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationalExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=GreaterThanSign
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getRelationalExpAccess().getOperatorGreaterThanSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationalExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=LessThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getRelationalExpAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationalExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4=GreaterThanSignEqualsSign
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getRelationalExpAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getRelationalExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExpAccess().getRhsAdditiveExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleAdditiveExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExpRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.AdditiveExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditiveExp
entryRuleAdditiveExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditiveExpRule()); }
	iv_ruleAdditiveExp=ruleAdditiveExp
	{ $current=$iv_ruleAdditiveExp.current; }
	EOF;

// Rule AdditiveExp
ruleAdditiveExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditiveExpAccess().getMultExpParserRuleCall_0());
		}
		this_MultExp_0=ruleMultExp
		{
			$current = $this_MultExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditiveExpAccess().getAdditiveExpLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=PlusSign
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditiveExpAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=HyphenMinus
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditiveExpAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=Ampersand
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getAdditiveExpAccess().getOperatorAmpersandKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4=Union
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getAdditiveExpAccess().getOperatorUnionKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
						    |
						lv_operator_2_5=Not_in
						{
							newLeafNode(lv_operator_2_5, grammarAccess.getAdditiveExpAccess().getOperatorNot_inKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditiveExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_5, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditiveExpAccess().getRhsMultExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleMultExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditiveExpRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.MultExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultExp
entryRuleMultExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultExpRule()); }
	iv_ruleMultExp=ruleMultExp
	{ $current=$iv_ruleMultExp.current; }
	EOF;

// Rule MultExp
ruleMultExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultExpAccess().getUnaryExpParserRuleCall_0());
		}
		this_UnaryExp_0=ruleUnaryExp
		{
			$current = $this_UnaryExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultExpAccess().getMultExpLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1=Asterisk
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultExpAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2=Solidus
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultExpAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
						    |
						lv_operator_2_3=Mod
						{
							newLeafNode(lv_operator_2_3, grammarAccess.getMultExpAccess().getOperatorModKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_3, null);
						}
						    |
						lv_operator_2_4=AsteriskAsterisk
						{
							newLeafNode(lv_operator_2_4, grammarAccess.getMultExpAccess().getOperatorAsteriskAsteriskKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_4, null);
						}
						    |
						lv_operator_2_5=Rem
						{
							newLeafNode(lv_operator_2_5, grammarAccess.getMultExpAccess().getOperatorRemKeyword_1_1_0_4());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_5, null);
						}
						    |
						lv_operator_2_6=Intersection
						{
							newLeafNode(lv_operator_2_6, grammarAccess.getMultExpAccess().getOperatorIntersectionKeyword_1_1_0_5());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_6, null);
						}
						    |
						lv_operator_2_7=Disunion
						{
							newLeafNode(lv_operator_2_7, grammarAccess.getMultExpAccess().getOperatorDisunionKeyword_1_1_0_6());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpRule());
							}
							setWithLastConsumed($current, "operator", lv_operator_2_7, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultExpAccess().getRhsUnaryExpParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleUnaryExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultExpRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.UnaryExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExp
entryRuleUnaryExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpRule()); }
	iv_ruleUnaryExp=ruleUnaryExp
	{ $current=$iv_ruleUnaryExp.current; }
	EOF;

// Rule UnaryExp
ruleUnaryExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryExpAccess().getUnaryExpAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpAccess().getOperatorUnaryOperatorParserRuleCall_0_1_0());
					}
					lv_operator_1_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"org.xtuml.bp.xtext.masl.MASL.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpAccess().getOperandUnaryExpParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleUnaryExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.xtuml.bp.xtext.masl.MASL.UnaryExp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getLinkExpressionParserRuleCall_1());
		}
		this_LinkExpression_3=ruleLinkExpression
		{
			$current = $this_LinkExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleUnaryOperator=ruleUnaryOperator
	{ $current=$iv_ruleUnaryOperator.current.getText(); }
	EOF;

// Rule UnaryOperator
ruleUnaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0());
		}
		    |
		kw=PlusSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1());
		}
		    |
		kw=Not
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getNotKeyword_2());
		}
		    |
		kw=Abs
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getAbsKeyword_3());
		}
	)
;

// Entry rule entryRuleLinkExpression
entryRuleLinkExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLinkExpressionRule()); }
	iv_ruleLinkExpression=ruleLinkExpression
	{ $current=$iv_ruleLinkExpression.current; }
	EOF;

// Rule LinkExpression
ruleLinkExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLinkExpressionAccess().getNavigateExpressionParserRuleCall_0());
		}
		this_NavigateExpression_0=ruleNavigateExpression
		{
			$current = $this_NavigateExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLinkExpressionAccess().getLinkExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLinkExpressionAccess().getTypeLinkTypeEnumRuleCall_1_1_0());
					}
					lv_type_2_0=ruleLinkType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
						}
						set(
							$current,
							"type",
							lv_type_2_0,
							"org.xtuml.bp.xtext.masl.MASL.LinkType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLinkExpressionAccess().getLhsNavigateExpressionParserRuleCall_1_2_0());
					}
					lv_lhs_3_0=ruleNavigateExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_3_0,
							"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLinkExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_3_0());
					}
					lv_navigation_4_0=ruleRelationshipNavigation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
						}
						set(
							$current,
							"navigation",
							lv_navigation_4_0,
							"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					((
						ruleNavigateExpression
					)
					)=>
					(
						{
							newCompositeNode(grammarAccess.getLinkExpressionAccess().getRhsNavigateExpressionParserRuleCall_1_4_0_0());
						}
						lv_rhs_5_0=ruleNavigateExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_5_0,
								"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6=Using
					{
						newLeafNode(otherlv_6, grammarAccess.getLinkExpressionAccess().getUsingKeyword_1_4_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getLinkExpressionAccess().getAssocNavigateExpressionParserRuleCall_1_4_1_1_0());
							}
							lv_assoc_7_0=ruleNavigateExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getLinkExpressionRule());
								}
								set(
									$current,
									"assoc",
									lv_assoc_7_0,
									"org.xtuml.bp.xtext.masl.MASL.NavigateExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)?
		)
	)
;

// Entry rule entryRuleNavigateExpression
entryRuleNavigateExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNavigateExpressionRule()); }
	iv_ruleNavigateExpression=ruleNavigateExpression
	{ $current=$iv_ruleNavigateExpression.current; }
	EOF;

// Rule NavigateExpression
ruleNavigateExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNavigateExpressionAccess().getExtendedExpressionParserRuleCall_0());
		}
		this_ExtendedExpression_0=ruleExtendedExpression
		{
			$current = $this_ExtendedExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getNavigateExpressionAccess().getNavigateExpressionLhsAction_1_0(),
						$current);
				}
			)
			(
				(
					otherlv_2=HyphenMinusGreaterThanSign
					{
						newLeafNode(otherlv_2, grammarAccess.getNavigateExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_0_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_1_0_1_0());
							}
							lv_navigation_3_0=ruleRelationshipNavigation
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
								}
								set(
									$current,
									"navigation",
									lv_navigation_3_0,
									"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=LeftParenthesis
						{
							newLeafNode(otherlv_4, grammarAccess.getNavigateExpressionAccess().getLeftParenthesisKeyword_1_1_0_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getNavigateExpressionAccess().getWhereFindConditionParserRuleCall_1_1_0_2_1_0());
								}
								lv_where_5_0=ruleFindCondition
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
									}
									set(
										$current,
										"where",
										lv_where_5_0,
										"org.xtuml.bp.xtext.masl.MASL.FindCondition");
									afterParserOrEnumRuleCall();
								}
							)
						)?
						otherlv_6=RightParenthesis
						{
							newLeafNode(otherlv_6, grammarAccess.getNavigateExpressionAccess().getRightParenthesisKeyword_1_1_0_2_2());
						}
					)?
				)
				    |
				(
					otherlv_7=With
					{
						newLeafNode(otherlv_7, grammarAccess.getNavigateExpressionAccess().getWithKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getWithExtendedExpressionParserRuleCall_1_1_1_1_0());
							}
							lv_with_8_0=ruleExtendedExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
								}
								set(
									$current,
									"with",
									lv_with_8_0,
									"org.xtuml.bp.xtext.masl.MASL.ExtendedExpression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_9=HyphenMinusGreaterThanSign
					{
						newLeafNode(otherlv_9, grammarAccess.getNavigateExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1_1_2());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getNavigationRelationshipNavigationParserRuleCall_1_1_1_3_0());
							}
							lv_navigation_10_0=ruleRelationshipNavigation
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
								}
								set(
									$current,
									"navigation",
									lv_navigation_10_0,
									"org.xtuml.bp.xtext.masl.MASL.RelationshipNavigation");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_11=Ordered_by
					{
						newLeafNode(otherlv_11, grammarAccess.getNavigateExpressionAccess().getOrdered_byKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getOrderSortOrderParserRuleCall_1_1_2_1_0());
							}
							lv_order_12_0=ruleSortOrder
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
								}
								set(
									$current,
									"order",
									lv_order_12_0,
									"org.xtuml.bp.xtext.masl.MASL.SortOrder");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				    |
				(
					otherlv_13=Reverse_ordered_by
					{
						newLeafNode(otherlv_13, grammarAccess.getNavigateExpressionAccess().getReverse_ordered_byKeyword_1_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getNavigateExpressionAccess().getReverseOrderSortOrderParserRuleCall_1_1_3_1_0());
							}
							lv_reverseOrder_14_0=ruleSortOrder
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getNavigateExpressionRule());
								}
								set(
									$current,
									"reverseOrder",
									lv_reverseOrder_14_0,
									"org.xtuml.bp.xtext.masl.MASL.SortOrder");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleExtendedExpression
entryRuleExtendedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtendedExpressionRule()); }
	iv_ruleExtendedExpression=ruleExtendedExpression
	{ $current=$iv_ruleExtendedExpression.current; }
	EOF;

// Rule ExtendedExpression
ruleExtendedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getPostfixExpressionParserRuleCall_0());
		}
		this_PostfixExpression_0=rulePostfixExpression
		{
			$current = $this_PostfixExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getCreateExpressionParserRuleCall_1());
		}
		this_CreateExpression_1=ruleCreateExpression
		{
			$current = $this_CreateExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExtendedExpressionAccess().getFindExpressionParserRuleCall_2());
		}
		this_FindExpression_2=ruleFindExpression
		{
			$current = $this_FindExpression_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSortOrder
entryRuleSortOrder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortOrderRule()); }
	iv_ruleSortOrder=ruleSortOrder
	{ $current=$iv_ruleSortOrder.current; }
	EOF;

// Rule SortOrder
ruleSortOrder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSortOrderAccess().getSortOrderAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getSortOrderAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSortOrderAccess().getComponentsSortOrderComponentParserRuleCall_2_0_0());
					}
					lv_components_2_0=ruleSortOrderComponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSortOrderRule());
						}
						add(
							$current,
							"components",
							lv_components_2_0,
							"org.xtuml.bp.xtext.masl.MASL.SortOrderComponent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=Comma
				{
					newLeafNode(otherlv_3, grammarAccess.getSortOrderAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSortOrderAccess().getComponentsSortOrderComponentParserRuleCall_2_1_1_0());
						}
						lv_components_4_0=ruleSortOrderComponent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSortOrderRule());
							}
							add(
								$current,
								"components",
								lv_components_4_0,
								"org.xtuml.bp.xtext.masl.MASL.SortOrderComponent");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getSortOrderAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSortOrderComponent
entryRuleSortOrderComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortOrderComponentRule()); }
	iv_ruleSortOrderComponent=ruleSortOrderComponent
	{ $current=$iv_ruleSortOrderComponent.current; }
	EOF;

// Rule SortOrderComponent
ruleSortOrderComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_reverse_0_0=Reverse
				{
					newLeafNode(lv_reverse_0_0, grammarAccess.getSortOrderComponentAccess().getReverseReverseKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSortOrderComponentRule());
					}
					setWithLastConsumed($current, "reverse", lv_reverse_0_0 != null, "reverse");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSortOrderComponentAccess().getFeatureSortOrderFeatureParserRuleCall_1_0());
				}
				lv_feature_1_0=ruleSortOrderFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSortOrderComponentRule());
					}
					set(
						$current,
						"feature",
						lv_feature_1_0,
						"org.xtuml.bp.xtext.masl.MASL.SortOrderFeature");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSortOrderFeature
entryRuleSortOrderFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSortOrderFeatureRule()); }
	iv_ruleSortOrderFeature=ruleSortOrderFeature
	{ $current=$iv_ruleSortOrderFeature.current; }
	EOF;

// Rule SortOrderFeature
ruleSortOrderFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSortOrderFeatureAccess().getSortOrderFeatureAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSortOrderFeatureRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSortOrderFeatureAccess().getFeatureAbstractFeatureCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSortOrderFeatureAccess().getSimpleFeatureCallReceiverAction_2_0(),
						$current);
				}
			)
			otherlv_3=FullStop
			{
				newLeafNode(otherlv_3, grammarAccess.getSortOrderFeatureAccess().getFullStopKeyword_2_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSortOrderFeatureRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getSortOrderFeatureAccess().getFeatureAbstractFeatureCrossReference_2_2_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCreateExpression
entryRuleCreateExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateExpressionRule()); }
	iv_ruleCreateExpression=ruleCreateExpression
	{ $current=$iv_ruleCreateExpression.current; }
	EOF;

// Rule CreateExpression
ruleCreateExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Create
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateExpressionAccess().getCreateKeyword_0());
		}
		(
			(
				lv_unique_1_0=Unique
				{
					newLeafNode(lv_unique_1_0, grammarAccess.getCreateExpressionAccess().getUniqueUniqueKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateExpressionRule());
					}
					setWithLastConsumed($current, "unique", lv_unique_1_0 != null, "unique");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getCreateExpressionAccess().getObjectObjectDeclarationCrossReference_2_0());
				}
			)
		)
		otherlv_3=LeftParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateExpressionAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateExpressionAccess().getArgumentsCreateArgumentParserRuleCall_4_0_0());
					}
					lv_arguments_4_0=ruleCreateArgument
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateExpressionRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_4_0,
							"org.xtuml.bp.xtext.masl.MASL.CreateArgument");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=Comma
				{
					newLeafNode(otherlv_5, grammarAccess.getCreateExpressionAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getCreateExpressionAccess().getArgumentsCreateArgumentParserRuleCall_4_1_1_0());
						}
						lv_arguments_6_0=ruleCreateArgument
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getCreateExpressionRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_6_0,
								"org.xtuml.bp.xtext.masl.MASL.CreateArgument");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=RightParenthesis
		{
			newLeafNode(otherlv_7, grammarAccess.getCreateExpressionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCreateArgument
entryRuleCreateArgument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateArgumentRule()); }
	iv_ruleCreateArgument=ruleCreateArgument
	{ $current=$iv_ruleCreateArgument.current; }
	EOF;

// Rule CreateArgument
ruleCreateArgument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCreateArgumentRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getCreateArgumentAccess().getAttributeAttributeDefinitionCrossReference_0_0_0());
					}
				)
			)
			otherlv_1=EqualsSignGreaterThanSign
			{
				newLeafNode(otherlv_1, grammarAccess.getCreateArgumentAccess().getEqualsSignGreaterThanSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCreateArgumentAccess().getValueExpressionParserRuleCall_0_2_0());
					}
					lv_value_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCreateArgumentRule());
						}
						set(
							$current,
							"value",
							lv_value_2_0,
							"org.xtuml.bp.xtext.masl.MASL.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3=Current_State
			{
				newLeafNode(otherlv_3, grammarAccess.getCreateArgumentAccess().getCurrent_StateKeyword_1_0());
			}
			otherlv_4=EqualsSignGreaterThanSign
			{
				newLeafNode(otherlv_4, grammarAccess.getCreateArgumentAccess().getEqualsSignGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCreateArgumentRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getCreateArgumentAccess().getCurrentStateStateDeclarationCrossReference_1_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleFindExpression
entryRuleFindExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFindExpressionRule()); }
	iv_ruleFindExpression=ruleFindExpression
	{ $current=$iv_ruleFindExpression.current; }
	EOF;

// Rule FindExpression
ruleFindExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFindExpressionAccess().getTypeFindTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleFindType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindExpressionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.xtuml.bp.xtext.masl.MASL.FindType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFindExpressionAccess().getExpressionPostfixNoActionCallExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=rulePostfixNoActionCallExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtuml.bp.xtext.masl.MASL.PostfixNoActionCallExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getFindExpressionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFindExpressionAccess().getWhereFindConditionParserRuleCall_3_0());
				}
				lv_where_3_0=ruleFindCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFindExpressionRule());
					}
					set(
						$current,
						"where",
						lv_where_3_0,
						"org.xtuml.bp.xtext.masl.MASL.FindCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getFindExpressionAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePostfixExpression
entryRulePostfixExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixExpressionRule()); }
	iv_rulePostfixExpression=rulePostfixExpression
	{ $current=$iv_rulePostfixExpression.current; }
	EOF;

// Rule PostfixExpression
rulePostfixExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixExpressionAccess().getActionCallReceiverAction_1_0_0(),
							$current);
					}
				)
				(
					(LeftParenthesis)=>
					otherlv_2=LeftParenthesis
					{
						newLeafNode(otherlv_2, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_0_1());
					}
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_0_2_0_0());
							}
							lv_arguments_3_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_3_0,
									"org.xtuml.bp.xtext.masl.MASL.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4=Comma
						{
							newLeafNode(otherlv_4, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_0_2_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_0_2_1_1_0());
								}
								lv_arguments_5_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_5_0,
										"org.xtuml.bp.xtext.masl.MASL.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_6=RightParenthesis
				{
					newLeafNode(otherlv_6, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_0_3());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixExpressionAccess().getSimpleFeatureCallReceiverAction_1_1_0(),
							$current);
					}
				)
				otherlv_8=FullStop
				{
					newLeafNode(otherlv_8, grammarAccess.getPostfixExpressionAccess().getFullStopKeyword_1_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostfixExpressionRule());
							}
						}
						otherlv_9=RULE_ID
						{
							newLeafNode(otherlv_9, grammarAccess.getPostfixExpressionAccess().getFeatureAbstractFeatureCrossReference_1_1_2_0());
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixExpressionAccess().getTerminatorActionCallReceiverAction_1_2_0(),
							$current);
					}
				)
				otherlv_11=TildeGreaterThanSign
				{
					newLeafNode(otherlv_11, grammarAccess.getPostfixExpressionAccess().getTildeGreaterThanSignKeyword_1_2_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostfixExpressionRule());
							}
						}
						otherlv_12=RULE_ID
						{
							newLeafNode(otherlv_12, grammarAccess.getPostfixExpressionAccess().getTerminatorActionAbstractFeatureCrossReference_1_2_2_0());
						}
					)
				)
				otherlv_13=LeftParenthesis
				{
					newLeafNode(otherlv_13, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_2_3());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_2_4_0_0());
							}
							lv_arguments_14_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_14_0,
									"org.xtuml.bp.xtext.masl.MASL.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_15=Comma
						{
							newLeafNode(otherlv_15, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_2_4_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_2_4_1_1_0());
								}
								lv_arguments_16_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_16_0,
										"org.xtuml.bp.xtext.masl.MASL.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
				)?
				otherlv_17=RightParenthesis
				{
					newLeafNode(otherlv_17, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_2_5());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixExpressionAccess().getIndexedExpressionReceiverAction_1_3_0(),
							$current);
					}
				)
				otherlv_19=LeftSquareBracket
				{
					newLeafNode(otherlv_19, grammarAccess.getPostfixExpressionAccess().getLeftSquareBracketKeyword_1_3_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getBracketsExpressionParserRuleCall_1_3_2_0());
						}
						lv_brackets_20_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
							}
							set(
								$current,
								"brackets",
								lv_brackets_20_0,
								"org.xtuml.bp.xtext.masl.MASL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_21=RightSquareBracket
				{
					newLeafNode(otherlv_21, grammarAccess.getPostfixExpressionAccess().getRightSquareBracketKeyword_1_3_3());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixExpressionAccess().getCharacteristicCallReceiverAction_1_4_0(),
							$current);
					}
				)
				otherlv_23=Apostrophe
				{
					newLeafNode(otherlv_23, grammarAccess.getPostfixExpressionAccess().getApostropheKeyword_1_4_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostfixExpressionRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getPostfixExpressionAccess().getCharacteristicCharacteristicCrossReference_1_4_2_0());
						}
						ruleCharacteristicID
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(LeftParenthesis)=>
						otherlv_25=LeftParenthesis
						{
							newLeafNode(otherlv_25, grammarAccess.getPostfixExpressionAccess().getLeftParenthesisKeyword_1_4_3_0());
						}
					)
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_4_3_1_0_0());
								}
								lv_arguments_26_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_26_0,
										"org.xtuml.bp.xtext.masl.MASL.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_27=Comma
							{
								newLeafNode(otherlv_27, grammarAccess.getPostfixExpressionAccess().getCommaKeyword_1_4_3_1_1_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getPostfixExpressionAccess().getArgumentsExpressionParserRuleCall_1_4_3_1_1_1_0());
									}
									lv_arguments_28_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPostfixExpressionRule());
										}
										add(
											$current,
											"arguments",
											lv_arguments_28_0,
											"org.xtuml.bp.xtext.masl.MASL.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)*
					)?
					otherlv_29=RightParenthesis
					{
						newLeafNode(otherlv_29, grammarAccess.getPostfixExpressionAccess().getRightParenthesisKeyword_1_4_3_2());
					}
				)?
			)
		)*
	)
;

// Entry rule entryRuleCharacteristicID
entryRuleCharacteristicID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCharacteristicIDRule()); }
	iv_ruleCharacteristicID=ruleCharacteristicID
	{ $current=$iv_ruleCharacteristicID.current.getText(); }
	EOF;

// Rule CharacteristicID
ruleCharacteristicID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getCharacteristicIDAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw=Range
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCharacteristicIDAccess().getRangeKeyword_1());
		}
		    |
		kw=Delta
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCharacteristicIDAccess().getDeltaKeyword_2());
		}
	)
;

// Entry rule entryRulePostfixNoActionCallExpression
entryRulePostfixNoActionCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionRule()); }
	iv_rulePostfixNoActionCallExpression=rulePostfixNoActionCallExpression
	{ $current=$iv_rulePostfixNoActionCallExpression.current; }
	EOF;

// Rule PostfixNoActionCallExpression
rulePostfixNoActionCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionAccess().getPrimaryNoActionCallExpressionParserRuleCall_0());
		}
		this_PrimaryNoActionCallExpression_0=rulePrimaryNoActionCallExpression
		{
			$current = $this_PrimaryNoActionCallExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixNoActionCallExpressionAccess().getSimpleFeatureCallReceiverAction_1_0_0(),
							$current);
					}
				)
				otherlv_2=FullStop
				{
					newLeafNode(otherlv_2, grammarAccess.getPostfixNoActionCallExpressionAccess().getFullStopKeyword_1_0_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostfixNoActionCallExpressionRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getPostfixNoActionCallExpressionAccess().getFeatureAbstractFeatureCrossReference_1_0_2_0());
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixNoActionCallExpressionAccess().getIndexedExpressionReceiverAction_1_1_0(),
							$current);
					}
				)
				otherlv_5=LeftSquareBracket
				{
					newLeafNode(otherlv_5, grammarAccess.getPostfixNoActionCallExpressionAccess().getLeftSquareBracketKeyword_1_1_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPostfixNoActionCallExpressionAccess().getBracketsExpressionParserRuleCall_1_1_2_0());
						}
						lv_brackets_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPostfixNoActionCallExpressionRule());
							}
							set(
								$current,
								"brackets",
								lv_brackets_6_0,
								"org.xtuml.bp.xtext.masl.MASL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=RightSquareBracket
				{
					newLeafNode(otherlv_7, grammarAccess.getPostfixNoActionCallExpressionAccess().getRightSquareBracketKeyword_1_1_3());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getPostfixNoActionCallExpressionAccess().getCharacteristicCallReceiverAction_1_2_0(),
							$current);
					}
				)
				otherlv_9=Apostrophe
				{
					newLeafNode(otherlv_9, grammarAccess.getPostfixNoActionCallExpressionAccess().getApostropheKeyword_1_2_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPostfixNoActionCallExpressionRule());
							}
						}
						otherlv_10=RULE_ID
						{
							newLeafNode(otherlv_10, grammarAccess.getPostfixNoActionCallExpressionAccess().getCharacteristicCharacteristicCrossReference_1_2_2_0());
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryNoActionCallExpression
entryRulePrimaryNoActionCallExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionRule()); }
	iv_rulePrimaryNoActionCallExpression=rulePrimaryNoActionCallExpression
	{ $current=$iv_rulePrimaryNoActionCallExpression.current; }
	EOF;

// Rule PrimaryNoActionCallExpression
rulePrimaryNoActionCallExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getParenthesisedExpressionParserRuleCall_1());
		}
		this_ParenthesisedExpression_1=ruleParenthesisedExpression
		{
			$current = $this_ParenthesisedExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getSimpleFeatureCallParserRuleCall_2());
		}
		this_SimpleFeatureCall_2=ruleSimpleFeatureCall
		{
			$current = $this_SimpleFeatureCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryNoActionCallExpressionAccess().getTypeNameExpressionParserRuleCall_3());
		}
		this_TypeNameExpression_3=ruleTypeNameExpression
		{
			$current = $this_TypeNameExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesisedExpressionParserRuleCall_1());
		}
		this_ParenthesisedExpression_1=ruleParenthesisedExpression
		{
			$current = $this_ParenthesisedExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSimpleFeatureCallParserRuleCall_2());
		}
		this_SimpleFeatureCall_2=ruleSimpleFeatureCall
		{
			$current = $this_SimpleFeatureCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTypeNameExpressionParserRuleCall_3());
		}
		this_TypeNameExpression_3=ruleTypeNameExpression
		{
			$current = $this_TypeNameExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTypeNameExpression
entryRuleTypeNameExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameExpressionRule()); }
	iv_ruleTypeNameExpression=ruleTypeNameExpression
	{ $current=$iv_ruleTypeNameExpression.current; }
	EOF;

// Rule TypeNameExpression
ruleTypeNameExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeNameExpressionAccess().getInstanceTypeReferenceParserRuleCall_0());
		}
		this_InstanceTypeReference_0=ruleInstanceTypeReference
		{
			$current = $this_InstanceTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameExpressionAccess().getAbstractCollectionTypeReferenceParserRuleCall_1());
		}
		this_AbstractCollectionTypeReference_1=ruleAbstractCollectionTypeReference
		{
			$current = $this_AbstractCollectionTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimpleFeatureCall
entryRuleSimpleFeatureCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleFeatureCallRule()); }
	iv_ruleSimpleFeatureCall=ruleSimpleFeatureCall
	{ $current=$iv_ruleSimpleFeatureCall.current; }
	EOF;

// Rule SimpleFeatureCall
ruleSimpleFeatureCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSimpleFeatureCallRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getSimpleFeatureCallAccess().getFeatureAbstractFeatureCrossReference_0());
			}
			ruleScopedName
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleParenthesisedExpression
entryRuleParenthesisedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenthesisedExpressionRule()); }
	iv_ruleParenthesisedExpression=ruleParenthesisedExpression
	{ $current=$iv_ruleParenthesisedExpression.current; }
	EOF;

// Rule ParenthesisedExpression
ruleParenthesisedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=LeftParenthesis
		{
			newLeafNode(otherlv_0, grammarAccess.getParenthesisedExpressionAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getParenthesisedExpressionAccess().getExpressionParserRuleCall_1());
		}
		this_Expression_1=ruleExpression
		{
			$current = $this_Expression_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getParenthesisedExpressionAccess().getStructureAggregateExpressionElementsAction_2_0(),
						$current);
				}
			)
			(
				otherlv_3=Comma
				{
					newLeafNode(otherlv_3, grammarAccess.getParenthesisedExpressionAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParenthesisedExpressionAccess().getElementsExpressionParserRuleCall_2_1_1_0());
						}
						lv_elements_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParenthesisedExpressionRule());
							}
							add(
								$current,
								"elements",
								lv_elements_4_0,
								"org.xtuml.bp.xtext.masl.MASL.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
		otherlv_5=RightParenthesis
		{
			newLeafNode(otherlv_5, grammarAccess.getParenthesisedExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_0());
		}
		this_IntegerLiteral_0=ruleIntegerLiteral
		{
			$current = $this_IntegerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_1());
		}
		this_RealLiteral_1=ruleRealLiteral
		{
			$current = $this_RealLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getCharacterLiteralParserRuleCall_2());
		}
		this_CharacterLiteral_2=ruleCharacterLiteral
		{
			$current = $this_CharacterLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3());
		}
		this_StringLiteral_3=ruleStringLiteral
		{
			$current = $this_StringLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getDurationLiteralParserRuleCall_4());
		}
		this_DurationLiteral_4=ruleDurationLiteral
		{
			$current = $this_DurationLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getTimestampLiteralParserRuleCall_5());
		}
		this_TimestampLiteral_5=ruleTimestampLiteral
		{
			$current = $this_TimestampLiteral_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_6());
		}
		this_BooleanLiteral_6=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_7());
		}
		this_NullLiteral_7=ruleNullLiteral
		{
			$current = $this_NullLiteral_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getFlushLiteralParserRuleCall_8());
		}
		this_FlushLiteral_8=ruleFlushLiteral
		{
			$current = $this_FlushLiteral_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getThisLiteralParserRuleCall_9());
		}
		this_ThisLiteral_9=ruleThisLiteral
		{
			$current = $this_ThisLiteral_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getConsoleLiteralParserRuleCall_10());
		}
		this_ConsoleLiteral_10=ruleConsoleLiteral
		{
			$current = $this_ConsoleLiteral_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getEndlLiteralParserRuleCall_11());
		}
		this_EndlLiteral_11=ruleEndlLiteral
		{
			$current = $this_EndlLiteral_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getLineNoLiteralParserRuleCall_12());
		}
		this_LineNoLiteral_12=ruleLineNoLiteral
		{
			$current = $this_LineNoLiteral_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getFileNameLiteralParserRuleCall_13());
		}
		this_FileNameLiteral_13=ruleFileNameLiteral
		{
			$current = $this_FileNameLiteral_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_REAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRealLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.REAL");
			}
		)
	)
;

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	iv_ruleIntegerLiteral=ruleIntegerLiteral
	{ $current=$iv_ruleIntegerLiteral.current; }
	EOF;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INTEGER
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTEGERTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntegerLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.INTEGER");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.STRING");
			}
		)
	)
;

// Entry rule entryRuleCharacterLiteral
entryRuleCharacterLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCharacterLiteralRule()); }
	iv_ruleCharacterLiteral=ruleCharacterLiteral
	{ $current=$iv_ruleCharacterLiteral.current; }
	EOF;

// Rule CharacterLiteral
ruleCharacterLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_CHAR
			{
				newLeafNode(lv_value_0_0, grammarAccess.getCharacterLiteralAccess().getValueCHARTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getCharacterLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.CHAR");
			}
		)
	)
;

// Entry rule entryRuleDurationLiteral
entryRuleDurationLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDurationLiteralRule()); }
	iv_ruleDurationLiteral=ruleDurationLiteral
	{ $current=$iv_ruleDurationLiteral.current; }
	EOF;

// Rule DurationLiteral
ruleDurationLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DURATION
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDurationLiteralAccess().getValueDURATIONTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDurationLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.DURATION");
			}
		)
	)
;

// Entry rule entryRuleTimestampLiteral
entryRuleTimestampLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimestampLiteralRule()); }
	iv_ruleTimestampLiteral=ruleTimestampLiteral
	{ $current=$iv_ruleTimestampLiteral.current; }
	EOF;

// Rule TimestampLiteral
ruleTimestampLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_TIMESTAMP
			{
				newLeafNode(lv_value_0_0, grammarAccess.getTimestampLiteralAccess().getValueTIMESTAMPTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTimestampLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.xtuml.bp.xtext.masl.MASL.TIMESTAMP");
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=True
				{
					newLeafNode(lv_value_0_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_0 != null, "true");
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_1_0(),
						$current);
				}
			)
			otherlv_2=False
			{
				newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	iv_ruleNullLiteral=ruleNullLiteral
	{ $current=$iv_ruleNullLiteral.current; }
	EOF;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNullLiteralAccess().getNullLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=Null
		{
			newLeafNode(otherlv_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
		}
	)
;

// Entry rule entryRuleFlushLiteral
entryRuleFlushLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlushLiteralRule()); }
	iv_ruleFlushLiteral=ruleFlushLiteral
	{ $current=$iv_ruleFlushLiteral.current; }
	EOF;

// Rule FlushLiteral
ruleFlushLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFlushLiteralAccess().getFlushLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=Flush
		{
			newLeafNode(otherlv_1, grammarAccess.getFlushLiteralAccess().getFlushKeyword_1());
		}
	)
;

// Entry rule entryRuleThisLiteral
entryRuleThisLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThisLiteralRule()); }
	iv_ruleThisLiteral=ruleThisLiteral
	{ $current=$iv_ruleThisLiteral.current; }
	EOF;

// Rule ThisLiteral
ruleThisLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getThisLiteralAccess().getThisLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=This
		{
			newLeafNode(otherlv_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
		}
	)
;

// Entry rule entryRuleConsoleLiteral
entryRuleConsoleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsoleLiteralRule()); }
	iv_ruleConsoleLiteral=ruleConsoleLiteral
	{ $current=$iv_ruleConsoleLiteral.current; }
	EOF;

// Rule ConsoleLiteral
ruleConsoleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConsoleLiteralAccess().getConsoleLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=Console
		{
			newLeafNode(otherlv_1, grammarAccess.getConsoleLiteralAccess().getConsoleKeyword_1());
		}
	)
;

// Entry rule entryRuleEndlLiteral
entryRuleEndlLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndlLiteralRule()); }
	iv_ruleEndlLiteral=ruleEndlLiteral
	{ $current=$iv_ruleEndlLiteral.current; }
	EOF;

// Rule EndlLiteral
ruleEndlLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEndlLiteralAccess().getEndlLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=Endl
		{
			newLeafNode(otherlv_1, grammarAccess.getEndlLiteralAccess().getEndlKeyword_1());
		}
	)
;

// Entry rule entryRuleLineNoLiteral
entryRuleLineNoLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineNoLiteralRule()); }
	iv_ruleLineNoLiteral=ruleLineNoLiteral
	{ $current=$iv_ruleLineNoLiteral.current; }
	EOF;

// Rule LineNoLiteral
ruleLineNoLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLineNoLiteralAccess().getLineNoLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=LINE
		{
			newLeafNode(otherlv_1, grammarAccess.getLineNoLiteralAccess().getLINEKeyword_1());
		}
	)
;

// Entry rule entryRuleFileNameLiteral
entryRuleFileNameLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileNameLiteralRule()); }
	iv_ruleFileNameLiteral=ruleFileNameLiteral
	{ $current=$iv_ruleFileNameLiteral.current; }
	EOF;

// Rule FileNameLiteral
ruleFileNameLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileNameLiteralAccess().getFileNameLiteralAction_0(),
					$current);
			}
		)
		otherlv_1=FILE
		{
			newLeafNode(otherlv_1, grammarAccess.getFileNameLiteralAccess().getFILEKeyword_1());
		}
	)
;

// Rule Visibility
ruleVisibility returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Public
			{
				$current = grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityAccess().getPublicEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Private
			{
				$current = grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityAccess().getPrivateEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EventType
ruleEventType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Assigner
			{
				$current = grammarAccess.getEventTypeAccess().getAssignerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEventTypeAccess().getAssignerEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Creation
			{
				$current = grammarAccess.getEventTypeAccess().getCreationEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEventTypeAccess().getCreationEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule TransTableType
ruleTransTableType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0=Assigner
		{
			$current = grammarAccess.getTransTableTypeAccess().getAssignerEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getTransTableTypeAccess().getAssignerEnumLiteralDeclaration());
		}
	)
;

// Rule ParameterMode
ruleParameterMode returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=In
			{
				$current = grammarAccess.getParameterModeAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getParameterModeAccess().getInEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Out
			{
				$current = grammarAccess.getParameterModeAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getParameterModeAccess().getOutEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Conditionality
ruleConditionality returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Unconditionally
			{
				$current = grammarAccess.getConditionalityAccess().getUnconditionallyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConditionalityAccess().getUnconditionallyEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Conditionally
			{
				$current = grammarAccess.getConditionalityAccess().getConditionallyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConditionalityAccess().getConditionallyEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Multiplicity
ruleMultiplicity returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=One
			{
				$current = grammarAccess.getMultiplicityAccess().getOneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMultiplicityAccess().getOneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Many
			{
				$current = grammarAccess.getMultiplicityAccess().getManyEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMultiplicityAccess().getManyEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule LinkType
ruleLinkType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Link
			{
				$current = grammarAccess.getLinkTypeAccess().getLinkEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLinkTypeAccess().getLinkEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Unlink
			{
				$current = grammarAccess.getLinkTypeAccess().getUnlinkEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLinkTypeAccess().getUnlinkEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ScheduleType
ruleScheduleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=At
			{
				$current = grammarAccess.getScheduleTypeAccess().getAtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getScheduleTypeAccess().getAtEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Delay
			{
				$current = grammarAccess.getScheduleTypeAccess().getDelayEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getScheduleTypeAccess().getDelayEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule FindType
ruleFindType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=Find
			{
				$current = grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1=Find_all
			{
				$current = grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFindTypeAccess().getFindEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2=Find_one
			{
				$current = grammarAccess.getFindTypeAccess().getFind_oneEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFindTypeAccess().getFind_oneEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3=Find_only
			{
				$current = grammarAccess.getFindTypeAccess().getFind_onlyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getFindTypeAccess().getFind_onlyEnumLiteralDeclaration_3());
			}
		)
	)
;
