@Ecore(nsURI="http://www.xtuml.org/bp/xtext/masl/MASLStructure")
@GenModel(
	copyrightText="generated by Xtext 2.9.2", 
	fileExtensions="mod,tr,ext,scn,al,int,svc,prj,fn", 
	forceOverwrite="true", 
	modelName="MASLStructure", 
	updateClasspath="false", 
	complianceLevel="6.0"
)
package org.xtuml.bp.xtext.masl.masl.structure

import org.xtuml.bp.xtext.masl.masl.behavior.CodeBlock
import org.xtuml.bp.xtext.masl.masl.behavior.ConstExpression
import org.xtuml.bp.xtext.masl.masl.behavior.Expression
import org.xtuml.bp.xtext.masl.masl.types.AbstractTypeReference
import org.xtuml.bp.xtext.masl.masl.types.TypeDeclaration
import org.xtuml.bp.xtext.masl.masl.types.TypeForwardDeclaration

class MaslModel {
	contains AbstractTopLevelElement[] elements
}

// **********************************************************************
// *  Abstract base classes
// **********************************************************************

abstract class AbstractNamed {
	String name
}

class AbstractTopLevelElement extends AbstractNamed, Pragmatized {
}

class AbstractFeature extends AbstractNamed {
}

abstract class Parameterized extends AbstractNamed, Pragmatized {
	contains Parameter[] parameters
}

abstract class Visualized {
	Visibility visibility	
}

abstract class AbstractActionDeclaration extends Parameterized, Visualized {
}

abstract class AbstractActionDefinition extends AbstractTopLevelElement, Parameterized, Visualized {
	refers DomainDefinition domain
	contains CodeBlock body
}

abstract class AbstractFunction {
	contains AbstractTypeReference returnType
}


// **********************************************************************
// *  Pragma
// **********************************************************************
class Pragmatized {
	contains Pragma[] pragmas
}

class Pragma {
	String name
	contains PragmaValue[] values
}

class PragmaValue {
	String name
	contains Expression value
}


// **********************************************************************
// *  Common stuff
// **********************************************************************

class Parameter extends AbstractNamed , AbstractFeature {
	ParameterMode mode
	contains AbstractTypeReference ^type
}

enum ParameterMode {
	in
	out = 1
}

enum Visibility {
	public
	private = 1
}


// **********************************************************************
// *  Project & Domain
// **********************************************************************

class ProjectDefinition extends AbstractTopLevelElement {
	contains DomainDefinition[] domains
}

class DomainDefinition extends AbstractTopLevelElement {
	contains ObjectDeclaration[] objects
	contains DomainServiceDeclaration[] services
	contains DomainFunctionDeclaration[] functions
	contains TerminatorDefinition[] terminators
	contains RelationshipDefinition[] relationships
	contains ObjectDefinition[] objectDefs
	contains TypeForwardDeclaration[] typeForwards
	contains TypeDeclaration[] types
	contains ExceptionDeclaration[] exceptions
}

class DomainServiceDeclaration extends AbstractFeature, AbstractActionDeclaration {
}

class DomainFunctionDeclaration extends AbstractFeature, AbstractActionDeclaration, AbstractFunction {
}

class DomainServiceDefinition extends AbstractActionDefinition {
}

class DomainFunctionDefinition extends AbstractActionDefinition, AbstractFunction {
}

class ExceptionDeclaration extends AbstractNamed , Pragmatized, Visualized {
}


// **********************************************************************
// *  Terminators
// **********************************************************************

class TerminatorDefinition extends AbstractNamed , Pragmatized , AbstractFeature {
	contains TerminatorServiceDeclaration[] services
	contains TerminatorFunctionDeclaration[] functions
}

class TerminatorServiceDeclaration extends AbstractFeature, AbstractActionDeclaration {
}

class TerminatorFunctionDeclaration extends AbstractFeature, AbstractActionDeclaration, AbstractFunction {
}

class TerminatorServiceDefinition extends AbstractActionDefinition {
	refers TerminatorDefinition terminator
}

class TerminatorFunctionDefinition extends AbstractActionDefinition, AbstractFunction {
	refers TerminatorDefinition terminator
}

// **********************************************************************
// *  Built-in Library
// **********************************************************************

class BuiltinLibraryDefinition extends MaslModel {
	contains TypeDeclaration[] types
	contains Characteristic[] characteristics
}

class Characteristic extends Parameterized {
	boolean forValue
	contains TypeParameter[] typeParams
	contains AbstractTypeReference receiverType
	contains AbstractTypeReference returnType
}

class TypeParameter extends TypeDeclaration {
	boolean ^enum
}

class RangeTypeReference extends AbstractTypeReference {
	contains AbstractTypeReference elementType
}

// **********************************************************************
// *  Objects
// **********************************************************************

class ObjectDeclaration extends AbstractNamed , Pragmatized , ObjectOrRole , AbstractFeature {
}

class ObjectDefinition extends AbstractNamed , Pragmatized {
	contains AttributeDefinition[] attributes
	contains IdentifierDefinition[] identifiers
	contains ObjectServiceDeclaration[] services
	contains ObjectFunctionDeclaration[] functions
	contains EventDefinition[] events
	contains StateDeclaration[] states
	contains TransitionTable[] transitions
}

class AttributeDefinition extends AbstractNamed , Pragmatized , AbstractFeature {
	boolean preferred
	boolean ^unique
	contains RelationshipNavigation[] referentials
	contains AbstractTypeReference ^type
	contains ConstExpression defaultValue
}

class IdentifierDefinition extends Pragmatized {
	refers AttributeDefinition[] attributes
}

class ObjectServiceDeclaration extends AbstractFeature, AbstractActionDeclaration {
	boolean instance
	refers RelationshipDefinition relationship
}

class ObjectFunctionDeclaration extends AbstractFeature, AbstractActionDeclaration, AbstractFunction {
	boolean instance
	refers RelationshipDefinition relationship
}

class ObjectServiceDefinition extends AbstractActionDefinition {
	boolean instance
	refers ObjectDeclaration object
}

class ObjectFunctionDefinition extends AbstractActionDefinition, AbstractFunction {
	boolean instance
	refers RelationshipDefinition relationship
	refers ObjectDeclaration object
}


// **********************************************************************
// *  Relationships
// **********************************************************************

class RelationshipDefinition extends AbstractNamed , Pragmatized {
}

class RegularRelationshipDefinition extends RelationshipDefinition {
	contains RelationshipEnd forwards
	contains RelationshipEnd backwards
}

class AssocRelationshipDefinition extends RelationshipDefinition {
	contains RelationshipEnd forwards
	contains RelationshipEnd backwards
	boolean one
	refers ObjectDeclaration object
}

class RelationshipEnd extends AbstractNamed , ObjectOrRole {
	refers ObjectDeclaration from
	Conditionality conditionality
	Multiplicity multiplicity
	refers ObjectDeclaration to
}

class SubtypeRelationshipDefinition extends RelationshipDefinition {
	refers ObjectDeclaration supertype
	refers ObjectDeclaration[] subtypes
}

enum Conditionality {
	unconditionally
	conditionally = 1
}

enum Multiplicity {
	one
	many = 1
}

class RelationshipNavigation {
	refers RelationshipDefinition relationship
	refers ObjectOrRole objectOrRole
	refers ObjectDeclaration object
}

class ObjectOrRole {
}


// **********************************************************************
// *  Statemachine
// **********************************************************************
class EventDefinition extends Parameterized {
	EventType ^type
}

enum EventType {
	assigner
	creation = 1
}

class StateDeclaration extends AbstractActionDeclaration {
	StateType ^type
}

class StateDefinition extends AbstractActionDefinition {
	StateType ^type
	refers ObjectDeclaration object
}

enum StateType {
	assigner
	assignerStart = 1
	creation = 2
	terminal = 3
}

class TransitionTable extends Pragmatized {
	TransTableType ^type
	contains TransitionRow[] rows
}

enum TransTableType {
	assigner
}

class TransitionRow extends Pragmatized {
	refers StateDeclaration start
	boolean nonExistant
	contains TransitionOption[] options
}

class TransitionOption {
	refers EventDefinition event
	refers StateDeclaration endState
	boolean ignore
	boolean cannotHappen
}











