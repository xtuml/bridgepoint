@Ecore(nsURI="http://www.xtuml.org/bp/xtext/masl/MASLBehavior")
@GenModel(
	copyrightText="generated by Xtext 2.9.2", 
	fileExtensions="mod,tr,ext,scn,al,int,svc,prj,fn", 
	forceOverwrite="true", 
	modelName="MASLBehavior", 
	updateClasspath="false", 
	complianceLevel="6.0"
)
package org.xtuml.bp.xtext.masl.masl.behavior

import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature
import org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed
import org.xtuml.bp.xtext.masl.masl.structure.AttributeDefinition
import org.xtuml.bp.xtext.masl.masl.structure.Characteristic
import org.xtuml.bp.xtext.masl.masl.structure.EventDefinition
import org.xtuml.bp.xtext.masl.masl.structure.ExceptionDeclaration
import org.xtuml.bp.xtext.masl.masl.structure.ObjectDeclaration
import org.xtuml.bp.xtext.masl.masl.structure.Pragmatized
import org.xtuml.bp.xtext.masl.masl.structure.RelationshipNavigation
import org.xtuml.bp.xtext.masl.masl.structure.StateDeclaration
import org.xtuml.bp.xtext.masl.masl.types.AbstractTypeReference


// **********************************************************************
// *  Code blocks
// **********************************************************************
class CodeBlock extends CodeBlockStatement {
	contains VariableDeclaration[] variables
	contains AbstractStatement[] statements
	contains ExceptionHandler[] exceptionHandler
	contains DefaultExceptionHandler defaultHandler
}

class VariableDeclaration extends AbstractNamed , Pragmatized , AbstractFeature {
	String readOnly
	contains AbstractTypeReference ^type
	contains Expression expression
}

class ExceptionHandler {
	refers ExceptionDeclaration exception
	contains AbstractStatement[] statements
}

class DefaultExceptionHandler {
	contains AbstractStatement[] statements
}


// **********************************************************************
// *  Statements
// **********************************************************************
class AbstractStatement extends Pragmatized {
}

class Expression extends AbstractStatement , ConstExpression {
}

class ExitStatement extends AbstractStatement {
	contains Expression condition
}

class ReturnStatement extends AbstractStatement {
	contains Expression value
}

class DelayStatement extends AbstractStatement {
	contains Expression value
}

class RaiseStatement extends AbstractStatement {
	refers ExceptionDeclaration exception
	contains Expression argument
}

class DeleteStatement extends AbstractStatement {
	contains Expression value
}

class EraseStatement extends AbstractStatement {
	contains Expression value
}

enum LinkType {
	link
	unlink = 1
}

class ScheduleStatement extends AbstractStatement {
	contains Expression timerId
	contains GenerateStatement generateStatement
	ScheduleType ^type
	contains Expression time
	contains Expression period
}

class CancelTimerStatement extends AbstractStatement {
	contains Expression timerId
}

enum ScheduleType {
	at
	delay = 1
}

class GenerateStatement extends AbstractStatement {
	refers ObjectDeclaration object
	refers EventDefinition event
	contains Expression[] arguments
	contains Expression to
}

class IfStatement extends AbstractStatement {
	contains Expression condition
	contains AbstractStatement[] statements
	contains ElsifBlock[] elseIfs
	contains ElseBlock ^else
}

class ElsifBlock {
	contains Expression condition
	contains AbstractStatement[] statements
}

class ElseBlock {
	contains AbstractStatement[] statements
}

class WhileStatement extends AbstractStatement {
	contains Expression condition
	contains AbstractStatement[] statements
}

class CaseStatement extends AbstractStatement {
	contains Expression value
	contains CaseAlternative[] alternatives
	contains CaseOthers ^default
}

class CaseAlternative {
	contains Expression[] choices
	contains AbstractStatement[] statements
}

class CaseOthers {
	contains AbstractStatement[] statements
}

class ForStatement extends AbstractStatement {
	contains LoopVariable variable
	boolean reverse
	contains Expression expression
	contains AbstractStatement[] statements
}

class LoopVariable extends AbstractNamed , AbstractFeature {
}

class CodeBlockStatement extends AbstractStatement {
}

// **********************************************************************
// *  Find
// **********************************************************************
class FindCondition {
}

class ConstExpression {
}

class SortOrder {
	contains SortOrderComponent[] components
}

class SortOrderComponent {
	boolean reverse
	contains SimpleFeatureCall feature
}

class SortOrderFeature extends SimpleFeatureCall {
}

class CreateExpression extends Expression {
	boolean ^unique
	refers ObjectDeclaration object
	contains CreateArgument[] arguments
}

class CreateArgument {
	refers AttributeDefinition attribute
	contains Expression value
	refers StateDeclaration currentState
}

class FindExpression extends Expression {
	FindType ^type
	contains Expression expression
	contains Expression where
}

enum FindType {
	find
	find_one = 1
	find_only = 2
}

class FeatureCall extends Expression {
	contains Expression receiver
	refers AbstractFeature feature
}

class SimpleFeatureCall extends Expression , FeatureCall {
}

class RealLiteral extends Expression {
	double value
}

class IntegerLiteral extends Expression {
	int value
}

class StringLiteral extends Expression {
	String value
}

class CharacterLiteral extends Expression {
	String value
}

class DurationLiteral extends Expression {
	String value
}

class TimestampLiteral extends Expression {
	String value
}

class BooleanLiteral extends Expression {
	boolean value
}

class NullLiteral extends Expression {
}

class FlushLiteral extends Expression {
}

class ThisLiteral extends Expression {
}

class ConsoleLiteral extends Expression {
}

class EndlLiteral extends Expression {
}

class LineNoLiteral extends Expression {
}

class FileNameLiteral extends Expression {
}

class AttributeReferential extends RelationshipNavigation {
	refers AttributeDefinition attribute
}

class AssignStatement extends Expression {
	contains Expression lhs
	contains Expression rhs
}

class StreamExpression extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class RangeExpression extends Expression {
	contains Expression from
	String operator
	contains Expression to
}

class LogicalOr extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class LogicalXor extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class LogicalAnd extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class Equality extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class RelationalExp extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class AdditiveExp extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class MultExp extends Expression {
	contains Expression lhs
	String operator
	contains Expression rhs
}

class UnaryExp extends Expression {
	String operator
	contains Expression operand
}

class LinkExpression extends Expression {
	LinkType ^type
	contains Expression lhs
	contains RelationshipNavigation navigation
	contains Expression rhs
	contains Expression assoc
}

class NavigateExpression extends Expression {
	contains Expression lhs
	contains RelationshipNavigation navigation
	contains Expression where
	contains Expression with
	contains SortOrder order
	contains SortOrder reverseOrder
}

class ActionCall extends Expression {
	contains Expression receiver
	contains Expression[] arguments
}

class TerminatorActionCall extends Expression {
	contains Expression receiver
	refers AbstractFeature terminatorAction
	contains Expression[] arguments
}

class IndexedExpression extends Expression {
	contains Expression receiver
	contains Expression brackets
}

class CharacteristicCall extends Expression {
	contains Expression receiver
	refers Characteristic characteristic
	contains Expression[] arguments
}

class StructureAggregateExpression extends Expression {
	contains Expression[] elements
}