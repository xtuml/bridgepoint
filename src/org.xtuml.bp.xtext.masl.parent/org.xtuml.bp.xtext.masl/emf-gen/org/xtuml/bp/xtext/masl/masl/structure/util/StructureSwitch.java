/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtuml.bp.xtext.masl.masl.structure.*;

import org.xtuml.bp.xtext.masl.masl.types.AbstractTypeDefinition;
import org.xtuml.bp.xtext.masl.masl.types.AbstractTypeReference;
import org.xtuml.bp.xtext.masl.masl.types.TypeDeclaration;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.xtext.masl.masl.structure.StructurePackage
 * @generated
 */
public class StructureSwitch<T> extends Switch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static StructurePackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructureSwitch() {
		if (modelPackage == null) {
			modelPackage = StructurePackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case StructurePackage.MASL_MODEL: {
				MaslModel maslModel = (MaslModel)theEObject;
				T result = caseMaslModel(maslModel);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_NAMED: {
				AbstractNamed abstractNamed = (AbstractNamed)theEObject;
				T result = caseAbstractNamed(abstractNamed);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_TOP_LEVEL_ELEMENT: {
				AbstractTopLevelElement abstractTopLevelElement = (AbstractTopLevelElement)theEObject;
				T result = caseAbstractTopLevelElement(abstractTopLevelElement);
				if (result == null) result = caseAbstractNamed(abstractTopLevelElement);
				if (result == null) result = casePragmatized(abstractTopLevelElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_FEATURE: {
				AbstractFeature abstractFeature = (AbstractFeature)theEObject;
				T result = caseAbstractFeature(abstractFeature);
				if (result == null) result = caseAbstractNamed(abstractFeature);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PARAMETERIZED: {
				Parameterized parameterized = (Parameterized)theEObject;
				T result = caseParameterized(parameterized);
				if (result == null) result = caseAbstractNamed(parameterized);
				if (result == null) result = casePragmatized(parameterized);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.VISUALIZED: {
				Visualized visualized = (Visualized)theEObject;
				T result = caseVisualized(visualized);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_ACTION_DECLARATION: {
				AbstractActionDeclaration abstractActionDeclaration = (AbstractActionDeclaration)theEObject;
				T result = caseAbstractActionDeclaration(abstractActionDeclaration);
				if (result == null) result = caseParameterized(abstractActionDeclaration);
				if (result == null) result = caseVisualized(abstractActionDeclaration);
				if (result == null) result = caseAbstractNamed(abstractActionDeclaration);
				if (result == null) result = casePragmatized(abstractActionDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_ACTION_DEFINITION: {
				AbstractActionDefinition abstractActionDefinition = (AbstractActionDefinition)theEObject;
				T result = caseAbstractActionDefinition(abstractActionDefinition);
				if (result == null) result = caseAbstractTopLevelElement(abstractActionDefinition);
				if (result == null) result = caseParameterized(abstractActionDefinition);
				if (result == null) result = caseVisualized(abstractActionDefinition);
				if (result == null) result = caseAbstractNamed(abstractActionDefinition);
				if (result == null) result = casePragmatized(abstractActionDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ABSTRACT_SERVICE: {
				AbstractService abstractService = (AbstractService)theEObject;
				T result = caseAbstractService(abstractService);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PRAGMATIZED: {
				Pragmatized pragmatized = (Pragmatized)theEObject;
				T result = casePragmatized(pragmatized);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PRAGMA: {
				Pragma pragma = (Pragma)theEObject;
				T result = casePragma(pragma);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PRAGMA_VALUE: {
				PragmaValue pragmaValue = (PragmaValue)theEObject;
				T result = casePragmaValue(pragmaValue);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PARAMETER: {
				Parameter parameter = (Parameter)theEObject;
				T result = caseParameter(parameter);
				if (result == null) result = caseAbstractFeature(parameter);
				if (result == null) result = caseAbstractNamed(parameter);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.PROJECT_DEFINITION: {
				ProjectDefinition projectDefinition = (ProjectDefinition)theEObject;
				T result = caseProjectDefinition(projectDefinition);
				if (result == null) result = caseAbstractTopLevelElement(projectDefinition);
				if (result == null) result = caseAbstractNamed(projectDefinition);
				if (result == null) result = casePragmatized(projectDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.DOMAIN_DEFINITION: {
				DomainDefinition domainDefinition = (DomainDefinition)theEObject;
				T result = caseDomainDefinition(domainDefinition);
				if (result == null) result = caseAbstractTopLevelElement(domainDefinition);
				if (result == null) result = caseAbstractNamed(domainDefinition);
				if (result == null) result = casePragmatized(domainDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.DOMAIN_SERVICE_DECLARATION: {
				DomainServiceDeclaration domainServiceDeclaration = (DomainServiceDeclaration)theEObject;
				T result = caseDomainServiceDeclaration(domainServiceDeclaration);
				if (result == null) result = caseAbstractFeature(domainServiceDeclaration);
				if (result == null) result = caseAbstractActionDeclaration(domainServiceDeclaration);
				if (result == null) result = caseAbstractService(domainServiceDeclaration);
				if (result == null) result = caseParameterized(domainServiceDeclaration);
				if (result == null) result = caseVisualized(domainServiceDeclaration);
				if (result == null) result = caseAbstractNamed(domainServiceDeclaration);
				if (result == null) result = casePragmatized(domainServiceDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.DOMAIN_SERVICE_DEFINITION: {
				DomainServiceDefinition domainServiceDefinition = (DomainServiceDefinition)theEObject;
				T result = caseDomainServiceDefinition(domainServiceDefinition);
				if (result == null) result = caseAbstractActionDefinition(domainServiceDefinition);
				if (result == null) result = caseAbstractService(domainServiceDefinition);
				if (result == null) result = caseAbstractTopLevelElement(domainServiceDefinition);
				if (result == null) result = caseParameterized(domainServiceDefinition);
				if (result == null) result = caseVisualized(domainServiceDefinition);
				if (result == null) result = caseAbstractNamed(domainServiceDefinition);
				if (result == null) result = casePragmatized(domainServiceDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.EXCEPTION_DECLARATION: {
				ExceptionDeclaration exceptionDeclaration = (ExceptionDeclaration)theEObject;
				T result = caseExceptionDeclaration(exceptionDeclaration);
				if (result == null) result = caseAbstractNamed(exceptionDeclaration);
				if (result == null) result = casePragmatized(exceptionDeclaration);
				if (result == null) result = caseVisualized(exceptionDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TERMINATOR_DEFINITION: {
				TerminatorDefinition terminatorDefinition = (TerminatorDefinition)theEObject;
				T result = caseTerminatorDefinition(terminatorDefinition);
				if (result == null) result = casePragmatized(terminatorDefinition);
				if (result == null) result = caseAbstractFeature(terminatorDefinition);
				if (result == null) result = caseAbstractNamed(terminatorDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TERMINATOR_SERVICE_DECLARATION: {
				TerminatorServiceDeclaration terminatorServiceDeclaration = (TerminatorServiceDeclaration)theEObject;
				T result = caseTerminatorServiceDeclaration(terminatorServiceDeclaration);
				if (result == null) result = caseAbstractFeature(terminatorServiceDeclaration);
				if (result == null) result = caseAbstractActionDeclaration(terminatorServiceDeclaration);
				if (result == null) result = caseAbstractService(terminatorServiceDeclaration);
				if (result == null) result = caseParameterized(terminatorServiceDeclaration);
				if (result == null) result = caseVisualized(terminatorServiceDeclaration);
				if (result == null) result = caseAbstractNamed(terminatorServiceDeclaration);
				if (result == null) result = casePragmatized(terminatorServiceDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TERMINATOR_SERVICE_DEFINITION: {
				TerminatorServiceDefinition terminatorServiceDefinition = (TerminatorServiceDefinition)theEObject;
				T result = caseTerminatorServiceDefinition(terminatorServiceDefinition);
				if (result == null) result = caseAbstractActionDefinition(terminatorServiceDefinition);
				if (result == null) result = caseAbstractService(terminatorServiceDefinition);
				if (result == null) result = caseAbstractTopLevelElement(terminatorServiceDefinition);
				if (result == null) result = caseParameterized(terminatorServiceDefinition);
				if (result == null) result = caseVisualized(terminatorServiceDefinition);
				if (result == null) result = caseAbstractNamed(terminatorServiceDefinition);
				if (result == null) result = casePragmatized(terminatorServiceDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.BUILTIN_LIBRARY_DEFINITION: {
				BuiltinLibraryDefinition builtinLibraryDefinition = (BuiltinLibraryDefinition)theEObject;
				T result = caseBuiltinLibraryDefinition(builtinLibraryDefinition);
				if (result == null) result = caseMaslModel(builtinLibraryDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.CHARACTERISTIC: {
				Characteristic characteristic = (Characteristic)theEObject;
				T result = caseCharacteristic(characteristic);
				if (result == null) result = caseParameterized(characteristic);
				if (result == null) result = caseAbstractNamed(characteristic);
				if (result == null) result = casePragmatized(characteristic);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TYPE_PARAMETER: {
				TypeParameter typeParameter = (TypeParameter)theEObject;
				T result = caseTypeParameter(typeParameter);
				if (result == null) result = caseTypeDeclaration(typeParameter);
				if (result == null) result = casePragmatized(typeParameter);
				if (result == null) result = caseAbstractFeature(typeParameter);
				if (result == null) result = caseAbstractNamed(typeParameter);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.RANGE_TYPE_REFERENCE: {
				RangeTypeReference rangeTypeReference = (RangeTypeReference)theEObject;
				T result = caseRangeTypeReference(rangeTypeReference);
				if (result == null) result = caseAbstractTypeReference(rangeTypeReference);
				if (result == null) result = caseAbstractTypeDefinition(rangeTypeReference);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.OBJECT_DECLARATION: {
				ObjectDeclaration objectDeclaration = (ObjectDeclaration)theEObject;
				T result = caseObjectDeclaration(objectDeclaration);
				if (result == null) result = casePragmatized(objectDeclaration);
				if (result == null) result = caseObjectOrRole(objectDeclaration);
				if (result == null) result = caseAbstractFeature(objectDeclaration);
				if (result == null) result = caseAbstractNamed(objectDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.OBJECT_DEFINITION: {
				ObjectDefinition objectDefinition = (ObjectDefinition)theEObject;
				T result = caseObjectDefinition(objectDefinition);
				if (result == null) result = caseAbstractNamed(objectDefinition);
				if (result == null) result = casePragmatized(objectDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ATTRIBUTE_DEFINITION: {
				AttributeDefinition attributeDefinition = (AttributeDefinition)theEObject;
				T result = caseAttributeDefinition(attributeDefinition);
				if (result == null) result = casePragmatized(attributeDefinition);
				if (result == null) result = caseAbstractFeature(attributeDefinition);
				if (result == null) result = caseAbstractNamed(attributeDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.IDENTIFIER_DEFINITION: {
				IdentifierDefinition identifierDefinition = (IdentifierDefinition)theEObject;
				T result = caseIdentifierDefinition(identifierDefinition);
				if (result == null) result = casePragmatized(identifierDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.OBJECT_SERVICE_DECLARATION: {
				ObjectServiceDeclaration objectServiceDeclaration = (ObjectServiceDeclaration)theEObject;
				T result = caseObjectServiceDeclaration(objectServiceDeclaration);
				if (result == null) result = caseAbstractFeature(objectServiceDeclaration);
				if (result == null) result = caseAbstractActionDeclaration(objectServiceDeclaration);
				if (result == null) result = caseAbstractService(objectServiceDeclaration);
				if (result == null) result = caseParameterized(objectServiceDeclaration);
				if (result == null) result = caseVisualized(objectServiceDeclaration);
				if (result == null) result = caseAbstractNamed(objectServiceDeclaration);
				if (result == null) result = casePragmatized(objectServiceDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.OBJECT_SERVICE_DEFINITION: {
				ObjectServiceDefinition objectServiceDefinition = (ObjectServiceDefinition)theEObject;
				T result = caseObjectServiceDefinition(objectServiceDefinition);
				if (result == null) result = caseAbstractActionDefinition(objectServiceDefinition);
				if (result == null) result = caseAbstractService(objectServiceDefinition);
				if (result == null) result = caseAbstractTopLevelElement(objectServiceDefinition);
				if (result == null) result = caseParameterized(objectServiceDefinition);
				if (result == null) result = caseVisualized(objectServiceDefinition);
				if (result == null) result = caseAbstractNamed(objectServiceDefinition);
				if (result == null) result = casePragmatized(objectServiceDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.RELATIONSHIP_DEFINITION: {
				RelationshipDefinition relationshipDefinition = (RelationshipDefinition)theEObject;
				T result = caseRelationshipDefinition(relationshipDefinition);
				if (result == null) result = caseAbstractNamed(relationshipDefinition);
				if (result == null) result = casePragmatized(relationshipDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.REGULAR_RELATIONSHIP_DEFINITION: {
				RegularRelationshipDefinition regularRelationshipDefinition = (RegularRelationshipDefinition)theEObject;
				T result = caseRegularRelationshipDefinition(regularRelationshipDefinition);
				if (result == null) result = caseRelationshipDefinition(regularRelationshipDefinition);
				if (result == null) result = caseAbstractNamed(regularRelationshipDefinition);
				if (result == null) result = casePragmatized(regularRelationshipDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.ASSOC_RELATIONSHIP_DEFINITION: {
				AssocRelationshipDefinition assocRelationshipDefinition = (AssocRelationshipDefinition)theEObject;
				T result = caseAssocRelationshipDefinition(assocRelationshipDefinition);
				if (result == null) result = caseRelationshipDefinition(assocRelationshipDefinition);
				if (result == null) result = caseAbstractNamed(assocRelationshipDefinition);
				if (result == null) result = casePragmatized(assocRelationshipDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.RELATIONSHIP_END: {
				RelationshipEnd relationshipEnd = (RelationshipEnd)theEObject;
				T result = caseRelationshipEnd(relationshipEnd);
				if (result == null) result = caseAbstractNamed(relationshipEnd);
				if (result == null) result = caseObjectOrRole(relationshipEnd);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION: {
				SubtypeRelationshipDefinition subtypeRelationshipDefinition = (SubtypeRelationshipDefinition)theEObject;
				T result = caseSubtypeRelationshipDefinition(subtypeRelationshipDefinition);
				if (result == null) result = caseRelationshipDefinition(subtypeRelationshipDefinition);
				if (result == null) result = caseAbstractNamed(subtypeRelationshipDefinition);
				if (result == null) result = casePragmatized(subtypeRelationshipDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.RELATIONSHIP_NAVIGATION: {
				RelationshipNavigation relationshipNavigation = (RelationshipNavigation)theEObject;
				T result = caseRelationshipNavigation(relationshipNavigation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.OBJECT_OR_ROLE: {
				ObjectOrRole objectOrRole = (ObjectOrRole)theEObject;
				T result = caseObjectOrRole(objectOrRole);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.EVENT_DEFINITION: {
				EventDefinition eventDefinition = (EventDefinition)theEObject;
				T result = caseEventDefinition(eventDefinition);
				if (result == null) result = caseParameterized(eventDefinition);
				if (result == null) result = caseAbstractNamed(eventDefinition);
				if (result == null) result = casePragmatized(eventDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.STATE_DECLARATION: {
				StateDeclaration stateDeclaration = (StateDeclaration)theEObject;
				T result = caseStateDeclaration(stateDeclaration);
				if (result == null) result = caseAbstractActionDeclaration(stateDeclaration);
				if (result == null) result = caseParameterized(stateDeclaration);
				if (result == null) result = caseVisualized(stateDeclaration);
				if (result == null) result = caseAbstractNamed(stateDeclaration);
				if (result == null) result = casePragmatized(stateDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.STATE_DEFINITION: {
				StateDefinition stateDefinition = (StateDefinition)theEObject;
				T result = caseStateDefinition(stateDefinition);
				if (result == null) result = caseAbstractActionDefinition(stateDefinition);
				if (result == null) result = caseAbstractTopLevelElement(stateDefinition);
				if (result == null) result = caseParameterized(stateDefinition);
				if (result == null) result = caseVisualized(stateDefinition);
				if (result == null) result = caseAbstractNamed(stateDefinition);
				if (result == null) result = casePragmatized(stateDefinition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TRANSITION_TABLE: {
				TransitionTable transitionTable = (TransitionTable)theEObject;
				T result = caseTransitionTable(transitionTable);
				if (result == null) result = casePragmatized(transitionTable);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TRANSITION_ROW: {
				TransitionRow transitionRow = (TransitionRow)theEObject;
				T result = caseTransitionRow(transitionRow);
				if (result == null) result = casePragmatized(transitionRow);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case StructurePackage.TRANSITION_OPTION: {
				TransitionOption transitionOption = (TransitionOption)theEObject;
				T result = caseTransitionOption(transitionOption);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Masl Model</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Masl Model</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMaslModel(MaslModel object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractNamed(AbstractNamed object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Top Level Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Top Level Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTopLevelElement(AbstractTopLevelElement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractFeature(AbstractFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parameterized</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parameterized</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParameterized(Parameterized object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Visualized</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Visualized</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVisualized(Visualized object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Action Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Action Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractActionDeclaration(AbstractActionDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Action Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Action Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractActionDefinition(AbstractActionDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Service</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Service</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractService(AbstractService object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePragmatized(Pragmatized object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pragma</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pragma</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePragma(Pragma object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pragma Value</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pragma Value</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePragmaValue(PragmaValue object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseParameter(Parameter object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Project Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Project Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseProjectDefinition(ProjectDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Domain Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Domain Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDomainDefinition(DomainDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Domain Service Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Domain Service Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDomainServiceDeclaration(DomainServiceDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Domain Service Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Domain Service Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDomainServiceDefinition(DomainServiceDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Exception Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Exception Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExceptionDeclaration(ExceptionDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Terminator Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Terminator Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTerminatorDefinition(TerminatorDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Terminator Service Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Terminator Service Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTerminatorServiceDeclaration(TerminatorServiceDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Terminator Service Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Terminator Service Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTerminatorServiceDefinition(TerminatorServiceDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Builtin Library Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Builtin Library Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBuiltinLibraryDefinition(BuiltinLibraryDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Characteristic</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Characteristic</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCharacteristic(Characteristic object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Type Parameter</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Type Parameter</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTypeParameter(TypeParameter object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Range Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Range Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRangeTypeReference(RangeTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectDeclaration(ObjectDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectDefinition(ObjectDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Attribute Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Attribute Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAttributeDefinition(AttributeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Identifier Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Identifier Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIdentifierDefinition(IdentifierDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Service Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Service Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectServiceDeclaration(ObjectServiceDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Service Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Service Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectServiceDefinition(ObjectServiceDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relationship Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relationship Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelationshipDefinition(RelationshipDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Regular Relationship Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Regular Relationship Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRegularRelationshipDefinition(RegularRelationshipDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Assoc Relationship Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Assoc Relationship Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAssocRelationshipDefinition(AssocRelationshipDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relationship End</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relationship End</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelationshipEnd(RelationshipEnd object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Subtype Relationship Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Subtype Relationship Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSubtypeRelationshipDefinition(SubtypeRelationshipDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relationship Navigation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relationship Navigation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelationshipNavigation(RelationshipNavigation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Object Or Role</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Object Or Role</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseObjectOrRole(ObjectOrRole object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Event Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Event Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEventDefinition(EventDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>State Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>State Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStateDeclaration(StateDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>State Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>State Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStateDefinition(StateDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transition Table</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transition Table</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTransitionTable(TransitionTable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transition Row</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transition Row</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTransitionRow(TransitionRow object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transition Option</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transition Option</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTransitionOption(TransitionOption object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Type Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTypeDeclaration(TypeDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Type Definition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Type Definition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTypeDefinition(AbstractTypeDefinition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Type Reference</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Type Reference</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractTypeReference(AbstractTypeReference object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object) {
		return null;
	}

} //StructureSwitch
