/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.behavior.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.masl.behavior.BehaviorPackage;
import org.xtuml.bp.xtext.masl.masl.behavior.Expression;
import org.xtuml.bp.xtext.masl.masl.behavior.TerminatorActionCall;

import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminator Action Call</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.TerminatorActionCallImpl#getReceiver <em>Receiver</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.TerminatorActionCallImpl#getTerminatorAction <em>Terminator Action</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.behavior.impl.TerminatorActionCallImpl#getArguments <em>Arguments</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminatorActionCallImpl extends ExpressionImpl implements TerminatorActionCall {
	/**
	 * The cached value of the '{@link #getReceiver() <em>Receiver</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getReceiver()
	 * @generated
	 * @ordered
	 */
	protected Expression receiver;

	/**
	 * The cached value of the '{@link #getTerminatorAction() <em>Terminator Action</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTerminatorAction()
	 * @generated
	 * @ordered
	 */
	protected AbstractFeature terminatorAction;

	/**
	 * The cached value of the '{@link #getArguments() <em>Arguments</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getArguments()
	 * @generated
	 * @ordered
	 */
	protected EList<Expression> arguments;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminatorActionCallImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return BehaviorPackage.Literals.TERMINATOR_ACTION_CALL;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Expression getReceiver() {
		return receiver;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetReceiver(Expression newReceiver, NotificationChain msgs) {
		Expression oldReceiver = receiver;
		receiver = newReceiver;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER, oldReceiver, newReceiver);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setReceiver(Expression newReceiver) {
		if (newReceiver != receiver) {
			NotificationChain msgs = null;
			if (receiver != null)
				msgs = ((InternalEObject)receiver).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER, null, msgs);
			if (newReceiver != null)
				msgs = ((InternalEObject)newReceiver).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER, null, msgs);
			msgs = basicSetReceiver(newReceiver, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER, newReceiver, newReceiver));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractFeature getTerminatorAction() {
		if (terminatorAction != null && terminatorAction.eIsProxy()) {
			InternalEObject oldTerminatorAction = (InternalEObject)terminatorAction;
			terminatorAction = (AbstractFeature)eResolveProxy(oldTerminatorAction);
			if (terminatorAction != oldTerminatorAction) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION, oldTerminatorAction, terminatorAction));
			}
		}
		return terminatorAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractFeature basicGetTerminatorAction() {
		return terminatorAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setTerminatorAction(AbstractFeature newTerminatorAction) {
		AbstractFeature oldTerminatorAction = terminatorAction;
		terminatorAction = newTerminatorAction;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION, oldTerminatorAction, terminatorAction));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Expression> getArguments() {
		if (arguments == null) {
			arguments = new EObjectContainmentEList<Expression>(Expression.class, this, BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS);
		}
		return arguments;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER:
				return basicSetReceiver(null, msgs);
			case BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS:
				return ((InternalEList<?>)getArguments()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER:
				return getReceiver();
			case BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION:
				if (resolve) return getTerminatorAction();
				return basicGetTerminatorAction();
			case BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS:
				return getArguments();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER:
				setReceiver((Expression)newValue);
				return;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION:
				setTerminatorAction((AbstractFeature)newValue);
				return;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS:
				getArguments().clear();
				getArguments().addAll((Collection<? extends Expression>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER:
				setReceiver((Expression)null);
				return;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION:
				setTerminatorAction((AbstractFeature)null);
				return;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS:
				getArguments().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case BehaviorPackage.TERMINATOR_ACTION_CALL__RECEIVER:
				return receiver != null;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__TERMINATOR_ACTION:
				return terminatorAction != null;
			case BehaviorPackage.TERMINATOR_ACTION_CALL__ARGUMENTS:
				return arguments != null && !arguments.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //TerminatorActionCallImpl
