/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.behavior.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtuml.bp.xtext.masl.masl.behavior.*;

import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature;
import org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed;
import org.xtuml.bp.xtext.masl.masl.structure.Pragmatized;
import org.xtuml.bp.xtext.masl.masl.structure.RelationshipNavigation;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.xtext.masl.masl.behavior.BehaviorPackage
 * @generated
 */
public class BehaviorSwitch<T> extends Switch<T> {
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static BehaviorPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviorSwitch() {
		if (modelPackage == null) {
			modelPackage = BehaviorPackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage) {
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case BehaviorPackage.CODE_BLOCK: {
				CodeBlock codeBlock = (CodeBlock)theEObject;
				T result = caseCodeBlock(codeBlock);
				if (result == null) result = caseCodeBlockStatement(codeBlock);
				if (result == null) result = caseAbstractStatement(codeBlock);
				if (result == null) result = casePragmatized(codeBlock);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.VARIABLE_DECLARATION: {
				VariableDeclaration variableDeclaration = (VariableDeclaration)theEObject;
				T result = caseVariableDeclaration(variableDeclaration);
				if (result == null) result = casePragmatized(variableDeclaration);
				if (result == null) result = caseAbstractFeature(variableDeclaration);
				if (result == null) result = caseAbstractNamed(variableDeclaration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.EXCEPTION_HANDLER: {
				ExceptionHandler exceptionHandler = (ExceptionHandler)theEObject;
				T result = caseExceptionHandler(exceptionHandler);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.DEFAULT_EXCEPTION_HANDLER: {
				DefaultExceptionHandler defaultExceptionHandler = (DefaultExceptionHandler)theEObject;
				T result = caseDefaultExceptionHandler(defaultExceptionHandler);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ABSTRACT_STATEMENT: {
				AbstractStatement abstractStatement = (AbstractStatement)theEObject;
				T result = caseAbstractStatement(abstractStatement);
				if (result == null) result = casePragmatized(abstractStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.EXPRESSION: {
				Expression expression = (Expression)theEObject;
				T result = caseExpression(expression);
				if (result == null) result = caseAbstractStatement(expression);
				if (result == null) result = caseConstExpression(expression);
				if (result == null) result = casePragmatized(expression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.EXIT_STATEMENT: {
				ExitStatement exitStatement = (ExitStatement)theEObject;
				T result = caseExitStatement(exitStatement);
				if (result == null) result = caseAbstractStatement(exitStatement);
				if (result == null) result = casePragmatized(exitStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.RETURN_STATEMENT: {
				ReturnStatement returnStatement = (ReturnStatement)theEObject;
				T result = caseReturnStatement(returnStatement);
				if (result == null) result = caseAbstractStatement(returnStatement);
				if (result == null) result = casePragmatized(returnStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.DELAY_STATEMENT: {
				DelayStatement delayStatement = (DelayStatement)theEObject;
				T result = caseDelayStatement(delayStatement);
				if (result == null) result = caseAbstractStatement(delayStatement);
				if (result == null) result = casePragmatized(delayStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.RAISE_STATEMENT: {
				RaiseStatement raiseStatement = (RaiseStatement)theEObject;
				T result = caseRaiseStatement(raiseStatement);
				if (result == null) result = caseAbstractStatement(raiseStatement);
				if (result == null) result = casePragmatized(raiseStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.DELETE_STATEMENT: {
				DeleteStatement deleteStatement = (DeleteStatement)theEObject;
				T result = caseDeleteStatement(deleteStatement);
				if (result == null) result = caseAbstractStatement(deleteStatement);
				if (result == null) result = casePragmatized(deleteStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ERASE_STATEMENT: {
				EraseStatement eraseStatement = (EraseStatement)theEObject;
				T result = caseEraseStatement(eraseStatement);
				if (result == null) result = caseAbstractStatement(eraseStatement);
				if (result == null) result = casePragmatized(eraseStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.SCHEDULE_STATEMENT: {
				ScheduleStatement scheduleStatement = (ScheduleStatement)theEObject;
				T result = caseScheduleStatement(scheduleStatement);
				if (result == null) result = caseAbstractStatement(scheduleStatement);
				if (result == null) result = casePragmatized(scheduleStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CANCEL_TIMER_STATEMENT: {
				CancelTimerStatement cancelTimerStatement = (CancelTimerStatement)theEObject;
				T result = caseCancelTimerStatement(cancelTimerStatement);
				if (result == null) result = caseAbstractStatement(cancelTimerStatement);
				if (result == null) result = casePragmatized(cancelTimerStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.GENERATE_STATEMENT: {
				GenerateStatement generateStatement = (GenerateStatement)theEObject;
				T result = caseGenerateStatement(generateStatement);
				if (result == null) result = caseAbstractStatement(generateStatement);
				if (result == null) result = casePragmatized(generateStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.IF_STATEMENT: {
				IfStatement ifStatement = (IfStatement)theEObject;
				T result = caseIfStatement(ifStatement);
				if (result == null) result = caseAbstractStatement(ifStatement);
				if (result == null) result = casePragmatized(ifStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ELSIF_BLOCK: {
				ElsifBlock elsifBlock = (ElsifBlock)theEObject;
				T result = caseElsifBlock(elsifBlock);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ELSE_BLOCK: {
				ElseBlock elseBlock = (ElseBlock)theEObject;
				T result = caseElseBlock(elseBlock);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.WHILE_STATEMENT: {
				WhileStatement whileStatement = (WhileStatement)theEObject;
				T result = caseWhileStatement(whileStatement);
				if (result == null) result = caseAbstractStatement(whileStatement);
				if (result == null) result = casePragmatized(whileStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CASE_STATEMENT: {
				CaseStatement caseStatement = (CaseStatement)theEObject;
				T result = caseCaseStatement(caseStatement);
				if (result == null) result = caseAbstractStatement(caseStatement);
				if (result == null) result = casePragmatized(caseStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CASE_ALTERNATIVE: {
				CaseAlternative caseAlternative = (CaseAlternative)theEObject;
				T result = caseCaseAlternative(caseAlternative);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CASE_OTHERS: {
				CaseOthers caseOthers = (CaseOthers)theEObject;
				T result = caseCaseOthers(caseOthers);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FOR_STATEMENT: {
				ForStatement forStatement = (ForStatement)theEObject;
				T result = caseForStatement(forStatement);
				if (result == null) result = caseAbstractStatement(forStatement);
				if (result == null) result = casePragmatized(forStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LOOP_VARIABLE: {
				LoopVariable loopVariable = (LoopVariable)theEObject;
				T result = caseLoopVariable(loopVariable);
				if (result == null) result = caseAbstractFeature(loopVariable);
				if (result == null) result = caseAbstractNamed(loopVariable);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CODE_BLOCK_STATEMENT: {
				CodeBlockStatement codeBlockStatement = (CodeBlockStatement)theEObject;
				T result = caseCodeBlockStatement(codeBlockStatement);
				if (result == null) result = caseAbstractStatement(codeBlockStatement);
				if (result == null) result = casePragmatized(codeBlockStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FIND_CONDITION: {
				FindCondition findCondition = (FindCondition)theEObject;
				T result = caseFindCondition(findCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CONST_EXPRESSION: {
				ConstExpression constExpression = (ConstExpression)theEObject;
				T result = caseConstExpression(constExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.SORT_ORDER: {
				SortOrder sortOrder = (SortOrder)theEObject;
				T result = caseSortOrder(sortOrder);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.SORT_ORDER_COMPONENT: {
				SortOrderComponent sortOrderComponent = (SortOrderComponent)theEObject;
				T result = caseSortOrderComponent(sortOrderComponent);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.SORT_ORDER_FEATURE: {
				SortOrderFeature sortOrderFeature = (SortOrderFeature)theEObject;
				T result = caseSortOrderFeature(sortOrderFeature);
				if (result == null) result = caseSimpleFeatureCall(sortOrderFeature);
				if (result == null) result = caseFeatureCall(sortOrderFeature);
				if (result == null) result = caseExpression(sortOrderFeature);
				if (result == null) result = caseAbstractStatement(sortOrderFeature);
				if (result == null) result = caseConstExpression(sortOrderFeature);
				if (result == null) result = casePragmatized(sortOrderFeature);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CREATE_EXPRESSION: {
				CreateExpression createExpression = (CreateExpression)theEObject;
				T result = caseCreateExpression(createExpression);
				if (result == null) result = caseExpression(createExpression);
				if (result == null) result = caseAbstractStatement(createExpression);
				if (result == null) result = caseConstExpression(createExpression);
				if (result == null) result = casePragmatized(createExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CREATE_ARGUMENT: {
				CreateArgument createArgument = (CreateArgument)theEObject;
				T result = caseCreateArgument(createArgument);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FIND_EXPRESSION: {
				FindExpression findExpression = (FindExpression)theEObject;
				T result = caseFindExpression(findExpression);
				if (result == null) result = caseExpression(findExpression);
				if (result == null) result = caseAbstractStatement(findExpression);
				if (result == null) result = caseConstExpression(findExpression);
				if (result == null) result = casePragmatized(findExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FEATURE_CALL: {
				FeatureCall featureCall = (FeatureCall)theEObject;
				T result = caseFeatureCall(featureCall);
				if (result == null) result = caseExpression(featureCall);
				if (result == null) result = caseAbstractStatement(featureCall);
				if (result == null) result = caseConstExpression(featureCall);
				if (result == null) result = casePragmatized(featureCall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.SIMPLE_FEATURE_CALL: {
				SimpleFeatureCall simpleFeatureCall = (SimpleFeatureCall)theEObject;
				T result = caseSimpleFeatureCall(simpleFeatureCall);
				if (result == null) result = caseFeatureCall(simpleFeatureCall);
				if (result == null) result = caseExpression(simpleFeatureCall);
				if (result == null) result = caseAbstractStatement(simpleFeatureCall);
				if (result == null) result = caseConstExpression(simpleFeatureCall);
				if (result == null) result = casePragmatized(simpleFeatureCall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.REAL_LITERAL: {
				RealLiteral realLiteral = (RealLiteral)theEObject;
				T result = caseRealLiteral(realLiteral);
				if (result == null) result = caseExpression(realLiteral);
				if (result == null) result = caseAbstractStatement(realLiteral);
				if (result == null) result = caseConstExpression(realLiteral);
				if (result == null) result = casePragmatized(realLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.INTEGER_LITERAL: {
				IntegerLiteral integerLiteral = (IntegerLiteral)theEObject;
				T result = caseIntegerLiteral(integerLiteral);
				if (result == null) result = caseExpression(integerLiteral);
				if (result == null) result = caseAbstractStatement(integerLiteral);
				if (result == null) result = caseConstExpression(integerLiteral);
				if (result == null) result = casePragmatized(integerLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.STRING_LITERAL: {
				StringLiteral stringLiteral = (StringLiteral)theEObject;
				T result = caseStringLiteral(stringLiteral);
				if (result == null) result = caseExpression(stringLiteral);
				if (result == null) result = caseAbstractStatement(stringLiteral);
				if (result == null) result = caseConstExpression(stringLiteral);
				if (result == null) result = casePragmatized(stringLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CHARACTER_LITERAL: {
				CharacterLiteral characterLiteral = (CharacterLiteral)theEObject;
				T result = caseCharacterLiteral(characterLiteral);
				if (result == null) result = caseExpression(characterLiteral);
				if (result == null) result = caseAbstractStatement(characterLiteral);
				if (result == null) result = caseConstExpression(characterLiteral);
				if (result == null) result = casePragmatized(characterLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.DURATION_LITERAL: {
				DurationLiteral durationLiteral = (DurationLiteral)theEObject;
				T result = caseDurationLiteral(durationLiteral);
				if (result == null) result = caseExpression(durationLiteral);
				if (result == null) result = caseAbstractStatement(durationLiteral);
				if (result == null) result = caseConstExpression(durationLiteral);
				if (result == null) result = casePragmatized(durationLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.TIMESTAMP_LITERAL: {
				TimestampLiteral timestampLiteral = (TimestampLiteral)theEObject;
				T result = caseTimestampLiteral(timestampLiteral);
				if (result == null) result = caseExpression(timestampLiteral);
				if (result == null) result = caseAbstractStatement(timestampLiteral);
				if (result == null) result = caseConstExpression(timestampLiteral);
				if (result == null) result = casePragmatized(timestampLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.BOOLEAN_LITERAL: {
				BooleanLiteral booleanLiteral = (BooleanLiteral)theEObject;
				T result = caseBooleanLiteral(booleanLiteral);
				if (result == null) result = caseExpression(booleanLiteral);
				if (result == null) result = caseAbstractStatement(booleanLiteral);
				if (result == null) result = caseConstExpression(booleanLiteral);
				if (result == null) result = casePragmatized(booleanLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.NULL_LITERAL: {
				NullLiteral nullLiteral = (NullLiteral)theEObject;
				T result = caseNullLiteral(nullLiteral);
				if (result == null) result = caseExpression(nullLiteral);
				if (result == null) result = caseAbstractStatement(nullLiteral);
				if (result == null) result = caseConstExpression(nullLiteral);
				if (result == null) result = casePragmatized(nullLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FLUSH_LITERAL: {
				FlushLiteral flushLiteral = (FlushLiteral)theEObject;
				T result = caseFlushLiteral(flushLiteral);
				if (result == null) result = caseExpression(flushLiteral);
				if (result == null) result = caseAbstractStatement(flushLiteral);
				if (result == null) result = caseConstExpression(flushLiteral);
				if (result == null) result = casePragmatized(flushLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.THIS_LITERAL: {
				ThisLiteral thisLiteral = (ThisLiteral)theEObject;
				T result = caseThisLiteral(thisLiteral);
				if (result == null) result = caseExpression(thisLiteral);
				if (result == null) result = caseAbstractStatement(thisLiteral);
				if (result == null) result = caseConstExpression(thisLiteral);
				if (result == null) result = casePragmatized(thisLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CONSOLE_LITERAL: {
				ConsoleLiteral consoleLiteral = (ConsoleLiteral)theEObject;
				T result = caseConsoleLiteral(consoleLiteral);
				if (result == null) result = caseExpression(consoleLiteral);
				if (result == null) result = caseAbstractStatement(consoleLiteral);
				if (result == null) result = caseConstExpression(consoleLiteral);
				if (result == null) result = casePragmatized(consoleLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ENDL_LITERAL: {
				EndlLiteral endlLiteral = (EndlLiteral)theEObject;
				T result = caseEndlLiteral(endlLiteral);
				if (result == null) result = caseExpression(endlLiteral);
				if (result == null) result = caseAbstractStatement(endlLiteral);
				if (result == null) result = caseConstExpression(endlLiteral);
				if (result == null) result = casePragmatized(endlLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LINE_NO_LITERAL: {
				LineNoLiteral lineNoLiteral = (LineNoLiteral)theEObject;
				T result = caseLineNoLiteral(lineNoLiteral);
				if (result == null) result = caseExpression(lineNoLiteral);
				if (result == null) result = caseAbstractStatement(lineNoLiteral);
				if (result == null) result = caseConstExpression(lineNoLiteral);
				if (result == null) result = casePragmatized(lineNoLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.FILE_NAME_LITERAL: {
				FileNameLiteral fileNameLiteral = (FileNameLiteral)theEObject;
				T result = caseFileNameLiteral(fileNameLiteral);
				if (result == null) result = caseExpression(fileNameLiteral);
				if (result == null) result = caseAbstractStatement(fileNameLiteral);
				if (result == null) result = caseConstExpression(fileNameLiteral);
				if (result == null) result = casePragmatized(fileNameLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ATTRIBUTE_REFERENTIAL: {
				AttributeReferential attributeReferential = (AttributeReferential)theEObject;
				T result = caseAttributeReferential(attributeReferential);
				if (result == null) result = caseRelationshipNavigation(attributeReferential);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ASSIGN_STATEMENT: {
				AssignStatement assignStatement = (AssignStatement)theEObject;
				T result = caseAssignStatement(assignStatement);
				if (result == null) result = caseExpression(assignStatement);
				if (result == null) result = caseAbstractStatement(assignStatement);
				if (result == null) result = caseConstExpression(assignStatement);
				if (result == null) result = casePragmatized(assignStatement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.STREAM_EXPRESSION: {
				StreamExpression streamExpression = (StreamExpression)theEObject;
				T result = caseStreamExpression(streamExpression);
				if (result == null) result = caseExpression(streamExpression);
				if (result == null) result = caseAbstractStatement(streamExpression);
				if (result == null) result = caseConstExpression(streamExpression);
				if (result == null) result = casePragmatized(streamExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.RANGE_EXPRESSION: {
				RangeExpression rangeExpression = (RangeExpression)theEObject;
				T result = caseRangeExpression(rangeExpression);
				if (result == null) result = caseExpression(rangeExpression);
				if (result == null) result = caseAbstractStatement(rangeExpression);
				if (result == null) result = caseConstExpression(rangeExpression);
				if (result == null) result = casePragmatized(rangeExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LOGICAL_OR: {
				LogicalOr logicalOr = (LogicalOr)theEObject;
				T result = caseLogicalOr(logicalOr);
				if (result == null) result = caseExpression(logicalOr);
				if (result == null) result = caseAbstractStatement(logicalOr);
				if (result == null) result = caseConstExpression(logicalOr);
				if (result == null) result = casePragmatized(logicalOr);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LOGICAL_XOR: {
				LogicalXor logicalXor = (LogicalXor)theEObject;
				T result = caseLogicalXor(logicalXor);
				if (result == null) result = caseExpression(logicalXor);
				if (result == null) result = caseAbstractStatement(logicalXor);
				if (result == null) result = caseConstExpression(logicalXor);
				if (result == null) result = casePragmatized(logicalXor);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LOGICAL_AND: {
				LogicalAnd logicalAnd = (LogicalAnd)theEObject;
				T result = caseLogicalAnd(logicalAnd);
				if (result == null) result = caseExpression(logicalAnd);
				if (result == null) result = caseAbstractStatement(logicalAnd);
				if (result == null) result = caseConstExpression(logicalAnd);
				if (result == null) result = casePragmatized(logicalAnd);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.EQUALITY: {
				Equality equality = (Equality)theEObject;
				T result = caseEquality(equality);
				if (result == null) result = caseExpression(equality);
				if (result == null) result = caseAbstractStatement(equality);
				if (result == null) result = caseConstExpression(equality);
				if (result == null) result = casePragmatized(equality);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.RELATIONAL_EXP: {
				RelationalExp relationalExp = (RelationalExp)theEObject;
				T result = caseRelationalExp(relationalExp);
				if (result == null) result = caseExpression(relationalExp);
				if (result == null) result = caseAbstractStatement(relationalExp);
				if (result == null) result = caseConstExpression(relationalExp);
				if (result == null) result = casePragmatized(relationalExp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ADDITIVE_EXP: {
				AdditiveExp additiveExp = (AdditiveExp)theEObject;
				T result = caseAdditiveExp(additiveExp);
				if (result == null) result = caseExpression(additiveExp);
				if (result == null) result = caseAbstractStatement(additiveExp);
				if (result == null) result = caseConstExpression(additiveExp);
				if (result == null) result = casePragmatized(additiveExp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.MULT_EXP: {
				MultExp multExp = (MultExp)theEObject;
				T result = caseMultExp(multExp);
				if (result == null) result = caseExpression(multExp);
				if (result == null) result = caseAbstractStatement(multExp);
				if (result == null) result = caseConstExpression(multExp);
				if (result == null) result = casePragmatized(multExp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.UNARY_EXP: {
				UnaryExp unaryExp = (UnaryExp)theEObject;
				T result = caseUnaryExp(unaryExp);
				if (result == null) result = caseExpression(unaryExp);
				if (result == null) result = caseAbstractStatement(unaryExp);
				if (result == null) result = caseConstExpression(unaryExp);
				if (result == null) result = casePragmatized(unaryExp);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.LINK_EXPRESSION: {
				LinkExpression linkExpression = (LinkExpression)theEObject;
				T result = caseLinkExpression(linkExpression);
				if (result == null) result = caseExpression(linkExpression);
				if (result == null) result = caseAbstractStatement(linkExpression);
				if (result == null) result = caseConstExpression(linkExpression);
				if (result == null) result = casePragmatized(linkExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.NAVIGATE_EXPRESSION: {
				NavigateExpression navigateExpression = (NavigateExpression)theEObject;
				T result = caseNavigateExpression(navigateExpression);
				if (result == null) result = caseExpression(navigateExpression);
				if (result == null) result = caseAbstractStatement(navigateExpression);
				if (result == null) result = caseConstExpression(navigateExpression);
				if (result == null) result = casePragmatized(navigateExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.ACTION_CALL: {
				ActionCall actionCall = (ActionCall)theEObject;
				T result = caseActionCall(actionCall);
				if (result == null) result = caseExpression(actionCall);
				if (result == null) result = caseAbstractStatement(actionCall);
				if (result == null) result = caseConstExpression(actionCall);
				if (result == null) result = casePragmatized(actionCall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.TERMINATOR_ACTION_CALL: {
				TerminatorActionCall terminatorActionCall = (TerminatorActionCall)theEObject;
				T result = caseTerminatorActionCall(terminatorActionCall);
				if (result == null) result = caseExpression(terminatorActionCall);
				if (result == null) result = caseAbstractStatement(terminatorActionCall);
				if (result == null) result = caseConstExpression(terminatorActionCall);
				if (result == null) result = casePragmatized(terminatorActionCall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.INDEXED_EXPRESSION: {
				IndexedExpression indexedExpression = (IndexedExpression)theEObject;
				T result = caseIndexedExpression(indexedExpression);
				if (result == null) result = caseExpression(indexedExpression);
				if (result == null) result = caseAbstractStatement(indexedExpression);
				if (result == null) result = caseConstExpression(indexedExpression);
				if (result == null) result = casePragmatized(indexedExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.CHARACTERISTIC_CALL: {
				CharacteristicCall characteristicCall = (CharacteristicCall)theEObject;
				T result = caseCharacteristicCall(characteristicCall);
				if (result == null) result = caseExpression(characteristicCall);
				if (result == null) result = caseAbstractStatement(characteristicCall);
				if (result == null) result = caseConstExpression(characteristicCall);
				if (result == null) result = casePragmatized(characteristicCall);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case BehaviorPackage.STRUCTURE_AGGREGATE_EXPRESSION: {
				StructureAggregateExpression structureAggregateExpression = (StructureAggregateExpression)theEObject;
				T result = caseStructureAggregateExpression(structureAggregateExpression);
				if (result == null) result = caseExpression(structureAggregateExpression);
				if (result == null) result = caseAbstractStatement(structureAggregateExpression);
				if (result == null) result = caseConstExpression(structureAggregateExpression);
				if (result == null) result = casePragmatized(structureAggregateExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Code Block</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Code Block</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCodeBlock(CodeBlock object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Variable Declaration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseVariableDeclaration(VariableDeclaration object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExceptionHandler(ExceptionHandler object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Default Exception Handler</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Default Exception Handler</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDefaultExceptionHandler(DefaultExceptionHandler object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractStatement(AbstractStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExpression(Expression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Exit Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Exit Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseExitStatement(ExitStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Return Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Return Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseReturnStatement(ReturnStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Delay Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Delay Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDelayStatement(DelayStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Raise Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Raise Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRaiseStatement(RaiseStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Delete Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Delete Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDeleteStatement(DeleteStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Erase Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Erase Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEraseStatement(EraseStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Schedule Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Schedule Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseScheduleStatement(ScheduleStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Cancel Timer Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Cancel Timer Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCancelTimerStatement(CancelTimerStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Generate Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Generate Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseGenerateStatement(GenerateStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIfStatement(IfStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Elsif Block</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Elsif Block</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElsifBlock(ElsifBlock object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Else Block</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Else Block</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseElseBlock(ElseBlock object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>While Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>While Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseWhileStatement(WhileStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Case Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Case Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCaseStatement(CaseStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Case Alternative</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Case Alternative</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCaseAlternative(CaseAlternative object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Case Others</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Case Others</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCaseOthers(CaseOthers object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseForStatement(ForStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Loop Variable</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Loop Variable</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLoopVariable(LoopVariable object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Code Block Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Code Block Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCodeBlockStatement(CodeBlockStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Find Condition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Find Condition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFindCondition(FindCondition object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Const Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Const Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConstExpression(ConstExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sort Order</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sort Order</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSortOrder(SortOrder object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sort Order Component</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sort Order Component</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSortOrderComponent(SortOrderComponent object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Sort Order Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Sort Order Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSortOrderFeature(SortOrderFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Create Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Create Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreateExpression(CreateExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Create Argument</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Create Argument</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCreateArgument(CreateArgument object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Find Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Find Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFindExpression(FindExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Feature Call</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Feature Call</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFeatureCall(FeatureCall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Simple Feature Call</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Simple Feature Call</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSimpleFeatureCall(SimpleFeatureCall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Real Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Real Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRealLiteral(RealLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Integer Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIntegerLiteral(IntegerLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStringLiteral(StringLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Character Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Character Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCharacterLiteral(CharacterLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Duration Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Duration Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseDurationLiteral(DurationLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Timestamp Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Timestamp Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTimestampLiteral(TimestampLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Boolean Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseBooleanLiteral(BooleanLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Null Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Null Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNullLiteral(NullLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Flush Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Flush Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFlushLiteral(FlushLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>This Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>This Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseThisLiteral(ThisLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Console Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Console Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseConsoleLiteral(ConsoleLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Endl Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Endl Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEndlLiteral(EndlLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Line No Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Line No Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLineNoLiteral(LineNoLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>File Name Literal</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>File Name Literal</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseFileNameLiteral(FileNameLiteral object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Attribute Referential</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Attribute Referential</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAttributeReferential(AttributeReferential object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Assign Statement</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Assign Statement</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAssignStatement(AssignStatement object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Stream Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Stream Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStreamExpression(StreamExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Range Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Range Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRangeExpression(RangeExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Logical Or</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Logical Or</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLogicalOr(LogicalOr object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Logical Xor</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Logical Xor</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLogicalXor(LogicalXor object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Logical And</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Logical And</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLogicalAnd(LogicalAnd object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseEquality(Equality object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relational Exp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relational Exp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelationalExp(RelationalExp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Additive Exp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Additive Exp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAdditiveExp(AdditiveExp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mult Exp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mult Exp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseMultExp(MultExp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Unary Exp</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Unary Exp</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseUnaryExp(UnaryExp object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Link Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Link Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseLinkExpression(LinkExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Navigate Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Navigate Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseNavigateExpression(NavigateExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Action Call</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Action Call</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseActionCall(ActionCall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Terminator Action Call</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Terminator Action Call</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseTerminatorActionCall(TerminatorActionCall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Indexed Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Indexed Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseIndexedExpression(IndexedExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Characteristic Call</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Characteristic Call</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseCharacteristicCall(CharacteristicCall object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Structure Aggregate Expression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Structure Aggregate Expression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseStructureAggregateExpression(StructureAggregateExpression object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Pragmatized</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T casePragmatized(Pragmatized object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Named</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractNamed(AbstractNamed object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Abstract Feature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseAbstractFeature(AbstractFeature object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Relationship Navigation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Relationship Navigation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseRelationshipNavigation(RelationshipNavigation object) {
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object) {
		return null;
	}

} //BehaviorSwitch
