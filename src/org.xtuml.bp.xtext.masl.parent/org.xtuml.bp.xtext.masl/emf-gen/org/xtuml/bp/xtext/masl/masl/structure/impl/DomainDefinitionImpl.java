/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtuml.bp.xtext.masl.masl.structure.DomainDefinition;
import org.xtuml.bp.xtext.masl.masl.structure.DomainServiceDeclaration;
import org.xtuml.bp.xtext.masl.masl.structure.ExceptionDeclaration;
import org.xtuml.bp.xtext.masl.masl.structure.ObjectDeclaration;
import org.xtuml.bp.xtext.masl.masl.structure.ObjectDefinition;
import org.xtuml.bp.xtext.masl.masl.structure.RelationshipDefinition;
import org.xtuml.bp.xtext.masl.masl.structure.StructurePackage;
import org.xtuml.bp.xtext.masl.masl.structure.TerminatorDefinition;

import org.xtuml.bp.xtext.masl.masl.types.TypeDeclaration;
import org.xtuml.bp.xtext.masl.masl.types.TypeForwardDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getObjects <em>Objects</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getServices <em>Services</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getTerminators <em>Terminators</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getRelationships <em>Relationships</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getObjectDefs <em>Object Defs</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getTypeForwards <em>Type Forwards</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getTypes <em>Types</em>}</li>
 *   <li>{@link org.xtuml.bp.xtext.masl.masl.structure.impl.DomainDefinitionImpl#getExceptions <em>Exceptions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DomainDefinitionImpl extends AbstractTopLevelElementImpl implements DomainDefinition {
	/**
	 * The cached value of the '{@link #getObjects() <em>Objects</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getObjects()
	 * @generated
	 * @ordered
	 */
	protected EList<ObjectDeclaration> objects;

	/**
	 * The cached value of the '{@link #getServices() <em>Services</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getServices()
	 * @generated
	 * @ordered
	 */
	protected EList<DomainServiceDeclaration> services;

	/**
	 * The cached value of the '{@link #getTerminators() <em>Terminators</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTerminators()
	 * @generated
	 * @ordered
	 */
	protected EList<TerminatorDefinition> terminators;

	/**
	 * The cached value of the '{@link #getRelationships() <em>Relationships</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRelationships()
	 * @generated
	 * @ordered
	 */
	protected EList<RelationshipDefinition> relationships;

	/**
	 * The cached value of the '{@link #getObjectDefs() <em>Object Defs</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getObjectDefs()
	 * @generated
	 * @ordered
	 */
	protected EList<ObjectDefinition> objectDefs;

	/**
	 * The cached value of the '{@link #getTypeForwards() <em>Type Forwards</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTypeForwards()
	 * @generated
	 * @ordered
	 */
	protected EList<TypeForwardDeclaration> typeForwards;

	/**
	 * The cached value of the '{@link #getTypes() <em>Types</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTypes()
	 * @generated
	 * @ordered
	 */
	protected EList<TypeDeclaration> types;

	/**
	 * The cached value of the '{@link #getExceptions() <em>Exceptions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getExceptions()
	 * @generated
	 * @ordered
	 */
	protected EList<ExceptionDeclaration> exceptions;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainDefinitionImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return StructurePackage.Literals.DOMAIN_DEFINITION;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ObjectDeclaration> getObjects() {
		if (objects == null) {
			objects = new EObjectContainmentEList<ObjectDeclaration>(ObjectDeclaration.class, this, StructurePackage.DOMAIN_DEFINITION__OBJECTS);
		}
		return objects;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<DomainServiceDeclaration> getServices() {
		if (services == null) {
			services = new EObjectContainmentEList<DomainServiceDeclaration>(DomainServiceDeclaration.class, this, StructurePackage.DOMAIN_DEFINITION__SERVICES);
		}
		return services;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TerminatorDefinition> getTerminators() {
		if (terminators == null) {
			terminators = new EObjectContainmentEList<TerminatorDefinition>(TerminatorDefinition.class, this, StructurePackage.DOMAIN_DEFINITION__TERMINATORS);
		}
		return terminators;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<RelationshipDefinition> getRelationships() {
		if (relationships == null) {
			relationships = new EObjectContainmentEList<RelationshipDefinition>(RelationshipDefinition.class, this, StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS);
		}
		return relationships;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ObjectDefinition> getObjectDefs() {
		if (objectDefs == null) {
			objectDefs = new EObjectContainmentEList<ObjectDefinition>(ObjectDefinition.class, this, StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS);
		}
		return objectDefs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TypeForwardDeclaration> getTypeForwards() {
		if (typeForwards == null) {
			typeForwards = new EObjectContainmentEList<TypeForwardDeclaration>(TypeForwardDeclaration.class, this, StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS);
		}
		return typeForwards;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<TypeDeclaration> getTypes() {
		if (types == null) {
			types = new EObjectContainmentEList<TypeDeclaration>(TypeDeclaration.class, this, StructurePackage.DOMAIN_DEFINITION__TYPES);
		}
		return types;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<ExceptionDeclaration> getExceptions() {
		if (exceptions == null) {
			exceptions = new EObjectContainmentEList<ExceptionDeclaration>(ExceptionDeclaration.class, this, StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS);
		}
		return exceptions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case StructurePackage.DOMAIN_DEFINITION__OBJECTS:
				return ((InternalEList<?>)getObjects()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__SERVICES:
				return ((InternalEList<?>)getServices()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__TERMINATORS:
				return ((InternalEList<?>)getTerminators()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS:
				return ((InternalEList<?>)getRelationships()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS:
				return ((InternalEList<?>)getObjectDefs()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS:
				return ((InternalEList<?>)getTypeForwards()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__TYPES:
				return ((InternalEList<?>)getTypes()).basicRemove(otherEnd, msgs);
			case StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS:
				return ((InternalEList<?>)getExceptions()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case StructurePackage.DOMAIN_DEFINITION__OBJECTS:
				return getObjects();
			case StructurePackage.DOMAIN_DEFINITION__SERVICES:
				return getServices();
			case StructurePackage.DOMAIN_DEFINITION__TERMINATORS:
				return getTerminators();
			case StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS:
				return getRelationships();
			case StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS:
				return getObjectDefs();
			case StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS:
				return getTypeForwards();
			case StructurePackage.DOMAIN_DEFINITION__TYPES:
				return getTypes();
			case StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS:
				return getExceptions();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case StructurePackage.DOMAIN_DEFINITION__OBJECTS:
				getObjects().clear();
				getObjects().addAll((Collection<? extends ObjectDeclaration>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__SERVICES:
				getServices().clear();
				getServices().addAll((Collection<? extends DomainServiceDeclaration>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__TERMINATORS:
				getTerminators().clear();
				getTerminators().addAll((Collection<? extends TerminatorDefinition>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS:
				getRelationships().clear();
				getRelationships().addAll((Collection<? extends RelationshipDefinition>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS:
				getObjectDefs().clear();
				getObjectDefs().addAll((Collection<? extends ObjectDefinition>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS:
				getTypeForwards().clear();
				getTypeForwards().addAll((Collection<? extends TypeForwardDeclaration>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__TYPES:
				getTypes().clear();
				getTypes().addAll((Collection<? extends TypeDeclaration>)newValue);
				return;
			case StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS:
				getExceptions().clear();
				getExceptions().addAll((Collection<? extends ExceptionDeclaration>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case StructurePackage.DOMAIN_DEFINITION__OBJECTS:
				getObjects().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__SERVICES:
				getServices().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__TERMINATORS:
				getTerminators().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS:
				getRelationships().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS:
				getObjectDefs().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS:
				getTypeForwards().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__TYPES:
				getTypes().clear();
				return;
			case StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS:
				getExceptions().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case StructurePackage.DOMAIN_DEFINITION__OBJECTS:
				return objects != null && !objects.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__SERVICES:
				return services != null && !services.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__TERMINATORS:
				return terminators != null && !terminators.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__RELATIONSHIPS:
				return relationships != null && !relationships.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__OBJECT_DEFS:
				return objectDefs != null && !objectDefs.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__TYPE_FORWARDS:
				return typeForwards != null && !typeForwards.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__TYPES:
				return types != null && !types.isEmpty();
			case StructurePackage.DOMAIN_DEFINITION__EXCEPTIONS:
				return exceptions != null && !exceptions.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //DomainDefinitionImpl
