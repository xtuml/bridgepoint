/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.behavior.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtuml.bp.xtext.masl.masl.behavior.*;

import org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature;
import org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed;
import org.xtuml.bp.xtext.masl.masl.structure.Pragmatized;
import org.xtuml.bp.xtext.masl.masl.structure.RelationshipNavigation;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.xtext.masl.masl.behavior.BehaviorPackage
 * @generated
 */
public class BehaviorAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static BehaviorPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BehaviorAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = BehaviorPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorSwitch<Adapter> modelSwitch =
		new BehaviorSwitch<Adapter>() {
			@Override
			public Adapter caseCodeBlock(CodeBlock object) {
				return createCodeBlockAdapter();
			}
			@Override
			public Adapter caseVariableDeclaration(VariableDeclaration object) {
				return createVariableDeclarationAdapter();
			}
			@Override
			public Adapter caseExceptionHandler(ExceptionHandler object) {
				return createExceptionHandlerAdapter();
			}
			@Override
			public Adapter caseDefaultExceptionHandler(DefaultExceptionHandler object) {
				return createDefaultExceptionHandlerAdapter();
			}
			@Override
			public Adapter caseAbstractStatement(AbstractStatement object) {
				return createAbstractStatementAdapter();
			}
			@Override
			public Adapter caseExpression(Expression object) {
				return createExpressionAdapter();
			}
			@Override
			public Adapter caseExitStatement(ExitStatement object) {
				return createExitStatementAdapter();
			}
			@Override
			public Adapter caseReturnStatement(ReturnStatement object) {
				return createReturnStatementAdapter();
			}
			@Override
			public Adapter caseDelayStatement(DelayStatement object) {
				return createDelayStatementAdapter();
			}
			@Override
			public Adapter caseRaiseStatement(RaiseStatement object) {
				return createRaiseStatementAdapter();
			}
			@Override
			public Adapter caseDeleteStatement(DeleteStatement object) {
				return createDeleteStatementAdapter();
			}
			@Override
			public Adapter caseEraseStatement(EraseStatement object) {
				return createEraseStatementAdapter();
			}
			@Override
			public Adapter caseScheduleStatement(ScheduleStatement object) {
				return createScheduleStatementAdapter();
			}
			@Override
			public Adapter caseCancelTimerStatement(CancelTimerStatement object) {
				return createCancelTimerStatementAdapter();
			}
			@Override
			public Adapter caseGenerateStatement(GenerateStatement object) {
				return createGenerateStatementAdapter();
			}
			@Override
			public Adapter caseIfStatement(IfStatement object) {
				return createIfStatementAdapter();
			}
			@Override
			public Adapter caseElsifBlock(ElsifBlock object) {
				return createElsifBlockAdapter();
			}
			@Override
			public Adapter caseElseBlock(ElseBlock object) {
				return createElseBlockAdapter();
			}
			@Override
			public Adapter caseWhileStatement(WhileStatement object) {
				return createWhileStatementAdapter();
			}
			@Override
			public Adapter caseCaseStatement(CaseStatement object) {
				return createCaseStatementAdapter();
			}
			@Override
			public Adapter caseCaseAlternative(CaseAlternative object) {
				return createCaseAlternativeAdapter();
			}
			@Override
			public Adapter caseCaseOthers(CaseOthers object) {
				return createCaseOthersAdapter();
			}
			@Override
			public Adapter caseForStatement(ForStatement object) {
				return createForStatementAdapter();
			}
			@Override
			public Adapter caseLoopVariable(LoopVariable object) {
				return createLoopVariableAdapter();
			}
			@Override
			public Adapter caseCodeBlockStatement(CodeBlockStatement object) {
				return createCodeBlockStatementAdapter();
			}
			@Override
			public Adapter caseFindCondition(FindCondition object) {
				return createFindConditionAdapter();
			}
			@Override
			public Adapter caseConstExpression(ConstExpression object) {
				return createConstExpressionAdapter();
			}
			@Override
			public Adapter caseSortOrder(SortOrder object) {
				return createSortOrderAdapter();
			}
			@Override
			public Adapter caseSortOrderComponent(SortOrderComponent object) {
				return createSortOrderComponentAdapter();
			}
			@Override
			public Adapter caseSortOrderFeature(SortOrderFeature object) {
				return createSortOrderFeatureAdapter();
			}
			@Override
			public Adapter caseCreateExpression(CreateExpression object) {
				return createCreateExpressionAdapter();
			}
			@Override
			public Adapter caseCreateArgument(CreateArgument object) {
				return createCreateArgumentAdapter();
			}
			@Override
			public Adapter caseFindExpression(FindExpression object) {
				return createFindExpressionAdapter();
			}
			@Override
			public Adapter caseFeatureCall(FeatureCall object) {
				return createFeatureCallAdapter();
			}
			@Override
			public Adapter caseSimpleFeatureCall(SimpleFeatureCall object) {
				return createSimpleFeatureCallAdapter();
			}
			@Override
			public Adapter caseRealLiteral(RealLiteral object) {
				return createRealLiteralAdapter();
			}
			@Override
			public Adapter caseIntegerLiteral(IntegerLiteral object) {
				return createIntegerLiteralAdapter();
			}
			@Override
			public Adapter caseStringLiteral(StringLiteral object) {
				return createStringLiteralAdapter();
			}
			@Override
			public Adapter caseCharacterLiteral(CharacterLiteral object) {
				return createCharacterLiteralAdapter();
			}
			@Override
			public Adapter caseDurationLiteral(DurationLiteral object) {
				return createDurationLiteralAdapter();
			}
			@Override
			public Adapter caseTimestampLiteral(TimestampLiteral object) {
				return createTimestampLiteralAdapter();
			}
			@Override
			public Adapter caseBooleanLiteral(BooleanLiteral object) {
				return createBooleanLiteralAdapter();
			}
			@Override
			public Adapter caseNullLiteral(NullLiteral object) {
				return createNullLiteralAdapter();
			}
			@Override
			public Adapter caseFlushLiteral(FlushLiteral object) {
				return createFlushLiteralAdapter();
			}
			@Override
			public Adapter caseThisLiteral(ThisLiteral object) {
				return createThisLiteralAdapter();
			}
			@Override
			public Adapter caseConsoleLiteral(ConsoleLiteral object) {
				return createConsoleLiteralAdapter();
			}
			@Override
			public Adapter caseEndlLiteral(EndlLiteral object) {
				return createEndlLiteralAdapter();
			}
			@Override
			public Adapter caseLineNoLiteral(LineNoLiteral object) {
				return createLineNoLiteralAdapter();
			}
			@Override
			public Adapter caseFileNameLiteral(FileNameLiteral object) {
				return createFileNameLiteralAdapter();
			}
			@Override
			public Adapter caseAttributeReferential(AttributeReferential object) {
				return createAttributeReferentialAdapter();
			}
			@Override
			public Adapter caseAssignStatement(AssignStatement object) {
				return createAssignStatementAdapter();
			}
			@Override
			public Adapter caseStreamExpression(StreamExpression object) {
				return createStreamExpressionAdapter();
			}
			@Override
			public Adapter caseRangeExpression(RangeExpression object) {
				return createRangeExpressionAdapter();
			}
			@Override
			public Adapter caseLogicalOr(LogicalOr object) {
				return createLogicalOrAdapter();
			}
			@Override
			public Adapter caseLogicalXor(LogicalXor object) {
				return createLogicalXorAdapter();
			}
			@Override
			public Adapter caseLogicalAnd(LogicalAnd object) {
				return createLogicalAndAdapter();
			}
			@Override
			public Adapter caseEquality(Equality object) {
				return createEqualityAdapter();
			}
			@Override
			public Adapter caseRelationalExp(RelationalExp object) {
				return createRelationalExpAdapter();
			}
			@Override
			public Adapter caseAdditiveExp(AdditiveExp object) {
				return createAdditiveExpAdapter();
			}
			@Override
			public Adapter caseMultExp(MultExp object) {
				return createMultExpAdapter();
			}
			@Override
			public Adapter caseUnaryExp(UnaryExp object) {
				return createUnaryExpAdapter();
			}
			@Override
			public Adapter caseLinkExpression(LinkExpression object) {
				return createLinkExpressionAdapter();
			}
			@Override
			public Adapter caseNavigateExpression(NavigateExpression object) {
				return createNavigateExpressionAdapter();
			}
			@Override
			public Adapter caseActionCall(ActionCall object) {
				return createActionCallAdapter();
			}
			@Override
			public Adapter caseTerminatorActionCall(TerminatorActionCall object) {
				return createTerminatorActionCallAdapter();
			}
			@Override
			public Adapter caseIndexedExpression(IndexedExpression object) {
				return createIndexedExpressionAdapter();
			}
			@Override
			public Adapter caseCharacteristicCall(CharacteristicCall object) {
				return createCharacteristicCallAdapter();
			}
			@Override
			public Adapter caseStructureAggregateExpression(StructureAggregateExpression object) {
				return createStructureAggregateExpressionAdapter();
			}
			@Override
			public Adapter casePragmatized(Pragmatized object) {
				return createPragmatizedAdapter();
			}
			@Override
			public Adapter caseAbstractNamed(AbstractNamed object) {
				return createAbstractNamedAdapter();
			}
			@Override
			public Adapter caseAbstractFeature(AbstractFeature object) {
				return createAbstractFeatureAdapter();
			}
			@Override
			public Adapter caseRelationshipNavigation(RelationshipNavigation object) {
				return createRelationshipNavigationAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CodeBlock <em>Code Block</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CodeBlock
	 * @generated
	 */
	public Adapter createCodeBlockAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.VariableDeclaration <em>Variable Declaration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.VariableDeclaration
	 * @generated
	 */
	public Adapter createVariableDeclarationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ExceptionHandler <em>Exception Handler</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ExceptionHandler
	 * @generated
	 */
	public Adapter createExceptionHandlerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.DefaultExceptionHandler <em>Default Exception Handler</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.DefaultExceptionHandler
	 * @generated
	 */
	public Adapter createDefaultExceptionHandlerAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.AbstractStatement <em>Abstract Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.AbstractStatement
	 * @generated
	 */
	public Adapter createAbstractStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.Expression <em>Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.Expression
	 * @generated
	 */
	public Adapter createExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ExitStatement <em>Exit Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ExitStatement
	 * @generated
	 */
	public Adapter createExitStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ReturnStatement <em>Return Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ReturnStatement
	 * @generated
	 */
	public Adapter createReturnStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.DelayStatement <em>Delay Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.DelayStatement
	 * @generated
	 */
	public Adapter createDelayStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.RaiseStatement <em>Raise Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.RaiseStatement
	 * @generated
	 */
	public Adapter createRaiseStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.DeleteStatement <em>Delete Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.DeleteStatement
	 * @generated
	 */
	public Adapter createDeleteStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.EraseStatement <em>Erase Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.EraseStatement
	 * @generated
	 */
	public Adapter createEraseStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ScheduleStatement <em>Schedule Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ScheduleStatement
	 * @generated
	 */
	public Adapter createScheduleStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CancelTimerStatement <em>Cancel Timer Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CancelTimerStatement
	 * @generated
	 */
	public Adapter createCancelTimerStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.GenerateStatement <em>Generate Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.GenerateStatement
	 * @generated
	 */
	public Adapter createGenerateStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.IfStatement <em>If Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.IfStatement
	 * @generated
	 */
	public Adapter createIfStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ElsifBlock <em>Elsif Block</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ElsifBlock
	 * @generated
	 */
	public Adapter createElsifBlockAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ElseBlock <em>Else Block</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ElseBlock
	 * @generated
	 */
	public Adapter createElseBlockAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.WhileStatement <em>While Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.WhileStatement
	 * @generated
	 */
	public Adapter createWhileStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CaseStatement <em>Case Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CaseStatement
	 * @generated
	 */
	public Adapter createCaseStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CaseAlternative <em>Case Alternative</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CaseAlternative
	 * @generated
	 */
	public Adapter createCaseAlternativeAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CaseOthers <em>Case Others</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CaseOthers
	 * @generated
	 */
	public Adapter createCaseOthersAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ForStatement <em>For Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ForStatement
	 * @generated
	 */
	public Adapter createForStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LoopVariable <em>Loop Variable</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LoopVariable
	 * @generated
	 */
	public Adapter createLoopVariableAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CodeBlockStatement <em>Code Block Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CodeBlockStatement
	 * @generated
	 */
	public Adapter createCodeBlockStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.FindCondition <em>Find Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.FindCondition
	 * @generated
	 */
	public Adapter createFindConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ConstExpression <em>Const Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ConstExpression
	 * @generated
	 */
	public Adapter createConstExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.SortOrder <em>Sort Order</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.SortOrder
	 * @generated
	 */
	public Adapter createSortOrderAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.SortOrderComponent <em>Sort Order Component</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.SortOrderComponent
	 * @generated
	 */
	public Adapter createSortOrderComponentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.SortOrderFeature <em>Sort Order Feature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.SortOrderFeature
	 * @generated
	 */
	public Adapter createSortOrderFeatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CreateExpression <em>Create Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CreateExpression
	 * @generated
	 */
	public Adapter createCreateExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CreateArgument <em>Create Argument</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CreateArgument
	 * @generated
	 */
	public Adapter createCreateArgumentAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.FindExpression <em>Find Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.FindExpression
	 * @generated
	 */
	public Adapter createFindExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.FeatureCall <em>Feature Call</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.FeatureCall
	 * @generated
	 */
	public Adapter createFeatureCallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.SimpleFeatureCall <em>Simple Feature Call</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.SimpleFeatureCall
	 * @generated
	 */
	public Adapter createSimpleFeatureCallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.RealLiteral <em>Real Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.RealLiteral
	 * @generated
	 */
	public Adapter createRealLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.IntegerLiteral <em>Integer Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.IntegerLiteral
	 * @generated
	 */
	public Adapter createIntegerLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.StringLiteral <em>String Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.StringLiteral
	 * @generated
	 */
	public Adapter createStringLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CharacterLiteral <em>Character Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CharacterLiteral
	 * @generated
	 */
	public Adapter createCharacterLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.DurationLiteral <em>Duration Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.DurationLiteral
	 * @generated
	 */
	public Adapter createDurationLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.TimestampLiteral <em>Timestamp Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.TimestampLiteral
	 * @generated
	 */
	public Adapter createTimestampLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.BooleanLiteral <em>Boolean Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.BooleanLiteral
	 * @generated
	 */
	public Adapter createBooleanLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.NullLiteral <em>Null Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.NullLiteral
	 * @generated
	 */
	public Adapter createNullLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.FlushLiteral <em>Flush Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.FlushLiteral
	 * @generated
	 */
	public Adapter createFlushLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ThisLiteral <em>This Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ThisLiteral
	 * @generated
	 */
	public Adapter createThisLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ConsoleLiteral <em>Console Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ConsoleLiteral
	 * @generated
	 */
	public Adapter createConsoleLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.EndlLiteral <em>Endl Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.EndlLiteral
	 * @generated
	 */
	public Adapter createEndlLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LineNoLiteral <em>Line No Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LineNoLiteral
	 * @generated
	 */
	public Adapter createLineNoLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.FileNameLiteral <em>File Name Literal</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.FileNameLiteral
	 * @generated
	 */
	public Adapter createFileNameLiteralAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.AttributeReferential <em>Attribute Referential</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.AttributeReferential
	 * @generated
	 */
	public Adapter createAttributeReferentialAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.AssignStatement <em>Assign Statement</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.AssignStatement
	 * @generated
	 */
	public Adapter createAssignStatementAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.StreamExpression <em>Stream Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.StreamExpression
	 * @generated
	 */
	public Adapter createStreamExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.RangeExpression <em>Range Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.RangeExpression
	 * @generated
	 */
	public Adapter createRangeExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LogicalOr <em>Logical Or</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LogicalOr
	 * @generated
	 */
	public Adapter createLogicalOrAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LogicalXor <em>Logical Xor</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LogicalXor
	 * @generated
	 */
	public Adapter createLogicalXorAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LogicalAnd <em>Logical And</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LogicalAnd
	 * @generated
	 */
	public Adapter createLogicalAndAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.Equality <em>Equality</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.Equality
	 * @generated
	 */
	public Adapter createEqualityAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.RelationalExp <em>Relational Exp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.RelationalExp
	 * @generated
	 */
	public Adapter createRelationalExpAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.AdditiveExp <em>Additive Exp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.AdditiveExp
	 * @generated
	 */
	public Adapter createAdditiveExpAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.MultExp <em>Mult Exp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.MultExp
	 * @generated
	 */
	public Adapter createMultExpAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.UnaryExp <em>Unary Exp</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.UnaryExp
	 * @generated
	 */
	public Adapter createUnaryExpAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.LinkExpression <em>Link Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.LinkExpression
	 * @generated
	 */
	public Adapter createLinkExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.NavigateExpression <em>Navigate Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.NavigateExpression
	 * @generated
	 */
	public Adapter createNavigateExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.ActionCall <em>Action Call</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.ActionCall
	 * @generated
	 */
	public Adapter createActionCallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.TerminatorActionCall <em>Terminator Action Call</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.TerminatorActionCall
	 * @generated
	 */
	public Adapter createTerminatorActionCallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.IndexedExpression <em>Indexed Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.IndexedExpression
	 * @generated
	 */
	public Adapter createIndexedExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.CharacteristicCall <em>Characteristic Call</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.CharacteristicCall
	 * @generated
	 */
	public Adapter createCharacteristicCallAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.behavior.StructureAggregateExpression <em>Structure Aggregate Expression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.behavior.StructureAggregateExpression
	 * @generated
	 */
	public Adapter createStructureAggregateExpressionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.structure.Pragmatized <em>Pragmatized</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.structure.Pragmatized
	 * @generated
	 */
	public Adapter createPragmatizedAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed <em>Abstract Named</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.structure.AbstractNamed
	 * @generated
	 */
	public Adapter createAbstractNamedAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature <em>Abstract Feature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.structure.AbstractFeature
	 * @generated
	 */
	public Adapter createAbstractFeatureAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link org.xtuml.bp.xtext.masl.masl.structure.RelationshipNavigation <em>Relationship Navigation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtuml.bp.xtext.masl.masl.structure.RelationshipNavigation
	 * @generated
	 */
	public Adapter createRelationshipNavigationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //BehaviorAdapterFactory
