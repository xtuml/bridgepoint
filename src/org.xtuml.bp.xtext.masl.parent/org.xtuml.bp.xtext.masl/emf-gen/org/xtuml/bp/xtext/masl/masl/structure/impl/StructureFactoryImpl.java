/**
 * generated by Xtext 2.9.2
 */
package org.xtuml.bp.xtext.masl.masl.structure.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtuml.bp.xtext.masl.masl.structure.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class StructureFactoryImpl extends EFactoryImpl implements StructureFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static StructureFactory init() {
		try {
			StructureFactory theStructureFactory = (StructureFactory)EPackage.Registry.INSTANCE.getEFactory(StructurePackage.eNS_URI);
			if (theStructureFactory != null) {
				return theStructureFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new StructureFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructureFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case StructurePackage.MASL_MODEL: return createMaslModel();
			case StructurePackage.ABSTRACT_TOP_LEVEL_ELEMENT: return createAbstractTopLevelElement();
			case StructurePackage.ABSTRACT_FEATURE: return createAbstractFeature();
			case StructurePackage.PRAGMATIZED: return createPragmatized();
			case StructurePackage.PRAGMA: return createPragma();
			case StructurePackage.PRAGMA_VALUE: return createPragmaValue();
			case StructurePackage.PARAMETER: return createParameter();
			case StructurePackage.PROJECT_DEFINITION: return createProjectDefinition();
			case StructurePackage.DOMAIN_DEFINITION: return createDomainDefinition();
			case StructurePackage.DOMAIN_SERVICE_DECLARATION: return createDomainServiceDeclaration();
			case StructurePackage.DOMAIN_SERVICE_DEFINITION: return createDomainServiceDefinition();
			case StructurePackage.EXCEPTION_DECLARATION: return createExceptionDeclaration();
			case StructurePackage.TERMINATOR_DEFINITION: return createTerminatorDefinition();
			case StructurePackage.TERMINATOR_SERVICE_DECLARATION: return createTerminatorServiceDeclaration();
			case StructurePackage.TERMINATOR_SERVICE_DEFINITION: return createTerminatorServiceDefinition();
			case StructurePackage.BUILTIN_LIBRARY_DEFINITION: return createBuiltinLibraryDefinition();
			case StructurePackage.CHARACTERISTIC: return createCharacteristic();
			case StructurePackage.TYPE_PARAMETER: return createTypeParameter();
			case StructurePackage.RANGE_TYPE_REFERENCE: return createRangeTypeReference();
			case StructurePackage.OBJECT_DECLARATION: return createObjectDeclaration();
			case StructurePackage.OBJECT_DEFINITION: return createObjectDefinition();
			case StructurePackage.ATTRIBUTE_DEFINITION: return createAttributeDefinition();
			case StructurePackage.IDENTIFIER_DEFINITION: return createIdentifierDefinition();
			case StructurePackage.OBJECT_SERVICE_DECLARATION: return createObjectServiceDeclaration();
			case StructurePackage.OBJECT_SERVICE_DEFINITION: return createObjectServiceDefinition();
			case StructurePackage.RELATIONSHIP_DEFINITION: return createRelationshipDefinition();
			case StructurePackage.REGULAR_RELATIONSHIP_DEFINITION: return createRegularRelationshipDefinition();
			case StructurePackage.ASSOC_RELATIONSHIP_DEFINITION: return createAssocRelationshipDefinition();
			case StructurePackage.RELATIONSHIP_END: return createRelationshipEnd();
			case StructurePackage.SUBTYPE_RELATIONSHIP_DEFINITION: return createSubtypeRelationshipDefinition();
			case StructurePackage.RELATIONSHIP_NAVIGATION: return createRelationshipNavigation();
			case StructurePackage.OBJECT_OR_ROLE: return createObjectOrRole();
			case StructurePackage.EVENT_DEFINITION: return createEventDefinition();
			case StructurePackage.STATE_DECLARATION: return createStateDeclaration();
			case StructurePackage.STATE_DEFINITION: return createStateDefinition();
			case StructurePackage.TRANSITION_TABLE: return createTransitionTable();
			case StructurePackage.TRANSITION_ROW: return createTransitionRow();
			case StructurePackage.TRANSITION_OPTION: return createTransitionOption();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case StructurePackage.PARAMETER_MODE:
				return createParameterModeFromString(eDataType, initialValue);
			case StructurePackage.VISIBILITY:
				return createVisibilityFromString(eDataType, initialValue);
			case StructurePackage.CONDITIONALITY:
				return createConditionalityFromString(eDataType, initialValue);
			case StructurePackage.MULTIPLICITY:
				return createMultiplicityFromString(eDataType, initialValue);
			case StructurePackage.EVENT_TYPE:
				return createEventTypeFromString(eDataType, initialValue);
			case StructurePackage.STATE_TYPE:
				return createStateTypeFromString(eDataType, initialValue);
			case StructurePackage.TRANS_TABLE_TYPE:
				return createTransTableTypeFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case StructurePackage.PARAMETER_MODE:
				return convertParameterModeToString(eDataType, instanceValue);
			case StructurePackage.VISIBILITY:
				return convertVisibilityToString(eDataType, instanceValue);
			case StructurePackage.CONDITIONALITY:
				return convertConditionalityToString(eDataType, instanceValue);
			case StructurePackage.MULTIPLICITY:
				return convertMultiplicityToString(eDataType, instanceValue);
			case StructurePackage.EVENT_TYPE:
				return convertEventTypeToString(eDataType, instanceValue);
			case StructurePackage.STATE_TYPE:
				return convertStateTypeToString(eDataType, instanceValue);
			case StructurePackage.TRANS_TABLE_TYPE:
				return convertTransTableTypeToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MaslModel createMaslModel() {
		MaslModelImpl maslModel = new MaslModelImpl();
		return maslModel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractTopLevelElement createAbstractTopLevelElement() {
		AbstractTopLevelElementImpl abstractTopLevelElement = new AbstractTopLevelElementImpl();
		return abstractTopLevelElement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AbstractFeature createAbstractFeature() {
		AbstractFeatureImpl abstractFeature = new AbstractFeatureImpl();
		return abstractFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Pragmatized createPragmatized() {
		PragmatizedImpl pragmatized = new PragmatizedImpl();
		return pragmatized;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Pragma createPragma() {
		PragmaImpl pragma = new PragmaImpl();
		return pragma;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PragmaValue createPragmaValue() {
		PragmaValueImpl pragmaValue = new PragmaValueImpl();
		return pragmaValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Parameter createParameter() {
		ParameterImpl parameter = new ParameterImpl();
		return parameter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ProjectDefinition createProjectDefinition() {
		ProjectDefinitionImpl projectDefinition = new ProjectDefinitionImpl();
		return projectDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DomainDefinition createDomainDefinition() {
		DomainDefinitionImpl domainDefinition = new DomainDefinitionImpl();
		return domainDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DomainServiceDeclaration createDomainServiceDeclaration() {
		DomainServiceDeclarationImpl domainServiceDeclaration = new DomainServiceDeclarationImpl();
		return domainServiceDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DomainServiceDefinition createDomainServiceDefinition() {
		DomainServiceDefinitionImpl domainServiceDefinition = new DomainServiceDefinitionImpl();
		return domainServiceDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExceptionDeclaration createExceptionDeclaration() {
		ExceptionDeclarationImpl exceptionDeclaration = new ExceptionDeclarationImpl();
		return exceptionDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TerminatorDefinition createTerminatorDefinition() {
		TerminatorDefinitionImpl terminatorDefinition = new TerminatorDefinitionImpl();
		return terminatorDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TerminatorServiceDeclaration createTerminatorServiceDeclaration() {
		TerminatorServiceDeclarationImpl terminatorServiceDeclaration = new TerminatorServiceDeclarationImpl();
		return terminatorServiceDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TerminatorServiceDefinition createTerminatorServiceDefinition() {
		TerminatorServiceDefinitionImpl terminatorServiceDefinition = new TerminatorServiceDefinitionImpl();
		return terminatorServiceDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public BuiltinLibraryDefinition createBuiltinLibraryDefinition() {
		BuiltinLibraryDefinitionImpl builtinLibraryDefinition = new BuiltinLibraryDefinitionImpl();
		return builtinLibraryDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Characteristic createCharacteristic() {
		CharacteristicImpl characteristic = new CharacteristicImpl();
		return characteristic;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypeParameter createTypeParameter() {
		TypeParameterImpl typeParameter = new TypeParameterImpl();
		return typeParameter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RangeTypeReference createRangeTypeReference() {
		RangeTypeReferenceImpl rangeTypeReference = new RangeTypeReferenceImpl();
		return rangeTypeReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectDeclaration createObjectDeclaration() {
		ObjectDeclarationImpl objectDeclaration = new ObjectDeclarationImpl();
		return objectDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectDefinition createObjectDefinition() {
		ObjectDefinitionImpl objectDefinition = new ObjectDefinitionImpl();
		return objectDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AttributeDefinition createAttributeDefinition() {
		AttributeDefinitionImpl attributeDefinition = new AttributeDefinitionImpl();
		return attributeDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IdentifierDefinition createIdentifierDefinition() {
		IdentifierDefinitionImpl identifierDefinition = new IdentifierDefinitionImpl();
		return identifierDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectServiceDeclaration createObjectServiceDeclaration() {
		ObjectServiceDeclarationImpl objectServiceDeclaration = new ObjectServiceDeclarationImpl();
		return objectServiceDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectServiceDefinition createObjectServiceDefinition() {
		ObjectServiceDefinitionImpl objectServiceDefinition = new ObjectServiceDefinitionImpl();
		return objectServiceDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RelationshipDefinition createRelationshipDefinition() {
		RelationshipDefinitionImpl relationshipDefinition = new RelationshipDefinitionImpl();
		return relationshipDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RegularRelationshipDefinition createRegularRelationshipDefinition() {
		RegularRelationshipDefinitionImpl regularRelationshipDefinition = new RegularRelationshipDefinitionImpl();
		return regularRelationshipDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AssocRelationshipDefinition createAssocRelationshipDefinition() {
		AssocRelationshipDefinitionImpl assocRelationshipDefinition = new AssocRelationshipDefinitionImpl();
		return assocRelationshipDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RelationshipEnd createRelationshipEnd() {
		RelationshipEndImpl relationshipEnd = new RelationshipEndImpl();
		return relationshipEnd;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SubtypeRelationshipDefinition createSubtypeRelationshipDefinition() {
		SubtypeRelationshipDefinitionImpl subtypeRelationshipDefinition = new SubtypeRelationshipDefinitionImpl();
		return subtypeRelationshipDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RelationshipNavigation createRelationshipNavigation() {
		RelationshipNavigationImpl relationshipNavigation = new RelationshipNavigationImpl();
		return relationshipNavigation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ObjectOrRole createObjectOrRole() {
		ObjectOrRoleImpl objectOrRole = new ObjectOrRoleImpl();
		return objectOrRole;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EventDefinition createEventDefinition() {
		EventDefinitionImpl eventDefinition = new EventDefinitionImpl();
		return eventDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateDeclaration createStateDeclaration() {
		StateDeclarationImpl stateDeclaration = new StateDeclarationImpl();
		return stateDeclaration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateDefinition createStateDefinition() {
		StateDefinitionImpl stateDefinition = new StateDefinitionImpl();
		return stateDefinition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TransitionTable createTransitionTable() {
		TransitionTableImpl transitionTable = new TransitionTableImpl();
		return transitionTable;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TransitionRow createTransitionRow() {
		TransitionRowImpl transitionRow = new TransitionRowImpl();
		return transitionRow;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TransitionOption createTransitionOption() {
		TransitionOptionImpl transitionOption = new TransitionOptionImpl();
		return transitionOption;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ParameterMode createParameterModeFromString(EDataType eDataType, String initialValue) {
		ParameterMode result = ParameterMode.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertParameterModeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Visibility createVisibilityFromString(EDataType eDataType, String initialValue) {
		Visibility result = Visibility.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertVisibilityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Conditionality createConditionalityFromString(EDataType eDataType, String initialValue) {
		Conditionality result = Conditionality.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertConditionalityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Multiplicity createMultiplicityFromString(EDataType eDataType, String initialValue) {
		Multiplicity result = Multiplicity.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertMultiplicityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EventType createEventTypeFromString(EDataType eDataType, String initialValue) {
		EventType result = EventType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertEventTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateType createStateTypeFromString(EDataType eDataType, String initialValue) {
		StateType result = StateType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertStateTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TransTableType createTransTableTypeFromString(EDataType eDataType, String initialValue) {
		TransTableType result = TransTableType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertTransTableTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StructurePackage getStructurePackage() {
		return (StructurePackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static StructurePackage getPackage() {
		return StructurePackage.eINSTANCE;
	}

} //StructureFactoryImpl
