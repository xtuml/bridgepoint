.//=====================================================================
.//
.// File:      $RCSfile: create_modeladapter_java.arc,v $
.// Version:   $Revision: 1.20 $
.// Modified:  $Date: 2013/01/17 03:28:52 $
.//
.// (c) Copyright 2004-2014 by Mentor Graphics Corp. All rights reserved.
.//
.//=====================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=====================================================================
.//
.// This archetype is responsible for creating the ModelAdapter.java
.// file for org.xtuml.bp.ui.text.
.//
.// Get the file contents
.//
.invoke arc_env = GET_ENV_VAR( "PTC_MC_ARC_DIR" )
.assign mc_archetypes = arc_env.result
.if ( mc_archetypes == "" )
  .print "\nERROR: Environment variable PTC_MC_ARC_DIR not set."
  .exit 100
.end if
.//
.include "${mc_archetypes}/arch_utils.inc"
.include "arc/create_util.inc"
.//
.assign core_package = "org.xtuml.bp.core"
.assign path = "org.xtuml.bp.ui.text"
.//
.invoke result = get_editor_obj_set()
.assign dsc_obj_set = result.dsc_obj_set
.assign oal_obj_set = result.oal_obj_set
.assign both_obj_set = result.both_obj_set
.assign both_source_set = result.dsc_source_set | result.oal_source_set
.assign all_set = both_obj_set | both_source_set
.assign oal_set = result.oal_source_set | oal_obj_set
.invoke result = get_model_adapter_class_name()
.assign modelAdapterClass = result.class_name
.invoke result = get_test_class_name()
.assign interfacename = result.body
.//  
//======================================================================
//
// File: ${path}/${modelAdapterClass}.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.20 $$
//
// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
//
//======================================================================
//
// This class handles the input to the Description and Activity
// text editors.
//
package ${path};
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.*;
import org.xtuml.bp.core.inspector.IModelClassInspector;
import org.xtuml.bp.core.inspector.ModelInspector;

public class ${modelAdapterClass}
{
  private ${modelAdapterClass}() {};
  protected static String getName(Object input) {
	String result = ""; //$$NON-NLS-1$$
	Class inputClass = input.getClass();
	Class[] type = new Class[0];
	Method getName = null;
	try {
		getName = inputClass.getMethod("Get_label", type); //$$NON-NLS-1$$
	} catch (NoSuchMethodException e1) {
			try {
		getName = inputClass.getMethod("getName", type); //$$NON-NLS-1$$
			} catch (NoSuchMethodException e2) {
		// There is no accessor, try an explicit operation . . .
		try {
			getName = inputClass.getMethod("Get_name", type); //$$NON-NLS-1$$
				} catch (NoSuchMethodException e3) {
					TextPlugin.logError("Class does not implement any name accessor", e3); //$$NON-NLS-1$$
		}
	    }
    }
    if ( getName != null )
    {
		try {
		  Object[] args = new Object[0];
		  result = (String) getName.invoke(input, args);
		} catch (InvocationTargetException e) {
		  TextPlugin.logError("Invocation Target exception in getName", e); //$$NON-NLS-1$$
		} catch (IllegalAccessException e) {
          TextPlugin.logError("Illegal Access exception in getName", e); //$$NON-NLS-1$$
		}
        return result;
	}
	else
	{
	  return null;
	}
  }
  
  public static interface IModelElementAdapter {
	public ModelElementID createModelElementID(NonRootModelElement modelElement);
	public NonRootModelElement resolveModelElement(ModelElementID modelElementID);
    public String getName(NonRootModelElement modelElement);
  }
  
  static Map adapterRegistry = new HashMap();

  public static IModelElementAdapter getModelElementAdapter(NonRootModelElement modelElement){
    if (modelElement == null){
        throw new IllegalArgumentException("modelElement cannot be null"); //$$NON-NLS-1$$
    }
    return getModelElementAdapter(modelElement.getClass().getName());
  }
  
  public static IModelElementAdapter getModelElementAdapter(String type){
    return (IModelElementAdapter)adapterRegistry.get(type);
  }

  static{
.for each obj in all_set
  .invoke result = get_class_name(obj)
  .assign classname = result.body
    adapterRegistry.put("${core_package}.${classname}", new ${classname}Adapter()); //$$NON-NLS-1$$
.end for
  }
  
.for each obj in all_set
  .invoke result = get_class_name(obj)
  .assign classname = result.body
  .invoke result = get_query_class_name(obj)
  .assign testclass = result.body
  .invoke result = get_test_class_name()
  .assign interfacename = result.body
  .invoke result = get_instance_accessor(obj)
  .assign instancename = result.body
  .invoke result = get_id_attr_set(obj)
  .assign id_attr_set = result.attr_set
  
  public static final class ${classname}Adapter implements IModelElementAdapter{
    public ModelElementID createModelElementID(NonRootModelElement modelElement){
       if(!(modelElement instanceof ${classname})){
         throw new IllegalArgumentException("Model element is not of type ${classname}"); //$$NON-NLS-1$$
       }
       
       ModelElementID id = (new ${testclass}((${classname})modelElement)).createModelElementID();
       id.modelElement = modelElement;
       id.modelRoot = (Ooaofooa)(modelElement.getModelRoot());
       // update the cached name
       id.getLastValidName();
       return id;
    }
        
    public NonRootModelElement resolveModelElement(ModelElementID modelElementID){
        if(!"${core_package}.${classname}".equals(modelElementID.getType())){ //$$NON-NLS-1$$
          throw new IllegalArgumentException("Given ModelElementID does not represent type ${classname}" ); //$$NON-NLS-1$$
        }
      
        Ooaofooa modelRoot = Ooaofooa.getInstance(modelElementID.getModelRootID(), false);
        if(modelRoot == null){
             return null;
        }

        String componentPath = modelElementID.getComponentPath();
        if(componentPath != null){
            IFile f = ResourcesPlugin.getWorkspace().getRoot().getFile(new Path(componentPath));
            try {
                // if the resource tree isn't locked, then we can do a refresh
                // the resource tree has locking conflicts during unit tests,
                // so only check this if we are running a unit test
                if ( !ResourcesPlugin.getWorkspace().isTreeLocked()) {
                    f.refreshLocal(0, new NullProgressMonitor());
                }
            } catch (CoreException e) {
                TextPlugin.logError("Unable to refresh component file", e);
            }
            if (!f.exists())
            {
                return null;
            }
            else
            {
                PersistenceManager.getDefaultInstance().loadAndFinishComponent(componentPath);
                PersistableModelComponent pmc = PersistenceManager.findComponent(new Path(componentPath));
                if (pmc == null) {
                    return null;
                }
            }
        }
        return ${classname}.${instancename}(modelRoot, new ${testclass}(modelElementID));
    }
        
	.assign found = false
	.assign is_oal = false;
	.select many attr_set related by obj->O_ATTR[R102]
    .select any attr from instances of O_ATTR where (false)
	.for each attr in attr_set
	  .if ("$l{attr.name}" == "name")
	    .assign found = true
	    .break for
	  .end if
	  .for each oal in oal_set
	  	.if ( obj.Key_Lett == oal.Key_Lett)
	  		.assign is_oal = true;
	  	.end if
	  .end for    
	.end for    
	.if (not found )
	private static String m_getNameValid = "no"; //$$NON-NLS-1$$
	.end if
	public final String getName(NonRootModelElement modelElement)
	{
	  if(modelElement == null){
	    return "${obj.Name}"; 
	  }
	  if(!(modelElement instanceof ${classname})){
	    throw new IllegalArgumentException("argument should be instanceof ${classname}"); //$$NON-NLS-1$$
	  }
	  ${classname} obj = (${classname})modelElement;
	.if (found)
	  .if (is_oal)
		try{
	  	ModelInspector inspector = new ModelInspector();
		IModelClassInspector elementInspector = inspector.getInspector(obj .getClass());
			NonRootModelElement parent = (NonRootModelElement) elementInspector .getParent(obj);
	    .if (((obj.Key_Lett == "SPR_RO") or (obj.Key_Lett == "SPR_RS")) or ((obj.Key_Lett == "SPR_PO") or (obj.Key_Lett == "SPR_PS")) ) 
	    .// return the Port as parent instead of interface reference for interface operations and signals instead of Interface Reference
	    	elementInspector = inspector.getInspector(parent.getClass());
			parent = (NonRootModelElement) elementInspector .getParent(parent);
		.end if	    
	    return parent.getName() + "::" + obj.get$cr{attr.name}(); //$$NON-NLS-1$$
		}catch(Exception e){
			return obj.get$cr{attr.name}(); //  Return the element name if the parent element is not found
		}
	  .else
	  return obj.get$cr{attr.name}(); //$$NON-NLS-1$$
	  .end if
	.else
	  if ( m_getNameValid != null && m_getNameValid.equals("no") ) //$$NON-NLS-1$$
	  {
	    m_getNameValid = ModelAdapter.getName( obj );
	    if ( m_getNameValid != null )
		  m_getNameValid = "yes"; //$$NON-NLS-1$$
	  }
	  if ( m_getNameValid != null && m_getNameValid.equals("yes") ) //$$NON-NLS-1$$
	  .if (is_oal)
	  	{
	  	try{
	  	ModelInspector inspector = new ModelInspector();
		IModelClassInspector elementInspector = inspector.getInspector(obj .getClass());
		NonRootModelElement parent = (NonRootModelElement) elementInspector .getParent(obj);
	    .if (obj.Key_Lett == "SM_TXN")
	    	.// Return the model class as parent for transition
	    	elementInspector = inspector.getInspector(parent.getClass());
			parent = (NonRootModelElement) elementInspector .getParent(parent);
	    .end if
	    return parent.getName() + "::" + ModelAdapter.getName( obj ); //$$NON-NLS-1$$
	    }catch(Exception e){
			return ModelAdapter.getName( obj ); //  Return the element name if the parent element is not found
		}
		}
	  .else
	    return ModelAdapter.getName( obj ); 
	  .end if
	  else
	    return "UNKNOWN"; 
	.end if
	}
  }
  
  public static final class ${testclass}
    implements ${interfacename}
  {
    private final static String type = "${core_package}.${classname}"; //$$NON-NLS-1$$
    private String modelRootID = null;
    private String componentPath;
  .for each attr in id_attr_set
    .invoke result = get_core_datatype(attr)
    .assign cdt = result.cdt
    .if (cdt.core_typ == 2)
    private long $cr{attr.name} = 0;
    .elif (cdt.core_typ == 5)
    private UUID $cr{attr.name} = IdAssigner.NULL_UUID;
    .elif (cdt.core_typ == 4)
    private String $cr{attr.name} = ""; //$$NON-NLS-1$$
    .else
      .print "Invalid datatype for attribute ${obj.name}.${attr.name}"
    private Xxxxxx $cr{attr.name};
    .end if
  .end for
    public ${testclass}(${classname} inst)
    {
      modelRootID = inst.getModelRoot().getId();
      componentPath = inst.getContent();
  .for each attr in id_attr_set
      .select one rattr related by attr->O_RATTR[R106]
      .if(not_empty rattr)
         $cr{attr.name} = inst.get$cr{attr.name}();
         if(IdAssigner.NULL_UUID.equals($cr{attr.name}))
         {
            $cr{attr.name} = inst.get$cr{attr.name}CachedValue();
         }       
      .else
        $cr{attr.name} = inst.get$cr{attr.name}();
      .end if
  .end for
    }
    public ${testclass}(ModelElementID set)
    {
      if (set.getType().equals(type))
      {
        modelRootID = set.getModelRootID();
  .assign index = -1
  .for each attr in id_attr_set
    .assign index = index + 1
    .invoke result = get_core_datatype(attr)
    .assign cdt = result.cdt
    .if (cdt.core_typ == 2)
        $cr{attr.name} = Long.parseLong(set.getId(${index}));
    .elif (cdt.core_typ == 5)
        $cr{attr.name} = UUID.fromString(set.getId(${index}));
    .elif (cdt.core_typ == 4)
        $cr{attr.name} = set.getId(${index};
    .else
        $cr{attr.name} = (Xxxxxx)set.getId(${index});
    .end if
  .end for
      }else{
        throw new IllegalArgumentException("Mis type argument"); //$$NON-NLS-1$$
      }
    }
    public ModelElementID createModelElementID()
    {
  .assign count = cardinality id_attr_set
      ModelElementID id = new ModelElementID(modelRootID, type, componentPath);
  .for each attr in id_attr_set
    .invoke result = get_core_datatype(attr)
    .assign cdt = result.cdt
    .if (cdt.core_typ == 4)   .// string
      id.add($cr{attr.name});
    .else
      id.add(String.valueOf($cr{attr.name}));
    .end if
  .end for
      return id;
    }
    public boolean evaluate(Object inst)
    {
      ${classname} candidate = (${classname}) inst;
      return\
  .assign sep = "   "
  .for each attr in id_attr_set
        .invoke ibaaui = is_base_attribute_a_unique_id(attr)
        .if (ibaaui.is_unique_id)
        ${sep}candidate.get$cr{attr.name}().equals($cr{attr.name})\
        .else
        ${sep}candidate.get$cr{attr.name}() == $cr{attr.name}\
        .end if
    .assign sep = "&& "
  .end for
;
    }
  }
.end for
}
.emit to file "src/org/xtuml/bp/ui/text/ModelAdapter.java"
.//
