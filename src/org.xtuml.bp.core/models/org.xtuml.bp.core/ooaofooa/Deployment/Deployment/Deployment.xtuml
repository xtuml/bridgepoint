-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("591815c2-2b96-4e7d-9d76-435b98b2b555",
	'Deployment',
	1650,
	'D_DEPL',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("471c4fb2-ef47-4a71-a3b1-ba782dda718c",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'dispose',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one pe related by self->PE_PE[R8001];
if(not_empty pe)
  // PE_PE.dispose() will call back into this function at which time the
  // rest of the activity will execute.
  pe.dispose();
  return;
end if;

select many terminators related by self->D_TERM[R1650];
for each terminator in terminators
  unrelate terminator from self across R1650;
  terminator.dispose();
end for;

delete object instance self;',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("18863fe4-fb2e-40a6-94fe-c3471587406d",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_compartment_text',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
if (param.at == Justification::Center_in_X)
  result = "«deployment»";
elif (param.at == Justification::Center)
  result = self.Name;
  select one pe related by self->PE_PE[R8001];
  if not_empty pe
    result = pe.getVisibilityAdornment() + result;
  end if;
end if;
return result;',
	1,
	'',
	"471c4fb2-ef47-4a71-a3b1-ba782dda718c",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("66dbdf08-36d9-4b2e-ae68-501c56310f08",
	"18863fe4-fb2e-40a6-94fe-c3471587406d",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7c836578-499f-49cd-a2c5-9b21471c1be0",
	'');
INSERT INTO O_TPARM
	VALUES ("422e069b-56a3-4646-98c9-c1ed344bc615",
	"18863fe4-fb2e-40a6-94fe-c3471587406d",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"66dbdf08-36d9-4b2e-ae68-501c56310f08",
	'');
INSERT INTO O_TPARM
	VALUES ("7c836578-499f-49cd-a2c5-9b21471c1be0",
	"18863fe4-fb2e-40a6-94fe-c3471587406d",
	'at',
	"a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("6bbda389-4cbe-4836-b763-400ab7bb2bad",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_compartments',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"18863fe4-fb2e-40a6-94fe-c3471587406d",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("3495ff63-6780-41ed-b0db-804a5559230b",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_entries',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"6bbda389-4cbe-4836-b763-400ab7bb2bad",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("2ec13eb1-f1ec-4c81-8f28-eaea4462c986",
	"3495ff63-6780-41ed-b0db-804a5559230b",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("578b4470-64cc-44fc-b63d-1c4cc1a1adef",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_ooa_id',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.Deployment_ID;',
	1,
	'',
	"3495ff63-6780-41ed-b0db-804a5559230b",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("8bfa8120-0ed6-4fb0-b698-91c3ae4f04eb",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_style',
	'',
	"6e636321-0fd1-4577-b185-e4d76b0d0c71",
	1,
	'return Style::Box;',
	1,
	'',
	"578b4470-64cc-44fc-b63d-1c4cc1a1adef",
	0,
	0);
INSERT INTO S_DT_PROXY
	VALUES ("6e636321-0fd1-4577-b185-e4d76b0d0c71",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("b38d46aa-6551-4875-9bb4-5890954207af",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'get_text_style',
	'',
	"6e636321-0fd1-4577-b185-e4d76b0d0c71",
	1,
	'return Style::None;',
	1,
	'',
	"8bfa8120-0ed6-4fb0-b698-91c3ae4f04eb",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("35e8920e-f4ac-4f82-a862-623b2729581b",
	"b38d46aa-6551-4875-9bb4-5890954207af",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"ce9cfe5c-5bc2-46ca-a473-63fd661e8795",
	'');
INSERT INTO O_TPARM
	VALUES ("962ca0e2-9bc3-46bb-883d-4bbdef6a2cb8",
	"b38d46aa-6551-4875-9bb4-5890954207af",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"35e8920e-f4ac-4f82-a862-623b2729581b",
	'');
INSERT INTO O_TPARM
	VALUES ("ce9cfe5c-5bc2-46ca-a473-63fd661e8795",
	"b38d46aa-6551-4875-9bb4-5890954207af",
	'at',
	"a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a09ac033-b2aa-4100-a567-107e93212b25",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	1,
	'return this;',
	0,
	'',
	"b38d46aa-6551-4875-9bb4-5890954207af",
	0,
	0);
INSERT INTO S_DT_PROXY
	VALUES ("bc3722c8-5188-4529-8519-cf9eb9816b17",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("b96cf728-832e-421f-88a1-2df5896534a4",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'downgradeCheck',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	1,
	'',
	"a09ac033-b2aa-4100-a567-107e93212b25",
	0,
	0);
INSERT INTO O_TFR
	VALUES ("ca247de4-26e7-4a40-8dc2-5b61df14a6c9",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'importFromComponent',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_c = param.c_c;

// for each required port in the component, either update an existing terminator or create a new one
select many target_ports related by c_c->C_PO[R4010]->C_IR[R4016]->C_R[R4009]->C_IR[R4009]->C_PO[R4016];
for each target_port in target_ports
  self.createTerminatorFromPort( c_po:target_port );
end for;

select many target_ports related by c_c->C_PO[R4010]->C_IR[R4016]->C_P[R4009]->C_IR[R4009]->C_PO[R4016];
if (cardinality target_ports == 1)
  // if there is exactly one provided port, this is the provided terminator
  for each target_port in target_ports
    self.createTerminatorFromPort( c_po:target_port );
    break;
  end for;
elif (cardinality target_ports > 1)
  // search for a provided port of the same name as the component for public services
  select any target_port related by c_c->C_PO[R4010]->C_IR[R4016]->C_P[R4009]->C_IR[R4009]->C_PO[R4016] where ( selected.Name == c_c.Name );
  if (not_empty target_port)
    self.createTerminatorFromPort( c_po:target_port );
  end if;
end if;

// add dependency
select one s_sys related by self->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
Util::addDomainDependency( s_sys:s_sys, dependency:c_c );',
	1,
	'',
	"b96cf728-832e-421f-88a1-2df5896534a4",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("0bb74a1e-d184-4285-a855-2cfc98c4c64d",
	"ca247de4-26e7-4a40-8dc2-5b61df14a6c9",
	'c_c',
	"493bbbec-fd81-4863-a436-77e6f08bd55a",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("493bbbec-fd81-4863-a436-77e6f08bd55a",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Component>',
	'',
	'',
	'../../Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("8b7fd211-8a05-43af-8f67-df50a51297b5",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'importFromFile',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'filename = param.filename;

domain_name = "";

select any existing_domain_term from instances of D_TERM where false;
select any domain_term from instances of D_TERM where false;

smasl_iterator = Util::parseMASLFile( filename:filename );
smasl = Util::getNextString( string_iterator:smasl_iterator );
while ( "" != smasl )
  element = Util::stringSplit( s:smasl, delimiter:",", i:0 );
  the_rest = Util::stringSplit( s:smasl, delimiter:",", i:1 );
  if ( "domain" == element and ",,,,,,," == the_rest )
    if (not_empty existing_domain_term)
      existing_domain_term.mergeWith(d_term:domain_term);
    end if;
  elif ( "domain" == element )
    domain_name = Util::stringSplit( s:the_rest, delimiter:",", i:0 );
    select any existing_domain_term related by self->D_TERM[R1650] where ( selected.Domain_Name == domain_name and selected.Terminator_Name == "" );
    create object instance domain_term of D_TERM;
    relate domain_term to self across R1650;
    domain_term.Domain_Name = domain_name;
    domain_term.Terminator_Name = "";
    domain_term.Descrip = "";
    domain_term.Provider = true;
  elif ( "terminator" == element )
    term_name = Util::stringSplit( s:the_rest, delimiter:",", i:0 );
    if ( "" != term_name and "" != domain_name )
      self.createTerminatorFromSMASL( term_name:term_name, domain_name:domain_name, smasl_iterator:smasl_iterator );
    end if;
  elif ( "type" == element and not (",,,,,,," == the_rest) )
    type_name = Util::stringSplit( s:the_rest, delimiter:",", i:0 );
    type_ref = self.createTypeReference( type_name:domain_name + "::" + type_name );
  elif ( "routine" == element )
    visibility = Util::stringSplit( s:Util::stringSplit( s:Util::stringSplit( s:the_rest, delimiter:",", i:1 ), delimiter:",", i:1 ), delimiter:",", i:0 );
    service_name = Util::stringSplit( s:Util::stringSplit( s:Util::stringSplit( s:Util::stringSplit( s:the_rest, delimiter:",", i:1 ), delimiter:",", i:1 ), delimiter:",", i:1 ), delimiter:",", i:0 );
    if ( "" != service_name and "public" == visibility )
      domain_term.createServiceFromSMASL( service_name:service_name, smasl_iterator:smasl_iterator );
    end if;
  else
    // ignore line
  end if;
  smasl = Util::getNextString( string_iterator:smasl_iterator );
end while;

// add dependency
select one s_sys related by self->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
Util::addDependency( s_sys:s_sys, dependency:filename );',
	1,
	'',
	"ca247de4-26e7-4a40-8dc2-5b61df14a6c9",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("402a6935-35c5-46c6-a83b-1d4d35a1544d",
	"8b7fd211-8a05-43af-8f67-df50a51297b5",
	'filename',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("f3d7f2b4-8bf6-4646-bb6a-9638d0777e59",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'canAssignToComp',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'return true;',
	1,
	'',
	"8b7fd211-8a05-43af-8f67-df50a51297b5",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("5661b88b-6a73-41c6-bfdd-be373bcd1b5f",
	"f3d7f2b4-8bf6-4646-bb6a-9638d0777e59",
	'Id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'The id of the C_C instance to test.');
INSERT INTO O_TPARM
	VALUES ("196ce0b2-0b63-4b80-9d12-619a9f90c060",
	"f3d7f2b4-8bf6-4646-bb6a-9638d0777e59",
	'checkExistingType',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"5661b88b-6a73-41c6-bfdd-be373bcd1b5f",
	'');
INSERT INTO O_TFR
	VALUES ("66da6496-4b92-4f85-b29b-2a22739c0458",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'createTerminatorFromPort',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'c_po = param.c_po;
select one c_c related by c_po->C_C[R4010];
select any c_r related by c_po->C_IR[R4016]->C_R[R4009];
select any c_p related by c_po->C_IR[R4016]->C_P[R4009];
select one package related by c_c->PE_PE[R8001]->EP_PKG[R8000];
select one s_sys related by package->S_SYS[R1405];

select any existing_term related by self->D_TERM[R1650] where ( selected.Domain_Name == c_c.Name and ( (not_empty c_r and selected.Terminator_Name == c_po.Name) or
                                                                                                       (not_empty c_p and selected.Terminator_Name == "") ) );

// create the terminator
create object instance term of D_TERM;
relate term to self across R1650;
term.Domain_Name = c_c.Name;
term.Terminator_Name = c_po.Name;
term.Key_Lett = c_c.Key_Lett;
term.Descrip = "";
term.Provider = false;
if(not_empty existing_term and existing_term.Implementation_System != "")
  term.Implementation_System = existing_term.Implementation_System;
else
  term.Implementation_System = s_sys.Name;
end if;

select any empty_spr_ro from instances of SPR_RO where false;
select any empty_spr_rs from instances of SPR_RS where false;
select any empty_spr_po from instances of SPR_PO where false;
select any empty_spr_ps from instances of SPR_PS where false;
if (not_empty c_r)
  if ( not_empty c_r )
    term.Descrip = c_r.Descrip;
  end if;

  // for each message, create a terminator service
  select many spr_ros related by c_r->SPR_REP[R4500]->SPR_RO[R4502];
  for each spr_ro in spr_ros
    term.createServiceFromOperationOrSignal( spr_ro:spr_ro, spr_rs:empty_spr_rs, spr_po:empty_spr_po, spr_ps:empty_spr_ps );
  end for;
  select many spr_rss related by c_r->SPR_REP[R4500]->SPR_RS[R4502];
  for each spr_rs in spr_rss
    term.createServiceFromOperationOrSignal( spr_ro:empty_spr_ro, spr_rs:spr_rs, spr_po:empty_spr_po, spr_ps:empty_spr_ps );
  end for;
elif (not_empty c_p)
  term.Terminator_Name = "";
  if ( not_empty c_p )
    term.Descrip = c_p.Descrip;
  end if;
  term.Provider = true;

  // for each message, create a terminator service
  select many spr_pos related by c_p->SPR_PEP[R4501]->SPR_PO[R4503];
  for each spr_po in spr_pos
    term.createServiceFromOperationOrSignal( spr_ro:empty_spr_ro, spr_rs:empty_spr_rs, spr_po:spr_po, spr_ps:empty_spr_ps );
  end for;
  select many spr_pss related by c_p->SPR_PEP[R4501]->SPR_PS[R4503];
  for each spr_ps in spr_pss
    term.createServiceFromOperationOrSignal( spr_ro:empty_spr_ro, spr_rs:empty_spr_rs, spr_po:empty_spr_po, spr_ps:spr_ps );
  end for;
end if;

// merge with existing terminator
if (not_empty existing_term)
  existing_term.mergeWith( d_term:term );
end if;',
	1,
	'',
	"f3d7f2b4-8bf6-4646-bb6a-9638d0777e59",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("65d5a373-32d4-4f80-8d23-01348494d574",
	"66da6496-4b92-4f85-b29b-2a22739c0458",
	'c_po',
	"60534880-b545-4f4c-9846-93e40f1e0d1d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("60534880-b545-4f4c-9846-93e40f1e0d1d",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Port>',
	'',
	'',
	'../../Component/Component.xtuml');
INSERT INTO O_TFR
	VALUES ("a4ba5553-980c-493a-aefe-e0196b1312d2",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'createTerminatorFromSMASL',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'term_name = param.term_name;
domain_name = param.domain_name;
smasl_iterator = param.smasl_iterator;

select any existing_term related by self->D_TERM[R1650] where ( selected.Domain_Name == domain_name and selected.Terminator_Name == term_name );

// create the terminator
create object instance term of D_TERM;
relate term to self across R1650;
term.Domain_Name = domain_name;
term.Terminator_Name = term_name;
term.Descrip = "";
term.Provider = false;

// for each message, create a terminator service
smasl = Util::getNextString( string_iterator:smasl_iterator );
while ( "" != smasl )
  element = Util::stringSplit( s:smasl, delimiter:",", i:0 );
  the_rest = Util::stringSplit( s:smasl, delimiter:",", i:1 );
  if ( "routine" == element )
    service_name = Util::stringSplit( s:Util::stringSplit( s:Util::stringSplit( s:Util::stringSplit( s:the_rest, delimiter:",", i:1 ), delimiter:",", i:1 ), delimiter:",", i:1 ), delimiter:",", i:0 );
    if ( "" != service_name )
      term.createServiceFromSMASL( service_name:service_name, smasl_iterator:smasl_iterator );
    end if;
  elif ( "terminator" == element and ",,,,,,," == the_rest )
    break;
  else
    // ignore line
  end if;
  smasl = Util::getNextString( string_iterator:smasl_iterator );
end while;

// merge with existing terminator
if (not_empty existing_term)
  existing_term.mergeWith( d_term:term );
end if;',
	1,
	'',
	"66da6496-4b92-4f85-b29b-2a22739c0458",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("6ba0efd9-08d2-44ac-b9a7-c271cf021985",
	"a4ba5553-980c-493a-aefe-e0196b1312d2",
	'term_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("712a86fc-67aa-4b1e-bc7d-14052164b2c3",
	"a4ba5553-980c-493a-aefe-e0196b1312d2",
	'domain_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6ba0efd9-08d2-44ac-b9a7-c271cf021985",
	'');
INSERT INTO O_TPARM
	VALUES ("66c0a499-8b83-4915-9af9-3cc28db02c7f",
	"a4ba5553-980c-493a-aefe-e0196b1312d2",
	'smasl_iterator',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	0,
	'',
	"712a86fc-67aa-4b1e-bc7d-14052164b2c3",
	'');
INSERT INTO O_TFR
	VALUES ("dd9ffef6-4fed-4b4e-86a2-932a96981365",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'addTypeReference',
	'',
	"35693523-ff0b-41f3-acda-25b595c50a81",
	1,
	'// This operation creates a MASL style type reference for the deployment. If
// the input data type needs to be qualified, a new reference is created.

s_dt = param.s_dt;        
select one s_cdt related by s_dt->S_CDT[R17];
if ( not_empty s_dt )     
  if (empty s_cdt)
    type_name = s_dt.Name;
    // if the type is already qualified with a domain name, no need to qualify it again
    if ( -1 == Util::indexOf( haystack:s_dt.Name, needle:"::" ) )
      // Otherwise, foreign.  Find owning domain.
      select any domain_c_c from instances of C_C where false;
      select one containing_pkg related by s_dt->PE_PE[R8001]->EP_PKG[R8000];
      // if containing_pkg is empty, we are either directly under a system or inside a component. 
      // if inside a component, this type is private anyway (and cannot be referenced from another domain).
      // if under the system we need to break out to avoid an infinite loop scenario.
      while ( empty domain_c_c and not_empty containing_pkg )
        // find the nearest sibling component. if there are more than one, show an error
        select many domain_c_cs related by containing_pkg->PE_PE[R8000]->C_C[R8001];
        if ( cardinality domain_c_cs > 1 ) 
          //TRACE::log( id:76, flavor:"warning", message:"Multiple domain components found for type: " + s_dt.Name );
          break;
        else
          for each c_c in domain_c_cs     
            domain_c_c = c_c; // because of the above check, this only gets executed once
          end for;
        end if;
        select one containing_pkg related by containing_pkg->PE_PE[R8001]->EP_PKG[R8000];
        if ( empty containing_pkg and empty domain_c_c )
          //TRACE::log( id:75, flavor:"warning", message:"No domain component found for type: " + s_dt.Name );
        end if;
      end while;
      // qualify the type name with the name of the domain
      if ( not_empty domain_c_c )
        type_name = domain_c_c.Name + "::" + s_dt.Name;
      end if;
    else
      // already has qualifier
    end if;
    s_dt = self.createTypeReference( type_name:type_name );
  end if;
end if;

return s_dt;',
	1,
	'',
	"a4ba5553-980c-493a-aefe-e0196b1312d2",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("928b5e71-f25c-4c7c-a37b-604d8a9d0c3d",
	"dd9ffef6-4fed-4b4e-86a2-932a96981365",
	's_dt',
	"35693523-ff0b-41f3-acda-25b595c50a81",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("35693523-ff0b-41f3-acda-25b595c50a81",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Data Type>',
	'',
	'',
	'../../Domain/Domain.xtuml');
INSERT INTO O_TFR
	VALUES ("395dae24-b839-41bf-a5e0-a6158baa7d56",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'createTypeReference',
	'',
	"35693523-ff0b-41f3-acda-25b595c50a81",
	1,
	'// This operation creates a MASL style type reference for the deployment. A new
// UDT is created in a pacakge called ''Shared'' which is a sibling to the
// deployment. The new UDT is based on MASLtype. If MASLtype does not exist, it
// is created.

// get MASLtype
select one s_sys related by self->PE_PE[R8001]->EP_PKG[R8000]->S_SYS[R1405];
select any types_package related by s_sys->EP_PKG[R1401] where ( selected.Name == "types" );
if (empty types_package)
  create object instance types_package of EP_PKG;
  create object instance pe of PE_PE;
  relate pe to types_package across R8001;
  relate types_package to s_sys across R1401;
  relate types_package to s_sys across R1405;
  pe.type = ElementTypeConstants::PACKAGE;
  pe.initialize();
  types_package.Name = "types";
end if;
select any masl_type related by types_package->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == "MASLtype" );
if (empty masl_type)
  // Create the new data type
  create object instance pe of PE_PE;
  relate pe to types_package across R8000;
  pe.type = ElementTypeConstants::DATATYPE;
  pe.initialize();
  create object instance masl_type of S_DT;
  relate masl_type to pe across R8001;
  masl_type.Name = "MASLtype";
  create object instance udt of S_UDT;
  relate masl_type to udt across R17;
  // Set core type to string
  dt_id = s_sys.getCoreTypeId(name:"string");
  select any string_pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one string_dt related by string_pe->S_DT[R8001]; 
  relate udt to string_dt across R18;
end if;

// get ''Shared'' package
select one parent_package related by self->PE_PE[R8001]->EP_PKG[R8000];
select any shared_package related by parent_package->PE_PE[R8000]->EP_PKG[R8001] where ( selected.Name == "Shared" );
if (empty shared_package)
  create object instance shared_package of EP_PKG;
  create object instance pe of PE_PE;
  relate shared_package to pe across R8001;
  relate shared_package to s_sys across R1405;
  relate parent_package to pe across R8000;
  pe.type = ElementTypeConstants::PACKAGE;
  pe.initialize();
  shared_package.Name = "Shared";
end if;

// create new type reference
select any s_dt related by shared_package->PE_PE[R8000]->S_DT[R8001] where ( selected.Name == param.type_name );
if (empty s_dt)
  create object instance pe of PE_PE;
  relate pe to shared_package across R8000;
  pe.type = ElementTypeConstants::DATATYPE;
  pe.initialize();
  create object instance s_dt of S_DT;
  relate s_dt to pe across R8001;
  s_dt.Name = param.type_name;
  create object instance udt of S_UDT;
  relate s_dt to udt across R17;
  // Set core type to MASLtype
  relate udt to masl_type across R18;
end if;

return s_dt;',
	1,
	'',
	"dd9ffef6-4fed-4b4e-86a2-932a96981365",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("0329301e-75e1-4bfe-a8a7-9e1f49ccc168",
	"395dae24-b839-41bf-a5e0-a6158baa7d56",
	'type_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("3b20f580-9628-4c73-9b6f-a22f8d029c5b",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'actionFilter',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if(param.name == "can")
  if(param.value == "createSequence")
    /**
  	 * Scenarios can only come from components that are
  	 * associated with this deployment already
  	 */
    select many terms related by self->D_TERM[R1650];
    for each term in terms
      select any system from instances of S_SYS where selected.Name == term.Implementation_System;
	  	if(not_empty system)
	  	  select any comp related by system->EP_PKG[R1405]->PE_PE[R8000]->C_C[R8001] where (selected.Name == term.Domain_Name);
	  	  if(not_empty comp)
	  	    // note top level packages are only considered at this point
		  		select any package related by comp->PE_PE[R8003]->EP_PKG[R8001] where selected.Name == "scenarios";
			  	if(not_empty package)
					  // at least one package may have importable scanerios
					  select many funcs related by package->PE_PE[R8000]->S_SYNC[R8001];
					  for each func in funcs
					  	if(func.isAvailableScenario(deployment: self))
					  		return  true;
					  	end if;
					  end for;
			  	end if;
			  end if;
	  	end if;
  	end for;
  end if;
end if;
return false;',
	1,
	'',
	"395dae24-b839-41bf-a5e0-a6158baa7d56",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("6b5d17e8-36b3-4160-9096-bcead8627dc8",
	"3b20f580-9628-4c73-9b6f-a22f8d029c5b",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("461f78c5-749a-4d73-abfb-6bc455d4ef56",
	"3b20f580-9628-4c73-9b6f-a22f8d029c5b",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6b5d17e8-36b3-4160-9096-bcead8627dc8",
	'');
INSERT INTO O_TFR
	VALUES ("e576ba58-d038-433c-9851-1a1bbfef8ca8",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'functionIsScenario',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'select any func from instances of S_SYNC where selected.Sync_ID == param.funcId;
return func.isAvailableScenario(deployment: self);',
	1,
	'',
	"3b20f580-9628-4c73-9b6f-a22f8d029c5b",
	0,
	0);
INSERT INTO O_TPARM
	VALUES ("96a96fdd-3711-4e28-88d5-c68cda063aea",
	"e576ba58-d038-433c-9851-1a1bbfef8ca8",
	'funcId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("878f52cc-11e3-443d-bafa-a983f951b9db",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'createOrReturnTerminatorForScenarios',
	'',
	"874ea64a-b4ce-4146-900c-e720c93634f2",
	1,
	'/**
	Create a terminator for the chosen scenarios.  
	
	In the WASL workflow a terminator represents a sequenced set of functions.  Each
	deployment may have only one terminator.
	
 */
 // only one allowed, check for existing one and return if present
 select any term related  by self->D_TERM[R1650] where selected.Terminator_Name == "Sequence";
 if(not_empty term)
 	return term;
 end if;
name = self.Name;
create object instance term of D_TERM;
relate term to self across R1650;
term.Domain_Name = name;
term.Terminator_Name = "Sequence";
term.Descrip = "";
term.Provider = false;
return term;',
	1,
	'',
	"e576ba58-d038-433c-9851-1a1bbfef8ca8",
	0,
	0);
INSERT INTO S_DT_PROXY
	VALUES ("874ea64a-b4ce-4146-900c-e720c93634f2",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref<Terminator>',
	'',
	'',
	'../Deployment.xtuml');
INSERT INTO O_TFR
	VALUES ("312a569a-0e1c-4d02-95bd-ea1d42208633",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	'rename',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'if(OS::remove_spaces(s:self.Name) == self.Key_Lett)
  self.Key_Lett = OS::remove_spaces(s:param.new_name);
end if;
select many terms related by self->D_TERM[R1650] where selected.Domain_Name == self.Name;
for each term in terms
  term.Domain_Name = param.new_name;
end for;
self.Name = param.new_name;
',
	1,
	'',
	"878f52cc-11e3-443d-bafa-a983f951b9db",
	0,
	1);
INSERT INTO O_TPARM
	VALUES ("2f7eb4b7-de5a-4bfd-a49c-9372fde36ebb",
	"312a569a-0e1c-4d02-95bd-ea1d42208633",
	'new_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_REF
	VALUES ("591815c2-2b96-4e7d-9d76-435b98b2b555",
	"5ada8d43-9e86-43cb-91a2-fac19a8e30f6",
	0,
	"5776264f-c7e9-4abe-839f-24d0750e007c",
	"08087bed-f0b1-4c84-b515-8662480ac484",
	"442d1a7e-1715-447c-81f6-83b1fd714830",
	"28f75ede-123b-4d84-8dcc-b0537a94aa4a",
	"354dbb09-a550-4f40-9bd6-0510c6669b8e",
	"054ca112-9677-4b33-acbe-afb0ecf50bfd",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Packageable Element',
	'Element_ID',
	'R8001');
INSERT INTO R_RGO_PROXY
	VALUES ("591815c2-2b96-4e7d-9d76-435b98b2b555",
	"08087bed-f0b1-4c84-b515-8662480ac484",
	"442d1a7e-1715-447c-81f6-83b1fd714830",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("5776264f-c7e9-4abe-839f-24d0750e007c",
	"5ada8d43-9e86-43cb-91a2-fac19a8e30f6",
	0,
	"08087bed-f0b1-4c84-b515-8662480ac484",
	"28f75ede-123b-4d84-8dcc-b0537a94aa4a",
	'../../Packageable Element/Packageable Element.xtuml');
INSERT INTO O_RATTR
	VALUES ("354dbb09-a550-4f40-9bd6-0510c6669b8e",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	"5776264f-c7e9-4abe-839f-24d0750e007c",
	"5ada8d43-9e86-43cb-91a2-fac19a8e30f6",
	0,
	'Element_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("5776264f-c7e9-4abe-839f-24d0750e007c",
	"5ada8d43-9e86-43cb-91a2-fac19a8e30f6",
	'../../Packageable Element/Packageable Element/Packageable Element.xtuml');
INSERT INTO O_ATTR
	VALUES ("354dbb09-a550-4f40-9bd6-0510c6669b8e",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	"00000000-0000-0000-0000-000000000000",
	'Deployment_ID',
	'',
	'',
	'Deployment_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("de497efa-e347-4a06-b4b9-10f7b9ac1b72",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_BATTR
	VALUES ("de497efa-e347-4a06-b4b9-10f7b9ac1b72",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_ATTR
	VALUES ("de497efa-e347-4a06-b4b9-10f7b9ac1b72",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	"354dbb09-a550-4f40-9bd6-0510c6669b8e",
	'Name',
	'Full Name:Deployment Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("b08fd23c-3b7b-4e5c-a981-9996acfa3055",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_BATTR
	VALUES ("b08fd23c-3b7b-4e5c-a981-9996acfa3055",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_ATTR
	VALUES ("b08fd23c-3b7b-4e5c-a981-9996acfa3055",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	"de497efa-e347-4a06-b4b9-10f7b9ac1b72",
	'Descrip',
	'Full Name:Deployment Description',
	'',
	'Descrip',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("40c7ee23-8b62-44bb-9694-60a8c194f7bd",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_BATTR
	VALUES ("40c7ee23-8b62-44bb-9694-60a8c194f7bd",
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_ATTR
	VALUES ("40c7ee23-8b62-44bb-9694-60a8c194f7bd",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	"b08fd23c-3b7b-4e5c-a981-9996acfa3055",
	'Key_Lett',
	'Full Name: Deployment Key Letters

In WASL Deployments match to Projects.

WASL has key letter identifiers on projects, therefore we create that map between xtUML and WASL here.  ',
	'',
	'Key_Lett',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_OIDA
	VALUES ("354dbb09-a550-4f40-9bd6-0510c6669b8e",
	"591815c2-2b96-4e7d-9d76-435b98b2b555",
	0,
	'Deployment_ID');
INSERT INTO O_ID
	VALUES (1,
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO O_ID
	VALUES (2,
	"591815c2-2b96-4e7d-9d76-435b98b2b555");
INSERT INTO PE_PE
	VALUES ("591815c2-2b96-4e7d-9d76-435b98b2b555",
	1,
	"de299e23-fa69-4e8b-8e7b-d07f3fe9a09e",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("de299e23-fa69-4e8b-8e7b-d07f3fe9a09e",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'Deployment',
	'',
	0,
	'../Deployment.xtuml');
