-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'State Machine State',
	502,
	'SM_STATE',
	'Represents a state in the state machine.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("68e8ad02-5475-4c27-b13a-44e32fa22df8",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_style',
	'A State is shown as a round cornered box.
-----------------------------------------------------------------------------------
Bridge:GD',
	"6e636321-0fd1-4577-b185-e4d76b0d0c71",
	1,
	'return Style::RoundBox;',
	1,
	'',
	"4a27a407-a227-420d-94fc-89d33625b328");
INSERT INTO S_DT_PROXY
	VALUES ("6e636321-0fd1-4577-b185-e4d76b0d0c71",
	"00000000-0000-0000-0000-000000000000",
	'Style',
	'The Style data type specifies the precise form a graphical element will take when drawn.
--------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("9cd02649-4c5d-4574-8d32-1789e172d95a",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_compartments',
	'A State has two compartments, one for the Name and one for the
Action Semantics.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 2;',
	1,
	'',
	"bf09afa3-5c8e-4f69-8f48-e00e66da2ef4");
INSERT INTO O_TFR
	VALUES ("bf09afa3-5c8e-4f69-8f48-e00e66da2ef4",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_compartment_text',
	'Returns the Name or Action Semantics depending on the compartment
requested.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'result = "";
//
// Compartment 1
//
if (param.comp_num == 1)
  if (param.at == Justification::Left)
    // State number needs leading space to clear
    // rounded corners of state symbol
    result = " " + GD::int_to_string(value:self.Numb) + ". " + self.Name;
  end if;
//
// Compartment 2
//
elif (param.comp_num == 2)
 if (param.at == Justification::Left)
    select one moore_action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
    if (not_empty moore_action)
      if (moore_action.Suc_Pars == ParseStatus::parseSuccessful)
        result = "entry/" + GD::newline();
      elif (moore_action.Suc_Pars == ParseStatus::parseUnsuccessful)
        result = "*** PARSE ERROR(S) ***" + GD::newline();
      end if;
      result = result + moore_action.Action_Semantics;
    end if;
  end if;
end if;
return result;',
	1,
	'',
	"2af32d7e-7732-4106-92d5-598638b4aaa9");
INSERT INTO O_TPARM
	VALUES ("879c5cf4-afd1-4d1a-94a5-bda7a9371ed8",
	"bf09afa3-5c8e-4f69-8f48-e00e66da2ef4",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"035ce8ae-8ac1-4e9d-b19f-467b3540f70e",
	'');
INSERT INTO O_TPARM
	VALUES ("9452d8b0-7699-4d0a-8fe0-0b395a221892",
	"bf09afa3-5c8e-4f69-8f48-e00e66da2ef4",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"879c5cf4-afd1-4d1a-94a5-bda7a9371ed8",
	'');
INSERT INTO O_TPARM
	VALUES ("035ce8ae-8ac1-4e9d-b19f-467b3540f70e",
	"bf09afa3-5c8e-4f69-8f48-e00e66da2ef4",
	'at',
	"a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	"00000000-0000-0000-0000-000000000000",
	'Justification',
	'The Justification data type is used to specify text at a given location in a compartment.
------------------------------------------------------------------------------
Bridge:GD',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("cf6e13b3-694c-4bc8-8c42-0e8d3aeb62e3",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_entries',
	'Both compartments have just one entry.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'return 1;',
	1,
	'',
	"9cd02649-4c5d-4574-8d32-1789e172d95a");
INSERT INTO O_TPARM
	VALUES ("40d4c7cd-0366-4e42-9e95-32b1d3e5ca56",
	"cf6e13b3-694c-4bc8-8c42-0e8d3aeb62e3",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("c473b275-55c7-448a-9df7-941fce821f03",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_text_style',
	'A State requires no special text style.
-----------------------------------------------------------------------------------
Bridge:GD',
	"6e636321-0fd1-4577-b185-e4d76b0d0c71",
	1,
	'return Style::None;',
	1,
	'',
	"68e8ad02-5475-4c27-b13a-44e32fa22df8");
INSERT INTO O_TPARM
	VALUES ("5974ebb7-c047-4106-87a2-44abaec82d30",
	"c473b275-55c7-448a-9df7-941fce821f03",
	'comp_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"c0bab0c4-97d9-4f0c-8af6-2f5381bef5d2",
	'');
INSERT INTO O_TPARM
	VALUES ("5b6adc70-0c0b-4894-aa08-a60e91921a72",
	"c473b275-55c7-448a-9df7-941fce821f03",
	'ent_num',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"5974ebb7-c047-4106-87a2-44abaec82d30",
	'');
INSERT INTO O_TPARM
	VALUES ("c0bab0c4-97d9-4f0c-8af6-2f5381bef5d2",
	"c473b275-55c7-448a-9df7-941fce821f03",
	'at',
	"a9382bea-4a3f-43ec-9191-1f9f158b11a4",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4a27a407-a227-420d-94fc-89d33625b328",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'get_ooa_id',
	'The ooa_id of a State is it''s SMstt_ID.
-----------------------------------------------------------------------------------
Bridge:GD',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'return self.SMstt_ID;',
	1,
	'',
	"cf6e13b3-694c-4bc8-8c42-0e8d3aeb62e3");
INSERT INTO O_TFR
	VALUES ("d2332fcb-2552-4d8f-9829-8101c4794061",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'initialize',
	'Initialize a new State instance.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'name = ::getUniqueInitialName( 
    instance: self.convertToInstance(), 
    candidateName: "Unnamed State");
success = ::getNewElementName(name:name,instance: self.convertToInstance(),validateName:true);    
if ( success!="") 
 self.Name=success;
else 
 self.dispose();
end if;    
// set this state''s number to a default value
self.Numb = 1;

// for each state associated with this state''s state machine
select many states related by self->SM_SM[R501]->SM_STATE[R501];
for each state in states
  // if this state equals self, skip it
  if (state.SMstt_ID == self.SMstt_ID) continue; end if;

  // if this other state''s number is greater than this state''s number
  if ( state.Numb >= self.Numb )
    // have this state''s number be just greater than this
    // other state''s number
    self.Numb = state.Numb + 1;
  end if;
end for;

create object instance ah of SM_AH;
create object instance moah of SM_MOAH;
relate ah to moah across R513;
select one sm related by self->SM_SM[R501];
select one msm related by sm->SM_MOORE[R510];
relate self to msm across R511 using moah;
create object instance act of SM_ACT;
relate act to ah across R514;
relate act to sm across R515;
//
// create SEM entry instances
//
select many event_set related by sm->SM_EVT[R502]->SM_SEVT[R525];
for each event in event_set
  create object instance sem of SM_SEME;
  // TODO: get default subtype from preferences
  create object instance ch of SM_CH;
  relate self to event across R503 using sem;
  relate ch to sem across R504;
end for;

act.Suc_Pars = ParseStatus::parseInitial;',
	1,
	'',
	"c473b275-55c7-448a-9df7-941fce821f03");
INSERT INTO O_TFR
	VALUES ("6e51271b-1366-4bbe-951b-eb26d274f736",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'dispose',
	'Dispose this State Machine State',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one sm_sm related by self->SM_SM[R501];
unrelate self from sm_sm across R501;
select many semes related by self->SM_SEME[R503];
for each seme in semes
  seme.dispose();
end for;
// New state xtns become No event xtns.
// No-event-transitions related by R508 are handled in txn.dispose
select many txns related by self->SM_TXN[R506];
for each txn in txns
  txn.dispose();
end for;
select many netxns related by self->SM_NETXN[R508]->SM_TXN[R507];
for each netxn in netxns
  netxn.dispose();
end for;
//
// Instance Subsystem
select many ins_sts related by self->I_INS[R2915];
for each ins_st in ins_sts
  unrelate self from ins_st across R2915;
end for;
select one cis related by self->CSME_CIS[R2932];
if (not_empty cis)
  cis.dispose();
end if;
//
// Breakpoint Subsystem
select one st_bp related by self->BP_ST[R3104];
if ( not_empty st_bp )
  unrelate self from st_bp across R3104;
  st_bp.dispose();
end if;
select one action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
if (not_empty action)
  action.dispose();
end if;
delete object instance self;
',
	1,
	'',
	"58d6466c-3542-49e5-a4b8-8325d7a1d3db");
INSERT INTO O_TFR
	VALUES ("ec15da6a-0e42-44fc-bc8a-bec1e322f760",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'actionFilter',
	'Bridge: UI
',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'if (param.name == "can" )
  if ((param.value =="ch generic pkg" or param.value =="ignore spec pkg") or
      (param.value =="ch spec pkg" or param.value =="ignore generic pkg"))
  
    select one cls related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
    if (empty cls)
      select one cls related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
    end if;
    select one packageableElem related by cls->PE_PE[R8001];
    select one package related by packageableElem->EP_PKG[R8000];
    select one cc related by packageableElem->C_C[R8003];
    isInGenericPackage = not_empty package or not_empty cc;
    
    if (((param.value == "ch spec pkg") or (param.value == "ignore spec pkg")) )
      return false;
    end if;

	select any event from instances of SM_EVT
		where ::canStateIgnoreOrSayEventCantHappen(
			eventId:selected.SMevt_ID, eventStateMachineId:selected.SM_ID,
    		stateId:self.SMstt_ID, stateStateMachineId:self.SM_ID,
    		considerCantHappen:((param.value == "ch spec pkg") or (param.value == "ch generic pkg")));
    return not_empty event;
  end if;
end if;
return false;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("6f94ac65-971a-47bd-b140-3f1f6478f98f",
	"ec15da6a-0e42-44fc-bc8a-bec1e322f760",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("3a3dc67f-2156-4671-84ef-8ff80b251a61",
	"ec15da6a-0e42-44fc-bc8a-bec1e322f760",
	'value',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6f94ac65-971a-47bd-b140-3f1f6478f98f",
	'');
INSERT INTO O_TFR
	VALUES ("5ff5bb03-7c4c-45de-bd3d-b0e90a4f7774",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'notAlreadyAssigned',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// if the given event is polymorphic and has an non-local event for
// this state''s state machine
select any event from instances of SM_EVT 
	where selected.SMevt_ID == param.eventId 
		and selected.SM_ID == param.eventStateMachineId;
select any nonLocalEvent related by event->SM_PEVT[R525]->SM_NLEVT[R527]->
	SM_SEVT[R526]->SM_EVT[R525] where selected.SM_ID == self.SM_ID;
if (not_empty nonLocalEvent)
	// consider the non-local event instead, since that is the one that would
	// be assigned within this state''s state machine
	event = nonLocalEvent;
end if;

if ( param.crtxn )
  select any crt related by self->SM_SM[R501]->SM_TXN[R505]->SM_CRTXN[R507]
      where selected.SMevt_ID == event.SMevt_ID;
  return empty crt;
else
  select any nst related by self->SM_SEME[R503]->SM_NSTXN[R504]
      where selected.SMevt_ID == event.SMevt_ID;
  return empty nst;
end if;

',
	1,
	'',
	"d2332fcb-2552-4d8f-9829-8101c4794061");
INSERT INTO O_TPARM
	VALUES ("1b4176f2-995c-480e-9622-ebf82588c3b3",
	"5ff5bb03-7c4c-45de-bd3d-b0e90a4f7774",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bc86a098-1745-4a11-a9e4-102dea1e746d",
	'');
INSERT INTO O_TPARM
	VALUES ("bc86a098-1745-4a11-a9e4-102dea1e746d",
	"5ff5bb03-7c4c-45de-bd3d-b0e90a4f7774",
	'crtxn',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TPARM
	VALUES ("3a7a0eac-6bd5-43a0-b93d-7c487407d021",
	"5ff5bb03-7c4c-45de-bd3d-b0e90a4f7774",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1b4176f2-995c-480e-9622-ebf82588c3b3",
	'');
INSERT INTO O_TFR
	VALUES ("4f57008f-b508-403c-9863-c4cdaf552437",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'canIgnoreOrSayEventCantHappen',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'/*
Returns whether the given event may be selected to be marked as ignored by, 
or said to can''t-happen on (as dictated by the considerCantHappen parameter), 
this state.
*/

// if the given event or this state belongs to a class state machine
select any event from instances of SM_EVT 
	where selected.SMevt_ID == param.eventId 
	and selected.SM_ID == param.eventStateMachineId;
if empty event
    return false;
end if;
select one eventClassStateMachine related by event->SM_SM[R502]->SM_ASM[R517];
select one selfStateMachine related by self->SM_SM[R501];
select one selfClassStateMachine related by selfStateMachine->SM_ASM[R517];
if (not_empty eventClassStateMachine or not_empty selfClassStateMachine)
	// if the the given event doesn''t belong to this state''s state machine 
	if (event.SM_ID != self.SM_ID) 
		// this state may not ignore the event or say it can''t happen
		return false;
 	end if;

// otherwise, it belongs to an instance state machine	
else 
	// if the given event is non-local
	select one nonLocalEvent related by event->SM_SEVT[R525]->SM_NLEVT[R526];
	if (not_empty nonLocalEvent) 
		// don''t allow it to be ignored/can''t-happened; during a separate call to 
		// this operation, we''ll consider the associated polymorphic event, 
		// instead, so there aren''t duplicates in the list that is presented to the user
		return false;
	end if;
		
	// if the given event doesn''t belong to this state''s state machine 
	select one selfClass related by selfStateMachine->SM_ISM[R517]->O_OBJ[R518];
	select one eventStateMachine related by event->SM_SM[R502]->SM_ISM[R517];
	if (param.eventStateMachineId != self.SM_ID)
		
		// if the given event doesn''t belong to a supertype of this state''s 
		// owning class
		select one eventClass related by eventStateMachine->O_OBJ[R518];
		if (not eventClass.isSupertypeOf(classId:selfClass.Obj_ID))
			// it can''t be ignored/can''t-happened within this state''s state machine
			return false;
		end if;
		
		// if the given event is assigned (or ignored/can''t-happened) anywhere 
		// on the path from the supertype state machine (inclusive) to this 
		// state''s state machine (exclusive)  
		if (event.isAssignedInSupertypeStateMachine(subtypeId:selfClass.Obj_ID))
			// it can''t be ignored/can''t-happened within this state''s state machine
			return false;
		end if;
		
	end if;
	
	// if the given event is assigned (or ignored/can''t-happened) in any subtype 
	// state machine of this state''s state machine  
	if (event.isAssignedInSubtypeStateMachine(supertypeId:selfClass.Obj_ID))
		// it can''t be ignored/can''t-happened within this state''s state machine
		return false;
	end if;
end if;
	
// if the given event has no associated matrix event
select one matrixEvent related by event->SM_SEVT[R525];
if (empty matrixEvent) 
	// it must be polymorphic, so use the aliasing event''s matrix event, instead
	select any matrixEvent related by event->SM_PEVT[R525]->SM_NLEVT[R527]->SM_SEVT[R526]
		where selected.SM_ID == self.SM_ID;
end if;

// if the matrix event has a matrix entry for this state
select any matrixEntry related by matrixEvent->SM_SEME[R503]
	where selected.SMstt_ID == self.SMstt_ID and selected.SM_ID == self.SM_ID;
if (not_empty matrixEntry) 
	// if we are considering whether the event can be made a can''t happen
	if (param.considerCantHappen)
		// if the matrix entry isn''t an ignore 
		select one ignore related by matrixEntry->SM_EIGN[R504];
		if (empty ignore) 
			// the event can''t be changed to a can''t happen
			return false;
		end if;

	// otherwise, we are considering whether the event can be ignored
	else
		// if the matrix entry isn''t a can''t happen 
		select one cantHappen related by matrixEntry->SM_CH[R504];
		if (empty cantHappen) 
			// the event can''t be changed to being ignored
			return false;
		end if;
	end if;

// otherwise, we''ll consider the lack of an entry to mean the default value, 
// which is can''t-happen 
else 
	// if we are considering whether the event can be made a can''t happen
	if (param.considerCantHappen)
		// the event is already considered to have that status
		return false;
	end if;
end if;

// the given event may be ignored/can''t-happened by this state
return true;',
	1,
	'',
	"ec15da6a-0e42-44fc-bc8a-bec1e322f760");
INSERT INTO O_TPARM
	VALUES ("7152cb17-7e6e-4445-aa27-180e8bdde757",
	"4f57008f-b508-403c-9863-c4cdaf552437",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"bf856543-b34d-41ca-87b3-8d265910f241",
	'');
INSERT INTO O_TPARM
	VALUES ("302404e2-31d0-4539-a592-8ed59dfdb866",
	"4f57008f-b508-403c-9863-c4cdaf552437",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7152cb17-7e6e-4445-aa27-180e8bdde757",
	'');
INSERT INTO O_TPARM
	VALUES ("bf856543-b34d-41ca-87b3-8d265910f241",
	"4f57008f-b508-403c-9863-c4cdaf552437",
	'considerCantHappen',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("2af32d7e-7732-4106-92d5-598638b4aaa9",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getNameWithClass',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'/*
Returns this state''s name, qualified by the key-letters of its owning class.
*/
select one clazz related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
if (empty clazz) 
	select one clazz related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
end if;	
return clazz.Key_Lett + ": " + self.Name;',
	1,
	'',
	"6e51271b-1366-4bbe-951b-eb26d274f736");
INSERT INTO O_TFR
	VALUES ("58d6466c-3542-49e5-a4b8-8325d7a1d3db",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'convertToInstance',
	'A utility operation to cast an instance of this type to the
instance datatype.

Translate: native',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	1,
	'// just return this instance as an Object
return this;',
	0,
	'',
	"af44da93-6c3b-45bf-a55f-e3a0873db086");
INSERT INTO S_DT_PROXY
	VALUES ("bc3722c8-5188-4529-8519-cf9eb9816b17",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("af44da93-6c3b-45bf-a55f-e3a0873db086",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'checkBreakpoint',
	'',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// State Machine State.checkBreakpoint()
select one state_breakpoint related by self->BP_ST[R3104];
result = false;
if (not_empty state_breakpoint)
  select one breakpoint related by state_breakpoint->BP_BP[R3102];
  if (breakpoint.enabled)
    armed = false;
    if (param.changeType == StateChangeType::Entry and state_breakpoint.onEntry)
      armed = true;
    elif (param.changeType == StateChangeType::Exit and state_breakpoint.onExit)
      armed = true;
    end if;
      if (armed)
        result = breakpoint.incrementAndTestHitCount();
      end if;
    end if;
  end if;
return result;',
	1,
	'',
	"4f57008f-b508-403c-9863-c4cdaf552437");
INSERT INTO O_TPARM
	VALUES ("164007d4-df47-4c96-a161-0f902760224c",
	"af44da93-6c3b-45bf-a55f-e3a0873db086",
	'changeType',
	"dd42573d-eb42-4343-b7e1-f3f0bdde626d",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("dd42573d-eb42-4343-b7e1-f3f0bdde626d",
	"00000000-0000-0000-0000-000000000000",
	'StateChangeType',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("d0c5877b-18e9-4c93-8b50-0a7a5e918a23",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'checkIntegrity',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'// check for any states with the same state number
select one class related by self->SM_SM[R501]->SM_ISM[R517]->O_OBJ[R518];
select one package related by class->PE_PE[R8001]->EP_PKG[R8000];
machineName = "Instance State Machine";
if(empty package)
  select one class related by self->SM_SM[R501]->SM_ASM[R517]->O_OBJ[R519];
  select one package related by class->PE_PE[R8001]->EP_PKG[R8000];
  machineName = "Class State Machine";
end if;
select one system related by package->S_SYS[R1405];
sys_id = GD::NULL_UNIQUE_ID();
if(not_empty system)
  sys_id = system.Sys_ID;
end if;
select many states related by self->SM_SM[R501]->SM_STATE[R501];
for each state in states
  if(state != self and state.Numb == self.Numb)
	MI_IM::createIssue(sys_id:sys_id, description:
	                   "Found another state under the same state machine " +
 	    "with the same state number.", severity:Severity::Error, name:self.Name,
	                     path:class.getPath(path:self.Name, includeSelf:true) +
	                    "::" + machineName + "::" + self.Name, id:self.SMstt_ID,
	                                          element:self.convertToInstance());
  end if;
  if(state != self and state.Name == self.Name)
	MI_IM::createIssue(sys_id:sys_id, description:
	                   "Found another state under the same state machine " +
 	    "with a matching name.", severity:Severity::Error, name:self.Name,
	                     path:class.getPath(path:self.Name, includeSelf:true) +
	                    "::" + machineName + "::" + self.Name, id:self.SMstt_ID,
	                                          element:self.convertToInstance());  
  end if;
end for;',
	1,
	'',
	"5ff5bb03-7c4c-45de-bd3d-b0e90a4f7774");
INSERT INTO O_TFR
	VALUES ("eb01618a-4f49-43d3-aa61-c89c8d8f408e",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getDescription',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'select one action related by self->SM_MOAH[R511]->SM_AH[R513]->SM_ACT[R514];
return action.Descrip;',
	1,
	'',
	"d0c5877b-18e9-4c93-8b50-0a7a5e918a23");
INSERT INTO O_TFR
	VALUES ("19162a22-069c-46ed-a8d4-93b144f93327",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getTransitionDestinationCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'select many transitions related by self->SM_TXN[R506];
return cardinality transitions; ',
	1,
	'',
	"eb01618a-4f49-43d3-aa61-c89c8d8f408e");
INSERT INTO O_TFR
	VALUES ("feca178a-c67a-4ad1-8c6a-aa39dbf6bdb5",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getTransitionDestinationId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
select many transitions related by self->SM_TXN[R506];
// We''re preincrementing the index
count = -1;
for each transition in transitions
  count = count + 1;
  if (count == param.index)
    id = transition.Trans_ID;
    break;
  end if;
end for; 
return id;',
	1,
	'',
	"19162a22-069c-46ed-a8d4-93b144f93327");
INSERT INTO O_TPARM
	VALUES ("2370ee8f-042c-43e7-8922-c188d2d12ce8",
	"feca178a-c67a-4ad1-8c6a-aa39dbf6bdb5",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("a87a0930-209e-47e6-b219-d11860329fa1",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getTransitionSourceCount',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'//Give me the count of all state for which this state is the source
count = 0;
select many transitions related by self->SM_NETXN[R508]->SM_TXN[R507];
count = count + cardinality transitions;
select many transitions related by self->SM_SEME[R503]->SM_NSTXN[R504]->SM_TXN[R507];
count = count + cardinality transitions;
return count;
',
	1,
	'',
	"feca178a-c67a-4ad1-8c6a-aa39dbf6bdb5");
INSERT INTO O_TFR
	VALUES ("07a6dc75-57c1-4bb6-99d7-9eae83b5fba2",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	'getTransitionSourceId',
	'',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'id = GD::NULL_UNIQUE_ID();
// We''re preincrementing the index
count = -1;
select many noEventTransitions related by self->SM_NETXN[R508]->SM_TXN[R507];
for each noEventTransition in noEventTransitions
  count = count + 1;
  if (count == param.index)
    id = noEventTransition.Trans_ID;
    break;
  end if;
end for; 
if (id == GD::NULL_UNIQUE_ID())
  select many newStateTransitions related by self->SM_SEME[R503]->SM_NSTXN[R504]->SM_TXN[R507];
  for each newStateTransition in newStateTransitions
    count = count + 1;
    if (count == param.index)
      id = newStateTransition.Trans_ID;
      break;
    end if;
  end for; 
end if;
return id;
',
	1,
	'',
	"a87a0930-209e-47e6-b219-d11860329fa1");
INSERT INTO O_TPARM
	VALUES ("745b88f0-5196-4626-9578-0bb799cae5ea",
	"07a6dc75-57c1-4bb6-99d7-9eae83b5fba2",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("c1895e17-60ab-46d5-b6a1-e61e34c67638",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_BATTR
	VALUES ("c1895e17-60ab-46d5-b6a1-e61e34c67638",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_ATTR
	VALUES ("c1895e17-60ab-46d5-b6a1-e61e34c67638",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"00000000-0000-0000-0000-000000000000",
	'SMstt_ID',
	'Full Name: State Machine State Identifier',
	'',
	'SMstt_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000005",
	'',
	'');
INSERT INTO O_REF
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"92c4f346-0aca-4da2-b132-f4de66fee3e6",
	0,
	"a791a1ed-e1c8-4d68-9963-2e6d2379b544",
	"1226010a-4dbc-451b-86a3-cd8137577ee4",
	"3c16084b-1ee9-4daf-bbf1-bc58671d1526",
	"5a02f818-be8a-471b-a22f-0a8edd1d2cfd",
	"0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"5619e477-4b9e-43a5-a8a9-45c92a97fa5c",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'State Machine',
	'SM_ID',
	'R501');
INSERT INTO R_RGO_PROXY
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"1226010a-4dbc-451b-86a3-cd8137577ee4",
	"3c16084b-1ee9-4daf-bbf1-bc58671d1526",
	'../State Machine.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("a791a1ed-e1c8-4d68-9963-2e6d2379b544",
	"92c4f346-0aca-4da2-b132-f4de66fee3e6",
	0,
	"1226010a-4dbc-451b-86a3-cd8137577ee4",
	"5a02f818-be8a-471b-a22f-0a8edd1d2cfd",
	'../State Machine.xtuml');
INSERT INTO O_REF
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	0,
	"6e71c95a-6059-455d-80e2-51a4be494c27",
	"0dcfc602-2e12-4cc0-af78-f4ba93a5f918",
	"eb4493b1-3cc3-4232-9013-b0d7290b5b47",
	"bc7015b6-93cb-4240-a548-390982eaa75f",
	"0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"cd05e163-809f-461e-9319-8a327d89ce4f",
	"5619e477-4b9e-43a5-a8a9-45c92a97fa5c",
	0,
	'',
	'Event Supplemental Data',
	'SM_ID',
	'R521.''receives asynchronous data via''');
INSERT INTO R_RGO_PROXY
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"0dcfc602-2e12-4cc0-af78-f4ba93a5f918",
	"eb4493b1-3cc3-4232-9013-b0d7290b5b47",
	'../State Machine.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6e71c95a-6059-455d-80e2-51a4be494c27",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	0,
	"0dcfc602-2e12-4cc0-af78-f4ba93a5f918",
	"bc7015b6-93cb-4240-a548-390982eaa75f",
	'../State Machine.xtuml');
INSERT INTO O_RATTR
	VALUES ("0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"a791a1ed-e1c8-4d68-9963-2e6d2379b544",
	"92c4f346-0aca-4da2-b132-f4de66fee3e6",
	1,
	'SM_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("a791a1ed-e1c8-4d68-9963-2e6d2379b544",
	"92c4f346-0aca-4da2-b132-f4de66fee3e6",
	'../State Machine/State Machine.xtuml');
INSERT INTO O_ATTR
	VALUES ("0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"c1895e17-60ab-46d5-b6a1-e61e34c67638",
	'SM_ID',
	'',
	'',
	'SM_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	0,
	"6a29b768-e433-4a27-9b47-12b1d34fd0ae",
	"0dcfc602-2e12-4cc0-af78-f4ba93a5f918",
	"eb4493b1-3cc3-4232-9013-b0d7290b5b47",
	"bc7015b6-93cb-4240-a548-390982eaa75f",
	"8a37312c-1e1d-4e75-8c6e-911c28662d2b",
	"4adacddd-9d1d-4c57-9748-b2a46fe605b7",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Event Supplemental Data',
	'SMspd_ID',
	'R521.''receives asynchronous data via''');
INSERT INTO O_RTIDA_PROXY
	VALUES ("6a29b768-e433-4a27-9b47-12b1d34fd0ae",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	0,
	"0dcfc602-2e12-4cc0-af78-f4ba93a5f918",
	"bc7015b6-93cb-4240-a548-390982eaa75f",
	'../State Machine.xtuml');
INSERT INTO O_RATTR
	VALUES ("8a37312c-1e1d-4e75-8c6e-911c28662d2b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"6a29b768-e433-4a27-9b47-12b1d34fd0ae",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	1,
	'SMspd_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("6a29b768-e433-4a27-9b47-12b1d34fd0ae",
	"a4e6c94c-670a-4e7f-b085-6727308a33db",
	'../Event Supplemental Data/Event Supplemental Data.xtuml');
INSERT INTO O_ATTR
	VALUES ("8a37312c-1e1d-4e75-8c6e-911c28662d2b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"0437ba96-60ca-4aeb-8370-ec104823ae8f",
	'SMspd_ID',
	'',
	'',
	'SMspd_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("bdba02d7-8d1a-4554-a462-ea5f48e3d36b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_BATTR
	VALUES ("bdba02d7-8d1a-4554-a462-ea5f48e3d36b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_ATTR
	VALUES ("bdba02d7-8d1a-4554-a462-ea5f48e3d36b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"8a37312c-1e1d-4e75-8c6e-911c28662d2b",
	'Name',
	'Full Name: State Name',
	'',
	'Name',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("81ab1d2d-6abb-4c1b-a9ea-d428a8d5f88f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_BATTR
	VALUES ("81ab1d2d-6abb-4c1b-a9ea-d428a8d5f88f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_ATTR
	VALUES ("81ab1d2d-6abb-4c1b-a9ea-d428a8d5f88f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"bdba02d7-8d1a-4554-a462-ea5f48e3d36b",
	'Numb',
	'Full Name: State Number
min_value: 0
max_value: 9999
',
	'',
	'Numb',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("96787a7f-6db9-46b1-92ec-b263c153ce6c",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_BATTR
	VALUES ("96787a7f-6db9-46b1-92ec-b263c153ce6c",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_ATTR
	VALUES ("96787a7f-6db9-46b1-92ec-b263c153ce6c",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	"81ab1d2d-6abb-4c1b-a9ea-d428a8d5f88f",
	'Final',
	'Full Name: Final State Indicator
Description: Indicates whether or not the state is a final state
Data Domain: 0 = not a final state, 1 = final state
enum0: Non-final state
enum1: Final state
',
	'',
	'Final',
	0,
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_OIDA
	VALUES ("0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	0,
	'SM_ID');
INSERT INTO O_OIDA
	VALUES ("c1895e17-60ab-46d5-b6a1-e61e34c67638",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	0,
	'SMstt_ID');
INSERT INTO O_ID
	VALUES (1,
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO O_OIDA
	VALUES ("8a37312c-1e1d-4e75-8c6e-911c28662d2b",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	1,
	'SMspd_ID');
INSERT INTO O_OIDA
	VALUES ("c1895e17-60ab-46d5-b6a1-e61e34c67638",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	1,
	'SMstt_ID');
INSERT INTO O_OIDA
	VALUES ("0437ba96-60ca-4aeb-8370-ec104823ae8f",
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	1,
	'SM_ID');
INSERT INTO O_ID
	VALUES (2,
	"aee0c0bf-2bc2-41e5-b9ad-01341d2944be");
INSERT INTO PE_PE
	VALUES ("aee0c0bf-2bc2-41e5-b9ad-01341d2944be",
	1,
	"efdb28f6-a485-4b25-9cbf-3e7227398b6a",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("efdb28f6-a485-4b25-9cbf-3e7227398b6a",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'State Machine',
	'Classes (O_OBJ) that have interesting behavior are given lifecycles. These lifecycles are described using state machines (SM_SM). A state machine consists of states, events, transitions and state actions. The state machine exists for each instance of the class for which it has been modeled (SM_ISM). A state machine can also be an assigner state machine (SM_ASM) of which only one can exists for all class instances. The purpose of the assigner state machine is to act as a single point of control through which competing requests are serialized.',
	501,
	'../State Machine.xtuml');
