-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("47a98ef6-0a18-4583-a794-84f33de26575",
	112,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	4548,
	3426,
	200,
	150,
	0,
	'',
	'org.xtuml.bp.core::ooaofooa::Functions');
INSERT INTO GD_GE
	VALUES ("b84e2b6d-c600-4709-a921-6124b4b5296f",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"42d5848f-dabe-43e1-9ac4-b840f2789360",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::Context Menu Entry Functions');
INSERT INTO GD_SHP
	VALUES ("b84e2b6d-c600-4709-a921-6124b4b5296f");
INSERT INTO GD_NCS
	VALUES ("b84e2b6d-c600-4709-a921-6124b4b5296f");
INSERT INTO DIM_ND
	VALUES (240.000000,
	144.000000,
	"b84e2b6d-c600-4709-a921-6124b4b5296f");
INSERT INTO DIM_GE
	VALUES (4032.000000,
	3096.000000,
	"b84e2b6d-c600-4709-a921-6124b4b5296f",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("b84e2b6d-c600-4709-a921-6124b4b5296f",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("03a950bf-175e-4739-a8d9-96e09725df57",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"f18cde06-9699-400c-bdf6-a0b8d296b7f0",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::OAL Validation Functions');
INSERT INTO GD_SHP
	VALUES ("03a950bf-175e-4739-a8d9-96e09725df57");
INSERT INTO GD_NCS
	VALUES ("03a950bf-175e-4739-a8d9-96e09725df57");
INSERT INTO DIM_ND
	VALUES (276.000000,
	156.000000,
	"03a950bf-175e-4739-a8d9-96e09725df57");
INSERT INTO DIM_GE
	VALUES (4164.000000,
	3288.000000,
	"03a950bf-175e-4739-a8d9-96e09725df57",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("03a950bf-175e-4739-a8d9-96e09725df57",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("c1e8b3f7-87b3-424c-8919-15b612e634c5",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::OAL Validation Utility Functions');
INSERT INTO GD_SHP
	VALUES ("c1e8b3f7-87b3-424c-8919-15b612e634c5");
INSERT INTO GD_NCS
	VALUES ("c1e8b3f7-87b3-424c-8919-15b612e634c5");
INSERT INTO DIM_ND
	VALUES (240.000000,
	144.000000,
	"c1e8b3f7-87b3-424c-8919-15b612e634c5");
INSERT INTO DIM_GE
	VALUES (4320.000000,
	3096.000000,
	"c1e8b3f7-87b3-424c-8919-15b612e634c5",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("c1e8b3f7-87b3-424c-8919-15b612e634c5",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("be0d2a05-d69a-4101-b496-9375cbb104d2",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"0eec87ca-63af-4b65-8769-1c99e84ebf64",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::x2m_functions');
INSERT INTO GD_SHP
	VALUES ("be0d2a05-d69a-4101-b496-9375cbb104d2");
INSERT INTO GD_NCS
	VALUES ("be0d2a05-d69a-4101-b496-9375cbb104d2");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"be0d2a05-d69a-4101-b496-9375cbb104d2");
INSERT INTO DIM_GE
	VALUES (4580.000000,
	3096.000000,
	"be0d2a05-d69a-4101-b496-9375cbb104d2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("be0d2a05-d69a-4101-b496-9375cbb104d2",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("f53b2eb2-ae0c-428d-b179-638371848e42",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"6af64c1a-bd5b-4eb5-b9db-60839e11d10c",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::import_functions');
INSERT INTO GD_SHP
	VALUES ("f53b2eb2-ae0c-428d-b179-638371848e42");
INSERT INTO GD_NCS
	VALUES ("f53b2eb2-ae0c-428d-b179-638371848e42");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"f53b2eb2-ae0c-428d-b179-638371848e42");
INSERT INTO DIM_GE
	VALUES (4800.000000,
	3096.000000,
	"f53b2eb2-ae0c-428d-b179-638371848e42",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f53b2eb2-ae0c-428d-b179-638371848e42",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_GE
	VALUES ("0136b3ac-7f3f-4f61-9c29-c7aea7063058",
	"47a98ef6-0a18-4583-a794-84f33de26575",
	"0afbb3b8-6fb2-4610-a00c-b103b65dad48",
	108,
	0,
	'org.xtuml.bp.core::ooaofooa::Functions::OAL Validation Scoped Access');
INSERT INTO GD_SHP
	VALUES ("0136b3ac-7f3f-4f61-9c29-c7aea7063058");
INSERT INTO GD_NCS
	VALUES ("0136b3ac-7f3f-4f61-9c29-c7aea7063058");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"0136b3ac-7f3f-4f61-9c29-c7aea7063058");
INSERT INTO DIM_GE
	VALUES (5020.000000,
	3096.000000,
	"0136b3ac-7f3f-4f61-9c29-c7aea7063058",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("0136b3ac-7f3f-4f61-9c29-c7aea7063058",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_DIA
	VALUES ("47a98ef6-0a18-4583-a794-84f33de26575",
	'',
	0.834211,
	3938.000000,
	2945.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("7839aa8d-4ec4-41e5-8cfc-81768856fdbb",
	"00000000-0000-0000-0000-000000000000",
	'enableModelChangeListenersFor',
	'Set the value of the model change listener enable mask to the value passed in.
The function returns the previous value logically ORed of both the masks.

The return value then shall be sent in both parameters in the succeeding calls 
to the function.

Translate: native
',
	'int ret_val = enabledEventsMask | enabledDeltaMask;
if ((p_Eventmask & Modeleventnotification_c.MODEL_ELEMENT_CHANGED) != 0) {
   	enabledDeltaMask = (p_Deltamask & Modeleventnotification_c.MASK_ALL_DELTAS);
}
enabledEventsMask = (p_Eventmask & Modeleventnotification_c.MASK_ALL_EVENTS);		
return ret_val;',
	"8672d1f0-ac73-4097-a597-505333093f53",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8cc8fe70-c27f-407f-af09-62e0ebb0bc0b",
	"7839aa8d-4ec4-41e5-8cfc-81768856fdbb",
	'eventMask',
	"8672d1f0-ac73-4097-a597-505333093f53",
	0,
	'',
	"30a2070a-66e0-4e5d-94a3-b1699971785b",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("8672d1f0-ac73-4097-a597-505333093f53",
	"00000000-0000-0000-0000-000000000000",
	'ModelEventNotification',
	'This enumeration defines all possible changes that can occur to a model.  
The ALL_EVENTS enumerator is the sum of all values. 
It also defines the delta kinds in case of a MODEL_ELEMENT_CHANGED event type. ',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("30a2070a-66e0-4e5d-94a3-b1699971785b",
	"7839aa8d-4ec4-41e5-8cfc-81768856fdbb",
	'deltaMask',
	"8672d1f0-ac73-4097-a597-505333093f53",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7839aa8d-4ec4-41e5-8cfc-81768856fdbb",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d3c7ce68-3967-43be-b14d-acf4f42386df",
	"00000000-0000-0000-0000-000000000000",
	'getOrphanedElementName',
	'',
	'return "Orphaned";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d3c7ce68-3967-43be-b14d-acf4f42386df",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b8ec6180-685e-4f0e-97d4-cf438b2a4ef5",
	"00000000-0000-0000-0000-000000000000",
	'getOrphanedElementKL',
	'',
	'return "ORPH";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b8ec6180-685e-4f0e-97d4-cf438b2a4ef5",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ffe11c50-ac91-4ce5-ab06-81723d989643",
	"00000000-0000-0000-0000-000000000000",
	'canStateIgnoreOrSayEventCantHappen',
	'',
	'/* ::canStateIgnoreOrSayEventCantHappen()
This is merely a pass-through function, meant as a workaround to a generator 
bug where method calls made on object instances in the ''where'' clause of a 
select statement are not generated correctly (BZ issue 278).  In some cases (but
not all), a call to this function may be made to access the desired operation
indirectly.
*/
select any state from instances of SM_STATE
	where selected.SMstt_ID == param.stateId 
		and selected.SM_ID == param.stateStateMachineId;
return state.canIgnoreOrSayEventCantHappen(
	eventId:param.eventId, eventStateMachineId:param.eventStateMachineId, 
	considerCantHappen:param.considerCantHappen);
	',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("47fc2ee3-f2a5-4e88-948d-bf065b4b2e15",
	"ffe11c50-ac91-4ce5-ab06-81723d989643",
	'eventId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"15a8ae84-35b0-432a-b8f7-71aa128c382d",
	'');
INSERT INTO S_SPARM
	VALUES ("f674a6f2-c4c6-46e3-affb-5a61f1558c71",
	"ffe11c50-ac91-4ce5-ab06-81723d989643",
	'eventStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"47fc2ee3-f2a5-4e88-948d-bf065b4b2e15",
	'');
INSERT INTO S_SPARM
	VALUES ("638fa2ac-8b2d-4251-a5da-46e9da5ca397",
	"ffe11c50-ac91-4ce5-ab06-81723d989643",
	'stateId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f674a6f2-c4c6-46e3-affb-5a61f1558c71",
	'');
INSERT INTO S_SPARM
	VALUES ("7a120c9d-ccb8-40a2-bca5-c66f941059d5",
	"ffe11c50-ac91-4ce5-ab06-81723d989643",
	'stateStateMachineId',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"638fa2ac-8b2d-4251-a5da-46e9da5ca397",
	'');
INSERT INTO S_SPARM
	VALUES ("15a8ae84-35b0-432a-b8f7-71aa128c382d",
	"ffe11c50-ac91-4ce5-ab06-81723d989643",
	'considerCantHappen',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ffe11c50-ac91-4ce5-ab06-81723d989643",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7b6e3d0e-69b5-47fe-b27c-bef17ad99f63",
	"00000000-0000-0000-0000-000000000000",
	'getUniqueInitialName',
	'Translate: native',
	'return PersistenceManager.getDefaultInstance().getUniqueNameForComponent(
	(NonRootModelElement)p_Instance, p_Candidatename);',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ae7b74ea-c797-4552-8e66-e99bf6570662",
	"7b6e3d0e-69b5-47fe-b27c-bef17ad99f63",
	'instance',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	0,
	'',
	"c1d24318-2eca-4e0a-afeb-20d68a563fd1",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc3722c8-5188-4529-8519-cf9eb9816b17",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("c1d24318-2eca-4e0a-afeb-20d68a563fd1",
	"7b6e3d0e-69b5-47fe-b27c-bef17ad99f63",
	'candidateName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7b6e3d0e-69b5-47fe-b27c-bef17ad99f63",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d8007d84-7609-4132-8698-04a8c69bba88",
	"00000000-0000-0000-0000-000000000000",
	'getCoreDatatypesPackageName',
	'',
	'return "Datatypes";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("d8007d84-7609-4132-8698-04a8c69bba88",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b95ec7d5-1a3a-4e2b-bfa5-96fe1fa76539",
	"00000000-0000-0000-0000-000000000000",
	'getUniqueInitialNameInParent',
	'Translate: native',
	'return PersistenceManager.getDefaultInstance().getUniqueNameForComponent(
	(NonRootModelElement)p_Instance, (NonRootModelElement) p_Parent, p_Name);',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b6af181a-0c9d-46d4-9ad9-a0a4f3c8b213",
	"b95ec7d5-1a3a-4e2b-bfa5-96fe1fa76539",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"843111dd-6356-4989-bc7b-895d06591675",
	'');
INSERT INTO S_SPARM
	VALUES ("843111dd-6356-4989-bc7b-895d06591675",
	"b95ec7d5-1a3a-4e2b-bfa5-96fe1fa76539",
	'instance',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("89283c0b-eaeb-4629-b77a-50d9343a2020",
	"b95ec7d5-1a3a-4e2b-bfa5-96fe1fa76539",
	'parent',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	0,
	'',
	"b6af181a-0c9d-46d4-9ad9-a0a4f3c8b213",
	'');
INSERT INTO PE_PE
	VALUES ("b95ec7d5-1a3a-4e2b-bfa5-96fe1fa76539",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5cc4dd50-34da-4202-9b81-f549fc423318",
	"00000000-0000-0000-0000-000000000000",
	'getMissingInheritedEventMessage',
	'',
	'if(not param.missingInheritedEvent)
  return "Some transitions that were pasted rely on inherited events that are not available in the destination state model.  Resulting transitions will have no events assigned.";
else
  return "Pasted state models rely on inherited events that are not included on the clipboard.  Resulting state models will be incomplete.";
end if;',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8dbde6ea-1c12-497d-a409-f07092e2d31a",
	"5cc4dd50-34da-4202-9b81-f549fc423318",
	'missingInheritedEvent',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("5cc4dd50-34da-4202-9b81-f549fc423318",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c1ab2cf1-4e4d-4911-8cc6-70ae167d34bc",
	"00000000-0000-0000-0000-000000000000",
	'removeInconsistentNonLocalEvents',
	'',
	'select many nlevts from instances of SM_NLEVT;
for each nlevt in nlevts
  // when importing 6.1 we need to fix up non-local event''s
  // such that the event consumption rules of today are
  // honored, the rules for event consumption state that
  // an event is consumed if a state says that it is ignored,
  // or can''t happen, or if it has assignment to a transition
  // for remove any that do not fulfill the above
  select one poly related by nlevt->SM_PEVT[R527];
  if(empty poly)
    continue;
  end if;
  select one evt related by nlevt->SM_SEVT[R526]->SM_EVT[R525];
  select one thisMachine related by nlevt->SM_SEVT[R526]->SM_EVT[R525]->SM_SM[R502];
  select many transitions related by nlevt->SM_SEVT[R526]->SM_SEME[R503]->SM_NSTXN[R504];
  select any ignored related by nlevt->SM_SEVT[R526]->SM_SEME[R503]->SM_EIGN[R504];
  select any ch related by nlevt->SM_SEVT[R526]->SM_SEME[R503]->SM_CH[R504];
  if(empty transitions and empty ignored and empty ch and not_empty evt)
    evt.dispose();
    continue;
  end if;
  // then check for non-local events that are assigned to
  // a transition, and make sure they are not consumed else
  // where
  if(not_empty transitions)
    select many otherNLEs related by poly->SM_NLEVT[R527];
    for each otherNLE in otherNLEs
      select one nleEvt related by otherNLE->SM_SEVT[R526]->SM_EVT[R525];
      select one machine related by nleEvt->SM_SM[R502];
      select one thisClass related by thisMachine->SM_ISM[R517]->O_OBJ[R518];
      select one nleClass related by machine->SM_ISM[R517]->O_OBJ[R518];
      if(machine != thisMachine) and ((thisClass.isSupertypeOf(classId:nleClass.Obj_ID)) or (nleClass.isSupertypeOf(classId:thisClass.Obj_ID)))
        nleEvt.dispose();
      end if;
    end for;
  else
    // if there is only can''t happens we dispose this
    // non-local event
    if(empty ignored and not_empty ch)
      evt.dispose();
    end if;
  end if;
end for;
// now clean up all event ignores, these will only exist if the
// above code did not remove them
select many clazzes from instances of O_OBJ;
for each clazz in clazzes
  clazz.removeInconsistentSubtypeIgnores();
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("c1ab2cf1-4e4d-4911-8cc6-70ae167d34bc",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a53a52fd-5479-42d1-b38a-c03f2f56cabd",
	"00000000-0000-0000-0000-000000000000",
	'changeNotificationEnablement',
	'Translate: native
',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2e7d6127-9d90-4546-83c7-e2e486feffb6",
	"a53a52fd-5479-42d1-b38a-c03f2f56cabd",
	'enabled',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a53a52fd-5479-42d1-b38a-c03f2f56cabd",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f8ab1bfc-f9e9-46de-b7f3-72de13e38559",
	"00000000-0000-0000-0000-000000000000",
	'getNewElementName',
	'Translate: native',
	'  return p_Name;
',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("406de874-1a4c-45b5-81a5-99c3cdd5c5e3",
	"f8ab1bfc-f9e9-46de-b7f3-72de13e38559",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e3bad2fb-1b1b-4e9a-b798-6adc43338976",
	"f8ab1bfc-f9e9-46de-b7f3-72de13e38559",
	'instance',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	0,
	'',
	"406de874-1a4c-45b5-81a5-99c3cdd5c5e3",
	'');
INSERT INTO S_SPARM
	VALUES ("4563cb69-0d13-4c7b-a764-1e5e9831bad9",
	"f8ab1bfc-f9e9-46de-b7f3-72de13e38559",
	'validateName',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e3bad2fb-1b1b-4e9a-b798-6adc43338976",
	'');
INSERT INTO PE_PE
	VALUES ("f8ab1bfc-f9e9-46de-b7f3-72de13e38559",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4ad9745c-5f47-48c8-9bd6-a08ed39d7e5a",
	"00000000-0000-0000-0000-000000000000",
	'getMissingClassMessage',
	'',
	'return "Pasted imported classes could not have their classes resolved.";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("4ad9745c-5f47-48c8-9bd6-a08ed39d7e5a",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9cdb3095-7035-4797-8fc8-e4fcc0076910",
	"00000000-0000-0000-0000-000000000000",
	'replaceFormalInterface',
	'',
	'select any c_ir from instances of C_IR where ( selected.Id == param.c_ir );
select any new_c_i from instances of C_I where ( selected.Id == param.new_c_i );

if ( not_empty c_ir and not_empty new_c_i )

  select many new_eps related by new_c_i->C_EP[R4003];
  select one provision related by c_ir->C_P[R4009];
  select one requirement related by c_ir->C_R[R4009];

  if ( not_empty provision )
    select many peps related by provision->SPR_PEP[R4501];
    for each pep in peps
      // unhook old executable property
      select one ep related by pep->C_EP[R4501];
      unrelate provision from ep across R4501 using pep;
      // find and hook up new executable property
      for each new_ep in new_eps
        if ( new_ep.getSignature(flavor:0) == ep.getSignature(flavor:0) )
          relate provision to new_ep across R4501 using pep;
          break;
        end if;
      end for;
    end for;
  elif ( not_empty requirement )
    select many reps related by requirement->SPR_REP[R4500];
    for each rep in reps
      // unhook old executable property
      select one ep related by rep->C_EP[R4500];
      unrelate requirement from ep across R4500 using rep;
      // find and hook up new executable property
      for each new_ep in new_eps
        if ( new_ep.getSignature(flavor:0) == ep.getSignature(flavor:0) )
          relate requirement to new_ep across R4500 using rep;
          break;
        end if;
      end for;
    end for;
  end if;
  
  // unhook the interface reference from the old interface itself
  select one old_c_i related by c_ir->C_I[R4012];
  unrelate c_ir from old_c_i across R4012;
  // hook up the new interface 
  relate c_ir to new_c_i across R4012;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9af6af67-e81e-4e93-a231-060ca6905cd9",
	"9cdb3095-7035-4797-8fc8-e4fcc0076910",
	'c_ir',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3e8a2140-0381-4de8-803d-26611ce01878",
	"9cdb3095-7035-4797-8fc8-e4fcc0076910",
	'new_c_i',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9af6af67-e81e-4e93-a231-060ca6905cd9",
	'');
INSERT INTO PE_PE
	VALUES ("9cdb3095-7035-4797-8fc8-e4fcc0076910",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("42629015-7c95-4803-a75e-5895fe58629c",
	"00000000-0000-0000-0000-000000000000",
	'autoCreateMASLSatisfactions',
	'This operation is specific to MASL import. In MASL there will only ever be 1 satisfaction for a given provision.
',
	'// this function creates satisfactions by searching in a package for provisions and requirements
// that match. It does not consider delegations

select any pkg from instances of EP_PKG where ( selected.Package_ID == param.pkg );

select many provisions related by pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->C_P[R4009];
select many requirements related by pkg->PE_PE[R8000]->C_C[R8001]->C_PO[R4010]->C_IR[R4016]->C_R[R4009];
select many imported_provisions related by pkg->PE_PE[R8000]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IP[R4703];
select many imported_requirements related by pkg->PE_PE[R8000]->CL_IC[R8001]->CL_POR[R4707]->CL_IIR[R4708]->CL_IR[R4703];

for each provision in provisions
  // match provisions and requirements
  select one p_interface related by provision->C_IR[R4009]->C_I[R4012];
  // This rountine is MASL specific and there will always only be at most  1 matching 
  // interface. Don''t bother searching is this is already satisfied.
  satisfactionCount = provision.getSatisfactionCount(filterDelegations:false);
  if (satisfactionCount > 0) 
    continue;
  end if;
  for each requirement in requirements
    select one r_interface related by requirement->C_IR[R4009]->C_I[R4012];
    if ( not_empty p_interface and not_empty r_interface and p_interface.Id == r_interface.Id )
      // create satisfaction
      create object instance satisfaction of C_SF;
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      relate pe to pkg across R8000;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();
      // link the provision and requirement
      relate provision to requirement across R4002 using satisfaction;
      satisfactionCount = satisfactionCount + 1;
    end if;
  end for;
  
  if (satisfactionCount > 0) 
    continue;
  end if;
  
  // match provisions and imported requirements
  for each i_requirement in imported_requirements
    select one r_interface related by i_requirement->CL_IIR[R4703]->C_IR[R4701]->C_I[R4012];
    if ( not_empty p_interface and not_empty r_interface and p_interface.Id == r_interface.Id )
      // create satisfaction
      create object instance satisfaction of C_SF;
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      relate pe to pkg across R8000;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();
      // link the provision and requirement
      select one requirement related by i_requirement->CL_IIR[R4703]->C_IR[R4701]->C_R[R4009];
      relate provision to requirement across R4002 using satisfaction;
      relate i_requirement to satisfaction across R4706;
    end if;
  end for;
end for;
for each i_provision in imported_provisions

  // match imported provisions and requirements
  select one provision related by i_provision->CL_IIR[R4703]->C_IR[R4701]->C_P[R4009];
  select one p_interface related by i_provision->CL_IIR[R4703]->C_IR[R4701]->C_I[R4012];

  // This rountine is MASL specific and there will always only be at most  1 matching 
  // interface. Don''t bother searching is this is already satisfied.
  satisfactionCount = 0; 
  if (not_empty provision)
    // this looks odd, but note that CL_IP.getProvisionCount is actually
    // return the satisfaction count for the CL_IP
    satisfactionCount = i_provision.getProvisionCount(filterDelegations:false);
  end if;
  if (satisfactionCount > 0) 
    continue;
  end if;
 
  for each requirement in requirements
    select one r_interface related by requirement->C_IR[R4009]->C_I[R4012];
    if ( not_empty p_interface and not_empty r_interface and p_interface.Id == r_interface.Id )
      // create satisfaction
      create object instance satisfaction of C_SF;
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      relate pe to pkg across R8000;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();
      // link the provision and requirement
      relate provision to requirement across R4002 using satisfaction;
      create object instance ipins of CL_IPINS;
      relate i_provision to satisfaction across R4705 using ipins;
      satisfactionCount = satisfactionCount + 1;
    end if;
  end for;

  if (satisfactionCount > 0) 
    continue;
  end if;

  // match imported provisions and imported requirements
  for each i_requirement in imported_requirements
    select one r_interface related by i_requirement->CL_IIR[R4703]->C_IR[R4701]->C_I[R4012];
    if ( not_empty p_interface and not_empty r_interface and p_interface.Id == r_interface.Id )
      // create satisfaction
      create object instance satisfaction of C_SF;
      create object instance pe of PE_PE;
      relate satisfaction to pe across R8001;
      relate pe to pkg across R8000;
      pe.type = ElementTypeConstants::SATISFACTION;
      pe.initialize();
      // link the provision and requirement
      select one requirement related by i_requirement->CL_IIR[R4703]->C_IR[R4701]->C_R[R4009];
      relate provision to requirement across R4002 using satisfaction;
      relate i_requirement to satisfaction across R4706;
      create object instance ipins of CL_IPINS;
      relate i_provision to satisfaction across R4705 using ipins;
    end if;
  end for;
end for;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e8035584-8e90-4371-a47a-cd5cf98d944a",
	"42629015-7c95-4803-a75e-5895fe58629c",
	'pkg',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("42629015-7c95-4803-a75e-5895fe58629c",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	1,
	"d6e77a0a-4222-4ed5-87a0-cc22fcb66c43",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("d6e77a0a-4222-4ed5-87a0-cc22fcb66c43",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'ooaofooa',
	'========================================================================

File:          $RCSfile: ooaofooa.xtuml,v $
Version:   $Revision: 1.127 $
Modified:  $Date: 2006/09/26 15:10:20 $

(c) Copyright 2004-2014 by Mentor Graphics Corp. All rights reserved.

========================================================================
Licensed under the Apache License, Version 2.0 (the "License"); you may not
use this file except in compliance with the License.  You may obtain a copy
of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
License for the specific language governing permissions and limitations under
the License.
========================================================================

This is the application domain for the Tiger project.

The processing in this model describes the activities
for model capture.



',
	0,
	'../ooaofooa.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'org.xtuml.bp.core',
	1,
	'../../org.xtuml.bp.core.xtuml');
