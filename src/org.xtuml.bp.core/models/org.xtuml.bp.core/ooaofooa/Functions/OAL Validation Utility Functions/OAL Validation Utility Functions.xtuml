-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'OAL Validation Utility Functions',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("cf93df41-148d-4a42-9a57-9bc9c77613ad",
	112,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	108,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	0,
	0,
	0,
	'4.1.17',
	'org.xtuml.bp.core::ooaofooa::Functions::OAL Validation Utility Functions');
INSERT INTO DIM_DIA
	VALUES ("cf93df41-148d-4a42-9a57-9bc9c77613ad",
	'',
	1.000000,
	4000.000000,
	3000.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO S_SYNC
	VALUES ("3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	"00000000-0000-0000-0000-000000000000",
	'binary_operation_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'  select any comp_val from instances of V_VAL where ( selected.Value_ID == param.a2_operator );
  if ( empty comp_val  )
    ERR::reportParseError( msg: "Operator not found for " + param.a4_op_type,
        token: param.a6_rule_token );
  else
    select any lhs_val from instances of V_VAL where ( selected.Value_ID == param.a1_left_op );
    select any rhs_val from instances of V_VAL where ( selected.Value_ID == param.a3_right_op );
    if ( empty lhs_val  )
      if ( not_empty rhs_val )
        rhs_val.dispose();
      end if;
      comp_val.dispose();
       ERR::reportParseError( msg: "Left hand operand not found for " + param.a4_op_type,
          token: param.a6_rule_token );
    else
      if ( empty rhs_val  )
        lhs_val.dispose();
        comp_val.dispose();
        ERR::reportParseError( msg: "Right hand operand not found for " + param.a4_op_type,
            token: param.a6_rule_token );
      else
         if lhs_val.getDimensions() < 0
        	ERR::reportParseError(msg:"The rvalue has incompatible array depth", 
                                                   token: param.a6_rule_token ); 
        elif rhs_val.getDimensions() < 0
        
          ERR::reportParseError(msg:"The rvalue has incompatible array depth", 
                                                   token: param.a6_rule_token );
        
        elif rhs_val.getDimensions() != lhs_val.getDimensions()
          ERR::reportParseError(msg:"Incompatible array depth for the oprands", 
                                                   token: param.a6_rule_token );
        end if;
        select one lhs_val_dt related by lhs_val->S_DT[R820];
        if ( empty lhs_val_dt )
         comp_val.dispose();
         ERR::reportParseError( msg: "Left hand operand for " + param.a4_op_type + " has unknown data type.",
            token: param.a6_rule_token );
        else
          select one rhs_val_dt related by rhs_val->S_DT[R820];
          if ( empty rhs_val_dt )
           comp_val.dispose();
           ERR::reportParseError( msg: "Right hand operand for " + param.a4_op_type + " has unknown data type.",
              token: param.a6_rule_token );
          else
            select one bin related by comp_val->V_BIN[R801];
            if ( empty bin )
              ERR::reportParseError( msg: "Cannot find Binary Operator subtype",
                   token: param.a6_rule_token );
            else
              op_dt_id =  ::data_types_compatible( dt1:lhs_val_dt.DT_ID, dt2: rhs_val_dt.DT_ID,
                   op: bin.Operator );
              if (  op_dt_id == GD::NULL_UNIQUE_ID() )
                // must clear garbage before reporting error, reportParseError wont return
                comp_val.dispose();
                lhs_val.dispose();
                rhs_val.dispose();

                ERR::reportParseError( msg: "Incompatible operands for " + param.a4_op_type,
                  token: param.a6_rule_token );
              else
                relate bin to lhs_val across R802;
                relate bin to rhs_val across R803;
                if ( param.a5_set_dt )
                  if ( op_dt_id == lhs_val_dt.DT_ID )
                    relate comp_val to lhs_val_dt across R820;
                  else
                    relate comp_val to rhs_val_dt across R820;
                  end if;
                end if;
                return bin.Value_ID;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;

  return param.a7_rule_id;



',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9fc5a472-80ed-4f54-87e2-f675febabbd6",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a1_left_op',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("874f2ef8-dde9-4c95-9215-2a1462923b51",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a2_operator',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9fc5a472-80ed-4f54-87e2-f675febabbd6",
	'');
INSERT INTO S_SPARM
	VALUES ("77b65ebb-efd9-449b-a8cb-116fbbaa927b",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a3_right_op',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"874f2ef8-dde9-4c95-9215-2a1462923b51",
	'');
INSERT INTO S_SPARM
	VALUES ("f7f3459a-84be-4668-a9c6-6d60b6fd9977",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a4_op_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"77b65ebb-efd9-449b-a8cb-116fbbaa927b",
	'');
INSERT INTO S_SPARM
	VALUES ("5e8acfb7-8690-463f-962f-e3876fd5a6a5",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a5_set_dt',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f7f3459a-84be-4668-a9c6-6d60b6fd9977",
	'');
INSERT INTO S_SPARM
	VALUES ("37ffba25-2a2a-41c2-b5e5-361c8b4221af",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a6_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"5e8acfb7-8690-463f-962f-e3876fd5a6a5",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	"00000000-0000-0000-0000-000000000000",
	'Token',
	'Each node in the syntax tree has a token associated with it.
We define the type here so that we can pass this data to the 
verification functions, which then pass it on to error reporting 
function, if the verification fails.
Bridge:ALS',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("bf412e4b-4eec-4cbf-912e-bd1071d49d50",
	"3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	'a7_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"37ffba25-2a2a-41c2-b5e5-361c8b4221af",
	'');
INSERT INTO PE_PE
	VALUES ("3c1a6ba2-3f4b-4ff9-a8a0-ea24d8724129",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a54e1a84-f8e7-4975-a691-d278d6f658a5",
	"00000000-0000-0000-0000-000000000000",
	'data_types_compatible',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'// Try to locate the datatypes in the domain-level datatype package(s)
current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage 
  containerId = ::getValidationDomain();
  select any package from instances of EP_PKG where
                                             selected.Package_ID == containerId;
  select any comp from instances of C_C where selected.Id == containerId;
  if not_empty package
    package.collectVisibleElementsForName(name:"",
         type:ElementTypeConstants::DATATYPE, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
  else
    comp.collectVisibleElementsForName(name:"",
         type:ElementTypeConstants::DATATYPE,
                          originatingContainerID:comp.Id,
                                    delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                          collectGlobally:true);
  end if;
  select any resultSet related by package->PE_SRS[R8005] where
        selected.Name == "" and selected.Type == ElementTypeConstants::DATATYPE; 
  select any dt1_dt related by resultSet->PE_VIS[R8006]->
                    PE_PE[R8002]->S_DT[R8001] where selected.DT_ID == param.dt1;
  select any dt2_dt related by resultSet->PE_VIS[R8006]->
                    PE_PE[R8002]->S_DT[R8001] where selected.DT_ID == param.dt2;
  if not_empty comp
    select any dt1_dt related by comp->PE_CVS[R8004]->
                    PE_PE[R8004]->S_DT[R8001] where selected.DT_ID == param.dt1;
    select any dt2_dt related by comp->PE_CVS[R8004]->
                    PE_PE[R8004]->S_DT[R8001] where selected.DT_ID == param.dt2;
  end if;
  if empty dt1_dt
    USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <dt1_dt> is empty.",path:"PathNotProvided");
    return GD::NULL_UNIQUE_ID();
  end if;
  if empty dt2_dt
    USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <dt2_dt> is empty.",path:"PathNotProvided");
    return GD::NULL_UNIQUE_ID();
  end if;

  // Set up some flags to be used in the type-equality checks
  foundCDTLHS = false;
  foundCDTRHS = false;
  areCompatible = false;

  // If it''s a UDT, perform compatability tests on the underlying core type
  select one udt1 related by dt1_dt->S_UDT[R17];
  if ( not_empty udt1 )
    foundCDTLHS = true;
    coreId = udt1.getCoreType();
    select any corePE from instances of PE_PE
                                        where (selected.Element_ID == coreId);
    select one dt1_dt related by corePE->S_DT[R8001];
  end if;
  select one udt2 related by dt2_dt->S_UDT[R17];
  if ( not_empty udt2 )
    foundCDTRHS = true;
    coreId = udt2.getCoreType();
    select any corePE from instances of PE_PE
                                        where (selected.Element_ID == coreId);
    select one dt2_dt related by corePE->S_DT[R8001];
  end if;

  // Check if either is a CDT
  select one cdt1 related by dt1_dt->S_CDT[R17];
  if ( not_empty cdt1 )
    foundCDTLHS = true;
  end if;
  select one cdt2 related by dt2_dt->S_CDT[R17];
  if ( not_empty cdt2 )
    foundCDTRHS = true;
  end if;

  select one irdt1 related by dt1_dt->S_IRDT[R17];

  dt1_is_ir = not_empty irdt1 and not irdt1.isSet;
  dt1_is_irs = not_empty irdt1 and irdt1.isSet;

  select one irdt2 related by dt2_dt->S_IRDT[R17];
  dt2_is_ir = not_empty irdt2 and not irdt2.isSet;
  dt2_is_irs = not_empty irdt2 and irdt2.isSet;

  /**
   *  If both types are not IRDTs then they are incompatible, with
   *  one exception inst_ref<Object>
   */
  if(dt1_is_ir and (not dt2_is_ir and not ::has_substring(p1_base: dt2_dt.Name,
                                  p2_str: "inst_ref<Object>", p3_fromIndex: 0)))
    return GD::NULL_UNIQUE_ID();
  end if;

  if(dt1_is_irs and (not dt2_is_irs and not ::has_substring(p1_base: dt2_dt.Name,
                              p2_str: "inst_ref_set<Object>", p3_fromIndex: 0)))
    return GD::NULL_UNIQUE_ID();
  end if;

  /**
   *  Check the opposite, where dt1 is inst_ref<Object> and dt2 is IRDT
   */
  if((not dt1_is_ir and not ::has_substring(p1_base: dt1_dt.Name,
                                  p2_str: "inst_ref<Object>", p3_fromIndex: 0))
                                  and dt2_is_ir)
    return GD::NULL_UNIQUE_ID();                                  
  end if;

  if((not dt1_is_irs and not ::has_substring(p1_base: dt1_dt.Name,
                                p2_str: "inst_ref_set<Object", p3_fromIndex: 0))
                                and dt2_is_irs)
    return GD::NULL_UNIQUE_ID();
  end if;

  if(not dt1_is_ir)
    // check for special case inst_refs
    dt1_is_ir = ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Object>", p3_fromIndex: 0)
                   or ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Mapping>", p3_fromIndex: 0)
                   or ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Timer>", p3_fromIndex: 0);
  end if;

  if(not dt1_is_irs)
    // check for special case inst_ref_sets
    dt1_is_irs = ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref_set<Object>", p3_fromIndex: 0);  
  end if;

  if ( foundCDTLHS and foundCDTRHS )
    if ( dt1_dt.Name == dt2_dt.Name )
      areCompatible = true;
    end if;
  else
    if ( dt1_dt.DT_ID == dt2_dt.DT_ID )
      areCompatible = true;
    end if;
  end if;

  if ( areCompatible )
    // only check for disallowed operations, since they are fewer
    if ( (not dt1_is_ir and not dt1_is_irs and dt1_dt.Name != "boolean") and
        (param.op == "and" or param.op == "or")  )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "boolean" and
       ( param.op == "+" or param.op == "-" or param.op == "*" or param.op == "/"  or
         param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "string" and
       ( param.op == "-" or param.op == "*" or param.op == "/" or param.op == "%") )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "unique_id" and
       ( param.op == "+" or param.op == "-" or param.op == "*" or param.op == "/"  or
         param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( (dt1_is_ir or dt1_is_irs) and
       ( param.op == "*" or param.op == "/" or param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( (dt1_is_ir or dt1_is_irs) and
       ( param.op == "and" or param.op == "or" or param.op == "+"  or
         param.op == "-" ) )
      return_type = param.dt1;
      if ( dt1_is_ir )
        // The result of an operation on two inst_ref''s is an inst_ref_set.  So,
        // locate the appropriate inst_ref_set, or error if it doesn''t exist.
        select one irdt1_obj related by dt1_dt->S_IRDT[R17]->O_OBJ[R123];
        select any irsdt related by irdt1_obj->S_IRDT[R123] where selected.isSet == true;
        if ( empty irsdt )
          // TODO - it would be nice to report a meaningful parse error here.
          // However, we don''t have a token to pass to the error reporting function.
          // Also, the error reporting function does not return, so not sure how that
          // affects downstream code that uses the return value.
          return_type = GD::NULL_UNIQUE_ID();
        else
          return_type = irsdt.DT_ID;
        end if;
      end if;
      return return_type;
    else
      return param.dt1;
    end if;
  else
    //   The following truth table represents the logic of this inst_ref checking
    //   block.  Any other operations on mixed inst_ref and inst_ref_set are
    //   invalid.  Also, the referenced class must match (i.e. you can''t perform
    //   an operation such as inst_ref<foo> + inst_ref<bar>).
    //
    //      left               right
    //      type           op  type             return
    //      -------------  --  --------------   ------
    //      <inst_ref>      |  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      &  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      +  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      -  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref_set>  |  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  &  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  +  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  -  <inst_ref>       <inst_ref_set>
    if ( dt1_is_ir or dt1_is_irs )
      if ( param.op != "and" and param.op != "or" and param.op != "+" and
         param.op != "-" )
        return GD::NULL_UNIQUE_ID();
      end if;

      // Now that we''ve established we''re using a valid operator, check that the
      // reference and set are for the same class
      select one irdt1_obj related by dt1_dt->S_IRDT[R17]->O_OBJ[R123];
      select one irdt2_obj related by dt2_dt->S_IRDT[R17]->O_OBJ[R123];

      if empty irdt1_obj
        USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <irdt1_obj> is empty.",path:"PathNotProvided");
      end if;
      if empty irdt2_obj
        USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <irdt2_obj> is empty.",path:"PathNotProvided");
      end if;

      if ( irdt1_obj.Obj_ID != irdt2_obj.Obj_ID )
        return GD::NULL_UNIQUE_ID();
      end if;

      // We''ve passed all the checks, so return the set datatype
      if ( dt1_is_irs )
        return param.dt1;
      else
        return param.dt2;
      end if;
    end if;

    // Disallow boolean operations of non-matching data types
    if ( param.op == "and" or param.op == "or" )
      return GD::NULL_UNIQUE_ID();
    end if;

    //
    // The follow truth table represents the logic this block implements.
    // Operator "=" means assignment, operator "+" means all other operators.
    //
    //      left    right
    //      type    type    operator    coercion    promotion   return
    //      ----    ----    --------    --------    ---------   ------
    //      i       r       =           T           T           i
    //      i       r       =           F           T           bad
    //      i       r       =           F           F           bad
    //      i       r       +           T           T           r
    //      i       r       +           F           T           r
    //      i       r       +           F           F           bad
    //      r       i       =           T           T           r
    //      r       i       =           F           T           r
    //      r       i       =           F           F           bad
    //      r       i       +           T           T           r
    //      r       i       +           F           T           r
    //      r       i       +           F           F           bad
    //
    // The following combinations are prevented from occurring by the UI, as they
    // don''t really make sense:
    //
    //      left    right
    //      type    type    operator    coercion    promotion   return
    //      ----    ----    --------    --------    ---------   ------
    //      i       r       =           T           F           i
    //      i       r       +           T           F           bad
    //      r       i       =           T           F           bad
    //      r       i       +           T           F           bad
    //
    prefAllowIntToRealPromotion = "bridgepoint_prefs_allow_int_to_real_promotion";
    prefAllowRealToIntCoercion = "bridgepoint_prefs_allow_real_to_int_coercion";

    if ( dt1_dt.Name == "integer" )
      if ( dt2_dt.Name == "real" )
        if ( param.op == "assign" )
          if ( PREF::getBoolean( name:prefAllowRealToIntCoercion ) == true )
	      	return param.dt1;
          else
        	return GD::NULL_UNIQUE_ID();
          end if;
        elif ( PREF::getBoolean( name:prefAllowIntToRealPromotion ) == true )
      	  return param.dt2;
        else
      	  return GD::NULL_UNIQUE_ID();
        end if;
      else
        return GD::NULL_UNIQUE_ID();
      end if;
    elif ( dt1_dt.Name == "real" )
      if ( dt2_dt.Name == "integer" )
        if ( PREF::getBoolean( name:prefAllowIntToRealPromotion ) == true )
      	  return param.dt1;
        else
      	  return GD::NULL_UNIQUE_ID();
        end if;
      else
        return GD::NULL_UNIQUE_ID();
      end if;
    else
      return GD::NULL_UNIQUE_ID();
    end if;
  end if;
else
    // If we are not at the domain level, then we need to look for the datatypes
    // in the system-level datatype package(s)
    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where (selected.Name == cur_sys_name);

        select any dt1_dt related by sys->G_EIS[R9100]->
                    PE_PE[R9100]->S_DT[R8001] where selected.DT_ID == param.dt1;

    if empty dt1_dt
      USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <dt1_dt> is empty.",path:"PathNotProvided");
    end if;

    // If we are not at the domain level, then we need to look for the datatypes
    // in the system-level datatype package(s)
    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where (selected.Name == cur_sys_name);
        select any dt2_dt related by sys->G_EIS[R9100]->
                    PE_PE[R9100]->S_DT[R8001] where selected.DT_ID == param.dt2;

    if empty dt2_dt
      USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <dt2_dt> is empty.",path:"PathNotProvided");
    end if;

  // Set up some flags to be used in the type-equality checks
  foundCDTLHS = false;
  foundCDTRHS = false;
  areCompatible = false;

  // If it''s a UDT, perform compatability tests on the underlying core type
  select one udt1 related by dt1_dt->S_UDT[R17];
  if ( not_empty udt1 )
    foundCDTLHS = true;
    select one dt1_dt related by udt1->S_DT[R18];
  end if;
  select one udt2 related by dt2_dt->S_UDT[R17];
  if ( not_empty udt2 )
    foundCDTRHS = true;
    select one dt2_dt related by udt2->S_DT[R18];
  end if;

  // Check if either is a CDT
  select one cdt1 related by dt1_dt->S_CDT[R17];
  if ( not_empty cdt1 )
    foundCDTLHS = true;
  end if;
  select one cdt2 related by dt2_dt->S_CDT[R17];
  if ( not_empty cdt2 )
    foundCDTRHS = true;
  end if;

  select one irdt1 related by dt1_dt->S_IRDT[R17];

  dt1_is_ir = not_empty irdt1 and not irdt1.isSet;
  dt1_is_irs = not_empty irdt1 and irdt1.isSet;

  select one irdt2 related by dt2_dt->S_IRDT[R17];
  dt2_is_ir = not_empty irdt2 and not irdt2.isSet;
  dt2_is_irs = not_empty irdt2 and irdt2.isSet;

  /**
   *  If both types are not IRDTs then they are incompatible, with
   *  one exception inst_ref<Object>
   */
  if(dt1_is_ir and (not dt2_is_ir and not ::has_substring(p1_base: dt2_dt.Name,
                                  p2_str: "inst_ref<Object>", p3_fromIndex: 0)))
    return GD::NULL_UNIQUE_ID();
  end if;

  if(dt1_is_irs and (not dt2_is_irs and not ::has_substring(p1_base: dt2_dt.Name,
                              p2_str: "inst_ref_set<Object>", p3_fromIndex: 0)))
    return GD::NULL_UNIQUE_ID();
  end if;

  /**
   *  Check the opposite, where dt1 is inst_ref<Object> and dt2 is IRDT
   */
  if((not dt1_is_ir and not ::has_substring(p1_base: dt1_dt.Name,
                                  p2_str: "inst_ref<Object>", p3_fromIndex: 0))
                                  and dt2_is_ir)
    return GD::NULL_UNIQUE_ID();                                  
  end if;

  if((not dt1_is_irs and not ::has_substring(p1_base: dt1_dt.Name,
                                p2_str: "inst_ref_set<Object", p3_fromIndex: 0))
                                and dt2_is_irs)
    return GD::NULL_UNIQUE_ID();
  end if;

  if(not dt1_is_ir)
    // check for special case inst_refs
    dt1_is_ir = ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Object>", p3_fromIndex: 0)
                   or ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Mapping>", p3_fromIndex: 0)
                   or ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref<Timer>", p3_fromIndex: 0);
  end if;

  if(not dt1_is_irs)
    // check for special case inst_ref_sets
    dt1_is_irs = ::has_substring(p1_base: dt1_dt.Name, p2_str: "inst_ref_set<Object>", p3_fromIndex: 0);  
  end if;

  if ( foundCDTLHS and foundCDTRHS )
    if ( dt1_dt.Name == dt2_dt.Name )
      areCompatible = true;
    end if;
  else
    if ( dt1_dt.DT_ID == dt2_dt.DT_ID )
      areCompatible = true;
    end if;
  end if;

  if ( areCompatible )
    // only check for disallowed operations, since they are fewer
    if ( (not dt1_is_ir and not dt1_is_irs and dt1_dt.Name != "boolean") and
        (param.op == "and" or param.op == "or")  )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "boolean" and
       ( param.op == "+" or param.op == "-" or param.op == "*" or param.op == "/"  or
         param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "string" and
       ( param.op == "-" or param.op == "*" or param.op == "/" or param.op == "%") )
      return GD::NULL_UNIQUE_ID();
    elif ( dt1_dt.Name == "unique_id" and
       ( param.op == "+" or param.op == "-" or param.op == "*" or param.op == "/"  or
         param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( (dt1_is_ir or dt1_is_irs) and
       ( param.op == "*" or param.op == "/" or param.op == "%"  or
         param.op == ">" or param.op == "<" or param.op == ">=" or param.op == "<=" ) )
      return GD::NULL_UNIQUE_ID();
    elif ( (dt1_is_ir or dt1_is_irs) and
       ( param.op == "and" or param.op == "or" or param.op == "+"  or
         param.op == "-" ) )
      return_type = param.dt1;
      if ( dt1_is_ir )
        // The result of an operation on two inst_ref''s is an inst_ref_set.  So,
        // locate the appropriate inst_ref_set, or error if it doesn''t exist.
        select one irdt1_obj related by dt1_dt->S_IRDT[R17]->O_OBJ[R123];
        select any irsdt related by irdt1_obj->S_IRDT[R123] where selected.isSet == true;
        if ( empty irsdt )
          // TODO - it would be nice to report a meaningful parse error here.
          // However, we don''t have a token to pass to the error reporting function.
          // Also, the error reporting function does not return, so not sure how that
          // affects downstream code that uses the return value.
          return_type = GD::NULL_UNIQUE_ID();
        else
          return_type = irsdt.DT_ID;
        end if;
      end if;
      return return_type;
    else
      return param.dt1;
    end if;
  else
    //   The following truth table represents the logic of this inst_ref checking
    //   block.  Any other operations on mixed inst_ref and inst_ref_set are
    //   invalid.  Also, the referenced class must match (i.e. you can''t perform
    //   an operation such as inst_ref<foo> + inst_ref<bar>).
    //
    //      left               right
    //      type           op  type             return
    //      -------------  --  --------------   ------
    //      <inst_ref>      |  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      &  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      +  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref>      -  <inst_ref_set>   <inst_ref_set>
    //      <inst_ref_set>  |  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  &  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  +  <inst_ref>       <inst_ref_set>
    //      <inst_ref_set>  -  <inst_ref>       <inst_ref_set>
    if ( dt1_is_ir or dt1_is_irs )
      if ( param.op != "and" and param.op != "or" and param.op != "+" and
         param.op != "-" )
        return GD::NULL_UNIQUE_ID();
      end if;

      // Now that we''ve established we''re using a valid operator, check that the
      // reference and set are for the same class
      select one irdt1_obj related by dt1_dt->S_IRDT[R17]->O_OBJ[R123];
      select one irdt2_obj related by dt2_dt->S_IRDT[R17]->O_OBJ[R123];

      if empty irdt1_obj
        USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <irdt1_obj> is empty.",path:"PathNotProvided");
      end if;
      if empty irdt2_obj
        USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "data_types_compatible().  Variable <irdt2_obj> is empty.",path:"PathNotProvided");
      end if;

      if ( irdt1_obj.Obj_ID != irdt2_obj.Obj_ID )
        return GD::NULL_UNIQUE_ID();
      end if;

      // We''ve passed all the checks, so return the set datatype
      if ( dt1_is_irs )
        return param.dt1;
      else
        return param.dt2;
      end if;
    end if;

    // Disallow boolean operations of non-matching data types
    if ( param.op == "and" or param.op == "or" )
      return GD::NULL_UNIQUE_ID();
    end if;
    //
    // The follow truth table represents the logic this block implements.
    // Operator "=" means assignment, operator "+" means all other operators.
    //
    //      left    right
    //      type    type    operator    coercion    promotion   return
    //      ----    ----    --------    --------    ---------   ------
    //      i       r       =           T           T           i
    //      i       r       =           F           T           bad
    //      i       r       =           F           F           bad
    //      i       r       +           T           T           r
    //      i       r       +           F           T           r
    //      i       r       +           F           F           bad
    //      r       i       =           T           T           r
    //      r       i       =           F           T           r
    //      r       i       =           F           F           bad
    //      r       i       +           T           T           r
    //      r       i       +           F           T           r
    //      r       i       +           F           F           bad
    //
    // The following combinations are prevented from occurring by the UI, as they
    // don''t really make sense:
    //
    //      left    right
    //      type    type    operator    coercion    promotion   return
    //      ----    ----    --------    --------    ---------   ------
    //      i       r       =           T           F           i
    //      i       r       +           T           F           bad
    //      r       i       =           T           F           bad
    //      r       i       +           T           F           bad
    //
    prefAllowIntToRealPromotion = "bridgepoint_prefs_allow_int_to_real_promotion";
    prefAllowRealToIntCoercion = "bridgepoint_prefs_allow_real_to_int_coercion";

    if ( dt1_dt.Name == "integer" )
      if ( dt2_dt.Name == "real" )
        if ( param.op == "assign" )
          if ( PREF::getBoolean( name:prefAllowRealToIntCoercion ) == true )
	      	return param.dt1;
          else
        	return GD::NULL_UNIQUE_ID();
          end if;
        elif ( PREF::getBoolean( name:prefAllowIntToRealPromotion ) == true )
      	  return param.dt2;
        else
      	  return GD::NULL_UNIQUE_ID();
        end if;
      else
        return GD::NULL_UNIQUE_ID();
      end if;
    elif ( dt1_dt.Name == "real" )
      if ( dt2_dt.Name == "integer" )
        if ( PREF::getBoolean( name:prefAllowIntToRealPromotion ) == true )
      	  return param.dt1;
        else
      	  return GD::NULL_UNIQUE_ID();
        end if;
      else
        return GD::NULL_UNIQUE_ID();
      end if;
    else
      return GD::NULL_UNIQUE_ID();
    end if;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("03a78479-f43a-4fe9-ae3c-262918d08b89",
	"a54e1a84-f8e7-4975-a691-d278d6f658a5",
	'dt1',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f0551405-6389-43e6-9b08-f00265eddb17",
	"a54e1a84-f8e7-4975-a691-d278d6f658a5",
	'dt2',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"03a78479-f43a-4fe9-ae3c-262918d08b89",
	'');
INSERT INTO S_SPARM
	VALUES ("4fd915a6-f37c-4ee6-8878-9e11fbaefe94",
	"a54e1a84-f8e7-4975-a691-d278d6f658a5",
	'op',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"f0551405-6389-43e6-9b08-f00265eddb17",
	'');
INSERT INTO PE_PE
	VALUES ("a54e1a84-f8e7-4975-a691-d278d6f658a5",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("93875e49-23ac-4e9a-89ef-0c7c840e2458",
	"00000000-0000-0000-0000-000000000000",
	'binary_operator_create',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'create object instance bin of V_BIN;
bin.Operator = param.a1_text;
create object instance val of V_VAL;
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
relate val to blk across R826;
if ( param.a2_dt_name != "" )

    cur_sys_name = ::getSystemName();
    select any sys from instances of S_SYS where selected.Name == cur_sys_name;
    dt_id = GD::NULL_UNIQUE_ID();
    if not_empty sys
      dt_id = sys.getCoreTypeId(name:param.a2_dt_name);
    end if;
    select any pe from instances of PE_PE where selected.Element_ID == dt_id;
    select one dt related by pe->S_DT[R8001];

  if ( not_empty dt )
    relate val to dt across R820;
  else
    USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
      "binary_operator_create().  Variable <dt> is empty.",path:"PathNotProvided");
  end if;
end if;
relate val to bin across R801;
return val.Value_ID;






































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2b79043f-c319-4a5f-a51a-017d06af19af",
	"93875e49-23ac-4e9a-89ef-0c7c840e2458",
	'a1_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c28f7da0-4f0d-451f-8f99-a8375c567fc9",
	"93875e49-23ac-4e9a-89ef-0c7c840e2458",
	'a2_dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2b79043f-c319-4a5f-a51a-017d06af19af",
	'');
INSERT INTO PE_PE
	VALUES ("93875e49-23ac-4e9a-89ef-0c7c840e2458",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	"00000000-0000-0000-0000-000000000000",
	'unary_operation_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any operand from instances of V_VAL
      where ( selected.Value_ID == param.a5_val_id );
if ( empty operand  )
    ERR::reportParseError( msg: "Operand not found for " + param.a2_op_type,
        token: param.a1_rule_token );
else
    select one op_dt related by operand->S_DT[R820];
    if ( empty op_dt )
      operand.dispose();
      ERR::reportParseError( msg: "Operand for "+param.a2_op_type+"  has unknown data type.",
            token: param.a1_rule_token );
    else
      select one op_udt related by op_dt->S_UDT[R17];
      if ( not_empty op_udt )
        // use the udt''s core data type
        coreId = op_udt.getCoreType();
        select any corePE from instances of PE_PE
                                        where (selected.Element_ID == coreId);
        select one op_dt related by corePE->S_DT[R8001];
      end if;
      if ( op_dt.Name != param.a3_op_dt_name )
        operand.dispose();
        ERR::reportParseError( msg: "Operand for "+param.a2_op_type+" is not of type "
                     +param.a3_op_dt_name,
            token: param.a1_rule_token );
      else
        create object instance u of V_UNY;
        u.Operator = param.a6_text;
        create object instance val of V_VAL;
        current_scope = ::get_current_scope();
        select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
        relate val to blk across R826;
          cur_sys_name = ::getSystemName();
          select any sys from instances of S_SYS where selected.Name == cur_sys_name;
          dt_id = GD::NULL_UNIQUE_ID();
          if not_empty sys
            dt_id = sys.getCoreTypeId(name:param.a4_dt_name);
          end if;
          select any pe from instances of PE_PE where selected.Element_ID == dt_id;
          select one result_dt related by pe->S_DT[R8001]; 
        if ( not_empty result_dt )
          relate val to result_dt across R820;
        else
          USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
                 "unary_operation_validate().  Variable <result_dt> is empty.",path:"PathNotProvided");
        end if;
        relate val to u across R801;
        relate u to operand across R804;
        return val.Value_ID;
    end if;
  end if;
end if;
return param.a7_rule_id;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2825e583-0bd0-4232-bc41-866b773e0bb0",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("993e2932-43c2-42a2-b178-7d5fade6fc76",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a2_op_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2825e583-0bd0-4232-bc41-866b773e0bb0",
	'');
INSERT INTO S_SPARM
	VALUES ("6ebbe4a4-eee0-4f28-b6a8-6371ee0068ae",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a3_op_dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"993e2932-43c2-42a2-b178-7d5fade6fc76",
	'');
INSERT INTO S_SPARM
	VALUES ("14c26443-aa6a-45bb-8823-a2265ec56484",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a4_dt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6ebbe4a4-eee0-4f28-b6a8-6371ee0068ae",
	'');
INSERT INTO S_SPARM
	VALUES ("17691cfc-f5ec-4b20-ac46-8df5b8e8b428",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a5_val_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"14c26443-aa6a-45bb-8823-a2265ec56484",
	'');
INSERT INTO S_SPARM
	VALUES ("7ead421a-339a-41bf-b9ec-67beef12fc61",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a6_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"17691cfc-f5ec-4b20-ac46-8df5b8e8b428",
	'');
INSERT INTO S_SPARM
	VALUES ("f4e0c10c-624f-4458-a580-204e911658a8",
	"f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	'a7_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7ead421a-339a-41bf-b9ec-67beef12fc61",
	'');
INSERT INTO PE_PE
	VALUES ("f97dfcab-afde-4e35-a0fd-58fe3f10cdf9",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6cc83c29-6dcd-42aa-8901-24faccaa8f47",
	"00000000-0000-0000-0000-000000000000",
	'get_current_scope',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( empty act )
  return GD::NULL_UNIQUE_ID();
else
  select one scope related by act->ACT_BLK[R699];
  if ( empty scope )
    return GD::NULL_UNIQUE_ID();
  else
    return scope.Block_ID;
  end if;
end if;

































































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("6cc83c29-6dcd-42aa-8901-24faccaa8f47",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf76b130-70a8-4c5f-8d85-7151fa5a5e9a",
	"00000000-0000-0000-0000-000000000000",
	'get_enclosing_block',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any blk from instances of ACT_BLK where ( selected.Block_ID == param.block_id );

select one act related by blk->ACT_ACT[R650];
if ( not_empty act )
  // we are the root block
  return GD::NULL_UNIQUE_ID();
else
  select one whl_stmt related by blk->ACT_WHL[R608];
  if ( not_empty whl_stmt )
    select one enclosing_block related by whl_stmt->ACT_SMT[R603]->ACT_BLK[R602];
    return enclosing_block.Block_ID;
  else
    select one if_stmt related by blk->ACT_IF[R607];
    if ( not_empty if_stmt )
      select one enclosing_block related by if_stmt->ACT_SMT[R603]->ACT_BLK[R602];
      return enclosing_block.Block_ID;
    else
      select one elif_stmt related by blk->ACT_EL[R658];
      if ( not_empty elif_stmt )
        select one enclosing_block related by elif_stmt->ACT_SMT[R603]->ACT_BLK[R602];
        return enclosing_block.Block_ID;
      else
        select one else_stmt related by blk->ACT_E[R606];
        if ( not_empty else_stmt )
          select one enclosing_block related by else_stmt->ACT_SMT[R603]->ACT_BLK[R602];
          return enclosing_block.Block_ID;
        else
          select one for_stmt related by blk->ACT_FOR[R605];
          if ( not_empty for_stmt )
            select one enclosing_block related by for_stmt->ACT_SMT[R603]->ACT_BLK[R602];
            return enclosing_block.Block_ID;
          else
            ERR::reportParseError( msg: "Unable to determine enclosing block",
                      token: param.rule_token );
          end if;
        end if;
      end if;
    end if;
  end if;
end if;

return GD::NULL_UNIQUE_ID();





























































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("45e419bb-37e6-4655-825d-a0eae7ad7024",
	"bf76b130-70a8-4c5f-8d85-7151fa5a5e9a",
	'block_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b9e36dfd-d699-4b04-b492-7ff116f162b2",
	"bf76b130-70a8-4c5f-8d85-7151fa5a5e9a",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"45e419bb-37e6-4655-825d-a0eae7ad7024",
	'');
INSERT INTO PE_PE
	VALUES ("bf76b130-70a8-4c5f-8d85-7151fa5a5e9a",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cb8cc89e-2453-4351-b7b1-eea0165000f5",
	"00000000-0000-0000-0000-000000000000",
	'get_var_in_scope',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK
    where ( selected.Block_ID == current_scope );

select any var_inst related by block->V_VAR[R823]
  where ( selected.Name == param.name );

if ( not_empty var_inst )
  return var_inst.Var_ID;
else
  // search enclosing blocks for variable
  encl_block_id = ::get_enclosing_block( block_id: current_scope, rule_token: param.rule_token );
  while ( encl_block_id != GD::NULL_UNIQUE_ID() and empty var_inst)
    select any enclosing_block from instances of ACT_BLK
        where ( selected.Block_ID == encl_block_id );
    select any var_inst related by enclosing_block->V_VAR[R823] 
         where ( selected.Name == param.name );
    if ( not_empty var_inst )
      return var_inst.Var_ID;
    else
      encl_block_id = ::get_enclosing_block( block_id: encl_block_id, rule_token: param.rule_token );
    end if;
  end while;
end if;

return GD::NULL_UNIQUE_ID();


























































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d024bbd2-599c-4d27-af72-a73ae6429fca",
	"cb8cc89e-2453-4351-b7b1-eea0165000f5",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("20faa142-8c9d-4d21-9fcf-eb85dae29d48",
	"cb8cc89e-2453-4351-b7b1-eea0165000f5",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"d024bbd2-599c-4d27-af72-a73ae6429fca",
	'');
INSERT INTO PE_PE
	VALUES ("cb8cc89e-2453-4351-b7b1-eea0165000f5",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("434cb675-b22a-4a64-85a6-de578f34a2de",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_operator_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any operand from instances of V_VAL
      where ( selected.Value_ID == param.a1_variable_id );
select one op_dt related by operand->S_DT[R820];
if (empty op_dt)
      ERR::reportParseError( msg: "Operand for "+ param.a2_operator_name +" operator"+"  has unknown data type.",
            token: param.a4_rule_token ); 
end if;
select one irdt related by op_dt->S_IRDT[R17];
if ( (::has_substring(p1_base: op_dt.Name, p2_str: "inst_ref<Timer>", p3_fromIndex: 0) == true ) or
     (::has_substring(p1_base: op_dt.Name, p2_str: "inst_ref<Mapping>", p3_fromIndex: 0) == true ))
  return ::unary_operation_validate( a1_rule_token: param.a4_rule_token,
      a2_op_type: param.a2_operator_name + " operator", a3_op_dt_name: "inst_ref<Object>",
      a4_dt_name: param.a3_op_dt, a5_val_id: param.a1_variable_id,
      a6_text: param.a2_operator_name, a7_rule_id: param.a5_rule_id );
elif ( ::has_substring(p1_base: op_dt.Name, p2_str: "inst_ref<Object>", p3_fromIndex: 0) or
       ::has_substring(p1_base: op_dt.Name, p2_str: "inst_ref_set<Object>", p3_fromIndex: 0) or
       not_empty irdt )
  return ::unary_operation_validate( a1_rule_token: param.a4_rule_token,
      a2_op_type: param.a2_operator_name  + " operator", a3_op_dt_name: op_dt.Name,
      a4_dt_name: param.a3_op_dt, a5_val_id: param.a1_variable_id,
      a6_text: param.a2_operator_name, a7_rule_id: param.a5_rule_id );
else
  return ::unary_operation_validate( a1_rule_token: param.a4_rule_token,
      a2_op_type: param.a2_operator_name + " operator", a3_op_dt_name: "inst_ref<Object>",
      a4_dt_name: param.a3_op_dt, a5_val_id: param.a1_variable_id,
      a6_text: param.a2_operator_name, a7_rule_id: param.a5_rule_id );
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ed3b584c-c454-4741-88ca-9cc199b97c53",
	"434cb675-b22a-4a64-85a6-de578f34a2de",
	'a1_variable_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("163510fd-31c9-4b98-b8c6-960a32168f92",
	"434cb675-b22a-4a64-85a6-de578f34a2de",
	'a2_operator_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"ed3b584c-c454-4741-88ca-9cc199b97c53",
	'');
INSERT INTO S_SPARM
	VALUES ("d0ccbeb0-21e1-434d-a85d-c7e8fc1bc5e5",
	"434cb675-b22a-4a64-85a6-de578f34a2de",
	'a3_op_dt',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"163510fd-31c9-4b98-b8c6-960a32168f92",
	'');
INSERT INTO S_SPARM
	VALUES ("34fb13f0-bbfb-4944-b8f0-bcbfb185673a",
	"434cb675-b22a-4a64-85a6-de578f34a2de",
	'a4_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"d0ccbeb0-21e1-434d-a85d-c7e8fc1bc5e5",
	'');
INSERT INTO S_SPARM
	VALUES ("b421126e-2cff-4b74-a16a-6843f4c19f30",
	"434cb675-b22a-4a64-85a6-de578f34a2de",
	'a5_rule_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"34fb13f0-bbfb-4944-b8f0-bcbfb185673a",
	'');
INSERT INTO PE_PE
	VALUES ("434cb675-b22a-4a64-85a6-de578f34a2de",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("09746ec4-1502-4289-b3ca-c952bb39ec68",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_relationship',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'if ( param.a3_rel == GD::NULL_UNIQUE_ID() )
  ::clear_rel_data( a1_chain_start_val: param.a6_chain_start_val, a2_chain_id: param.a7_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
  ERR::reportParseError( msg: 
      "Invalid association specification",
      token: param.a5_rule_token );
end if;

select any left_obj  from instances of O_OBJ where ( selected.Obj_ID == param.a1_left );
select any right_obj  from instances of O_OBJ where ( selected.Obj_ID == param.a2_right );
select any r_rel from instances of R_REL where ( selected.Rel_ID == param.a3_rel );
select one r_assoc related by r_rel->R_ASSOC[R206];
select one rel_assr related by r_assoc->R_ASSR[R211];
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
rel_is_reflexive = r_rel.is_reflexive();

select many oir_set related by r_rel->R_OIR[R201];
left_object_found = false;
right_object_found = false;
select any left_oir from instances of R_OIR;
select any right_oir from instances of R_OIR;
for each oir in oir_set
  if ( left_object_found and right_object_found )
    break;
  end if;
      // We must get two distinct class-in-associations if we have a
      // reflexive association.
  if ( oir.Obj_ID == left_obj.Obj_ID )
    if ( not left_object_found )
      if ( empty r_assoc )
        left_object_found = true;
        left_oir = oir;
      else
        if ( not rel_is_reflexive )
          left_object_found = true;
          left_oir = oir;
        else
          // reflexive link association
          select one rel_assr related by r_assoc->R_ASSR[R211];
          if ( left_obj.Obj_ID == rel_assr.Obj_ID )
            // navigating from assr back to aone/aoth
            left_object_found = true;
            left_oir = oir;
          elif ( right_obj.Obj_ID == rel_assr.Obj_ID )
            // navigating from aone/aoth to assr for reflexive link association
            // check for the correct phrase
            if ( blk.TempBuffer != "" )
              dest_rel_phrase = OS::remove_ticks( ticked_string: blk.TempBuffer );
              if ( oir.get_text_phrase() == dest_rel_phrase )
                left_object_found = true;
                left_oir = oir;
              else
                select one aone related by r_assoc->R_AONE[R209];
                select one aoth related by r_assoc->R_AOTH[R210];
                if ( aone.Txt_Phrs != dest_rel_phrase and 
                     aoth.Txt_Phrs != dest_rel_phrase )
                  // invalid phrase, use this oir for later code to throw error for bad phrase
                  left_object_found = true;
                  left_oir = oir;
                end if;
              end if;  // oir.get_text_phrase() == dest_rel_phrase
            else
              // use this oir for later code to detect empty phrase
              left_object_found = true;
              left_oir = oir;
            end if;  // blk.TempBuffer != "" 
          else
            // navigating directly without using assr
            left_object_found = true;
            left_oir = oir;
          end if;  // left_obj is assr
        end if; // not rel_is_reflexive
      end if;  // empty r_assoc
    end if;  // not left_object_found
  end if;  // oir.Obj_ID == left_obj.Obj_ID
  if ( oir.Obj_ID == right_obj.Obj_ID )
    if ( not left_object_found or oir.OIR_ID != left_oir.OIR_ID )
      right_object_found = true;
      right_oir = oir;
    end if;
  end if;
end for;
if ( not left_object_found or not right_object_found )
  ::clear_rel_data( a1_chain_start_val: param.a6_chain_start_val, a2_chain_id: param.a7_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
  ERR::reportParseError( msg: 
      "The specified association ->R"+
          GD::int_to_string(value: r_rel.Numb) + "<- does not exist between classes ->"+
          left_obj.Name+"<- and ->"+right_obj.Name+"<-",
      token: param.a5_rule_token );
else
  // make sure that the right_oir is the one with the specified phrase for reflexive rels
  if ( rel_is_reflexive )
    if ( blk.TempBuffer != "" )
      swap_oirs = false;
      // empty phrases for reflexive associations are handled elsewhere
      dest_rel_phrase = OS::remove_ticks( ticked_string: blk.TempBuffer );
      if ( empty r_assoc )
        if ( right_oir.get_text_phrase() != dest_rel_phrase )
          swap_oirs = true;
        end if;
      else
        // figure out if the link class in in the link
        if ( left_oir.OIR_ID != rel_assr.OIR_ID and right_oir.OIR_ID != rel_assr.OIR_ID )
          // link class is not part of the link
          if ( right_oir.get_text_phrase() != dest_rel_phrase )
            swap_oirs = true;
          end if;
        end if;
      end if;    // empty r_assoc
      if ( swap_oirs )
        temp_oir = left_oir;
        left_oir = right_oir;
        right_oir = temp_oir;
      end if;  // swap_oirs
    end if;  // blk.TempBuffer != ""
  end if;  // is_reflexive
  select one left_oasub related by left_oir->R_RGO[R203]->R_SUB[R205];
  select one right_oasub related by right_oir->R_RGO[R203]->R_SUB[R205];
  if ( not_empty left_oasub and not_empty right_oasub )
    ::clear_rel_data( a1_chain_start_val: param.a6_chain_start_val, a2_chain_id: param.a7_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
    ERR::reportParseError( msg: 
           "The classes ->" + left_obj.Name+"<- and ->"+right_obj.Name+"<- " +
           "are subtype classes in the association ->R" +
           GD::int_to_string(value: r_rel.Numb) + "<-", 
      token: param.a5_rule_token );
  else
    select one subsup related by r_rel->R_SUBSUP[R206];
    if ( not_empty subsup and param.a4_phrase != GD::NULL_UNIQUE_ID() )
      ::clear_rel_data( a1_chain_start_val: param.a6_chain_start_val, a2_chain_id: param.a7_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
      ERR::reportParseError( msg: 
          "A destination association phrase is not allowed for a supertype/subtype association",
          token: param.a5_rule_token );
    else
      if ( ::has_valid_phrase(a1_rel: param.a3_rel, a2_phrase: param.a4_phrase,
         a3_right_oir_id: right_oir.OIR_ID, a4_right_obj_name: right_obj.Name, a5_right_obj_id: right_obj.Obj_ID,
         a6_left_oir_id: left_oir.OIR_ID, a7_left_obj_name: left_obj.Name, a8_left_obj_id: left_obj.Obj_ID,
         a9_rule_token: param.a5_rule_token, b1_chain_start_val: param.a6_chain_start_val,
        b2_chain_id: param.a7_chain_id  ) )
        return ::get_right_object_multiplicity(a1_left: left_oir.OIR_ID, a2_rel: r_rel.Rel_ID, a3_right: right_oir.OIR_ID);
      end if;
    end if;
  end if;
end if;
return Multiplicity::Unknown;



















































































',
	"c785b82e-b0aa-4f8c-8df4-f1b9cf451edd",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ea1b79ff-281a-42e4-9dbe-c98819ab1061",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a1_left',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("04c774f0-ca39-4c39-b93e-6df6d2472996",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a2_right',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ea1b79ff-281a-42e4-9dbe-c98819ab1061",
	'');
INSERT INTO S_SPARM
	VALUES ("65827d4e-21a9-4f4e-969e-79d52b6e32c8",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a3_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"04c774f0-ca39-4c39-b93e-6df6d2472996",
	'');
INSERT INTO S_SPARM
	VALUES ("36048961-28ae-4cbb-9f40-449e5c26845d",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a4_phrase',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"65827d4e-21a9-4f4e-969e-79d52b6e32c8",
	'');
INSERT INTO S_SPARM
	VALUES ("d2408c34-8116-4a09-ab67-0f2568ffdb92",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a5_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"36048961-28ae-4cbb-9f40-449e5c26845d",
	'');
INSERT INTO S_SPARM
	VALUES ("14dc950f-4743-4e09-9948-0553b17b584d",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a6_chain_start_val',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d2408c34-8116-4a09-ab67-0f2568ffdb92",
	'');
INSERT INTO S_SPARM
	VALUES ("2cea9536-cd67-424f-8eff-d32e9f9e499e",
	"09746ec4-1502-4289-b3ca-c952bb39ec68",
	'a7_chain_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"14dc950f-4743-4e09-9948-0553b17b584d",
	'');
INSERT INTO PE_PE
	VALUES ("09746ec4-1502-4289-b3ca-c952bb39ec68",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_DT_PROXY
	VALUES ("c785b82e-b0aa-4f8c-8df4-f1b9cf451edd",
	"00000000-0000-0000-0000-000000000000",
	'Multiplicity',
	'The Multiplicity data type allows specification of the range of allowable cardinality values.
--------------------------------------------------------------
Bridge:GD, ALS',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO S_SYNC
	VALUES ("da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_assoc_relationship',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'if ( param.a4_rel == GD::NULL_UNIQUE_ID() )
  ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
  ERR::reportParseError( msg: 
      "Invalid association specification",
      token: param.a6_rule_token );
end if;

select any r_rel from instances of R_REL where ( selected.Rel_ID == param.a4_rel );

select one r_assoc related by r_rel->R_ASSOC[R206];
if ( empty r_assoc )
  ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
  ERR::reportParseError( msg: 
       "Association ->R" +
          GD::int_to_string(value: r_rel.Numb) + "<- is not linked",
          token: param.a6_rule_token );
else
  select any left_obj  from instances of O_OBJ where ( selected.Obj_ID == param.a1_left );
  select any right_obj  from instances of O_OBJ where ( selected.Obj_ID == param.a2_right );
  select any assoc_obj  from instances of O_OBJ where ( selected.Obj_ID == param.a3_assoc );

  left_object_found = false;
  right_object_found = false;
  assoc_obj_found = false;
  select any left_oir from instances of R_OIR;
  select any right_oir from instances of R_OIR;
  select any assoc_oir from instances of R_OIR;

  select many oir_set related by r_rel->R_OIR[R201];
  for each oir in oir_set
    if ( left_object_found and right_object_found and assoc_obj_found )
      break;
    end if;
    if ( oir.Obj_ID == left_obj.Obj_ID )
      if ( not left_object_found )
        left_object_found = true;
        left_oir = oir;
        // we need to get back to the top of this loop 
        // to prevent right_oir being set for reflexive associations
        continue;
      end if;
    end if;
    if ( oir.Obj_ID == right_obj.Obj_ID )
      right_object_found = true;
      right_oir = oir;
    end if;
    if ( oir.Obj_ID == assoc_obj.Obj_ID )
      assoc_obj_found = true;
      assoc_oir = oir;
    end if;
  end for;
  if ( not assoc_obj_found )
    ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
    ERR::reportParseError( msg: 
           "Class ->"+assoc_obj.Name+"<- is not the link class between " +
           "classes ->"+left_obj.Name+"<- and ->"+right_obj.Name+
            "<- in link association ->R"+GD::int_to_string(value: r_rel.Numb)+"<-",
          token: param.a6_rule_token );
  elif ( not left_object_found )
    ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
    ERR::reportParseError( msg: 
           "Class ->"+left_obj.Name+"<- does not participate in the link association ->R"+
           GD::int_to_string(value: r_rel.Numb) +"<-",
          token: param.a6_rule_token );
  elif ( not right_object_found )
    ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
    ERR::reportParseError( msg: 
           "Class ->"+right_obj.Name+"<- does not participate in the link association ->R"+
           GD::int_to_string(value: r_rel.Numb) +"<-",
          token: param.a6_rule_token );
  else
    // Make sure each class is at its correct position in association. First check
    // link class, then associated classes.
    select one rel_assr related by r_assoc->R_ASSR[R211];
    select one oir_assr related by assoc_oir->R_RGO[R203]->R_ASSR[R205];
    if ( rel_assr != oir_assr )
      ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
      ERR::reportParseError( msg: 
           "Class ->"+assoc_obj.Name+"<- is incorrectly specified in link association ->R" +
            GD::int_to_string(value: r_rel.Numb)+"<-",
            token: param.a6_rule_token );
    else
      select one rel_aone related by r_assoc->R_AONE[R209];
      select one rel_aoth related by r_assoc->R_AOTH[R210];
      select one l_aone related by left_oir->R_RTO[R203]->R_AONE[R204];
      select one l_aoth related by left_oir->R_RTO[R203]->R_AOTH[R204];
      select one r_aone related by right_oir->R_RTO[R203]->R_AONE[R204];
      select one r_aoth related by right_oir->R_RTO[R203]->R_AOTH[R204];
      if ( (empty l_aone and empty l_aoth) or
           (not_empty l_aone and l_aone != rel_aone) or
           (not_empty l_aoth and l_aoth != rel_aoth) )
        ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
        ERR::reportParseError( msg: 
           "Class ->"+left_obj.Name+"<- is incorrectly specified in link association ->R"+
           GD::int_to_string(value: r_rel.Numb)+"<-",
            token: param.a6_rule_token );
      elif ( (empty r_aone and empty r_aoth) or
           (not_empty r_aone and r_aone != rel_aone) or
           (not_empty r_aoth and r_aoth != rel_aoth) )
        ::clear_rel_data( a1_chain_start_val: param.a7_chain_start_val, a2_chain_id: param.a8_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
        ERR::reportParseError( msg: 
           "Class ->"+right_obj.Name+"<- is incorrectly specified in link association ->R"+
           GD::int_to_string(value: r_rel.Numb)+"<-",
            token: param.a6_rule_token );
       else
         return ::has_valid_phrase(a1_rel: param.a4_rel, a2_phrase: param.a5_phrase,
            a3_right_oir_id: right_oir.OIR_ID, a4_right_obj_name: right_obj.Name, a5_right_obj_id: right_obj.Obj_ID,
            a6_left_oir_id: left_oir.OIR_ID, a7_left_obj_name: left_obj.Name, a8_left_obj_id: left_obj.Obj_ID,
            a9_rule_token: param.a6_rule_token, b1_chain_start_val: param.a7_chain_start_val, b2_chain_id: param.a8_chain_id);
       end if;
    end if;
  end if;
end if;

return true;




















































































',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6af8e9f1-e29c-4235-a454-f2d8c431bc8d",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a1_left',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("19e27599-4ca1-4ae6-acdc-6cb476674aa2",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a2_right',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6af8e9f1-e29c-4235-a454-f2d8c431bc8d",
	'');
INSERT INTO S_SPARM
	VALUES ("8acfb59e-a9cd-48b5-8a81-5513e6fc308e",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a3_assoc',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"19e27599-4ca1-4ae6-acdc-6cb476674aa2",
	'');
INSERT INTO S_SPARM
	VALUES ("50a4fa37-71bf-46dd-99e9-fb9479f3fbb7",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a4_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"8acfb59e-a9cd-48b5-8a81-5513e6fc308e",
	'');
INSERT INTO S_SPARM
	VALUES ("4c5eba5f-8a0d-42f8-8005-b6b4fce94c20",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a5_phrase',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"50a4fa37-71bf-46dd-99e9-fb9479f3fbb7",
	'');
INSERT INTO S_SPARM
	VALUES ("02c68b38-62be-41f4-be18-3c0269c76015",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a6_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"4c5eba5f-8a0d-42f8-8005-b6b4fce94c20",
	'');
INSERT INTO S_SPARM
	VALUES ("84a48708-d5fd-45b1-a693-8d6d0e6496bc",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a7_chain_start_val',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"02c68b38-62be-41f4-be18-3c0269c76015",
	'');
INSERT INTO S_SPARM
	VALUES ("f0d0847d-5d78-403c-b485-7c08c9850601",
	"da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	'a8_chain_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"84a48708-d5fd-45b1-a693-8d6d0e6496bc",
	'');
INSERT INTO PE_PE
	VALUES ("da600b0e-724c-4356-b9c3-01fa4b27a8c1",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("277e8996-b705-4d57-9ff4-b3be40d72948",
	"00000000-0000-0000-0000-000000000000",
	'has_valid_phrase',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any r_rel from instances of R_REL where ( selected.Rel_ID == param.a1_rel );
if ( r_rel.is_reflexive() )
  if ( param.a2_phrase != GD::NULL_UNIQUE_ID() )
    current_scope = ::get_current_scope();
    select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
    dest_rel_phrase = OS::remove_ticks( ticked_string: blk.TempBuffer );
    dest_rel_oir_id = param.a3_right_oir_id;
    left_oir_id = param.a6_left_oir_id;
    right_oir_id = param.a3_right_oir_id;
    if ( param.a8_left_obj_id == param.a5_right_obj_id )
      select any right_oir from instances of R_OIR where (selected.OIR_ID == GD::NULL_UNIQUE_ID()); 
      select any left_oir from instances of R_OIR where (selected.OIR_ID == GD::NULL_UNIQUE_ID()); 
      select many cias related by r_rel->R_OIR[R201];
      for each cia in cias
	    if (cia.OIR_ID == param.a3_right_oir_id)
		  right_oir = cia;
	    elif (cia.OIR_ID == param.a6_left_oir_id)
		  left_oir = cia;	
	    end if;
      end for;
      if ( left_oir.get_text_phrase() == dest_rel_phrase )
        dest_rel_oir_id = left_oir.OIR_ID;
      elif ( right_oir.get_text_phrase() != dest_rel_phrase )
        ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
        ERR::reportParseError( msg: 
                 "Class ->"+ param.a4_right_obj_name+"<- in reflexive association ->R" +
              GD::int_to_string(value: r_rel.Numb) + 
               "<- does not contain destination association phrase ->"+
                 dest_rel_phrase  +"<-",
                 token: param.a9_rule_token );
      end if;
    else
              // We are navigating via the link class, which means we are
              // either at the associated class and going thru the link
              // class or we are at the link class going thru the
              // associated class. In either case, simply make sure the
              // association phrase match either one of the associated classes.
              // Remember we must save the oir affiliated with the phrase;
              // additionally we need to save the left and right oirs so the
              // multiplicity can be determined later.
             
              select one assoc_rel related by r_rel->R_ASSOC[R206]; 
              if ( empty assoc_rel )
                ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
                ERR::reportParseError( msg: 
                   "Reflexive association ->R" +
                      GD::int_to_string(value: r_rel.Numb) + 
                      "<- is not linked, and should be",
                   token: param.a9_rule_token );
                  return false;
              end if;
              
              select one rel_associator related by assoc_rel->R_ASSR[R211];
              select one rel_aone related by assoc_rel->R_AONE[R209];
              select one rel_aoth related by assoc_rel->R_AOTH[R210];
              
              select any left_oir from instances of R_OIR where ( selected.OIR_ID == param.a6_left_oir_id );
              select one left_oir_assr related by left_oir->R_RGO[R203]->R_ASSR[R205];
              if ( not_empty rel_associator and not_empty left_oir_assr
                  and rel_associator.OIR_ID == left_oir_assr.OIR_ID )

                  // The left class is the link class and the right is
                  // one of the associators. The destination phrase should match
                  // one of the associators.
                  
                  if ( rel_aone.Txt_Phrs == dest_rel_phrase )
                      right_oir_id = rel_aone.OIR_ID;
                  elif ( rel_aoth.Txt_Phrs == dest_rel_phrase )
                      right_oir_id = rel_aoth.OIR_ID;
                  else
                    ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
                     ERR::reportParseError( msg: 
                           "Class ->"+ param.a4_right_obj_name+"<- in reflexive association ->R" +
                           GD::int_to_string(value: r_rel.Numb) + 
                           "<- does not contain destination association phrase ->"+
                           dest_rel_phrase  +"<-",
                         token: param.a9_rule_token );
                      return false;
                   end if;
              else
                  // The left class is one of the associators and the right
                  // class is the link class. Even though the right
                  // class is the link class, the destination phrase
                  // must match with one of the associators, and we must
                  // store the destination phrase of the matching associator.
                  // However, the left_oinir_ptr should be OPPOSITE the phrase.
                  
                  if ( rel_aone.Txt_Phrs == dest_rel_phrase )
                      left_oir_id = rel_aoth.OIR_ID;
                  elif ( rel_aoth.Txt_Phrs == dest_rel_phrase )
                      left_oir_id = rel_aone.OIR_ID;
                  else
                    ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
                     ERR::reportParseError( msg: 
                           "Class ->"+ param.a4_right_obj_name+"<- in reflexive association ->R" +
                           GD::int_to_string(value: r_rel.Numb) + 
                           "<- does not contain destination association phrase ->"+
                           dest_rel_phrase  +"<-",
                         token: param.a9_rule_token );
                      return false;
                  end if;
              end if;
    end if;
  else
    ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
    ERR::reportParseError( msg: 
         "The destination association phrase must be specified for reflexive association ->R"+
          GD::int_to_string(value: r_rel.Numb) + "<- between classes ->" + 
             param.a7_left_obj_name+"<- and ->"+param.a4_right_obj_name+"<-",
          token: param.a9_rule_token );
  end if;
else
  // not reflexive
  if ( param.a2_phrase != GD::NULL_UNIQUE_ID() )
    current_scope = ::get_current_scope();
    select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
    dest_rel_phrase = OS::remove_ticks( ticked_string: blk.TempBuffer );
    select any right_oir from instances of R_OIR where ( selected.OIR_ID == param.a3_right_oir_id );
    if ( right_oir.get_text_phrase() != dest_rel_phrase )
      ::clear_rel_data( a1_chain_start_val: param.b1_chain_start_val, a2_chain_id: param.b2_chain_id, a3_where_val: GD::NULL_UNIQUE_ID() );
      ERR::reportParseError( msg: 
              "Class ->"+param.a4_right_obj_name+"<- in association ->R" +
              GD::int_to_string(value: r_rel.Numb) + 
              "<- does not contain destination association phrase ->"+ dest_rel_phrase +"<-",
              token: param.a9_rule_token );
    end if;
  end if;
end if;
return true;















































































',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2d1d7f84-ab1f-4447-87ee-8f82ea8219c6",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a1_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("40828801-b412-480e-998f-7f1b5a812934",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a2_phrase',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2d1d7f84-ab1f-4447-87ee-8f82ea8219c6",
	'');
INSERT INTO S_SPARM
	VALUES ("a41e751e-ac8d-4ddb-8af8-376ab3085218",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a3_right_oir_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"40828801-b412-480e-998f-7f1b5a812934",
	'');
INSERT INTO S_SPARM
	VALUES ("2aa06b82-2ac7-4daf-824d-488bef50164b",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a4_right_obj_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"a41e751e-ac8d-4ddb-8af8-376ab3085218",
	'');
INSERT INTO S_SPARM
	VALUES ("f8d37cdc-4e4a-42c7-8f32-925e9c97d3bc",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a5_right_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"2aa06b82-2ac7-4daf-824d-488bef50164b",
	'');
INSERT INTO S_SPARM
	VALUES ("49cab8cc-a72a-4d77-b09d-1c52e11e0470",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a6_left_oir_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f8d37cdc-4e4a-42c7-8f32-925e9c97d3bc",
	'');
INSERT INTO S_SPARM
	VALUES ("b2215f3a-5520-4064-89bf-1c337507ff26",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a7_left_obj_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"49cab8cc-a72a-4d77-b09d-1c52e11e0470",
	'');
INSERT INTO S_SPARM
	VALUES ("f1676105-5b03-40a8-ba7c-270deab29b25",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a8_left_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"b2215f3a-5520-4064-89bf-1c337507ff26",
	'');
INSERT INTO S_SPARM
	VALUES ("03c2e21e-16c2-415d-8d7d-7d0cee09d911",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'a9_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"f1676105-5b03-40a8-ba7c-270deab29b25",
	'');
INSERT INTO S_SPARM
	VALUES ("0c0ce369-4736-4ddb-a62c-2aec0e7e4a4b",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'b1_chain_start_val',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"03c2e21e-16c2-415d-8d7d-7d0cee09d911",
	'');
INSERT INTO S_SPARM
	VALUES ("27d63fa5-ae65-4921-8eb6-8ffde18816b0",
	"277e8996-b705-4d57-9ff4-b3be40d72948",
	'b2_chain_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0c0ce369-4736-4ddb-a62c-2aec0e7e4a4b",
	'');
INSERT INTO PE_PE
	VALUES ("277e8996-b705-4d57-9ff4-b3be40d72948",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c2e3d086-1a8a-4307-a854-84a49de741c4",
	"00000000-0000-0000-0000-000000000000",
	'process_from_instances',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'  select any var from instances of V_VAR
          where (selected.Var_ID == param.a1_local_var );
  select any stmt from instances of ACT_SMT
          where (selected.Statement_ID ==   param.a2_stmt_id );
  select one irv related by var->V_INT[R814];
  select one irsv related by var->V_INS[R814];
  select one obj related by stmt->ACT_FIO[R603]->O_OBJ[R677];
  if ( param.a5_has_where )
    select one obj related by stmt->ACT_FIW[R603]->O_OBJ[R676];
  end if;
  if ( var.Declared and param.a3_mult == "any" and empty irv )
    stmt.dispose();
    ERR::reportParseError( msg: "Variable ->"+var.Name+"<- does not exist in scope as an object instance variable",
        token: param.a4_rule_token );
  elif ( var.Declared and param.a3_mult != "any" and empty irsv )
    stmt.dispose();
    ERR::reportParseError( msg: "Variable ->"+var.Name+"<- does not exist in scope as an object instance set variable",
        token: param.a4_rule_token );
  else
    is_implicit = false;
    stmt_ok = false;
    if ( var.Declared )
      if ( param.a3_mult != "any" )
        select one irsv_obj related by irsv->O_OBJ[R819];
        if ( irsv_obj.Obj_ID != obj.Obj_ID )
          stmt.dispose();
          ERR::reportParseError( msg: "Variable ->"+var.Name+"<- already exists as a different type",
            token: param.a4_rule_token );
        else
          is_implicit = false;
          stmt_ok = true;
        end if;
      elif ( param.a3_mult == "any" )
        select one irv_obj related by irv->O_OBJ[R818];
        if ( irv_obj.Obj_ID != obj.Obj_ID )
          stmt.dispose();
          ERR::reportParseError( msg: "Variable ->"+var.Name+"<- already exists as a different type",
            token: param.a4_rule_token );
        else
          is_implicit = false;
          stmt_ok = true;
        end if;
      end if;
    else
      stmt_ok = true;
      is_implicit = true;
      if ( param.a3_mult == "any" )
        var.migrate_to_int();
        select one inst_ref related by var->V_INT[R814];
        relate inst_ref to obj across R818;
        ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var.Var_ID, p3_obj_id:obj.Obj_ID);
      else
        var.migrate_to_ins();
        select one inst_ref_set related by var->V_INS[R814];
        relate inst_ref_set to obj across R819;
        ::connect_inst_ref_var_to_datatype(p1_is_set:true, p2_var_id:var.Var_ID, p3_obj_id:obj.Obj_ID);
      end if;
      var.Declared = true;
    end if;
    if ( stmt_ok )
      if ( param.a5_has_where )
        select one fiw related by stmt->ACT_FIW[R603];
        fiw.cardinality = param.a3_mult;
        fiw.is_implicit = is_implicit;
        relate fiw to var across R665;
      else
        select one fio related by stmt->ACT_FIO[R603];
        fio.cardinality = param.a3_mult;
        fio.is_implicit = is_implicit;
        relate fio to var across R639;
      end if;
    end if;
  end if;
  return stmt.Statement_ID;











































































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("acae20da-791b-4cce-bb53-84a2ce0133ce",
	"c2e3d086-1a8a-4307-a854-84a49de741c4",
	'a1_local_var',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("71aa0a5f-7744-4565-a1b3-b769f48dd6a3",
	"c2e3d086-1a8a-4307-a854-84a49de741c4",
	'a2_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"acae20da-791b-4cce-bb53-84a2ce0133ce",
	'');
INSERT INTO S_SPARM
	VALUES ("6e306dd5-296f-430d-a7a0-ced21c7e346f",
	"c2e3d086-1a8a-4307-a854-84a49de741c4",
	'a3_mult',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"71aa0a5f-7744-4565-a1b3-b769f48dd6a3",
	'');
INSERT INTO S_SPARM
	VALUES ("2383b90f-1f24-40b1-937e-b63bb1a7eda0",
	"c2e3d086-1a8a-4307-a854-84a49de741c4",
	'a4_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"6e306dd5-296f-430d-a7a0-ced21c7e346f",
	'');
INSERT INTO S_SPARM
	VALUES ("27525e80-9a61-4b6d-8845-670432a034d1",
	"c2e3d086-1a8a-4307-a854-84a49de741c4",
	'a5_has_where',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"2383b90f-1f24-40b1-937e-b63bb1a7eda0",
	'');
INSERT INTO PE_PE
	VALUES ("c2e3d086-1a8a-4307-a854-84a49de741c4",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b812cb0d-72e8-481a-bebf-0a3270631ce0",
	"00000000-0000-0000-0000-000000000000",
	'selected_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'if ( param.name == "Selected" or param.name == "selected" or param.name == "SELECTED" )
  current_scope = ::get_current_scope();
  select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
  if ( not blk.InWhereSpec )
    ERR::reportParseError( msg: "Keyword ->Selected<- cannot be used outside a where expression",
          token: param.rule_token );
    ::clear_value_data();
  end if;
  return true;
else
  return false;
end if;







































































',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("fa4d6027-ca1b-446f-b7bc-2f3f0959121c",
	"b812cb0d-72e8-481a-bebf-0a3270631ce0",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("53e55143-4dd7-4c9e-b83c-788853b02901",
	"b812cb0d-72e8-481a-bebf-0a3270631ce0",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"fa4d6027-ca1b-446f-b7bc-2f3f0959121c",
	'');
INSERT INTO PE_PE
	VALUES ("b812cb0d-72e8-481a-bebf-0a3270631ce0",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	"00000000-0000-0000-0000-000000000000",
	'process_related_by',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'  select any var from instances of V_VAR
          where (selected.Var_ID == param.a1_local_var );
  select any stmt from instances of ACT_SMT
          where (selected.Statement_ID == param.a2_stmt_id );
  select one sel related by stmt->ACT_SEL[R603];
  select one irv related by var->V_INT[R814];
  select one irsv related by var->V_INS[R814];
  select one link related by sel->ACT_LNK[R637];
  last_link = link;
  mult = "one";
  if ( not_empty irsv )
    mult = "many";
  end if;
  while ( not_empty link )
    last_link = link;
    if ( link.Mult == Multiplicity::Many )
      mult = "many";
    end if;
    select one link related by last_link->ACT_LNK[R604.''precedes''];
  end while;

  if ( param.a3_mult == "one" and mult == "many" )
    if ( not var.Declared )
      var.dispose();
    end if;
    stmt.dispose();
    ERR::reportParseError( msg: "At least one association has a right class with multiplicity of many.  With SELECT ONE, all right classes must have multiplicity of one",
        token: param.a4_rule_token );
  elif ( param.a3_mult == "any" and mult == "one" )
    if ( not var.Declared )
      var.dispose();
    end if;
    stmt.dispose();
    ERR::reportParseError( msg: "No right class has multiplicity of many. With SELECT ANY, at least one class must have multiplicity of many",
        token: param.a4_rule_token );
  elif ( param.a3_mult == "many" and mult == "one" )
    if ( not var.Declared )
      var.dispose();
    end if;
    stmt.dispose();
    ERR::reportParseError( msg: "No right class has multiplicity of many. With SELECT MANY, at least one class must have multiplicity of many",
        token: param.a4_rule_token );
  end if;

  select one obj related by last_link->O_OBJ[R678];
  if ( var.Declared and
        (param.a3_mult == "any" or param.a3_mult == "one") and empty irv )
    stmt.dispose();
    ERR::reportParseError( msg: "Variable ->"+var.Name+"<- does not exist in scope as an object instance variable",
        token: param.a4_rule_token );
  elif ( var.Declared and param.a3_mult == "many" and empty irsv )
    stmt.dispose();
    ERR::reportParseError( msg: "Variable ->"+var.Name+"<- does not exist in scope as an object instance set variable",
        token: param.a4_rule_token );
  else
    stmt_ok = false;
    if ( var.Declared )
      if ( param.a3_mult == "many" )
        select one irsv_obj related by irsv->O_OBJ[R819];
        if ( irsv_obj.Obj_ID != obj.Obj_ID )
          stmt.dispose();
          ERR::reportParseError( msg: "Variable ->"+var.Name+"<- already exists as a different type",
            token: param.a4_rule_token );
        else
          sel.is_implicit = false;
          stmt_ok = true;
        end if;
      else
        select one irv_obj related by irv->O_OBJ[R818];
        if ( irv_obj.Obj_ID != obj.Obj_ID )
          stmt.dispose();
          ERR::reportParseError( msg: "Variable ->"+var.Name+"<- already exists as a different type",
            token: param.a4_rule_token );
        else
          sel.is_implicit = false;
          stmt_ok = true;
        end if;
      end if;
    else
      stmt_ok = true;
      sel.is_implicit = true;
      if ( param.a3_mult != "many" )
        var.migrate_to_int();
        select one inst_ref related by var->V_INT[R814];
        relate inst_ref to obj across R818;
        ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var.Var_ID, p3_obj_id:obj.Obj_ID);
      else
        var.migrate_to_ins();
        select one inst_ref_set related by var->V_INS[R814];
        relate inst_ref_set to obj across R819;
        ::connect_inst_ref_var_to_datatype(p1_is_set:true, p2_var_id:var.Var_ID, p3_obj_id:obj.Obj_ID);
      end if;
      var.Declared = true;
    end if;
    if ( stmt_ok )
      sel.cardinality = param.a3_mult;
      relate sel to var across R638;
    end if;
  end if;
  return stmt.Statement_ID;

',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1eefa257-d985-43b3-85ab-1aa17027c86f",
	"e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	'a1_local_var',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("737f8522-106e-43fd-b850-90579c78d4ce",
	"e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	'a2_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1eefa257-d985-43b3-85ab-1aa17027c86f",
	'');
INSERT INTO S_SPARM
	VALUES ("5cfde207-ec95-4558-8864-4baf5e63b59c",
	"e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	'a3_mult',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"737f8522-106e-43fd-b850-90579c78d4ce",
	'');
INSERT INTO S_SPARM
	VALUES ("c6006b19-c9da-439e-854a-61e2f661b3f8",
	"e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	'a4_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"5cfde207-ec95-4558-8864-4baf5e63b59c",
	'');
INSERT INTO PE_PE
	VALUES ("e8446a53-8d7c-473d-9f36-9ec84e70bf4c",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d26fd5cb-f2e4-4140-9a6b-3494a9634292",
	"00000000-0000-0000-0000-000000000000",
	'get_right_object_multiplicity',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'result_mult = Multiplicity::Unknown;
  
// We also have to get the multiplicity of the right
// class so that the cardinality of the association chain can be determined
// to make sure matches the SELECT ONE/ANY/MANY.
select any r_rel from instances of R_REL where ( selected.Rel_ID == param.a2_rel );
select any right_oir from instances of R_OIR where (selected.OIR_ID == GD::NULL_UNIQUE_ID()); 
select any left_oir from instances of R_OIR where (selected.OIR_ID == GD::NULL_UNIQUE_ID()); 
select many cias related by r_rel->R_OIR[R201];
for each cia in cias
	if (cia.OIR_ID == param.a3_right)
		right_oir = cia;
	elif (cia.OIR_ID == param.a1_left)
		left_oir = cia;	
	end if;
end for;
select one simp related by r_rel->R_SIMP[R206];
if ( not_empty simp )
  result_mult = right_oir.get_multiplicity();
else  // empty simp
  select one inh related by r_rel->R_SUBSUP[R206];
  if (not_empty inh )
    result_mult = Multiplicity::One;
  else // empty inh
    select one comp related by r_rel->R_COMP[R206];
    if ( not_empty comp )
      result_mult = right_oir.get_multiplicity();
    else // empty comp
      select one assoc related by r_rel->R_ASSOC[R206];
      if ( not_empty assoc )
        select one assr related by left_oir->R_RGO[R203]->R_ASSR[R205];
        if ( not_empty assr )
          // Real simply, if the left class is the link class,
          // then we should ALWAYS use ONE multiplicity because we can
          // only navigate to ONE and only ONE of the associators.
          
          result_mult = Multiplicity::One;
        else 
          select one aone related by left_oir->R_RTO[R203]->R_AONE[R204];
          if (not_empty aone )
            select one aoth related by right_oir->R_RTO[R203]->R_AOTH[R204];
            if ( not_empty aoth )
              result_mult = right_oir.get_multiplicity();
            else 
              select one assr related by right_oir->R_RGO[R203]->R_ASSR[R205];
              if ( not_empty assr )
                select one assoc_aoth related by assoc->R_AOTH[R210];
                if ( assr.Mult == 0 )
                   if ( r_rel.is_reflexive() )
                    // the roles are not reversed for link reflexive associations
                    if ( aone.Mult == 0 )  // 0 == ONE
                      result_mult = Multiplicity::One;
                    else
                      result_mult = Multiplicity::Many;
                    end if;
                   else
                     if ( assoc_aoth.Mult == 0 )  // 0 == ONE
                       result_mult =Multiplicity::One;
                     else
                        result_mult = Multiplicity::Many;
                     end if;
                  end if;  // is_reflexive
                else
                  result_mult = Multiplicity::Many;
                end if;
              else  // empty assr
                result_mult = Multiplicity::One;
              end if;  // not_empty assr
            end if;  // not_empty aoth
          else 
            select one aoth related by left_oir->R_RTO[R203]->R_AOTH[R204];
            if ( not_empty aoth )
              select one aone related by right_oir->R_RTO[R203]->R_AONE[R204];
              if ( not_empty aone )
                result_mult = right_oir.get_multiplicity();
              else 
                select one assr related by right_oir->R_RGO[R203]->R_ASSR[R205];
                if ( not_empty assr )
                  select one assoc_aone related by assoc->R_AONE[R209];
                  if ( assr.Mult == 0)
                     if ( r_rel.is_reflexive() )
                      // the roles are not reversed for link reflexive associations
                      if ( aoth.Mult == 0 )  // 0 == ONE
                        result_mult = Multiplicity::One;
                      else
                        result_mult = Multiplicity::Many;
                      end if;
                     else
                      if ( assoc_aone.Mult == 0 )  // 0 == ONE
                        result_mult = Multiplicity::One;
                      else
                        result_mult = Multiplicity::Many;
                      end if;
                     end if;
                  else
                    result_mult = Multiplicity::Many;
                  end if;
                else
                  result_mult =Multiplicity::One;
                end if;
              end if;  // not_empty aone
            else  // empty aoth
              result_mult = Multiplicity::One;
            end if;  // not_empty aoth
          end if;  // not_empty aone
        end if;  // not_empty assr
      else  // empty assoc
        result_mult =Multiplicity::One;
      end if;  // not_empty assoc
    end if;  // not_empty comp
  end if;  // not_empty inh
end if;  // not_empty simp


return  result_mult ;



































































',
	"c785b82e-b0aa-4f8c-8df4-f1b9cf451edd",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("4b38923d-973f-48df-af4c-61e1b59f8586",
	"d26fd5cb-f2e4-4140-9a6b-3494a9634292",
	'a1_left',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("96ab014d-0a97-4465-884c-ca0e96b1957d",
	"d26fd5cb-f2e4-4140-9a6b-3494a9634292",
	'a2_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4b38923d-973f-48df-af4c-61e1b59f8586",
	'');
INSERT INTO S_SPARM
	VALUES ("4be421e5-7c19-4b18-9572-385e4af122fc",
	"d26fd5cb-f2e4-4140-9a6b-3494a9634292",
	'a3_right',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"96ab014d-0a97-4465-884c-ca0e96b1957d",
	'');
INSERT INTO PE_PE
	VALUES ("d26fd5cb-f2e4-4140-9a6b-3494a9634292",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e995ba81-2d79-49d8-b66d-332e8539c1a2",
	"00000000-0000-0000-0000-000000000000",
	'clear_select',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any var from instances of V_VAR
        where (selected.Var_ID == param.var_id );
if ( not_empty var )
  if ( not var.Declared )
    var.dispose();
  end if;
end if;


',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("06922c26-4e61-4946-acf7-c4703894a5f9",
	"e995ba81-2d79-49d8-b66d-332e8539c1a2",
	'var_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e995ba81-2d79-49d8-b66d-332e8539c1a2",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("47937403-e16f-4122-8ded-51d4df0768dc",
	"00000000-0000-0000-0000-000000000000",
	'clear_rel_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'  if ( param.a3_where_val != GD::NULL_UNIQUE_ID() )
    select any val from instances of V_VAL
         where ( selected.Value_ID == param.a3_where_val );
    if ( not_empty val )
      val.dispose();
    end if;
  end if;

  if ( param.a2_chain_id != GD::NULL_UNIQUE_ID() )
    select any start_link from instances of ACT_LNK 
         where ( selected.Link_ID == param.a2_chain_id );
    if ( not_empty start_link )
      // follow links to the end, deleting along the way
      //  but don''t delete start_link yet
      next_id = start_link.Next_Link_ID;
      select any link from instances of ACT_LNK where ( selected.Link_ID == next_id );
      while ( not_empty link )
        last_link = link;
        select one link related by last_link->ACT_LNK[R604.''precedes''];
        last_link.dispose();
      end while;

      //  follow links back to beginning, deleting along the way
      link = start_link;
      while ( not_empty link )
        this_link = link;
        select one link related by this_link->ACT_LNK[R604.''succeeds''];
        this_link.dispose();
      end while;
    end if;
  end if;

  if ( param.a1_chain_start_val != GD::NULL_UNIQUE_ID() )
    select any val from instances of V_VAL where ( selected.Value_ID == param.a1_chain_start_val );
    if ( not_empty val )
      val.dispose();
     end if;
  end if;

',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d6da3182-e230-4ab3-9637-87f461746fdf",
	"47937403-e16f-4122-8ded-51d4df0768dc",
	'a1_chain_start_val',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1166bfb6-9b85-44ca-b7ed-460f9c3e3533",
	"47937403-e16f-4122-8ded-51d4df0768dc",
	'a2_chain_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"d6da3182-e230-4ab3-9637-87f461746fdf",
	'');
INSERT INTO S_SPARM
	VALUES ("b234ecc1-bfcc-459a-a567-7104510b7a3d",
	"47937403-e16f-4122-8ded-51d4df0768dc",
	'a3_where_val',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1166bfb6-9b85-44ca-b7ed-460f9c3e3533",
	'');
INSERT INTO PE_PE
	VALUES ("47937403-e16f-4122-8ded-51d4df0768dc",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4099498a-7567-46d5-a49e-3fc370436ee8",
	"00000000-0000-0000-0000-000000000000",
	'clear_for_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any iter from instances of V_VAR where ( selected.Var_ID == param.a1_iter );
if ( not_empty iter and not iter.Declared )
  iter.dispose();
end if;

select any for_blk from instances of ACT_BLK where (selected.Block_ID == param.a2_block);
if ( not_empty for_blk )
  for_blk.dispose();
end if;

select any stmt from instances of ACT_SMT
          where ( selected.Statement_ID == param.a3_stmt_id );
if ( not_empty stmt )
  stmt.dispose();
end if;






















































',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5a219e1c-c8f1-4c91-990b-a59a9f8ccfe1",
	"4099498a-7567-46d5-a49e-3fc370436ee8",
	'a1_iter',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("ffe93131-670e-4058-92eb-075318e2c560",
	"4099498a-7567-46d5-a49e-3fc370436ee8",
	'a2_block',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"5a219e1c-c8f1-4c91-990b-a59a9f8ccfe1",
	'');
INSERT INTO S_SPARM
	VALUES ("0c2f1992-4e4b-47ce-bd81-5324bba2fbfe",
	"4099498a-7567-46d5-a49e-3fc370436ee8",
	'a3_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ffe93131-670e-4058-92eb-075318e2c560",
	'');
INSERT INTO PE_PE
	VALUES ("4099498a-7567-46d5-a49e-3fc370436ee8",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bca7cdb5-2ec8-4119-8f44-79a36008028c",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_bridge',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  select one package related by containingElem->EP_PKG[R8001];

  // Check for EE keyletter match for token
  if not_empty component
    component.collectVisibleElementsForName(name:param.key_lett,
         type:ElementTypeConstants::EE, originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  else
    package.collectVisibleElementsForName(name:param.key_lett,
         type:ElementTypeConstants::EE, descending:false,
                           originatingContainerID:containingElem.Element_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
  end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                    selected.Name == param.key_lett and 
                                      selected.Type == ElementTypeConstants::EE; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty package
    select any pkgResultSet related by package->PE_SRS[R8005] where
                                    selected.Name == param.key_lett and 
                                      selected.Type == ElementTypeConstants::EE; 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  if empty results
    ERR::reportParseError( 
        msg: "Cannot find external entity ->"+param.key_lett+"<-", 
                                                      token: param.rule_token ); 
  else  // results not empty
    // select the first ee in the result set (it is acceptable to have multiple
    // ees and we only want to validate multiple bridges in the same ee)
    select any ee related by results->S_EE[R8001];
    select many brg_set related by ee->S_BRG[R19]
                                              where selected.Name == param.name;
    if ( empty brg_set )
      ERR::reportParseError( 
          msg: "Cannot find specified bridge ->"+param.key_lett+"::%s<-", 
                                                      token: param.rule_token ); 
    elif ( cardinality brg_set > 1 )
      ERR::reportParseError(msg: "More than one bridge with name ->%s<- " +
          "You will need to eventually clear this up", token: param.rule_token);
    else // cardinality brg_set == 1
      select any brg related by results->S_EE[R8001]->S_BRG[R19]
                                              where selected.Name == param.name;
      create object instance brv of V_BRV;
      brv.ParmListOK = true;
      create object instance val of V_VAL;
      relate val to block across R826;
      relate val to brv across R801;

      val.LineNumber = ::getLineNumber(rule_token: param.rule_token);
      val.StartPosition = ::getColumn(rule_token: param.rule_token);
      val.setEndPosition();

      // store the textual position of the external entity key-letters
      brv.externalEntityKeyLettersLineNumber =
                                              block.currentKeyLettersLineNumber;
      brv.externalEntityKeyLettersColumn = block.currentKeyLettersColumn;

      relate brg to brv across R828;
      select one bdt related by brg->S_DT[R20];
      relate val to bdt across R820;

      return val.Value_ID;
    end if;
  end if;
  return GD::NULL_UNIQUE_ID();
else  // non-generic package path
  select any ee from instances of S_EE where
                                            selected.Key_Lett == param.key_lett;
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];

    ERR::reportParseError( 
        msg: "Cannot find specified bridge ->"+ee.Key_Lett+"::%s<-", 
        token: param.rule_token ); 
  return GD::NULL_UNIQUE_ID();
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8bff5ec6-553f-42a7-856f-a2637c0510fc",
	"bca7cdb5-2ec8-4119-8f44-79a36008028c",
	'key_lett',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("71ea2abb-687f-425a-bc4d-59b09e790033",
	"bca7cdb5-2ec8-4119-8f44-79a36008028c",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"8bff5ec6-553f-42a7-856f-a2637c0510fc",
	'');
INSERT INTO S_SPARM
	VALUES ("f7d2a7e1-41c2-485e-a813-9d8d0c3c5f25",
	"bca7cdb5-2ec8-4119-8f44-79a36008028c",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"71ea2abb-687f-425a-bc4d-59b09e790033",
	'');
INSERT INTO PE_PE
	VALUES ("bca7cdb5-2ec8-4119-8f44-79a36008028c",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_transform',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any obj from instances of O_OBJ where ( selected.Obj_ID == param.a1_obj_id ); 
select many tfr_set related by obj->O_TFR[R115] where selected.Name == param.a2_name;
if ( empty tfr_set )
   ERR::reportParseError( 
        msg: "Cannot find specified operation ->"+obj.Key_Lett+"::%s<-", 
        token: param.a3_rule_token ); 
elif ( cardinality tfr_set > 1 )
   ERR::reportParseError( msg:
"More than one operation with name ->%s<- You will need to eventually run the audit and/or clear this up",
          token: param.a3_rule_token );
else
  select any tfr related by obj->O_TFR[R115] where selected.Name == param.a2_name;
  if ( tfr.Instance_Based == Scope::Instance and param.a4_classBased )
    ERR::reportParseError( 
       msg: "Operation ->%s<- is instance-based and must be invoked as <var>."+param.a2_name,
        token: param.a3_rule_token ); 
  elif ( tfr.Instance_Based == Scope::Class and not param.a4_classBased )
    ERR::reportParseError( 
       msg: "Operation ->%s<- is class-based and must be invoked as <kl>::"+param.a2_name,
        token: param.a3_rule_token ); 
  else
    create object instance trv of V_TRV;
    trv.ParmListOK = true;
    create object instance val of V_VAL;
    current_scope = ::get_current_scope();
    select any block from instances of ACT_BLK where (selected.Block_ID == current_scope);
    relate val to block across R826;
    relate val to trv across R801;

    relate tfr to trv across R829;
    select one tdt related by tfr->S_DT[R116];
    relate val to tdt across R820;

    val.LineNumber = ::getLineNumber(rule_token: param.a3_rule_token);
    val.StartPosition = ::getColumn(rule_token: param.a3_rule_token);
    val.setEndPosition();

	// if the operation is class-based
	if (tfr.Instance_Based == Scope::Class)
		// store the textual position of the class key-letters
		trv.modelClassKeyLettersLineNumber = block.currentKeyLettersLineNumber;
		trv.modelClassKeyLettersColumn = block.currentKeyLettersColumn;
	end if;

    return val.Value_ID;
  end if;
end if;

return GD::NULL_UNIQUE_ID();







































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("eac290ad-786f-4c7c-bf47-6b8e83a9037f",
	"bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	'a1_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("417d1680-6dd8-46ff-8bec-a9b37541074e",
	"bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	'a2_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"eac290ad-786f-4c7c-bf47-6b8e83a9037f",
	'');
INSERT INTO S_SPARM
	VALUES ("f77a7723-0954-4d34-904f-5794219c84b2",
	"bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"417d1680-6dd8-46ff-8bec-a9b37541074e",
	'');
INSERT INTO S_SPARM
	VALUES ("6b7799af-2803-471e-9921-bda0ea4b7cc3",
	"bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	'a4_classBased',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f77a7723-0954-4d34-904f-5794219c84b2",
	'');
INSERT INTO PE_PE
	VALUES ("bf85d012-0f2c-4be2-bcea-0443a2daa23a",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f874eea2-a599-4065-bc02-fb2732062450",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_invocation',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'// ::is_valid_invocation()
if ( param.a2_isRval )
  if ( param.a1_type == "void" )
    select any val from instances of V_VAL where
                                               selected.Value_ID == param.a3_id;
    if ( not_empty val )
      val.dispose();
    end if;
    ERR::reportParseError( msg: param.a4_name +
          "<- has no return type (return type is void) and " +
                                  "thus cannot be used in an expression",  
                                                   token: param.a5_rule_token );
  end if;
else
  if ( param.a1_type != "void" )
    select any val from instances of V_VAL where
                                               selected.Value_ID == param.a3_id;
    if ( not_empty val )
      val.dispose();
    end if;
    ERR::reportParseError( msg: param.a4_name +
          "<- has a return value which is not being assigned to a variable",
          token: param.a5_rule_token );
  end if;
end if;
return param.a3_id;



































',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("20d011e5-983b-4ec3-b28c-ecab5bd174c7",
	"f874eea2-a599-4065-bc02-fb2732062450",
	'a1_type',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("32561b5c-99a1-46fd-9e77-72972805e122",
	"f874eea2-a599-4065-bc02-fb2732062450",
	'a2_isRval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"20d011e5-983b-4ec3-b28c-ecab5bd174c7",
	'');
INSERT INTO S_SPARM
	VALUES ("aa9bdcc5-11f0-4c64-8920-7b8a0e7b4be6",
	"f874eea2-a599-4065-bc02-fb2732062450",
	'a3_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"32561b5c-99a1-46fd-9e77-72972805e122",
	'');
INSERT INTO S_SPARM
	VALUES ("0bba6b9b-804c-48e9-8a94-2b4c550a8c4b",
	"f874eea2-a599-4065-bc02-fb2732062450",
	'a4_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"aa9bdcc5-11f0-4c64-8920-7b8a0e7b4be6",
	'');
INSERT INTO S_SPARM
	VALUES ("19296610-4ff0-4932-a48f-30170eaee3cb",
	"f874eea2-a599-4065-bc02-fb2732062450",
	'a5_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"0bba6b9b-804c-48e9-8a94-2b4c550a8c4b",
	'');
INSERT INTO PE_PE
	VALUES ("f874eea2-a599-4065-bc02-fb2732062450",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b6f0657d-d1ed-41eb-bed6-c2ae934bc236",
	"00000000-0000-0000-0000-000000000000",
	'statement_create',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
if ( not_empty blk )
  create object instance stmt of ACT_SMT;
  relate blk to stmt across R602;

  return stmt.Statement_ID;
end if;
return GD::NULL_UNIQUE_ID();






',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b6f0657d-d1ed-41eb-bed6-c2ae934bc236",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ba13e395-fc05-4e21-981d-14db24ebd8d2",
	"00000000-0000-0000-0000-000000000000",
	'is_readonly_value',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any val from instances of V_VAL where selected.Value_ID == param.val_id;

// there are fewer read-write value types
select one tvl related by val->V_TVL[R801];
if ( not_empty tvl )
  return false;
end if;

select one avl related by val->V_AVL[R801];
if ( not_empty avl )
  return false;
end if;

select one irf related by val->V_IRF[R801];
if ( not_empty irf )
  return false;
end if;

select one isr related by val->V_ISR[R801];
if ( not_empty isr )
  return false;
end if;

select one pvl related by val->V_PVL[R801];
if ( not_empty pvl )
  select one bparm related by pvl->S_BPARM[R831];
  if ( not_empty bparm )
    return bparm.By_Ref == 0;
  end if;
  select one sparm related by pvl->S_SPARM[R832];
  if ( not_empty sparm )
    return sparm.By_Ref == 0;
  end if;
  select one tparm related by pvl->O_TPARM[R833];
  if ( not_empty tparm )
    return tparm.By_Ref == 0;
  end if;
end if;


return true;

',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("61381805-95e5-42b0-9304-7d6229462293",
	"ba13e395-fc05-4e21-981d-14db24ebd8d2",
	'val_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ba13e395-fc05-4e21-981d-14db24ebd8d2",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed710b1b-c551-4d8d-b0cf-13f92586a189",
	"00000000-0000-0000-0000-000000000000",
	'search_supertypes_for_event',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any sub_sm from instances of SM_SM where selected.SM_ID == param.a1_subtype_sm;
if not_empty sub_sm
  select one obj related by sub_sm->SM_ISM[R517]->O_OBJ[R518];
  select many oir_set related by obj->R_OIR[R201];
  event_no_splat = OS::remove_star( s: param.a2_evt_name );
  for each oir in oir_set
    select one sub related by oir->R_RGO[R203]->R_SUB[R205];
    if not_empty sub
      // it''s a subtype in this association
      select one sup_obj related by sub->R_SUBSUP[R213]->
          R_SUPER[R212]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201];
      if not_empty sup_obj
        select one sup_sm related by sup_obj->SM_ISM[R518]->SM_SM[R517];
        if not_empty sup_sm
          select any evt related by sup_sm->SM_EVT[R502] 
              where selected.Drv_Lbl == event_no_splat;
          if not_empty evt
            return sup_sm.SM_ID;
          else
            sm_id = ::search_supertypes_for_event( 
               a1_subtype_sm: sup_sm.SM_ID, a2_evt_name: event_no_splat);
            if ( sm_id != GD::NULL_UNIQUE_ID() )
              return sm_id;
            end if;
          end if;
        end if;
      end if;  // not_empty sup_obj
    end if;  // not_empty sub
  end for;
end if;

return GD::NULL_UNIQUE_ID();




















',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6c43c427-59a6-4be3-bb63-3897ce825eaf",
	"ed710b1b-c551-4d8d-b0cf-13f92586a189",
	'a1_subtype_sm',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0b23cbd0-c4a3-486c-9cd1-db2a89d182e8",
	"ed710b1b-c551-4d8d-b0cf-13f92586a189",
	'a2_evt_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"6c43c427-59a6-4be3-bb63-3897ce825eaf",
	'');
INSERT INTO PE_PE
	VALUES ("ed710b1b-c551-4d8d-b0cf-13f92586a189",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a26d01ae-4518-446c-97dd-e43b84f76bdb",
	"00000000-0000-0000-0000-000000000000",
	'process_class_event',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a1_stmt_id;
select one ess related by stmt->E_ESS[R603];
select one ges related by ess->E_GES[R701];

  select any sm from instances of SM_ASM 
      where selected.Obj_ID == param.a2_obj_id;
  select one evt related by ges->E_GSME[R703]->SM_EVT[R707];
  if ( empty sm )
    stmt.dispose();
    select any obj from instances of O_OBJ 
        where selected.Obj_ID == param.a2_obj_id;
    ERR::reportParseError( msg: 
        "Cannot find Class State Machine for class ->"+
        obj.Name+"<-",   token: param.a3_rule_token );
  elif ( empty evt )
    select one eeevt related by ges->E_GEE[R703]->S_EEEVT[R709];
    stmt.dispose();
    select one obj related by sm->O_OBJ[R519];
    ERR::reportParseError( msg: "Event ->"+eeevt.Drv_Lbl+
        "<- does not exist for class state machine of class ->"+obj.Name+"<-",
            token: param.a3_rule_token );
  else
    select one evt_sm related by evt->SM_SM[R502];
    if ( evt_sm.SM_ID != sm.SM_ID )
      stmt.dispose();
      select one obj related by sm->O_OBJ[R519];
      ERR::reportParseError( msg: "Event ->"+evt.Drv_Lbl+
          "<- does not exist for class state machine of class ->"+obj.Name+"<-",
              token: param.a3_rule_token );
    else
      if ( ess.PEIndicated )
        // non-polymorphic event with *
        stmt.dispose();
        ERR::reportParseError( msg: "Event is not a polymorphic event. Event label must not contain ''*''.",
               token: param.a3_rule_token );
      else
        edi_ok = ::is_valid_sm_event_data( a1_stmt_id: param.a1_stmt_id, a2_sm_id: evt_sm.SM_ID,
            a3_smevt_id: evt.SMevt_ID, a4_rule_token: param.a3_rule_token );
        if ( edi_ok )   
          select one gsme related by ges->E_GSME[R703];
          create object instance gar of E_GAR;
          relate gar to gsme across R705;
          return stmt.Statement_ID;
        end if;
      end if;
    end if;
  end if;
return GD::NULL_UNIQUE_ID();
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("ee07b75d-9d63-408e-88dc-fa9388e1087e",
	"a26d01ae-4518-446c-97dd-e43b84f76bdb",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f78fe609-689b-42cd-972c-4aa99ab0e98f",
	"a26d01ae-4518-446c-97dd-e43b84f76bdb",
	'a2_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"ee07b75d-9d63-408e-88dc-fa9388e1087e",
	'');
INSERT INTO S_SPARM
	VALUES ("ad91331d-4278-4722-bce7-13aaae94ae3e",
	"a26d01ae-4518-446c-97dd-e43b84f76bdb",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"f78fe609-689b-42cd-972c-4aa99ab0e98f",
	'');
INSERT INTO PE_PE
	VALUES ("a26d01ae-4518-446c-97dd-e43b84f76bdb",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cb30430c-5287-43e3-9ed0-d3c79d17703f",
	"00000000-0000-0000-0000-000000000000",
	'process_creation_event',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a1_stmt_id;
select one ess related by stmt->E_ESS[R603];
select one ges related by ess->E_GES[R701];

  select any sm from instances of SM_ISM 
      where selected.Obj_ID == param.a2_obj_id;
  select one evt related by ges->E_GSME[R703]->SM_EVT[R707];
  if ( empty evt )
    select one eeevt related by ges->E_GEE[R703]->S_EEEVT[R709];
    stmt.dispose();
    select one obj related by sm->O_OBJ[R518];
    ERR::reportParseError( msg: "Event ->"+eeevt.Drv_Lbl+
          "<- does not exist for class ->"+obj.Name+"<-",
            token: param.a3_rule_token );
  else
    select one evt_sm related by evt->SM_SM[R502];
    if ( evt_sm.SM_ID != sm.SM_ID )
      stmt.dispose();
      select one obj related by sm->O_OBJ[R518];
      ERR::reportParseError( msg: "Event ->"+evt.Drv_Lbl+
              "<- is not a creation transition for class ->"+obj.Name+"<-",
              token: param.a3_rule_token );
    else
      select one levt related by evt->SM_SEVT[R525]->SM_LEVT[R526];
      if ( empty levt )
        stmt.dispose();
        select one obj related by sm->O_OBJ[R518];
        ERR::reportParseError( msg: "Event ->"+evt.Drv_Lbl+ 
              "<- is not a creation transition for class ->"+obj.Name+"<-",
                token: param.a3_rule_token );
      else
        select one crtxn related by levt->SM_CRTXN[R509];
        if ( empty crtxn )
          stmt.dispose();
          select one obj related by sm->O_OBJ[R518];
          ERR::reportParseError( msg: "Event ->"+evt.Drv_Lbl+ 
                "<- is not a creation transition for class ->"+obj.Name+"<-",
                  token: param.a3_rule_token );
        else
          if ( ess.PEIndicated )
            // non-polymorphic event with *
            stmt.dispose();
            ERR::reportParseError( msg: "Event is not a polymorphic event. Event label must not contain ''*''.",
               token: param.a3_rule_token );
          else
            edi_ok = ::is_valid_sm_event_data( a1_stmt_id: param.a1_stmt_id, a2_sm_id: evt_sm.SM_ID,
                a3_smevt_id: evt.SMevt_ID, a4_rule_token: param.a3_rule_token );
            if ( edi_ok )   
              select one gsme related by ges->E_GSME[R703];
              create object instance gec of E_GEC;
              relate gec to gsme across R705;
              return stmt.Statement_ID;
            end if;  // edi_ok
          end if;  // ess.PEIndicated
        end if;  // empty crtxn
      end if;  // empty levt
    end if;  // evt_sm.SM_ID != sm.SM_ID
  end if; // empty evt
return GD::NULL_UNIQUE_ID();


















',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7b450542-530d-40ce-8a00-cb6f94bdad03",
	"cb30430c-5287-43e3-9ed0-d3c79d17703f",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0c511674-6379-4a23-8b48-e5e91a1aa2c5",
	"cb30430c-5287-43e3-9ed0-d3c79d17703f",
	'a2_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7b450542-530d-40ce-8a00-cb6f94bdad03",
	'');
INSERT INTO S_SPARM
	VALUES ("2039d5c7-118c-4bed-ac13-bf0fad1403a7",
	"cb30430c-5287-43e3-9ed0-d3c79d17703f",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"0c511674-6379-4a23-8b48-e5e91a1aa2c5",
	'');
INSERT INTO PE_PE
	VALUES ("cb30430c-5287-43e3-9ed0-d3c79d17703f",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("869d2636-c724-436d-be41-d82463506b16",
	"00000000-0000-0000-0000-000000000000",
	'process_instance_event',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a1_stmt_id;
select one ess related by stmt->E_ESS[R603];
select one ges related by ess->E_GES[R701];

select any var from instances of V_VAR where ( selected.Var_ID == param.a2_var_id );
select one obj related by var->V_INT[R814]->O_OBJ[R818];
select one ism related by obj->SM_ISM[R518];
select one evt related by ges->E_GSME[R703]->SM_EVT[R707];
if ( empty ism )
  stmt.dispose();
  ERR::reportParseError( msg: 
    "Cannot find Instance State Machine for class ->"+
      obj.Name+"<-",   token: param.a3_rule_token );
elif ( empty evt )
  select one eeevt related by ges->E_GEE[R703]->S_EEEVT[R709];
  stmt.dispose();
  select one obj related by ism->O_OBJ[R518];
  ERR::reportParseError( msg: "Cannot find event ->"+ eeevt.Drv_Lbl +
          "<- for class ->"+obj.Name+"<-",   token: param.a3_rule_token );
else
  select one evt_sm related by evt->SM_SM[R502];
  if ( evt_sm.SM_ID != ism.SM_ID )
    sm_id = ::search_supertypes_for_event( 
         a1_subtype_sm: ism.SM_ID, a2_evt_name: evt.Drv_Lbl );
    if ( sm_id == GD::NULL_UNIQUE_ID() )
      stmt.dispose();
      select one obj related by ism->O_OBJ[R518];
      ERR::reportParseError( msg: "Cannot find event ->"+ evt.Drv_Lbl +
               "<- for class ->"+obj.Name+"<-",   token: param.a3_rule_token );
    else
      if ( not ess.PEIndicated )
        // polymorphic event without * -- not a problem re-render will add
      end if;
      
      select one polyEvent related by evt->SM_PEVT[R525]; 
      if ( empty polyEvent)
      	ERR::reportParseError( msg: "Supertype event ->" + evt.Drv_Lbl + "<- is not polymorphic",
      					token: param.a3_rule_token);
      end if;
      
      select any sm from instances of SM_SM where selected.SM_ID == sm_id;
      select one ism related by sm->SM_ISM[R517];
    end if;
  else
    if ( ess.PEIndicated )
      // determine if event is polymorphic
      select one pevt related by evt->SM_PEVT[R525];
      if ( empty pevt )
        // non-polymorphic event with *
        stmt.dispose();
        ERR::reportParseError( msg: "Event is not a polymorphic event. Event label must not contain ''*''.",
             token: param.a3_rule_token );
      end if;
    end if;
  end if;
end if;

edi_ok = ::is_valid_sm_event_data( a1_stmt_id: param.a1_stmt_id, a2_sm_id: ism.SM_ID,
        a3_smevt_id: evt.SMevt_ID, a4_rule_token: param.a3_rule_token );

if ( edi_ok )   
  select one gsme related by ges->E_GSME[R703];
  create object instance gen of E_GEN;
  relate gsme to gen across R705;
  relate gen to var across R712;
  return stmt.Statement_ID;
end if;
return GD::NULL_UNIQUE_ID();




















',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("0ba4c4a1-2a7b-4a75-8cc4-42aa8ae803f5",
	"869d2636-c724-436d-be41-d82463506b16",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("322a487f-5083-4410-b51d-9d733b705e11",
	"869d2636-c724-436d-be41-d82463506b16",
	'a2_var_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"0ba4c4a1-2a7b-4a75-8cc4-42aa8ae803f5",
	'');
INSERT INTO S_SPARM
	VALUES ("9fb8b548-f2cf-4006-bf13-f2fa38dcf1c4",
	"869d2636-c724-436d-be41-d82463506b16",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"322a487f-5083-4410-b51d-9d733b705e11",
	'');
INSERT INTO PE_PE
	VALUES ("869d2636-c724-436d-be41-d82463506b16",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3a5c240c-9f6c-40d5-9d7c-8ed956e8aa79",
	"00000000-0000-0000-0000-000000000000",
	'process_ee_event',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any stmt from instances of ACT_SMT 
    where selected.Statement_ID == param.a1_stmt_id;
select one ess related by stmt->E_ESS[R603];
select one ges related by ess->E_GES[R701];

    select any ee from instances of S_EE 
         where ( selected.EE_ID == param.a2_ee_id );
    select one eeevt related by ges->E_GEE[R703]->S_EEEVT[R709];
    if ( empty eeevt )
      select one evt related by ges->E_GSME[R703]->SM_EVT[R707];
      stmt.dispose();
      ERR::reportParseError( msg: "Cannot find event for event label ->"+evt.Drv_Lbl+
            "<- for external entity ->"+ee.Name+"<-",
                token: param.a3_rule_token );
    else
      if ( eeevt.EE_ID != ee.EE_ID )
        stmt.dispose();
        ERR::reportParseError( msg: "Cannot find event for event label ->"+eeevt.Drv_Lbl+
              "<- for external entity ->"+ee.Name+"<-",
                  token: param.a3_rule_token );
      else
        if ( ess.PEIndicated )
          // non-polymorphic event with *
          stmt.dispose();
          ERR::reportParseError( msg: "Event is not a polymorphic event. Event label must not contain ''*''.",
               token: param.a3_rule_token );
       else
         edi_ok = ::is_valid_ee_event_data( a1_stmt_id: param.a1_stmt_id, a2_ee_id: ee.EE_ID,
              a3_evt_id: eeevt.EEevt_ID, a4_rule_token: param.a3_rule_token );
          if ( edi_ok )
           return stmt.Statement_ID;
         end if;
       end if;
      end if;
    end if;
return GD::NULL_UNIQUE_ID();


















',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("42e83f6a-f75b-4b0b-8f15-7236eaa2ee37",
	"3a5c240c-9f6c-40d5-9d7c-8ed956e8aa79",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3c4472fb-4a35-419a-aad6-b97696cf991e",
	"3a5c240c-9f6c-40d5-9d7c-8ed956e8aa79",
	'a2_ee_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"42e83f6a-f75b-4b0b-8f15-7236eaa2ee37",
	'');
INSERT INTO S_SPARM
	VALUES ("b84f9cae-b812-4e1c-a1a4-59360ba3de5f",
	"3a5c240c-9f6c-40d5-9d7c-8ed956e8aa79",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"3c4472fb-4a35-419a-aad6-b97696cf991e",
	'');
INSERT INTO PE_PE
	VALUES ("3a5c240c-9f6c-40d5-9d7c-8ed956e8aa79",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("934768bd-31bd-4eda-90c2-c7f443dd28dd",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_sm_event_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any ess from instances of E_ESS where
                                      selected.Statement_ID == param.a1_stmt_id;
if not ess.ParmListOK
  select one stmt related by ess->ACT_SMT[R603];
  stmt.dispose();
  return false;
end if;
select many parm_set related by ess->V_PAR[R700];
select any sm from instances of SM_SM where selected.SM_ID == param.a2_sm_id;
select any evt related by sm->SM_EVT[R502] where
                                         selected.SMevt_ID == param.a3_smevt_id;
select many edi_set related by evt->SM_EVTDI[R532];
for each edi in edi_set
  select many dups related by evt->SM_EVTDI[R532] where
                                                      selected.Name == edi.Name;
  if ( cardinality dups > 1 )
    select one stmt related by ess->ACT_SMT[R603];
    stmt.dispose();
    ERR::reportParseError( msg: "More than one parameter with name ->" +
                                   edi.Name +"<-", token: param.a4_rule_token );
  end if;
end for;
if cardinality parm_set <= cardinality edi_set
  for each edi in edi_set
    found = false;
    for each parm in parm_set
      if ( parm.Name == edi.Name )
        found = true;
        err_msg = "";
        select one parm_val related by parm->V_VAL[R800];
        select one parm_dt related by parm_val->S_DT[R820];
        if (empty parm_dt)
          err_msg = "Parameter ->"+ parm.Name +"<- value has an unknown data type.";
        elif ( ::data_types_compatible( dt1: edi.DT_ID, dt2: parm_dt.DT_ID,
                                        op: "assign")  == GD::NULL_UNIQUE_ID() )
          err_msg = "Parameter ->"+ parm.Name + "<- has been assigned value of different type";
        end if;
        if (edi.getDimensionsCnt()!= parm_val.getDimensions())
          err_msg = "Parameter ->" + edi.Name + "<- has incompatible array depth.";
        elif ( not parm_val.isElementCountValid() )
          err_msg = "Parameter ->"+ edi.Name +"<- contains an Array Index Out of Bounds.";
        end if;
        if (err_msg == "")
          break;
        else 
          select one stmt related by ess->ACT_SMT[R603];
          stmt.dispose();        
          ERR::reportParseError( msg: err_msg, token: param.a4_rule_token  );
        end if;
      end if;
    end for;
    if ( not found )
      select one stmt related by ess->ACT_SMT[R603];
      stmt.dispose();
      ERR::reportParseError( msg: "State machine event with label ->" +
                  evt.Drv_Lbl + "<- is missing corresponding parameter ->" +
                                  edi.Name + "<-", token: param.a4_rule_token );
    end if;
  end for;

  // If execution gets here, all the data items from the database
  // were found in the parse data items.

else // cardinality parm_set > cardinality edi_set

  // If there are more data items in the parse then were found in the
  // database, that means there were redundant or extra data items in the
  // parameter list found by the parse.  Generate an error.

  for each parm in parm_set
    found = false;
    for each edi in edi_set
      if ( parm.Name == edi.Name )
        found = true;
        break;
      end if;
    end for;
    if ( not found )
      select one stmt related by ess->ACT_SMT[R603];
      stmt.dispose();
      ERR::reportParseError( msg: "Parameter ->"+ parm.Name +
            "<- is not associated with state machine event with label ->" +
                               evt.Drv_Lbl + "<-", token: param.a4_rule_token );
    end if;
  end for;

  // If it gets out of the loop without error, there must be
  // a redundant data item, so report the error
  select one stmt related by ess->ACT_SMT[R603];
  stmt.dispose();
  ERR::reportParseError( msg: "State machine event with label ->" +
                               evt.Drv_Lbl+ "<- has redundant parameters",
                                                   token: param.a4_rule_token );
  return false;
end if;
return true;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("30a55aa7-8fc1-4b84-8c74-d60e974383c4",
	"934768bd-31bd-4eda-90c2-c7f443dd28dd",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("60a592b1-f4c3-44ff-ae5c-6706be7c3fd7",
	"934768bd-31bd-4eda-90c2-c7f443dd28dd",
	'a2_sm_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"30a55aa7-8fc1-4b84-8c74-d60e974383c4",
	'');
INSERT INTO S_SPARM
	VALUES ("1b93de0f-7a15-450a-8299-fcef3643f85a",
	"934768bd-31bd-4eda-90c2-c7f443dd28dd",
	'a3_smevt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"60a592b1-f4c3-44ff-ae5c-6706be7c3fd7",
	'');
INSERT INTO S_SPARM
	VALUES ("cfd8c824-568d-480e-abfc-c19eab46d0fd",
	"934768bd-31bd-4eda-90c2-c7f443dd28dd",
	'a4_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"1b93de0f-7a15-450a-8299-fcef3643f85a",
	'');
INSERT INTO PE_PE
	VALUES ("934768bd-31bd-4eda-90c2-c7f443dd28dd",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("710b9206-70b6-4a99-8d65-556b8ad415f9",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_ee_event_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any ess from instances of E_ESS where selected.Statement_ID == param.a1_stmt_id;
if not ess.ParmListOK
  select one stmt related by ess->ACT_SMT[R603];
  stmt.dispose();
  return false;
end if;

select many parm_set related by ess->V_PAR[R700];

select any ee from instances of S_EE where selected.EE_ID == param.a2_ee_id;
select any evt related by ee->S_EEEVT[R10] where selected.EEevt_ID == param.a3_evt_id;
select many edi_set related by evt->S_EEEDT[R13]->S_EEEDI[R13];

// first check that there are no duplicated data items
for each edi in edi_set
  select many dups related by ee->S_EEEDI[R12] where selected.Name == edi.Name;
  if ( cardinality dups > 1 )
    select one stmt related by ess->ACT_SMT[R603];
    stmt.dispose();
    ERR::reportParseError( msg: "More than one parameter with name ->"+ edi.Name +
             "<- You will need to eventually run the audit and/or clear this up",
              token: param.a4_rule_token );
  end if;
end for;

if ( cardinality parm_set < cardinality edi_set )
  select one stmt related by ess->ACT_SMT[R603];
  stmt.dispose();
  ERR::reportParseError( msg: "External entity event with label ->"+evt.Drv_Lbl+
      "<- is missing some parameters",
          token: param.a4_rule_token );
else
  for each edi in edi_set
    found = false;
    for each parm in parm_set
      if ( parm.Name == edi.Name )
        found = true;
        select one parm_dt related by parm->V_VAL[R800]->S_DT[R820];
        if (empty parm_dt)
          err_msg = "Parameter ->"+ parm.Name +"<- value has an unknown data type.";
        elif ( ::data_types_compatible( dt1: edi.DT_ID, dt2: parm_dt.DT_ID, op: "assign")  == GD::NULL_UNIQUE_ID() )
          select one stmt related by ess->ACT_SMT[R603];
          stmt.dispose();
          ERR::reportParseError( msg: "Parameter ->"+ parm.Name +
             "<- has been assigned value of different type",
              token: param.a4_rule_token );
        end if;
        break;
      end if;
    end for;
    if ( not found )
      select one stmt related by ess->ACT_SMT[R603];
      stmt.dispose();
      ERR::reportParseError( msg: "External entity event with label ->"+evt.Drv_Lbl+
          "<- is missing corresponding parameter(s)",
             token: param.a4_rule_token );
      break;
    end if;
  end for;
end if;

      // If execution gets here, all the data items from the database
      // were found in the parse data items.

      // If there are more data items in the parse then were found in the
      // database, that means there were redundant or extra data items in the
      // parameter list found by the parse.  Generate an error.

  if ( cardinality parm_set > cardinality edi_set )
    for each parm in parm_set
      found = false;
      for each edi in edi_set
        if ( parm.Name == edi.Name )
          found = true;
          break;
        end if;
      end for;
      if ( not found )
        select one stmt related by ess->ACT_SMT[R603];
        stmt.dispose();
        ERR::reportParseError( msg: "Parameter ->"+ parm.Name +
          "<- is not associated with external entity event with label ->"+evt.Drv_Lbl+"<-",
             token: param.a4_rule_token );
      end if;
    end for;

      // If it gets out of the loop without error, there must be
      // a redundant data item, so report the error
    select one stmt related by ess->ACT_SMT[R603];
    stmt.dispose();
    ERR::reportParseError( msg: "External entity event with label ->"+evt.Drv_Lbl+
      "<- has redundant parameters",
          token: param.a4_rule_token );
    return false;
  end if;

return true;

















',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f5dc1a82-14d1-4887-928c-47847f48823c",
	"710b9206-70b6-4a99-8d65-556b8ad415f9",
	'a1_stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7a2d06d8-3d51-4b95-99ed-73060dac60fc",
	"710b9206-70b6-4a99-8d65-556b8ad415f9",
	'a2_ee_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"f5dc1a82-14d1-4887-928c-47847f48823c",
	'');
INSERT INTO S_SPARM
	VALUES ("fc7d088f-1269-44c9-ac4c-4c802559272a",
	"710b9206-70b6-4a99-8d65-556b8ad415f9",
	'a3_evt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7a2d06d8-3d51-4b95-99ed-73060dac60fc",
	'');
INSERT INTO S_SPARM
	VALUES ("eedfa94b-bac9-488e-98b8-3e9c4f731953",
	"710b9206-70b6-4a99-8d65-556b8ad415f9",
	'a4_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"fc7d088f-1269-44c9-ac4c-4c802559272a",
	'');
INSERT INTO PE_PE
	VALUES ("710b9206-70b6-4a99-8d65-556b8ad415f9",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("38d8a3ec-4af1-42b7-8782-1468d2b950aa",
	"00000000-0000-0000-0000-000000000000",
	'clear_assignment_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any stmt from instances of ACT_SMT 
     where ( selected.Statement_ID == param.stmt_id );
if ( not_empty stmt )
  stmt.dispose();
end if;

if (  param.var_id != GD::NULL_UNIQUE_ID() )
  select any var from instances of V_VAR where selected.Var_ID == param.var_id;
  if ( not_empty var )
    if ( not var.Declared )
      var.dispose();
    end if;
  end if;
end if;

',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("95d1912a-6ed0-4a7d-ad46-605693b65b3b",
	"38d8a3ec-4af1-42b7-8782-1468d2b950aa",
	'stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b860bf13-dea1-4db1-9cef-587bac5eaaa9",
	"38d8a3ec-4af1-42b7-8782-1468d2b950aa",
	'var_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"95d1912a-6ed0-4a7d-ad46-605693b65b3b",
	'');
INSERT INTO PE_PE
	VALUES ("38d8a3ec-4af1-42b7-8782-1468d2b950aa",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("3460cb24-5515-4eb4-85ee-ccabba02face",
	"00000000-0000-0000-0000-000000000000",
	'self_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'if ( param.a1_text == "SELF" or param.a1_text == "Self" or param.a1_text == "self" )
  current_scope = ::get_current_scope();
  select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
  select one act related by blk->ACT_ACT[R612];
  if ( not act.self_is_valid() )
    err_msg =  "Keyword ->%s<- cannot be used in " + act.Type +
                                                          " AL specifications.";
    ::clear_value_data();
    ERR::reportParseError( msg: err_msg,
        token: param.a3_token );
  else
    if ( param.a2_isLval )
      ::clear_value_data();
      ERR::reportParseError( msg: "Cannot assign a value to ->%s<-.",
                                                        token: param.a3_token );
    else
      var_id = ::get_var_in_scope( name: param.a1_text, rule_token: param.a3_token );
      if ( var_id == GD::NULL_UNIQUE_ID() )
        select one outer_blk related by act->ACT_BLK[R650];
        create object instance slf of V_INT;
        create object instance var_inst of V_VAR;
        relate var_inst to slf across R814;
        var_inst.Name = param.a1_text;
        relate var_inst to outer_blk across R823;
        select one op related by act->ACT_OPB[R698] ->O_TFR[R696];
        if ( not_empty op )
          select one obj related by op->O_OBJ[R115];
          relate obj to slf across R818;
          ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var_inst.Var_ID, p3_obj_id:obj.Obj_ID);
        else
          select one sm_act related by act->ACT_SAB[R698]->SM_ACT[R691];
          if ( not_empty sm_act )
            // State action case
            select one obj related by sm_act->SM_SM[R515]->SM_ISM[R517]->O_OBJ[R518];
            if not_empty obj
              relate obj to slf across R818;
              ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var_inst.Var_ID, p3_obj_id:obj.Obj_ID);
            end if;
          else
            select one sm_act related by act->ACT_TAB[R698]->SM_ACT[R688];
            if ( not_empty sm_act )
              // Transition action case
              select one obj related by sm_act->SM_SM[R515]->SM_ISM[R517]->O_OBJ[R518];
              if not_empty obj
                relate obj to slf across R818;
                ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var_inst.Var_ID, p3_obj_id:obj.Obj_ID);
              end if;
            else
              select one dab related by act->ACT_DAB[R698]->O_DBATTR[R693];
              select one obj related by dab->O_BATTR[R107]->O_ATTR[R106]->O_OBJ[R102];
              relate obj to slf across R818;
              ::connect_inst_ref_var_to_datatype(p1_is_set:false, p2_var_id:var_inst.Var_ID, p3_obj_id:obj.Obj_ID);
            end if;
          end if;
        end if;
        var_inst.Declared = true;
      end if;  // var_id == GD::NULL_UNIQUE_ID
   end if;  // param.isLval
  end if;  // not act.SelfIsValid
end if;  // if param.text == "SELF" ...',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("b6175eb0-fb69-48c0-9fc2-c5f2739794ba",
	"3460cb24-5515-4eb4-85ee-ccabba02face",
	'a1_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d880645-cdd6-4fe2-bdfd-bd4b61ee222b",
	"3460cb24-5515-4eb4-85ee-ccabba02face",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"b6175eb0-fb69-48c0-9fc2-c5f2739794ba",
	'');
INSERT INTO S_SPARM
	VALUES ("b77efb25-dd20-4329-8906-be1cb088623d",
	"3460cb24-5515-4eb4-85ee-ccabba02face",
	'a3_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"1d880645-cdd6-4fe2-bdfd-bd4b61ee222b",
	'');
INSERT INTO PE_PE
	VALUES ("3460cb24-5515-4eb4-85ee-ccabba02face",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4885f4dd-f2fe-496b-9705-57d011757ae9",
	"00000000-0000-0000-0000-000000000000",
	'get_current_context',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'return m_act_id;






',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("4885f4dd-f2fe-496b-9705-57d011757ae9",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("11da4722-2230-4a8a-86a5-f2f7c8075d2a",
	"00000000-0000-0000-0000-000000000000",
	'set_current_context',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'm_act_id = p_Context;






',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("938bf24e-271d-48cf-b55c-c109cc1356aa",
	"11da4722-2230-4a8a-86a5-f2f7c8075d2a",
	'context',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("11da4722-2230-4a8a-86a5-f2f7c8075d2a",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f697a54f-fb5a-4903-b809-f20d7a275ad4",
	"00000000-0000-0000-0000-000000000000",
	'getLineNumber',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'if ( p_Rule_token != null )
  return p_Rule_token.getLine();
else
  return -1;

',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("cb0f1f7b-2dcb-4757-890d-acad46fc7f99",
	"f697a54f-fb5a-4903-b809-f20d7a275ad4",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("f697a54f-fb5a-4903-b809-f20d7a275ad4",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a0ea4c62-f277-4b83-9d32-b0b7e812aec6",
	"00000000-0000-0000-0000-000000000000",
	'getColumn',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'if ( p_Rule_token != null )
  return p_Rule_token.getColumn();
else
  return -1;

',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("531695c5-c160-49e5-a73d-400269e31f41",
	"a0ea4c62-f277-4b83-9d32-b0b7e812aec6",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("a0ea4c62-f277-4b83-9d32-b0b7e812aec6",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("512b1d75-84ed-41d0-aaba-7d0d480ca176",
	"00000000-0000-0000-0000-000000000000",
	'rememberLocation',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where (selected.Block_ID == current_scope);
blk.CurrentLine = ::getLineNumber(rule_token: param.rule_token);
blk.CurrentCol = ::getColumn(rule_token: param.rule_token);

',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("98bba80d-71ce-466a-8927-eed7695fd8e0",
	"512b1d75-84ed-41d0-aaba-7d0d480ca176",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("512b1d75-84ed-41d0-aaba-7d0d480ca176",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("48f0cf0f-c06a-4d82-90ac-6abdf72dc162",
	"00000000-0000-0000-0000-000000000000",
	'ifStatementRemember',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any root_blk from instances of ACT_BLK 
   where selected.Block_ID == param.blk_id;
select any stmt from instances of ACT_SMT 
   where selected.Statement_ID == param.stmt_id;
stmt.LineNumber = root_blk.CurrentLine;
stmt.StartPosition = root_blk.CurrentCol;

',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1a8f0089-c5f8-4c58-b41d-19f934888701",
	"48f0cf0f-c06a-4d82-90ac-6abdf72dc162",
	'blk_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("0d571340-b24a-4343-b758-b64af3b20e37",
	"48f0cf0f-c06a-4d82-90ac-6abdf72dc162",
	'stmt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1a8f0089-c5f8-4c58-b41d-19f934888701",
	'');
INSERT INTO PE_PE
	VALUES ("48f0cf0f-c06a-4d82-90ac-6abdf72dc162",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("44ca1c8e-a9a4-460f-8bb3-12fcbacc967c",
	"00000000-0000-0000-0000-000000000000",
	'field_create',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::field_create()
select any attr from instances of O_ATTR where
                                selected.Attr_ID == param.new_attr_or_member_id;
select any member from instances of S_MBR where
                              selected.Member_ID == param.new_attr_or_member_id;
select any newVal from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
select many newVals from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
// we want the one with no subtype . . . .
valueFound = false;
for each candidateVal in newVals
  if (not candidateVal.hasSubtype())
    // Leave newVal referring to the instance that had no subtypes
    newVal = candidateVal;
    valueFound = true;
    break;
  end if;
end for;
if (valueFound == false)
  create object instance newVal of V_VAL;
end if;
if (not_empty attr)
  // There should be an Instance Reference Instance previously created.
  // Find it via the original variable found using the passed inst_id.
  select any var from instances of V_VAR where selected.Var_ID ==
                                               param.prev_var_attr_or_member_id;
  if (empty var)
    // TODO report internal error
  else
    select any prevVal related by var->V_IRF[R808]->V_VAL[R801] where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
    if (empty prevVal)
      // TODO report internal error
    else
      create object instance attrRef of V_AVL;
      relate attrRef to newVal across R801;
      relate attrRef to attr across R806;
      select one newDt related by attr->S_DT[R114];
      relate newVal to newDt across R820;
      relate attrRef to prevVal across R807;
    end if;
  end if;
elif (not_empty member)
  // There should be either a Variable, Attribute Reference or a Member
  // Reference previously created. Find it via the original Attribute of
  // Member reference passed in the inst id.
  select any var from instances of V_VAR where selected.Var_ID ==
                                               param.prev_var_attr_or_member_id;
  select any prevAttr from instances of O_ATTR where selected.Attr_ID ==
                                               param.prev_var_attr_or_member_id;
  select any prevMember from instances of S_MBR where selected.Member_ID ==
                                               param.prev_var_attr_or_member_id;
  select any prevParmVal from instances of V_PVL where selected.Value_ID ==
                                               param.prev_var_attr_or_member_id;
  select any prevEvtVal from instances of V_EDV where selected.Value_ID ==
                                               param.prev_var_attr_or_member_id;
  if (empty prevAttr and empty prevMember and
                           empty var and empty prevParmVal and empty prevEvtVal)
    // TODO report internal error
  else
    select any prevVal related by prevAttr->V_AVL[R806]->V_VAL[R801] where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
    if (not_empty prevMember)
      select any prevVal related by prevMember->V_MVL[R836]->V_VAL[R801] where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
    elif (not_empty var)
      select any prevVal related by var->V_TVL[R805]->V_VAL[R801] where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
    elif (not_empty prevParmVal)
      select one prevVal related by prevParmVal->V_VAL[R801];
    else // not_empty prevEvtVal
      select one prevVal related by prevEvtVal->V_VAL[R801];
    end if;
    create object instance memberRef of V_MVL;
    relate memberRef to newVal across R801;
    relate memberRef to member across R836;
    relate memberRef to prevVal across R837;
    select one dt related by member->S_DT[R45];
    relate newVal to dt across R820;
  end if;
end if;
newVal.LineNumber = ::getLineNumber(rule_token:param.token);
newVal.StartPosition = ::getColumn(rule_token:param.token);
newVal.setEndPosition();
return newVal.Value_ID;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3daf129e-25eb-464b-a5d8-935bfe4d507c",
	"44ca1c8e-a9a4-460f-8bb3-12fcbacc967c",
	'new_attr_or_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("8eafe64a-f7b4-4b36-9481-3c0bc77d6462",
	"44ca1c8e-a9a4-460f-8bb3-12fcbacc967c",
	'prev_var_attr_or_member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3daf129e-25eb-464b-a5d8-935bfe4d507c",
	'');
INSERT INTO S_SPARM
	VALUES ("f0dfa59a-3f79-4331-8f46-e37230a4923c",
	"44ca1c8e-a9a4-460f-8bb3-12fcbacc967c",
	'token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"8eafe64a-f7b4-4b36-9481-3c0bc77d6462",
	'');
INSERT INTO PE_PE
	VALUES ("44ca1c8e-a9a4-460f-8bb3-12fcbacc967c",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("387d9b8c-02ae-4604-b2bd-981a2d0dbaeb",
	"00000000-0000-0000-0000-000000000000",
	'handle_selected',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'select any val_inst from instances of V_VAL where
                                            selected.Value_ID == param.value_id;
if ( empty val_inst )
  ERR::reportParseError(msg:"R-value not found", token: param.token );
else
  select one attr_val related by val_inst->V_AVL[R807];
  if ( not_empty attr_val )
    select one instRef related by val_inst->V_IRF[R801];
    select one var related by instRef->V_VAR[R808];
    if (not_empty var)
      if (::selected_validate(name:var.Name, rule_token:param.token))
        // migrate to Selected Reference
        select one attr_inst related by attr_val->O_ATTR[R806];
        current_scope = ::get_current_scope();
        select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
        if ( not_empty blk )
          blk.SelectedFound = true;
        end if;
        select one attrRefVal related by attr_val->V_VAL[R801];
        unrelate attr_val from attrRefVal across R801;
        create object instance slr of V_SLR;
        relate slr to attrRefVal across R801;
        relate slr to attr_inst across R812;
        attr_val.dispose();
        // Now that we migrated to a selected reference, we no longer
        // need the instance reference at the start of the chain . . . 
        val_inst.dispose();
      end if;
    end if;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("fcfd7a3c-c5f6-40aa-a3b5-faff93784b80",
	"387d9b8c-02ae-4604-b2bd-981a2d0dbaeb",
	'token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("9b30e6ad-d240-4e68-8915-7df20d570af2",
	"387d9b8c-02ae-4604-b2bd-981a2d0dbaeb",
	'value_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"fcfd7a3c-c5f6-40aa-a3b5-faff93784b80",
	'');
INSERT INTO PE_PE
	VALUES ("387d9b8c-02ae-4604-b2bd-981a2d0dbaeb",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4db04ab0-27d1-4a71-8861-0f024a15b542",
	"00000000-0000-0000-0000-000000000000",
	'param_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::param_validate()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one act related by blk->ACT_ACT[R612];
select any val from instances of V_VAL where
                                         selected.Value_ID == param.b1_value_id;

select one state_action related by act->ACT_SAB[R698]->SM_ACT[R691];
// If in a state action context or a transition action context, validation was
// done previously in event_root_valude_validate, so here only return Val_ID
if not_empty state_action
  return val.Value_ID;
else
  select one trans_action related by act->ACT_TAB[R698]->SM_ACT[R688];
  if not_empty trans_action
    return val.Value_ID;
  else
    select one sync related by act->ACT_FNB[R698]->S_SYNC[R695];
    if not_empty sync
      select any parm related by sync->S_SPARM[R24] where
                                                 selected.Name == param.a3_text;
      if empty parm
        ::clear_value_data();
        ERR::reportParseError( msg: "Parameter ->%s<- is not associated with function ->"+
       sync.Name+"<-",   token: param.a1_rule_token );
      else
        select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
        if not_empty pvl
          // pvl is empty when the parameter access is happening on a value chain
          // so we get here only when a basic param.param_name access is being used.
          relate pvl to parm across R832;
          select one pdt related by parm->S_DT[R26];
          relate val to pdt across R820;
          val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
          val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
          val.setEndPosition();
        end if;
        return val.Value_ID;
      end if;
    else
      select one tfr related by act->ACT_OPB[R698]->O_TFR[R696];
      if not_empty tfr
        select any parm related by tfr->O_TPARM[R117] where
                                                 selected.Name == param.a3_text;
        if empty parm
          ::clear_value_data();
          ERR::reportParseError( msg: "Parameter ->%s<- is not associated with operation ->"+
                                  tfr.Name+"<-",   token: param.a1_rule_token );
        else
          select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
          if not_empty pvl
            // pvl is empty when the parameter access is happening on a value
            // chain so we get here only when a basic param.param_name access
            // is being used.
            relate pvl to parm across R833;
            select one pdt related by parm->S_DT[R118];
            relate val to pdt across R820;
            val.LineNumber = ::getLineNumber(rule_token: param.a1_rule_token);
            val.StartPosition = ::getColumn(rule_token: param.a1_rule_token);
            val.setEndPosition();
          end if;
          return val.Value_ID;
        end if;
      else
        select one brg related by act->ACT_BRB[R698]->S_BRG[R697];
        if not_empty brg
          select any parm related by brg->S_BPARM[R21] where
                                                 selected.Name == param.a3_text;
          if empty parm
            ::clear_value_data();
            ERR::reportParseError( msg: "Parameter ->%s<- is not associated with bridge ->"+
                                  brg.Name+"<-",   token: param.a1_rule_token );
          else
            select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
            if not_empty val
              if not_empty pvl
                // pvl is empty when the parameter access is happening on a
                // value chain so we get here only when a basic param.param_name
                // access is being used.
                relate pvl to parm across R831;
                select one pdt related by parm->S_DT[R22];
                relate val to pdt across R820;
                val.LineNumber = ::getLineNumber(rule_token:
                                                           param.a1_rule_token);
                val.StartPosition = ::getColumn(rule_token:
                                                           param.a1_rule_token);
                val.setEndPosition();
              end if;
              return val.Value_ID;
            end if;
          end if;
        else
          select one reqSig related by act->ACT_RSB[R698]->SPR_RS[R684];
          if not_empty reqSig
            select any parm related by reqSig->SPR_REP[R4502]->
                  C_EP[R4500]->C_PP[R4006] where selected.Name == param.a3_text;
            if empty parm
              ::clear_value_data();
              ERR::reportParseError( msg:
                     "Parameter ->%s<- is not associated with signal ->" +
                             reqSig.Name + "<-",   token: param.a1_rule_token );
            else
              select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
              if not_empty val
                if not_empty pvl
                  // pvl is empty when the parameter access is happening
                  // on a value chain so we get here only when a basic
                  // param.param_name access is being used.
                  relate pvl to parm across R843;
                  select one pdt related by parm->S_DT[R4007];
                  relate val to pdt across R820;
                  val.LineNumber = ::getLineNumber(rule_token:
                                                           param.a1_rule_token);
                  val.StartPosition = ::getColumn(rule_token:
                                                           param.a1_rule_token);
                  val.setEndPosition();
                end if;
                return val.Value_ID;
              end if;
            end if;
          else
            select one reqOp related by act->ACT_ROB[R698]->SPR_RO[R685];
            if not_empty reqOp
              select any parm related by reqOp->SPR_REP[R4502]->
                  C_EP[R4500]->C_PP[R4006] where selected.Name == param.a3_text;
              if empty parm
                ::clear_value_data();
                ERR::reportParseError( msg:
              "Parameter ->%s<- is not associated with interface operation ->" +
                              reqOp.Name + "<-",   token: param.a1_rule_token );
              else
                select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
                if not_empty val
                  if not_empty pvl
                    // pvl is empty when the parameter access is happening
                    // on a value chain so we get here only when a basic
                    // param.param_name access is being used.
                    relate pvl to parm across R843;
                    select one pdt related by parm->S_DT[R4007];
                    relate val to pdt across R820;
                    val.LineNumber = ::getLineNumber(rule_token:
                                                           param.a1_rule_token);
                    val.StartPosition = ::getColumn(rule_token:
                                                           param.a1_rule_token);
                    val.setEndPosition();
                  end if;
                  return val.Value_ID;
                end if;
              end if;
            else
              select one provSig related by act->ACT_PSB[R698]->SPR_PS[R686];
              if not_empty provSig
                select any parm related by provSig->SPR_PEP[R4503]->
                  C_EP[R4501]->C_PP[R4006] where selected.Name == param.a3_text;
                if empty parm
                  ::clear_value_data();
                  ERR::reportParseError( msg:
                     "Parameter ->%s<- is not associated with signal ->" +
                            provSig.Name + "<-",   token: param.a1_rule_token );
                else
                  select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
                  if not_empty val
                    if not_empty pvl
                      // pvl is empty when the parameter access is happening
                      // on a value chain so we get here only when a basic
                      // param.param_name access is being used.
                      relate pvl to parm across R843;
                      select one pdt related by parm->S_DT[R4007];
                      relate val to pdt across R820;
                      val.LineNumber = ::getLineNumber(rule_token:
                                                           param.a1_rule_token);
                      val.StartPosition = ::getColumn(rule_token:
                                                           param.a1_rule_token);
                      val.setEndPosition();
                    end if;
                    return val.Value_ID;
                  end if;
                end if;
              else
                select one provOp related by act->ACT_POB[R698]->SPR_PO[R687];
                if not_empty provOp
                  select any parm related by provOp->SPR_PEP[R4503]->
                  C_EP[R4501]->C_PP[R4006] where selected.Name == param.a3_text;
                  if empty parm
                    ::clear_value_data();
                    ERR::reportParseError( msg:
              "Parameter ->%s<- is not associated with interface operation ->" +
                             provOp.Name + "<-",   token: param.a1_rule_token );
                  else
                    select any pvl from instances of V_PVL where
                                         selected.Value_ID == param.b1_value_id;
                    if not_empty val
                      if not_empty pvl
                        // pvl is empty when the parameter access is happening
                        // on a value chain so we get here only when a basic
                        // param.param_name access is being used.
                        relate pvl to parm across R843;
                        select one pdt related by parm->S_DT[R4007];
                        relate val to pdt across R820;
                        val.LineNumber = ::getLineNumber(rule_token:
                                                           param.a1_rule_token);
                        val.StartPosition = ::getColumn(rule_token:
                                                           param.a1_rule_token);
                        val.setEndPosition();
                      end if;
                      return val.Value_ID;
                    end if;
                  end if;
                end if;
              end if;
            end if;
          end if;
        end if;
      end if;
    end if;
  end if;
end if;
return GD::NULL_UNIQUE_ID();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("c3f58b8a-059c-4e3b-b14a-87cac69b4d6d",
	"4db04ab0-27d1-4a71-8861-0f024a15b542",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("29b453b3-7233-4a33-9eea-319779f29b31",
	"4db04ab0-27d1-4a71-8861-0f024a15b542",
	'a3_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"c3f58b8a-059c-4e3b-b14a-87cac69b4d6d",
	'');
INSERT INTO S_SPARM
	VALUES ("f701d74c-cbe6-4ede-845e-6ad11cadbedc",
	"4db04ab0-27d1-4a71-8861-0f024a15b542",
	'b1_value_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"29b453b3-7233-4a33-9eea-319779f29b31",
	'');
INSERT INTO PE_PE
	VALUES ("4db04ab0-27d1-4a71-8861-0f024a15b542",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("39f3aa81-8b73-48ca-83e3-45f05e159adb",
	"00000000-0000-0000-0000-000000000000",
	'assignment_create',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'// ::assignment_create()
create object instance ata of ACT_AI;
select any value from instances of V_VAL where
                                           selected.Value_ID == param.member_id;
relate ata to value across R689;
select any stmt from instances of ACT_SMT where
                                    selected.Statement_ID == param.statement_id;
if ( empty stmt )
  ERR::reportParseError( msg:  "Statement not found", token: param.token );
  return GD::NULL_UNIQUE_ID();
else
  relate ata to stmt across R603;
  // store the textual position of the attribute name
  ata.attributeLineNumber = ::getLineNumber(rule_token: param.token);
  ata.attributeColumn = ::getColumn(rule_token:param.token);
  return ata.Statement_ID;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("cd82fb8a-a86e-4276-b9bb-d5f7d405c6a6",
	"39f3aa81-8b73-48ca-83e3-45f05e159adb",
	'member_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("e4a1a9ee-8259-42ce-ae76-faf0632821b2",
	"39f3aa81-8b73-48ca-83e3-45f05e159adb",
	'statement_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"cd82fb8a-a86e-4276-b9bb-d5f7d405c6a6",
	'');
INSERT INTO S_SPARM
	VALUES ("a7440252-f49e-4823-88b4-3e572e9e2ead",
	"39f3aa81-8b73-48ca-83e3-45f05e159adb",
	'token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"e4a1a9ee-8259-42ce-ae76-faf0632821b2",
	'');
INSERT INTO PE_PE
	VALUES ("39f3aa81-8b73-48ca-83e3-45f05e159adb",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a988b309-178e-49a4-91ac-dc4cb0a40302",
	"00000000-0000-0000-0000-000000000000",
	'clear_value_data',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::clear_value_data()
select many vals from instances of V_VAL where
                                      selected.Block_ID == GD::NULL_UNIQUE_ID();
for each val in vals
  val.dispose();
end for;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("a988b309-178e-49a4-91ac-dc4cb0a40302",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ad343ef7-de58-4048-8e54-132abd1608be",
	"00000000-0000-0000-0000-000000000000",
	'getText',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native',
	'if ( p_Rule_token != null )
  return p_Rule_token.getText();
else
  return "";
',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("81368d1b-633f-4fcf-bd5f-a833a650b0e0",
	"ad343ef7-de58-4048-8e54-132abd1608be",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("ad343ef7-de58-4048-8e54-132abd1608be",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4b28ad4f-3671-4fe7-95d1-261e3e5dcb2f",
	"00000000-0000-0000-0000-000000000000",
	'get_value_chain_end',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::get_value_chain_end()
select any val from instances of V_VAL where
                                      selected.Value_ID == param.start_value_ID;
atEnd = false;
while not atEnd
  select one attrVal related by val->V_AVL[R807];
  select one membrVal related by val->V_MVL[R837];
  select one arrayVal related by val->V_AER[R838];
  select one arrayLenVal related by val->V_ALV[R840];
  if (not_empty attrVal)
    select one val related by attrVal->V_VAL[R801];
  elif (not_empty membrVal)
    select one val related by membrVal->V_VAL[R801];
  elif (not_empty arrayLenVal)
    select one val related by arrayLenVal->V_VAL[R801];
  elif (not_empty arrayVal)
    select one dt related by val->S_DT[R820];
    select one val related by arrayVal->V_VAL[R801];
    relate val to dt across R820;
  else
   atEnd = true;
  end if;
end while; // Iteration complete
if not_empty val
  return val.Value_ID;
else
  return GD::NULL_UNIQUE_ID();
end if;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("cf792a1a-eb6c-4cd1-8981-84d7300fee27",
	"4b28ad4f-3671-4fe7-95d1-261e3e5dcb2f",
	'start_value_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4b28ad4f-3671-4fe7-95d1-261e3e5dcb2f",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("8391ed20-b255-40a4-935b-9729ef622920",
	"00000000-0000-0000-0000-000000000000",
	'get_array_value_root',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::get_array_value_root()
select any val from instances of V_VAL where
                                      selected.Value_ID == param.start_value_ID;
select one arrayRef related by val->V_AER[R801];
while not_empty arrayRef
  select one val related by arrayRef->V_VAL[R838];
  select one arrayRef related by val->V_AER[R801];
end while;
return val.Value_ID;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9616c12e-2a9b-4903-95be-8e6dceb1240a",
	"8391ed20-b255-40a4-935b-9729ef622920",
	'start_value_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("8391ed20-b255-40a4-935b-9729ef622920",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ed004691-0245-49d7-974b-8ebdcf40b785",
	"00000000-0000-0000-0000-000000000000",
	'param_root_value_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::param_root_value_validate()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one act related by blk->ACT_ACT[R612];
select any val from instances of V_VAL where
                                         selected.Value_ID == param.a3_value_id;
select one sync related by act->ACT_FNB[R698]->S_SYNC[R695];
if not_empty sync
  select any parm related by sync->S_SPARM[R24] where 
                                                 selected.Name == param.a1_name;
  select one irdt related by parm->S_DT[R26]->S_IRDT[R17];
  if empty parm
    ::clear_value_data();
    ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
    ERR::reportParseError(msg:
                     "Parameter ->%s<- is not associated with function ->" +
                                 sync.Name + "<-", token: param.a2_token );
  elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
    ::clear_value_data();
    ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
    ERR::reportParseError(msg: "Parameter ->%s<- is not passed by reference" +
                         " and is not assignable", token: param.a2_token );
  else
    select one dt related by parm->S_DT[R26];
    relate val to dt across R820;
    select one parmVal related by val->V_PVL[R801];
    relate parm to parmVal across R832;
    val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
    val.StartPosition = ::getColumn(rule_token: param.a2_token);
    val.setEndPosition();
  end if;
else
  select one tfr related by act->ACT_OPB[R698]->O_TFR[R696];
  if not_empty tfr
    select any parm related by tfr->O_TPARM[R117] where
                                                 selected.Name == param.a1_name;
    select one irdt related by parm->S_DT[R118]->S_IRDT[R17];
    if empty parm
      ::clear_value_data();
      ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
      ERR::reportParseError( msg:
                        "Parameter ->%s<- is not associated with operation ->" +
                                  tfr.Name + "<-", token: param.a2_token );
    elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
      ::clear_value_data();
      ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
      ERR::reportParseError(msg: "Parameter ->%s<- is not passed by reference" +
                         " and is not assignable", token: param.a2_token );
    else
      select one dt related by parm->S_DT[R118];
      relate val to dt across R820;
      select one parmVal related by val->V_PVL[R801];
      relate parm to parmVal across R833;
      val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
      val.StartPosition = ::getColumn(rule_token: param.a2_token);
      val.setEndPosition();
    end if;
  else
    select one brg related by act->ACT_BRB[R698]->S_BRG[R697];
    if not_empty brg
      select any parm related by brg->S_BPARM[R21] where
                                                 selected.Name == param.a1_name;
      select one irdt related by parm->S_DT[R22]->S_IRDT[R17];
      if empty parm
        ::clear_value_data();
        ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
        ERR::reportParseError(msg: 
                        "Parameter ->%s<- is not associated with bridge ->" +
                                  brg.Name + "<-", token: param.a2_token );
      elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
        ::clear_value_data();
        ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
        ERR::reportParseError(msg: "Parameter ->%s<- is not passed by" +
               " reference and is not assignable", token: param.a2_token );
      else
        select one dt related by parm->S_DT[R22];
        relate val to dt across R820;
        select one parmVal related by val->V_PVL[R801];
        relate parm to parmVal across R831;
        val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
        val.StartPosition = ::getColumn(rule_token: param.a2_token);
        val.setEndPosition();
      end if;
    else
      select one requiredSignal related by act->ACT_RSB[R698]->SPR_RS[R684];
      select one requiredOperation related by act->ACT_ROB[R698]->SPR_RO[R685];
      select one providedSignal related by act->ACT_PSB[R698]->SPR_PS[R686];
      select one providedOperation related by act->ACT_POB[R698]->SPR_PO[R687];
      if(not_empty requiredSignal)
        select any parm related by requiredSignal->SPR_REP[R4502]->C_EP[R4500]
                             ->C_PP[R4006] where selected.Name == param.a1_name;
        select one irdt related by parm->S_DT[R4007]->S_IRDT[R17];
        if empty parm
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: 
               "Parameter ->%s<- is not associated with required signal ->" +
                            requiredSignal.Name + "<-", token: param.a2_token );
        elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: "Parameter ->%s<- is not passed by" +
                    " reference and is not assignable", token: param.a2_token );
        else
          select one dt related by parm->S_DT[R4007];
          relate val to dt across R820;
          select one parmVal related by val->V_PVL[R801];
          relate parm to parmVal across R843;
          val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
          val.StartPosition = ::getColumn(rule_token: param.a2_token);
          val.setEndPosition();
        end if;
      elif(not_empty requiredOperation)
        select any parm related by requiredOperation->SPR_REP[R4502]
                ->C_EP[R4500]->C_PP[R4006] where selected.Name == param.a1_name;
        select one irdt related by parm->S_DT[R4007]->S_IRDT[R17];
        if empty parm
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: 
            "Parameter ->%s<- is not associated with required operation ->" +
                            requiredOperation.Name + "<-", token: param.a2_token );
        elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: "Parameter ->%s<- is not passed by" +
                    " reference and is not assignable", token: param.a2_token );
        else
          select one dt related by parm->S_DT[R4007];
          relate val to dt across R820;
          select one parmVal related by val->V_PVL[R801];
          relate parm to parmVal across R843;
          val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
          val.StartPosition = ::getColumn(rule_token: param.a2_token);
          val.setEndPosition();
        end if;
      elif(not_empty providedSignal)
        select any parm related by providedSignal->SPR_PEP[R4503]
                ->C_EP[R4501]->C_PP[R4006] where selected.Name == param.a1_name;
        select one irdt related by parm->S_DT[R4007]->S_IRDT[R17];
        if empty parm
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: 
               "Parameter ->%s<- is not associated with provided signal ->" +
                            providedSignal.Name + "<-", token: param.a2_token );
        elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: "Parameter ->%s<- is not passed by" +
                    " reference and is not assignable", token: param.a2_token );
        else
          select one dt related by parm->S_DT[R4007];
          relate val to dt across R820;
          select one parmVal related by val->V_PVL[R801];
          relate parm to parmVal across R843;
          val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
          val.StartPosition = ::getColumn(rule_token: param.a2_token);
          val.setEndPosition();
        end if;
      elif(not_empty providedOperation)
        select any parm related by providedOperation->SPR_PEP[R4503]
                ->C_EP[R4501]->C_PP[R4006] where selected.Name == param.a1_name;
        select one irdt related by parm->S_DT[R4007]->S_IRDT[R17];
        if empty parm
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: 
            "Parameter ->%s<- is not associated with provided operation ->" +
                            providedOperation.Name + "<-", token: param.a2_token );
        elif val.isLValue and parm.By_Ref == 0 and
                                       ((empty irdt) or (param.a4_isRootAccess))
          ::clear_value_data();
          ::set_token(a1_token:param.a2_token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
          ERR::reportParseError(msg: "Parameter ->%s<- is not passed by" +
                    " reference and is not assignable", token: param.a2_token );
        else
          select one dt related by parm->S_DT[R4007];
          relate val to dt across R820;
          select one parmVal related by val->V_PVL[R801];
          relate parm to parmVal across R843;
          val.LineNumber = ::getLineNumber(rule_token: param.a2_token);
          val.StartPosition = ::getColumn(rule_token: param.a2_token);
          val.setEndPosition();
        end if;
      end if;
    end if;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("91a3bc8f-b96a-4590-83de-d5ae5d8fbac6",
	"ed004691-0245-49d7-974b-8ebdcf40b785",
	'a1_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a5b82911-927a-430f-a3af-6ae335aa7644",
	"ed004691-0245-49d7-974b-8ebdcf40b785",
	'a2_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"91a3bc8f-b96a-4590-83de-d5ae5d8fbac6",
	'');
INSERT INTO S_SPARM
	VALUES ("3472b9a7-601b-419c-9952-76187807118e",
	"ed004691-0245-49d7-974b-8ebdcf40b785",
	'a3_value_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a5b82911-927a-430f-a3af-6ae335aa7644",
	'');
INSERT INTO S_SPARM
	VALUES ("43dfd526-7b61-40be-9e88-ede34f83973a",
	"ed004691-0245-49d7-974b-8ebdcf40b785",
	'a4_isRootAccess',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"3472b9a7-601b-419c-9952-76187807118e",
	'');
INSERT INTO PE_PE
	VALUES ("ed004691-0245-49d7-974b-8ebdcf40b785",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("c441dc19-0088-42be-bb5a-fe144bf6f211",
	"00000000-0000-0000-0000-000000000000",
	'event_root_value_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::event_root_value_validate()
current_scope = ::get_current_scope();
select any blk from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one act related by blk->ACT_ACT[R612];

select one sm_act related by act->ACT_SAB[R698]->SM_ACT[R691];
if empty sm_act
  select one sm_act related by act->ACT_TAB[R698]->SM_ACT[R688];
end if;
if empty sm_act
  ERR::reportParseError(msg: "The ->rcvd_evt<- keyword cannot be used in a " +
               "non-state action. Use ->param<- instead.", token: param.token );
end if;
select one sm_sab related by act->ACT_SAB[R698];
if not_empty sm_sab
  // check state action 
  select many txns related by 
               sm_act->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511]->SM_TXN[R506];
  if cardinality txns > 0
    for each txn in txns
      select one nsTxn related by txn->SM_NSTXN[R507];
      select one trigger related by nsTxn->SM_SEME[R504]->
                                                    SM_SEVT[R503]->SM_EVT[R525];
      if empty nsTxn
        select one crTxn related by txn->SM_CRTXN[R507];
        if not_empty crTxn
          select one trigger related by crTxn->SM_LEVT[R509]->
                                                    SM_SEVT[R526]->SM_EVT[R525];
        else
          ERR::reportParseError( 
              msg: "Attempted to access parameter ->%s<- when one or more" +
                         " incoming transitions do not have events assigned.",
                                                           token: param.token );
          break;
        end if;
      end if; // empty new state transition
      select one nlevt related by trigger->SM_SEVT[R525]->SM_NLEVT[R526];
      select one pevt related by nlevt->SM_PEVT[R527];
      if not_empty pevt
        select one trigger related by pevt->SM_EVT[R525];
      end if;
      select any val from instances of V_VAL where
                                            selected.Value_ID == param.value_id;
      if val.isLValue
        ::clear_value_data();
        ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
        ERR::reportParseError(msg: "Event parameters" +
                                    " are not assignable", token: param.token );
        break;
      else
        select one sigEvt related by trigger->SM_SEVT[R525]->SM_SGEVT[R526];
        if empty sigEvt // its a regular event with parameters
          select any edi related by trigger->SM_EVTDI[R532] where
                                                    selected.Name == param.name;
          if not_empty edi
            select one edv related by val->V_EDV[R801];
            if empty edv
              USER::logError(msg:"event_root_value_validate:" +
                   " Value is not an event value " + param.name,path:"PathNotProvided");
            end if;
            create object instance epr of V_EPR;
            relate epr to edv across R834; 
            relate epr to edi across R846;
            select one edt related by edi->S_DT[R524];
            relate val to edt across R820;
            val.setEndPosition();
            select one arrayElemRef related by val->V_AER[R838]->V_VAL[R801];
            if (not_empty arrayElemRef)
			  leafElem = arrayElemRef;
      		  while (not_empty arrayElemRef)
      		    leafElem = arrayElemRef;
      		    select one arrayElemRef related by arrayElemRef->V_AER[R838]->V_VAL[R801];
      		  end while;
              if leafElem.getDimensions() < 0
                 ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
			     ERR::reportParseError( 
                             msg: "Parameter ->%s<- has incompatible array depth." ,
                                                         token: param.token );
              end if;
            end if;
            //
          end if; // if no event parameter found, error will be reported below
        else // a signal reference . . . 
          select one exProp related by sigEvt->SPR_PS[R528]->
                                                    SPR_PEP[R4503]->C_EP[R4501];
          if empty exProp
            select one exProp related by sigEvt->SPR_RS[R529]->
                                                    SPR_REP[R4502]->C_EP[R4500];
          end if;
          if not_empty exProp
            select any sigParm related by exProp->C_PP[R4006] where
                                                    selected.Name == param.name;
            if not_empty sigParm
              select one edv related by val->V_EDV[R801];
              if empty edv
              USER::logError(msg:"event_root_value_validate:" +
                   " Value is not an event value " + param.name,path:"PathNotProvided");
              end if;
              create object instance epr of V_EPR;
              relate epr to edv across R834; 
              relate epr to sigParm across R847;
              select one pdt related by sigParm->S_DT[R4007];
              relate val to pdt across R820;
              val.setEndPosition();
              select one arrayElemRef related by val->V_AER[R838]->V_VAL[R801];
              if (not_empty arrayElemRef)
       		    leafElem = arrayElemRef;
      		    while (not_empty arrayElemRef)
      		      leafElem = arrayElemRef;
      		      select one arrayElemRef related by arrayElemRef->V_AER[R838]->V_VAL[R801];
      		    end while;
                if leafElem.getDimensions() < 0
                   ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
			       ERR::reportParseError( 
                               msg: "Parameter ->%s<- has incompatible array depth." ,
                                                           token: param.token );
                end if;
              end if;
            end if; // if no signal parameter found, error is reported below 
          else
            USER::logError(msg:"event_root_value_validate:" +
               " No signal declaration found for signal event carrying "
                                                                  + param.name,path:"PathNotProvided");
          end if;
        end if;  // empty signal event
      end if; // not l-value
    end for;
  else // no transitions found
    ERR::reportParseError( 
              msg: "Attempted to access parameter ->%s<- when there" +
                          " are no incoming transitions.", token: param.token );
  end if;
  // Now check that events on all incoming transitions carry the referenced
  // parameter. We do this in a separate loop because we don''''t want to consider
  // the same event more than once, as is likely when iterating transitions . .
  badEventList = "";
  sep = "";
  select many ns_triggers related by txns->SM_NSTXN[R507]->SM_SEME[R504]->
                                                    SM_SEVT[R503]->SM_EVT[R525];
  select any ns_evt related by txns->SM_NSTXN[R507]->SM_SEME[R504]->
                                                    SM_SEVT[R503]->SM_EVT[R525];
  for each ns_evt in ns_triggers
    select one nlevt related by ns_evt->SM_SEVT[R525]->SM_NLEVT[R526];
    if not_empty nlevt
      select one pevt related by nlevt->SM_PEVT[R527];
      if empty pevt
        ERR::reportParseError( 
           msg:"Parameter ->%s<- belongs to a Polymorphic Event that is no " +
                            "longer defined in supertype", token: param.token );
        break;
      else
        select one ns_evt related by pevt->SM_EVT[R525];
      end if;
    end if;
    select one sigEvt related by ns_evt->SM_SEVT[R525]->SM_SGEVT[R526];
    if not_empty sigEvt
      select one exProp related by sigEvt->SPR_PS[R528]->
                                                    SPR_PEP[R4503]->C_EP[R4501];
      if empty exProp
        select one exProp related by sigEvt->SPR_RS[R529]->
                                                    SPR_REP[R4502]->C_EP[R4500];
      end if;
      if not_empty exProp
        select any sigParm related by exProp->C_PP[R4006] where
                                                    selected.Name == param.name;
        if empty sigParm
          badEventList = badEventList + sep + ns_evt.Mning;
          sep = ", ";
        end if;
      end if;
    else
      select any edi related by ns_evt->SM_EVTDI[R532] where
                                                    selected.Name == param.name;
      if empty edi
        badEventList = badEventList + sep + ns_evt.Mning;
        sep = ", ";
      end if;
    end if;
  end for;
  // Need to repeat the same check for creation transitions
  select many triggers related by txns->SM_CRTXN[R507]->SM_LEVT[R509]->
                                                    SM_SEVT[R526]->SM_EVT[R525];
  select any cr_evt related by txns->SM_CRTXN[R507]->SM_LEVT[R509]->
                                                    SM_SEVT[R526]->SM_EVT[R525];
  for each cr_evt in triggers
    alreadyReported = false;
    for each prevCheckedEvt in ns_triggers
      if cr_evt == prevCheckedEvt
        alreadyReported = true;
        break;
      end if;
    end for;
    if not alreadyReported 
      select one pevt related by cr_evt->SM_SEVT[R525]->
                                                  SM_NLEVT[R526]->SM_PEVT[R527];
      if not_empty pevt
        select one cr_evt related by pevt->SM_EVT[R525];
      end if;
      select one sigEvt related by cr_evt->SM_SEVT[R525]->SM_SGEVT[R526];
      if not_empty sigEvt
        select one exProp related by sigEvt->SPR_PS[R528]->
                                                    SPR_PEP[R4503]->C_EP[R4501];
        if empty exProp
          select one exProp related by sigEvt->SPR_RS[R529]->
                                                    SPR_REP[R4502]->C_EP[R4500];
        end if;
        if not_empty exProp
          select any sigParm related by exProp->C_PP[R4006] where
                                                    selected.Name == param.name;
          if empty sigParm
            badEventList = badEventList + sep + cr_evt.Mning;
            sep = ", ";
          end if;
        end if;
      else
        select any edi related by cr_evt->SM_EVTDI[R532] where
                                                    selected.Name == param.name;
        if empty edi
          badEventList = badEventList + sep + cr_evt.Mning;
          sep = ", ";
        end if;
      end if;
    end if;
  end for;
  if badEventList != ""
    ERR::reportParseError( 
              msg: "The following incoming messages do not carry required" +
                                          " parameter ->%s<- " + badEventList,
                                                           token: param.token );
  end if;
else // check transition action
  select one txn related by sm_act->SM_AH[R514]->SM_TAH[R513]->SM_TXN[R530];
  select one nsTxn related by txn->SM_NSTXN[R507];
  select one trigger related by nsTxn->SM_SEME[R504]->
                                                    SM_SEVT[R503]->SM_EVT[R525];
  if empty nsTxn
    select one crTxn related by txn->SM_CRTXN[R507];
    if not_empty crTxn
      select one trigger related by crTxn->SM_LEVT[R509]->
                                                    SM_SEVT[R526]->SM_EVT[R525];
    else
      ERR::reportParseError( 
              msg: "Attempted to access parameter ->%s<- when associated" +
                               " transition does not have an event assigned.",
                                                           token: param.token );
    end if;
  end if; // empty new state transition
  select one nlevt related by trigger->SM_SEVT[R525]->SM_NLEVT[R526];
  if not_empty nlevt
    select one pevt related by nlevt->SM_PEVT[R527];
    if empty pevt
      ERR::reportParseError(
           msg:"Parameter ->%s<- belongs to a Polymorphic Event that is no " +
                            "longer defined in supertype", token: param.token );
    else
      select one trigger related by pevt->SM_EVT[R525];
    end if;
  end if;
  select any val from instances of V_VAL where
                                            selected.Value_ID == param.value_id;
  if val.isLValue
    ::clear_value_data();
    ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
    ERR::reportParseError(msg: "Event parameters" +
                                    " are not assignable", token: param.token );
  else
    select one sigEvt related by trigger->SM_SEVT[R525]->SM_SGEVT[R526];
    if empty sigEvt // its a regular event with parameters
      select any edi related by trigger->SM_EVTDI[R532] where
                                                    selected.Name == param.name;
      if not_empty edi
        select one edv related by val->V_EDV[R801];
        if empty edv
              USER::logError(msg:"event_root_value_validate:" +
                   " Value is not an event value " + param.name,path:"PathNotProvided");
        end if;
        create object instance epr of V_EPR;
        relate epr to edv across R834; 
        relate epr to edi across R846;
        select one edt related by edi->S_DT[R524];
        relate val to edt across R820;
        val.setEndPosition();
        select one arrayElemRef related by val->V_AER[R838]->V_VAL[R801];
        if (not_empty arrayElemRef)
       	  leafElem = arrayElemRef;
      	  while (not_empty arrayElemRef)
      	    leafElem = arrayElemRef;
      		select one arrayElemRef related by arrayElemRef->V_AER[R838]->V_VAL[R801];
      	  end while;
          if leafElem.getDimensions() < 0
            ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);    
			ERR::reportParseError( 
                    msg: "Parameter ->%s<- has incompatible array depth." ,
                                                 token: param.token );
          end if;
        end if;
      else
        ERR::reportParseError( 
           msg:"Parameter ->%s<- is not carried by event " + trigger.Mning,
                                                           token: param.token );
      end if;
    else  // a signal reference
      select one exProp related by sigEvt->SPR_PS[R528]->
                                                    SPR_PEP[R4503]->C_EP[R4501];
      if empty exProp
        select one exProp related by sigEvt->SPR_RS[R529]->
                                                    SPR_REP[R4502]->C_EP[R4500];
      end if;
      if not_empty exProp
        select any sigParm related by exProp->C_PP[R4006] where
                                                    selected.Name == param.name;
        if not_empty sigParm
          select one edv related by val->V_EDV[R801];
          if empty edv
              USER::logError(msg:"event_root_value_validate:" +
                   " Value is not an event value " + param.name,path:"PathNotProvided");
          end if;
          create object instance epr of V_EPR;
          relate epr to edv across R834; 
          relate epr to sigParm across R847;
          select one pdt related by sigParm->S_DT[R4007];
          relate val to pdt across R820;
          val.setEndPosition();
          select one arrayElemRef related by val->V_AER[R838]->V_VAL[R801];
          if (not_empty arrayElemRef)
            leafElem = arrayElemRef;
       	    while (not_empty arrayElemRef)
      	      leafElem = arrayElemRef;
      		  select one arrayElemRef related by arrayElemRef->V_AER[R838]->V_VAL[R801];
      	    end while;
            if leafElem.getDimensions() < 0
              ::set_token(a1_token:param.token, a2_line:val.LineNumber,
                                 a3_column:val.StartPosition, a4_text:val.Text);
			  ERR::reportParseError( 
                      msg: "Parameter ->%s<- has incompatible array depth." ,
                                                   token: param.token );
            end if;
          end if;
        else
          ERR::reportParseError( 
            msg:"Parameter ->%s<- is not carried by signal " +
                                            trigger.Mning, token: param.token );
        end if; // if no signal parameter found, error will be reported below 
      else
        USER::logError(msg:"event_root_value_validate:" +
             " No signal declaration found for signal event carrying "
                                                                  + param.name,path:"PathNotProvided");
      end if;
    end if;
  end if; // not l-value
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("3735ea6a-f50f-41c2-b4e9-71bb3ecc9508",
	"c441dc19-0088-42be-bb5a-fe144bf6f211",
	'name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6dc9effc-54ba-407d-9b73-fb576e22c9fb",
	"c441dc19-0088-42be-bb5a-fe144bf6f211",
	'token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"3735ea6a-f50f-41c2-b4e9-71bb3ecc9508",
	'');
INSERT INTO S_SPARM
	VALUES ("e9beb56d-0fc9-413f-8515-dfc4fe146465",
	"c441dc19-0088-42be-bb5a-fe144bf6f211",
	'value_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6dc9effc-54ba-407d-9b73-fb576e22c9fb",
	'');
INSERT INTO PE_PE
	VALUES ("c441dc19-0088-42be-bb5a-fe144bf6f211",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("153f7956-331a-41b5-b276-ae360bdbcbec",
	"00000000-0000-0000-0000-000000000000",
	'array_length_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'// PE_PE navigation is present (isInGenericPackage).  Do not remove this comment.
// ::array_length_validate
result = false;
if (param.a1_name == "length" or param.a1_name == "Length") and param.a2_isArray
  select any curVal from instances of V_VAL where
                                        selected.Value_ID == param.a3_curVal_ID;
  if (curVal.isLValue)
    ::clear_value_data();
    ERR::reportParseError( msg: "Array length is read only. OAL arrays do " +
                              "not need to be sized. ", token: param.a4_token );
  else
    // Successfully recognized an array length reference
    // to an array of simple data types.
    create object instance alVal of V_ALV;
    relate alVal to curVal across R801;

      cur_sys_name = ::getSystemName();
      select any sys from instances of S_SYS where selected.Name == cur_sys_name;
      dt_id = GD::NULL_UNIQUE_ID();
      if not_empty sys
        dt_id = sys.getCoreTypeId(name:"integer");
      end if;
      select any pe from instances of PE_PE where selected.Element_ID == dt_id;
      select one intDt related by pe->S_DT[R8001]; 

    if ( not_empty intDt )
      relate curVal to intDt across R820;
    else
      USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
                        "array_length_validate().  Variable <intDt> is empty.",path:"PathNotProvided");
    end if;
    select any endVal from instances of V_VAL where
                                        selected.Value_ID == param.a5_endVal_ID;
    relate endVal to alVal across R840;
    result = true;
  end if;
end if;
return result;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1af62503-ae1b-480d-a731-e370816a73e7",
	"153f7956-331a-41b5-b276-ae360bdbcbec",
	'a1_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("16e609fd-3abb-4f45-a10e-cd18241ab537",
	"153f7956-331a-41b5-b276-ae360bdbcbec",
	'a2_isArray',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"1af62503-ae1b-480d-a731-e370816a73e7",
	'');
INSERT INTO S_SPARM
	VALUES ("167ab81b-9386-4433-86a6-a02c4c9cb01f",
	"153f7956-331a-41b5-b276-ae360bdbcbec",
	'a3_curVal_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"16e609fd-3abb-4f45-a10e-cd18241ab537",
	'');
INSERT INTO S_SPARM
	VALUES ("03e90cc6-d1a7-4b07-be66-680276d671e0",
	"153f7956-331a-41b5-b276-ae360bdbcbec",
	'a4_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"167ab81b-9386-4433-86a6-a02c4c9cb01f",
	'');
INSERT INTO S_SPARM
	VALUES ("730aec4f-1028-4dab-b45c-adc1d8cbab49",
	"153f7956-331a-41b5-b276-ae360bdbcbec",
	'a5_endVal_ID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"03e90cc6-d1a7-4b07-be66-680276d671e0",
	'');
INSERT INTO PE_PE
	VALUES ("153f7956-331a-41b5-b276-ae360bdbcbec",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("397c40de-886e-4601-b3a9-110beb6362e6",
	"00000000-0000-0000-0000-000000000000",
	'set_token',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native',
	'    if (p_A1_token != null) {
    	p_A1_token.setLine(p_A2_line);
    	p_A1_token.setColumn(p_A3_column);
    	p_A1_token.setText(p_A4_text);
    }
',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("6d580bed-0139-4f9e-89cd-3b3e1380c306",
	"397c40de-886e-4601-b3a9-110beb6362e6",
	'a1_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6b795139-9fc4-46e3-a49c-bac7d0467b50",
	"397c40de-886e-4601-b3a9-110beb6362e6",
	'a2_line',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6d580bed-0139-4f9e-89cd-3b3e1380c306",
	'');
INSERT INTO S_SPARM
	VALUES ("5c50a188-743d-4333-8629-6d2657774c06",
	"397c40de-886e-4601-b3a9-110beb6362e6",
	'a3_column',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"6b795139-9fc4-46e3-a49c-bac7d0467b50",
	'');
INSERT INTO S_SPARM
	VALUES ("4652fda3-7267-4f87-842a-15a1ef18efb8",
	"397c40de-886e-4601-b3a9-110beb6362e6",
	'a4_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5c50a188-743d-4333-8629-6d2657774c06",
	'');
INSERT INTO PE_PE
	VALUES ("397c40de-886e-4601-b3a9-110beb6362e6",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a3c1b3f5-1e94-4109-8f90-8aeb36ec22f7",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_message',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::isValidMessage()
select any requirement from instances of C_R where
                                      selected.Requirement_Id == param.a1_ifRef;
select any provision from instances of C_P where
                                        selected.Provision_Id == param.a1_ifRef;
select one interface related by requirement->C_IR[R4009]->C_I[R4012];
if empty interface
  select one interface related by provision->C_IR[R4009]->C_I[R4012];
end if;
select any signal related by interface->C_EP[R4003]->C_AS[R4004] where
                                              selected.Name == param.a2_msgName;
select any op related by interface->C_EP[R4003]->C_IO[R4004] where
                                              selected.Name == param.a2_msgName;
select one message related by signal->C_EP[R4004];
if empty message
  select one message related by op->C_EP[R4004];
end if;
if empty message
  ERR::reportParseError(
       msg: "Cannot find specified message ->%s<-", token: param.a3_rule_token);
else
  // create a value, if there is no return value it will be removed later
  create object instance msv of V_MSV;
  msv.ParmListOK = true;
  create object instance val of V_VAL;
  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where
                selected.Block_ID == current_scope;
  relate val to block across R826;
  relate val to msv across R801;
  // find the required or provided executable property
  if(not_empty provision)
    select any proEP related by message->SPR_PEP[R4501]
                        where (selected.Provision_Id == provision.Provision_Id);
    if(not_empty proEP)
      relate proEP to msv across R841; 
    end if;
  elif(not_empty requirement)
    select any reqEP related by message->SPR_REP[R4500]
                  where (selected.Requirement_Id == requirement.Requirement_Id);
    if(not_empty reqEP)
      relate reqEP to msv across R845;
    end if;
  end if;
  val.LineNumber = ::getLineNumber(rule_token: param.a3_rule_token);
  val.StartPosition = ::getColumn(rule_token: param.a3_rule_token);
  val.setEndPosition();
  // store the textual position of the interface name
  msv.ownerNameLineNumber = block.currentKeyLettersLineNumber;
  msv.ownerNameColumn = block.currentKeyLettersColumn;
  select one bdt related by op-> S_DT[R4008];
  if empty bdt
    if not_empty signal
      // it can''t return anything

        cur_sys_name = ::getSystemName();
        select any sys from instances of S_SYS where selected.Name == cur_sys_name;
        dt_id = GD::NULL_UNIQUE_ID();
        if not_empty sys
          dt_id = sys.getCoreTypeId(name:"void");
        end if;
        select any pe from instances of PE_PE where selected.Element_ID == dt_id;
        select one bdt related by pe->S_DT[R8001]; 

      if empty bdt
        USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
                               "is_valid_message().  Variable <bdt> is empty.",path:"PathNotProvided");
      end if;
    else
      USER::logError(msg:"is_valid_message: internal error" +
                               " no return type found for interface operation",path:"PathNotProvided");
    end if;
  end if;
  relate val to bdt across R820;
  return val.Value_ID;
end if;
return GD::NULL_UNIQUE_ID();',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("4aa2a350-65d0-4fc3-844c-aa4b458bac3a",
	"a3c1b3f5-1e94-4109-8f90-8aeb36ec22f7",
	'a1_ifRef',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("f8f948be-b0fd-43af-b9dc-1417880ad192",
	"a3c1b3f5-1e94-4109-8f90-8aeb36ec22f7",
	'a2_msgName',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"4aa2a350-65d0-4fc3-844c-aa4b458bac3a",
	'');
INSERT INTO S_SPARM
	VALUES ("c6a7ad9b-ef7e-4ba7-aaa4-6aa33eabc1bf",
	"a3c1b3f5-1e94-4109-8f90-8aeb36ec22f7",
	'a3_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"f8f948be-b0fd-43af-b9dc-1417880ad192",
	'');
INSERT INTO PE_PE
	VALUES ("a3c1b3f5-1e94-4109-8f90-8aeb36ec22f7",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("5b5dccbf-ccdd-405d-800b-9b8fcb3d4a71",
	"00000000-0000-0000-0000-000000000000",
	'sender_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'if param.a1_name == "Sender" or param.a1_name == "sender" or
                                                       param.a1_name == "SENDER"
  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
  select one body related by block->ACT_ACT[R612];
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
  if empty component
    ::clear_value_data();
    ERR::reportParseError(
         msg: "Sender keyword is valid only in the context of a component",
                                                        token: param.a3_token );
  else
    if param.a2_isLval
      ::clear_value_data();
      ERR::reportParseError( msg: "Cannot assign a value to ->%s<-.",
                                                        token: param.a3_token );
    else
      var_id = ::get_var_in_scope( name: param.a1_name,
                                                   rule_token: param.a3_token );
      if ( var_id == GD::NULL_UNIQUE_ID() )
        errMsg = ::is_valid_implicit_component_addressing();
        if errMsg == ""
          select one outer_blk related by body->ACT_BLK[R650];
          create object instance sndr of V_TRN;
          create object instance var_inst of V_VAR;
          relate var_inst to sndr across R814;
          var_inst.Name = param.a1_name;
          relate var_inst to outer_blk across R823;

            cur_sys_name = ::getSystemName();
            select any sys from instances of S_SYS where
                                                  selected.Name == cur_sys_name;
            dt_id = GD::NULL_UNIQUE_ID();
            if not_empty sys
              dt_id = sys.getCoreTypeId(name:"component_ref");
            end if;
            select any pe from instances of PE_PE where selected.Element_ID == dt_id;
            select one dt related by pe->S_DT[R8001];

          if ( not_empty dt )
            relate var_inst to dt across R848;
          else
            USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
              "sender_validate().  Variable <dt> is empty.",path:"PathNotProvided");
          end if;
          var_inst.Declared = true;
        else
          ::clear_value_data();
          ERR::reportParseError( msg: errMsg, token: param.a3_token );
        end if;
      end if;  // var_id == GD::NULL_UNIQUE_ID
    end if; // not an Lval
  end if; // component in context
end if; // keyword matches
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f64130e8-de6d-4c9d-92ae-7d412fdf7450",
	"5b5dccbf-ccdd-405d-800b-9b8fcb3d4a71",
	'a1_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("362c33cc-e0c8-40e2-bbd8-2daac8c7e9a7",
	"5b5dccbf-ccdd-405d-800b-9b8fcb3d4a71",
	'a2_isLval',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"f64130e8-de6d-4c9d-92ae-7d412fdf7450",
	'');
INSERT INTO S_SPARM
	VALUES ("155c9d01-52c1-4686-8adc-87b8375a2c5a",
	"5b5dccbf-ccdd-405d-800b-9b8fcb3d4a71",
	'a3_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"362c33cc-e0c8-40e2-bbd8-2daac8c7e9a7",
	'');
INSERT INTO PE_PE
	VALUES ("5b5dccbf-ccdd-405d-800b-9b8fcb3d4a71",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2bd1a9c3-2675-480f-95dd-5996d4bdacb1",
	"00000000-0000-0000-0000-000000000000",
	'is_valid_implicit_component_addressing',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'// ::is_valid_implicit_component_addressing()
prefAllowImplicitComponentAddressing =
                        "bridgepoint_prefs_allow_implicit_component_addressing";
if PREF::getBoolean( name:prefAllowImplicitComponentAddressing) == false
  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
  select one body related by block->ACT_ACT[R612];
  // implicit addressing may be valid in interface bodies
  select one psb related by body->ACT_PSB[R698];
  select one pob related by body->ACT_POB[R698];
  select one rsb related by body->ACT_RSB[R698];
  select one rob related by body->ACT_ROB[R698];
  if empty psb and empty pob and empty rsb and empty rob
    select one sab related by body->ACT_SAB[R698];
    select one tab related by body->ACT_TAB[R698];
    if not_empty sab
      select one csm related by sab->SM_ACT[R691]->SM_SM[R515]->SM_ASM[R517];
      if not_empty csm
        select one state related by sab->SM_ACT[R691]->SM_AH[R514]->
                                                  SM_MOAH[R513]->SM_STATE[R511];
        // select all incoming transitions
        select many txns related by state->SM_TXN[R506];
        select many sigs related by txns->SM_NSTXN[R507]->
                                   SM_SEME[R504]->SM_SEVT[R503]->SM_SGEVT[R526];
        if cardinality txns == cardinality sigs
          // all is well
          return "";
        else
           return "Sender keyword can only be used where " +
                       "there are signals assigned to all incoming transitions";
        end if;
      end if; // is a class state model
    elif not_empty tab
      select one csm related by tab->SM_ACT[R688]->SM_SM[R515]->SM_ASM[R517];
      if not_empty csm
        select one txn related by tab->SM_ACT[R688]->SM_AH[R514]->
                                                     SM_TAH[R513]->SM_TXN[R530];
        select one sig related by txn->SM_NSTXN[R507]->
                                   SM_SEME[R504]->SM_SEVT[R503]->SM_SGEVT[R526];
        if not_empty sig
          // all is well
          return "";
        else
          return "Sender keyword can only be used when " +
                                      "a signal is assigned to this transition";
        end if;
      end if; // is a class state model
    end if; // is a state or transition action
    return "Sender keyword is valid " +
                                    "only where a message is serviced directly";
  else // it is a signal or operation, check the direction is incoming
    direction = IFDirectionType::ClientServer;
    targetType = "Signal";
    if not_empty psb or not_empty pob
      select one as related by psb->SPR_PS[R686]->SPR_PEP[R4503]->
                                                       C_EP[R4501]->C_AS[R4004];
      if not_empty as
        direction = as.Direction;
      end if;
      if not_empty pob
        select one op related by pob->SPR_PO[R687]->SPR_PEP[R4503]->
                                                       C_EP[R4501]->C_IO[R4004];
        targetType = "Interface Operation";
        if not_empty op
          direction = op.Direction;
        end if;
        if direction != IFDirectionType::ClientServer
          return "Sender keyword can only be used in an incoming " +
                                                               targetType + ".";
        end if;
      end if;
    else
      select one as related by rsb->SPR_RS[R684]->SPR_REP[R4502]->
                                                       C_EP[R4500]->C_AS[R4004];
      if not empty as
        direction = as.Direction;
      end if;
      if not_empty rob
        select one op related by rob->SPR_RO[R685]->SPR_REP[R4502]->
                                                       C_EP[R4500]->C_IO[R4004];
        targetType = "Interface Operation";
        if not_empty op
          direction = op.Direction;
        end if;
      end if;
      if direction != IFDirectionType::ServerClient
        return "Sender keyword can only be used in an incoming " +
                                                               targetType + ".";
      end if;
    end if;
  end if;
end if;
return "";',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("2bd1a9c3-2675-480f-95dd-5996d4bdacb1",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("806abecb-4f2e-4dfb-83a8-267f27fd81c2",
	"00000000-0000-0000-0000-000000000000",
	'getSystemName',
	'This function uses the model root parameter that is passed to the function in
the parser code.

It returns the system/project name using the inherited static function
getProjectNameFromModelRootId().

ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'return Ooaofooa.getProjectNameFromModelRootId(modelRoot.getId());',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("806abecb-4f2e-4dfb-83a8-267f27fd81c2",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("abf1957f-14eb-4232-8e76-cc35df6765ff",
	"00000000-0000-0000-0000-000000000000",
	'getValidationDomain',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
',
	'java.util.UUID result = org.xtuml.bp.core.common.IdAssigner.NULL_UUID;

if (this.m_nrme != null) {
  result = this.m_nrme.Get_ooa_id();
}
return result;
',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("abf1957f-14eb-4232-8e76-cc35df6765ff",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("0961ccfd-bc2d-4883-b1c9-3798d3a9143b",
	"00000000-0000-0000-0000-000000000000",
	'connect_inst_ref_var_to_datatype',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
------------------
This function is used to connect a V_INT or V_INS instance''s V_VAR supertype
to the corresponding inst_ref<[classname]> or inst_ref_set<[classname]>
datatype.

Typically this is done after migrating a V_TRN to one of these instance
reference types.
',
	'// OAL Validation Utility Function::connect_inst_ref_var_to_datatype()

select any obj from instances of O_OBJ where selected.Obj_ID == param.p3_obj_id;
select any irdt related by obj->S_IRDT[R123] where selected.isSet == param.p1_is_set;
select any vvar from instances of V_VAR where selected.Var_ID == param.p2_var_id;

if (not_empty irdt)
  select one dt related by irdt->S_DT[R17];
  relate vvar to dt across R848;
else
  // Didn''t find a match for the class, set the datatype to the inst_ref<Object>
  // or inst_ref_set<Object> generic instance reference.
  dt_name = "inst_ref<Object>";
  if (param.p1_is_set)
    dt_name = "inst_ref_set<Object>";
  end if;

  elemId = ::getValidationDomain();
  select any dt1_dt from instances of S_DT where false;

select any packageableElem from instances of PE_PE where
                                              selected.Element_ID == elemId;
select one package related by packageableElem->EP_PKG[R8000];
select one component related by packageableElem->C_C[R8003];
hasParent = not_empty package or not_empty component;
      if (hasParent)
	      dtID = packageableElem.resolveDataTypeRelativeToSelf(
	                                   expected_name:dt_name, default_name:dt_name);
	      select any dt1_dt related by package->PE_VIS[R8002]->
	                         PE_PE[R8002]->S_DT[R8001] where selected.DT_ID == dtID;
	      if (empty dt1_dt)
	        select any dt1_dt related by component->PE_CVS[R8004]->
	                         PE_PE[R8004]->S_DT[R8001] where selected.DT_ID == dtID;
	      end if;
     end if;
    if (empty dt1_dt)
      dt_id = GD::NULL_UNIQUE_ID();
      cur_sys_name = ::getSystemName();
      select any sys from instances of S_SYS where
                                            (selected.Name == cur_sys_name);
  			  if not_empty sys   
                dt_id = sys.getCoreTypeId(name:dt_name);
		      select any pe related by sys->G_EIS[R9100]->PE_PE[R9100]
		                                                where selected.Element_ID == dt_id;
		      select one dt1_dt related by pe->S_DT[R8001];
		      end if; 
      end if; 

  if not_empty dt1_dt
    relate vvar to dt1_dt across R848;
  else
    USER::logError(msg: "Internal Error in OAL Validation Utility Function " +
        "connect_inst_ref_var_to_datatype().  Variable <dt1_dt> is empty.",path:"PathNotProvided");
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("86d851c0-01d2-42cf-8a93-0a1b1f88c39b",
	"0961ccfd-bc2d-4883-b1c9-3798d3a9143b",
	'p1_is_set',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("3da3078d-0666-4d41-bbe4-becfd9874a3f",
	"0961ccfd-bc2d-4883-b1c9-3798d3a9143b",
	'p2_var_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"86d851c0-01d2-42cf-8a93-0a1b1f88c39b",
	'');
INSERT INTO S_SPARM
	VALUES ("cdd7590e-c7a5-4951-8463-ef8586d73dc4",
	"0961ccfd-bc2d-4883-b1c9-3798d3a9143b",
	'p3_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"3da3078d-0666-4d41-bbe4-becfd9874a3f",
	'');
INSERT INTO PE_PE
	VALUES ("0961ccfd-bc2d-4883-b1c9-3798d3a9143b",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("56ae8d3d-bd11-41af-b99e-4fe46400efa0",
	"00000000-0000-0000-0000-000000000000",
	'has_substring',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native
-----------
Utility function that wraps Java indexOf() to search for a substring.',
	'return p_P1_base.indexOf(p_P2_str, p_P3_fromindex) != -1;',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("2ffa66f4-157c-475c-9d85-41d75cbc9690",
	"56ae8d3d-bd11-41af-b99e-4fe46400efa0",
	'p1_base',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("5ad9b3a8-9d67-4747-b822-1ab2b25361dd",
	"56ae8d3d-bd11-41af-b99e-4fe46400efa0",
	'p2_str',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"2ffa66f4-157c-475c-9d85-41d75cbc9690",
	'');
INSERT INTO S_SPARM
	VALUES ("0b8cf186-0c02-47ad-b4a9-e91dfedb3f1a",
	"56ae8d3d-bd11-41af-b99e-4fe46400efa0",
	'p3_fromIndex',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"5ad9b3a8-9d67-4747-b822-1ab2b25361dd",
	'');
INSERT INTO PE_PE
	VALUES ("56ae8d3d-bd11-41af-b99e-4fe46400efa0",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("24d31a06-50e8-45ce-9fd8-faec281fc6a8",
	"00000000-0000-0000-0000-000000000000",
	'is_message_direction_valid',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if isInGenericPackage
  select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
  select one component related by containingElem->C_C[R8001];
  if(not_empty component)
    select any ifRef related by component->C_PO[R4010]->C_IR[R4016]
                                      where (selected.Id == param.interface_id);
    if(param.direction == IFDirectionType::ServerClient)
      select one provision related by ifRef->C_P[R4009];
      if(empty provision)
        // the body is on the client side yet the expected
        // direction is server -> client
        return false;
      end if;
    else
      select one requirement related by ifRef->C_R[R4009];
      if(empty requirement)
        // the body is on the server side yet the expected
        // direction is client -> server
        return false;
      end if;
    end if;
  end if;
  return true;
else
  body.associateWithOwningComponent();
  select one component related by body->ACT_BIC[R694]->C_C[R694];
  if(not_empty component)
    select any ifRef related by component->C_PO[R4010]->C_IR[R4016]
                                      where (selected.Id == param.interface_id);
    if(param.direction == IFDirectionType::ServerClient)
      select one provision related by ifRef->C_P[R4009];
      if(empty provision)
        // the body is on the client side yet the expected
        // direction is server -> client
        return false;
      end if;
    else
      select one requirement related by ifRef->C_R[R4009];
      if(empty requirement)
        // the body is on the server side yet the expected
        // direction is client -> server
        return false;
      end if;
    end if;
  end if;
  return true;
end if;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("aca40ce3-b9d0-448e-ab7c-985782b0ad5a",
	"24d31a06-50e8-45ce-9fd8-faec281fc6a8",
	'direction',
	"814a8f6f-2c12-497b-b693-a86916fdedf7",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("814a8f6f-2c12-497b-b693-a86916fdedf7",
	"00000000-0000-0000-0000-000000000000",
	'IFDirectionType',
	'BridgePoint allows the user to specify communication direction of individual 
elements in an interface as opposed to on the interface as a whole (which is 
what UML does).  For example, in UML when an interface is specified as being 
provided, all that interface''s operations are one way (from server to 
client).  Likewise, when a interface is specified as being required, all the 
operations are one way (from client to server).  In reality, interfaces are 
not often like this. There is a mixture of client to server and server to 
client in one interface.     This enum is used at the operation/signal level 
to determine if it is to be used for client to server or server to client 
communication.',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO S_SPARM
	VALUES ("f627ee89-8158-42a7-9900-2b733093954f",
	"24d31a06-50e8-45ce-9fd8-faec281fc6a8",
	'interface_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"aca40ce3-b9d0-448e-ab7c-985782b0ad5a",
	'');
INSERT INTO PE_PE
	VALUES ("24d31a06-50e8-45ce-9fd8-faec281fc6a8",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	"00000000-0000-0000-0000-000000000000",
	'constant_validate',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                             selected.Block_ID == current_scope;
select one body related by block->ACT_ACT[R612];
isInGenericPackage = body.associateWithContainer();
if (isInGenericPackage)
  // collect visible elements
   select one containingElem related by body->ACT_BIE[R640]->PE_PE[R640];
   select one component related by containingElem->C_C[R8001];
   select one package related by containingElem->EP_PKG[R8001];
    if not_empty component
    component.collectVisibleElementsForName(name:param.a1_name,
         type:ElementTypeConstants::CONSTANT,
                          originatingContainerID:component.Id,
                                   delegatingContainerID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true);
    else
    package.collectVisibleElementsForName(name:param.a1_name,
         type:ElementTypeConstants::CONSTANT, descending:false,
                           originatingContainerID:package.Package_ID,
                                          delegatingPkgID:GD::NULL_UNIQUE_ID(),
                                                         collectGlobally:true); 
    end if;
  select any resultSet related by component->PE_CRS[R8007] where
                                    selected.Name == param.a1_name and 
                                   selected.Type == ElementTypeConstants::CONSTANT; 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
    if not_empty package
      select any pkgResultSet related by package->PE_SRS[R8005] where
                                     selected.Name == param.a1_name and 
                                   selected.Type == ElementTypeConstants::CONSTANT; 
      select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
    end if;


  select many sycs related by results->CNST_CSP[R8001]->CNST_SYC[R1504] where (selected.Name == param.a1_name);
  if (cardinality sycs > 1)

      err_msg =  "There is more than one constant named ->" + param.a1_name + "<- in the system, cannot resolve.";
      ::clear_value_data();
      ERR::reportParseError( msg: err_msg, token: param.a2_ruleToken);

    return GD::NULL_UNIQUE_ID();
  elif (cardinality sycs == 0)
    if (param.a3_reportError)
      ERR::reportParseError( msg: "Cannot find constant ->%s<-",
          token: param.a2_ruleToken);
    end if;
    return GD::NULL_UNIQUE_ID();
  end if;

  create object instance scv of V_SCV;
  for each syc in sycs
    // We only loop once due to cardinality checks earlier
    relate scv to syc across R850;
  end for;

  select any val from instances of V_VAL where selected.Value_ID == param.a4_valID;
  if (empty val)
    create object instance newval of V_VAL;
    val = newval;
  end if;
  relate val to scv across R801;

  current_scope = ::get_current_scope();
  select any block from instances of ACT_BLK where
                                           (selected.Block_ID == current_scope);
  relate val to block across R826;

  select one dt related by syc->S_DT[R1500];
  relate val to dt across R820;

  val.LineNumber = ::getLineNumber(rule_token: param.a2_ruleToken);
  val.StartPosition = ::getColumn(rule_token: param.a2_ruleToken);
  val.setEndPosition();

  return val.Value_ID;
else
//Specialized package behavior is kept as before 
select many sycs from instances of CNST_SYC where (selected.Name == param.a1_name );
if (cardinality sycs > 1)
  if (param.a3_reportError)
    err_msg =  "There is more than one constant named ->" + param.a1_name + "<- in this domain, cannot resolve.";
    ::clear_value_data();
    ERR::reportParseError( msg: err_msg, token: param.a2_ruleToken);
  end if;
  return GD::NULL_UNIQUE_ID();
end if;

if(empty sycs)
  // if the symbolic constant was not found, check the system level
  sysName = ::getSystemName();
  select any system from instances of S_SYS where (selected.Name == sysName);
    if (param.a3_reportError)
      ERR::reportParseError( msg: "Cannot find constant ->%s<-",
          token: param.a2_ruleToken);
    end if;
    return GD::NULL_UNIQUE_ID();

end if;

create object instance scv of V_SCV;
for each syc in sycs
  // We only loop once due to cardinality checks earlier
  relate scv to syc across R850;
end for;

select any val from instances of V_VAL where selected.Value_ID == param.a4_valID;
if (empty val)
  create object instance newval of V_VAL;
  val = newval;
end if;
relate val to scv across R801;

current_scope = ::get_current_scope();
select any block from instances of ACT_BLK where
                                           (selected.Block_ID == current_scope);
relate val to block across R826;

select one dt related by syc->S_DT[R1500];
relate val to dt across R820;

val.LineNumber = ::getLineNumber(rule_token: param.a2_ruleToken);
val.StartPosition = ::getColumn(rule_token: param.a2_ruleToken);
val.setEndPosition();

return val.Value_ID;
end if;',
	"ba5eda7a-def5-0000-0000-000000000005",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("f664dac4-0fd5-40aa-8f93-2fa83a5b8729",
	"43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	'a1_name',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("498dd56c-9739-46bb-b4d0-1add82ade147",
	"43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	'a2_ruleToken',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"f664dac4-0fd5-40aa-8f93-2fa83a5b8729",
	'');
INSERT INTO S_SPARM
	VALUES ("86b19824-6572-495f-92a6-eda3d7e0eca5",
	"43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	'a3_reportError',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"498dd56c-9739-46bb-b4d0-1add82ade147",
	'');
INSERT INTO S_SPARM
	VALUES ("2f555e21-dc00-419c-b4c9-3ec1cb5a7ee5",
	"43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	'a4_valID',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"86b19824-6572-495f-92a6-eda3d7e0eca5",
	'');
INSERT INTO PE_PE
	VALUES ("43a16f64-9ce4-4c3f-9d0c-ff9a772dd8c4",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	"00000000-0000-0000-0000-000000000000",
	'create_custom_token',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Translate: native',
	'
		Token token = new Token(p_A1_token.getType() , p_A4_text);
    	token.setLine(p_A2_line);
    	token.setColumn(p_A3_column);
    	return token;',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("d8a6837d-b1c5-49bd-bea1-ea3c735744fa",
	"9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	'a1_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("51ce58b7-73f4-4880-b680-4696af1b35b9",
	"9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	'a2_line',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"d8a6837d-b1c5-49bd-bea1-ea3c735744fa",
	'');
INSERT INTO S_SPARM
	VALUES ("70b1a0d5-af8c-4a0f-a3c2-aa9994754e55",
	"9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	'a3_column',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"51ce58b7-73f4-4880-b680-4696af1b35b9",
	'');
INSERT INTO S_SPARM
	VALUES ("a9a0cbc5-5ac8-4afc-b301-c07fe6b747d2",
	"9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	'a4_text',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"70b1a0d5-af8c-4a0f-a3c2-aa9994754e55",
	'');
INSERT INTO PE_PE
	VALUES ("9df70807-2dff-4e78-b9a4-ff8b42b2859a",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4863a733-6d76-46ca-9155-6c74d3e8c3b7",
	"00000000-0000-0000-0000-000000000000",
	'get_vars_in_scope',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

Import:java.util.Set;import java.util.TreeSet

Translate: native',
	'Ooaofooa.log.println(ILogger.FUNCTION, "get_vars_in_scope", " Function entered: Get_vars_in_scope") ; 
Set<java.util.UUID> var_id_set = new TreeSet<java.util.UUID>();
Set<String> var_name_set = new TreeSet<String>();
java.util.UUID block_id = Get_current_scope( modelRoot );
Block_c enc_block = (Block_c) modelRoot.getInstanceList(Block_c.class).getGlobal( null, block_id );
while ( null != enc_block ) {
    Variable_c[] in_scope_vars = Variable_c.getManyV_VARsOnR823( enc_block );
    for ( Variable_c new_var : in_scope_vars ) {
        if ( var_name_set.add( new_var.getName()) ) {
            var_id_set.add( new_var.getVar_id() );
        }
    }
    block_id = Get_enclosing_block( modelRoot, block_id, p_Rule_token );
    enc_block = (Block_c) modelRoot.getInstanceList(Block_c.class).getGlobal( null, block_id );
}
if ( p_Index < 0 || p_Index >= var_id_set.size() ) {
    return Gd_c.Null_unique_id();
}
else {
    return var_id_set.toArray( new java.util.UUID[0] )[p_Index];
}',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("7bb461ff-aab3-4ec6-8373-5b3eab893dc1",
	"4863a733-6d76-46ca-9155-6c74d3e8c3b7",
	'rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("c20fea73-dbfc-4c4f-8d75-a2ef58c47ea9",
	"4863a733-6d76-46ca-9155-6c74d3e8c3b7",
	'index',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"7bb461ff-aab3-4ec6-8373-5b3eab893dc1",
	'');
INSERT INTO PE_PE
	VALUES ("4863a733-6d76-46ca-9155-6c74d3e8c3b7",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("fed7495c-1856-49cf-b97b-e426e6eb5c9c",
	"00000000-0000-0000-0000-000000000000",
	'rel_chain_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'select any left_obj from instances of O_OBJ where ( selected.Obj_ID == param.a2_obj_id );
act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act and not_empty left_obj )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;

  select many r_oirs related by left_obj->R_OIR[R201];
  for each r_oir in r_oirs
    select many foreign_oirs related by r_oir->R_REL[R201]->R_OIR[R201] where ( selected.OIR_ID != r_oir.OIR_ID );
    for each foreign_oir in foreign_oirs
      select one r_rel related by foreign_oir->R_REL[R201];
      mult = ::get_right_object_multiplicity( a1_left:r_oir.OIR_ID, a2_rel:r_rel.Rel_ID, a3_right:foreign_oir.OIR_ID );
      select one foreign_sub related by foreign_oir->R_RGO[R203]->R_SUB[R205];
      select one r_sub related by r_oir->R_RGO[R203]->R_SUB[R205];
      if ( empty r_sub or empty foreign_sub )
        select any cue related by act->P_PCC[R1602] where ( selected.name == "selection_cardinality" );
        if ( not_empty cue and (  mult == Multiplicity::One or ( mult == Multiplicity::Many and cue.string_value == "many" ) ) )
          select one o_obj related by foreign_oir->O_OBJ[R201];
          create object instance new_item of P_P;
          new_item.type = ProposalTypes::Association;
          new_item.replacement_text = "->" + o_obj.Key_Lett + "[R" + GD::int_to_string( value:r_rel.Numb );
          phrase = foreign_oir.get_text_phrase();
          if ( "" != phrase and ( r_rel.is_reflexive() or PREF::getBoolean( name:"bridgepoint_prefs_content_assist_include_role_phrases" ) ) )
            new_item.replacement_text = new_item.replacement_text + "." + Util::getTic() + phrase + Util::getTic();
          end if;
          new_item.replacement_text = new_item.replacement_text + "]";
          new_item.display_text = new_item.replacement_text + " - " + o_obj.Name;
          if ( "" != phrase )
            new_item.display_text = new_item.display_text + " " + Util::getTic() + phrase + Util::getTic();
          end if;
          new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
          new_item.needs_space = false;
          relate new_item to list across R1601;
        end if;
      end if;
    end for;
  end for;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("831fa4d5-fedb-4887-b992-9c8bad398dd8",
	"fed7495c-1856-49cf-b97b-e426e6eb5c9c",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("fab1d205-ae4f-4130-8303-151509e3acfb",
	"fed7495c-1856-49cf-b97b-e426e6eb5c9c",
	'a2_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"831fa4d5-fedb-4887-b992-9c8bad398dd8",
	'');
INSERT INTO PE_PE
	VALUES ("fed7495c-1856-49cf-b97b-e426e6eb5c9c",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("daaf0632-2bcb-45de-99aa-0f043e5dc399",
	"00000000-0000-0000-0000-000000000000",
	'statement_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;

  // create keyword proposals
  i = 0;
  while i < 15
    kw = "";
    if ( 0 == i )
      kw = "control stop";
    elif ( 1 == i )
      kw = "create event instance";
    elif ( 2 == i )
      kw = "create object instance";
    elif ( 3 == i )
      kw = "delete object instance";
    elif ( 4 == i )
      kw = "for each";
    elif ( 5 == i )
      kw = "generate";
    elif ( 6 == i )
      kw = "if";
    elif ( 7 == i )
      kw = "relate";
    elif ( 8 == i )
      kw = "return";
    elif ( 9 == i )
      kw = "select any";
    elif ( 10 == i )
      kw = "select many";
    elif ( 11 == i )
      kw = "select one";
    elif ( 12 == i )
      kw = "send";
    elif ( 13 == i )
      kw = "unrelate";
    else
      kw = "while";
    end if;
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Keyword;
    new_item.display_text = kw;
    new_item.replacement_text = new_item.display_text + " ";
    if ( "control stop" == kw or "break" == kw or "continue" == kw )
      new_item.replacement_text = new_item.display_text + ";";
    elif ( "param" == kw )
      new_item.replacement_text = new_item.display_text;
    end if;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    relate new_item to list across R1601;
    i = i + 1;
  end while;
  
  // if there are parameters, include the ''param'' keyword
  has_parameters = true;
  select any s_sync_param related by act->ACT_FNB[R698]->S_SYNC[R695]->S_SPARM[R24];
  if ( empty s_sync_param )
  select any o_tfr_param related by act->ACT_OPB[R698]->O_TFR[R696]->O_TPARM[R117];
  if ( empty o_tfr_param )
  select any s_brg_param related by act->ACT_BRB[R698]->S_BRG[R697]->S_BPARM[R21];
  if ( empty s_brg_param )
  select any sm_state_param related by act->ACT_SAB[R698]->SM_ACT[R691]->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511]->SM_TXN[R506]->SM_CRTXN[R507]->SM_LEVT[R509]->SM_SEVT[R526]->SM_EVT[R525]->SM_EVTDI[R532];
  if ( empty sm_state_param )
  select any sm_state_param related by act->ACT_SAB[R698]->SM_ACT[R691]->SM_AH[R514]->SM_MOAH[R513]->SM_STATE[R511]->SM_TXN[R506]->SM_NSTXN[R507]->SM_SEME[R504]->SM_SEVT[R503]->SM_EVT[R525]->SM_EVTDI[R532];
  if ( empty sm_state_param )
  select any sm_txn_param related by act->ACT_TAB[R698]->SM_ACT[R688]->SM_AH[R514]->SM_TAH[R513]->SM_TXN[R530]->SM_CRTXN[R507]->SM_LEVT[R509]->SM_SEVT[R526]->SM_EVT[R525]->SM_EVTDI[R532];
  if ( empty sm_txn_param )
  select any sm_txn_param related by act->ACT_TAB[R698]->SM_ACT[R688]->SM_AH[R514]->SM_TAH[R513]->SM_TXN[R530]->SM_NSTXN[R507]->SM_SEME[R504]->SM_SEVT[R503]->SM_EVT[R525]->SM_EVTDI[R532];
  if ( empty sm_txn_param )
  select any spr_po_param related by act->ACT_POB[R698]->SPR_PO[R687]->SPR_PEP[R4503]->C_EP[R4501]->C_PP[R4006];
  if ( empty spr_po_param )
  select any spr_ps_param related by act->ACT_PSB[R698]->SPR_PS[R686]->SPR_PEP[R4503]->C_EP[R4501]->C_PP[R4006];
  if ( empty spr_ps_param )
  select any spr_ro_param related by act->ACT_ROB[R698]->SPR_RO[R685]->SPR_REP[R4502]->C_EP[R4500]->C_PP[R4006];
  if ( empty spr_ro_param )
  select any spr_rs_param related by act->ACT_RSB[R698]->SPR_RS[R684]->SPR_REP[R4502]->C_EP[R4500]->C_PP[R4006];
  if ( empty spr_rs_param )
    has_parameters = false;
  end if; end if; end if; end if; end if; end if; end if; end if; end if; end if; end if;
  if ( has_parameters )
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Keyword;
    new_item.display_text = "param";
    new_item.replacement_text = new_item.display_text;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    relate new_item to list across R1601;
  end if;

  // create keyword proposals for special blocks
  block_id = ::get_current_scope();
  select any block from instances of ACT_BLK where ( selected.Block_ID == block_id );
  if ( not_empty block )
    select one ifsmt related by block->ACT_IF[R607];
    select one whilesmt related by block->ACT_WHL[R608];
    select one forsmt related by block->ACT_FOR[R605];
    if ( not_empty ifsmt )
      select any else_cue related by act->P_PCC[R1602] where ( selected.name == "in_else" );
      if ( empty else_cue )
        i = 0;
        while i < 3
          kw = "";
          if ( 0 == i )
            kw = "elif";
          elif ( 1 == i )
            kw = "else";
          else
            kw = "end if";
          end if;
          create object instance new_item of P_P;
          new_item.type = ProposalTypes::Keyword;
          new_item.display_text = kw;
          new_item.replacement_text = new_item.display_text;
          if ( "end if" == kw )
            new_item.replacement_text = new_item.display_text + ";";
          end if;
          new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
          new_item.needs_space = false;
          relate new_item to list across R1601;
          i = i + 1;
        end while;
      else
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Keyword;
        new_item.display_text = "end if";
        new_item.replacement_text = new_item.display_text + ";";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = false;
        relate new_item to list across R1601;
        else_cue.dispose();
      end if;
    elif ( not_empty whilesmt )
      i = 0;
      while i < 3
        kw = "";
        if ( 0 == i )
          kw = "break";
        elif ( 1 == i )
          kw = "continue";
        else
          kw = "end while";
        end if;
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Keyword;
        new_item.display_text = kw;
        new_item.replacement_text = new_item.display_text + ";";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = false;
        relate new_item to list across R1601;
        i = i + 1;
      end while;
    elif ( not_empty forsmt )
      i = 0;
      while i < 3
        kw = "";
        if ( 0 == i )
          kw = "break";
        elif ( 1 == i )
          kw = "continue";
        else
          kw = "end for";
        end if;
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Keyword;
        new_item.display_text = kw;
        new_item.replacement_text = new_item.display_text + ";";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = false;
        relate new_item to list across R1601;
        i = i + 1;
      end while;
    end if;
  end if;
  
  // create ''self'' proposal if in an instance body
  include_self = true;
  select one op related by act->ACT_OPB[R698] ->O_TFR[R696];
  if ( empty op )
    select one sm_act related by act->ACT_SAB[R698]->SM_ACT[R691];
    if ( empty sm_act )
      select one sm_act related by act->ACT_TAB[R698]->SM_ACT[R688];
      if ( empty sm_act )
        select one dbattr related by act->ACT_DAB[R698]->O_DBATTR[R693];
        if ( empty dbattr )
          include_self = false;
        end if;
      end if;
    end if;
  end if;
  if ( include_self )
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Keyword;
    new_item.display_text = "self";
    new_item.replacement_text = new_item.display_text;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    relate new_item to list across R1601;
  end if;
  
  // create local variable proposals
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );

    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Variable;
    new_item.display_text = local_var.Name;
    new_item.replacement_text = new_item.display_text;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    relate new_item to list across R1601;

    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;

  // create class key letter proposals
  in_generic_package = act.associateWithContainer();
  select one containing_pe related by act->ACT_BIE[R640]->PE_PE[R640];
  select one c_c related by containing_pe->C_C[R8001];
  select one ep_pkg related by containing_pe->EP_PKG[R8001];
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::CLASS ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::CLASS ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many o_objs related by results->O_OBJ[R8001];
  for each o_obj in o_objs
    select many o_tfrs related by o_obj->O_TFR[R115] where ( selected.Instance_Based == Scope::Class );  // must have a class based operation that returns void to be shown as an option
    select any o_tfr related by o_tfrs->S_DT[R116] where ( selected.Name == "void" );
    if ( not_empty o_tfr )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Class;
      new_item.display_text = o_obj.Key_Lett;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = false;
      relate new_item to list across R1601;
    end if;
  end for;

  // create EE key letter proposals
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::EE, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::EE, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::EE ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::EE ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many s_ees related by results->S_EE[R8001];
  for each s_ee in s_ees
    select any s_brg related by s_ee->S_BRG[R19]->S_DT[R20] where ( selected.Name == "void" );
    if ( not_empty s_brg )  // must have at least one bridge of type void to be shown as an option
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::EE;
      new_item.display_text = s_ee.Key_Lett;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = false;
      relate new_item to list across R1601;
    end if;
  end for;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("8ac2c543-5d9d-42c7-ac91-861aa23a8859",
	"daaf0632-2bcb-45de-99aa-0f043e5dc399",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("daaf0632-2bcb-45de-99aa-0f043e5dc399",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("f1aceb57-ad96-4373-8cc7-0625abef1556",
	"00000000-0000-0000-0000-000000000000",
	'inst_ref_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'select any obj from instances of O_OBJ where ( selected.Obj_ID == param.a2_obj_id );
act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act and not_empty obj )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;

  select many o_attrs related by obj->O_ATTR[R102];
  for each o_attr in o_attrs
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Attribute;
    new_item.replacement_text = "." + o_attr.Name;
    new_item.display_text = o_attr.Name;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    relate new_item to list across R1601;
  end for;

  select many o_tfrs related by obj->O_TFR[R115] where ( selected.Instance_Based == Scope::Instance );
  for each o_tfr in o_tfrs
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Operation;
    new_item.display_text = o_tfr.getSignature( flavor:2 );
    new_item.replacement_text = "." + new_item.display_text;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = false;
    colon_index = Util::indexOf( haystack:new_item.replacement_text, needle:":" ) + 1;
    if ( -1 != colon_index )
      new_item.cursor_position = colon_index;
    end if;
    relate new_item to list across R1601;
  end for;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("34fb30e9-634b-4a5b-88cb-6d759f1c1565",
	"f1aceb57-ad96-4373-8cc7-0625abef1556",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("a6f2b7c4-aad9-40bd-bb17-4db8d6626991",
	"f1aceb57-ad96-4373-8cc7-0625abef1556",
	'a2_obj_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"34fb30e9-634b-4a5b-88cb-6d759f1c1565",
	'');
INSERT INTO PE_PE
	VALUES ("f1aceb57-ad96-4373-8cc7-0625abef1556",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("4f78879a-7f44-44d8-a9be-ca3d7b73d300",
	"00000000-0000-0000-0000-000000000000",
	'event_spec_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )

  // get visible classes
  in_generic_package = act.associateWithContainer();
  select one containing_pe related by act->ACT_BIE[R640]->PE_PE[R640];
  select one c_c related by containing_pe->C_C[R8001];
  select one ep_pkg related by containing_pe->EP_PKG[R8001];
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::CLASS ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::CLASS ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many o_objs related by results->O_OBJ[R8001];
  select many class_events related by o_objs->SM_ISM[R518]->SM_SM[R517]->SM_EVT[R502];
  select many inst_events related by o_objs->SM_ASM[R519]->SM_SM[R517]->SM_EVT[R502];
  if ( not_empty class_events or not_empty inst_events )
    line = ::getLineNumber( rule_token:param.a1_rule_token );
    col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
    select one list related by act->P_PL[R1603];
    if ( not_empty list )
      if ( ( list.line != line ) or ( list.col != col ) )
        list.dispose();
        create object instance list of P_PL;
        list.line = line;
        list.col = col;
        relate list to act across R1603;
      end if;
    else
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;

    // create proposals for each event
    for each evt in class_events
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Event;
      new_item.display_text = evt.getSignature( flavor:2 );
      new_item.replacement_text = new_item.display_text;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end for;
    for each evt in inst_events
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Event;
      new_item.display_text = evt.getSignature( flavor:2 );
      new_item.replacement_text = new_item.display_text;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end for;

  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("26c1ff18-1086-494d-88da-da5730a5456b",
	"4f78879a-7f44-44d8-a9be-ca3d7b73d300",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("4f78879a-7f44-44d8-a9be-ca3d7b73d300",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("b13b4673-f502-4740-8b05-ba311571bd09",
	"00000000-0000-0000-0000-000000000000",
	'send_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  act.associateWithOwningComponent();
  select many c_pos related by act->ACT_BIC[R694]->C_C[R694]->C_PO[R4010];
  if ( not_empty c_pos )
    line = ::getLineNumber( rule_token:param.a1_rule_token );
    col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
    select one list related by act->P_PL[R1603];
    if ( not_empty list )
      if ( ( list.line != line ) or ( list.col != col ) )
        list.dispose();
        create object instance list of P_PL;
        list.line = line;
        list.col = col;
        relate list to act across R1603;
      end if;
    else
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;

    for each c_po in c_pos
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Port;
      new_item.display_text = c_po.Name;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end for;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9bd28292-cc8e-4e9a-b506-921385578b1a",
	"b13b4673-f502-4740-8b05-ba311571bd09",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("b13b4673-f502-4740-8b05-ba311571bd09",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ca23de99-c4ae-4373-a590-3fbbafc1425f",
	"00000000-0000-0000-0000-000000000000",
	'all_inst_ref_vars_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;

  // create local variable proposals for variables of instance reference types
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
    select one inst_handle related by local_var->V_INT[R814];
    if ( not_empty inst_handle and  ( ( param.a2_include_self ) or ( not ( "self" == local_var.Name or "Self" == local_var.Name or "SELF" == local_var.Name ) ) ) )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Variable;
      new_item.display_text = local_var.Name;
      new_item.replacement_text = new_item.display_text;
      if ( param.a3_add_space )
        new_item.replacement_text = new_item.replacement_text + " ";
      end if;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("e732db5b-841c-4c10-b1b9-64db310cf0b5",
	"ca23de99-c4ae-4373-a590-3fbbafc1425f",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("46266ae5-c25f-4438-b196-558cc4646a79",
	"ca23de99-c4ae-4373-a590-3fbbafc1425f",
	'a2_include_self',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"e732db5b-841c-4c10-b1b9-64db310cf0b5",
	'');
INSERT INTO S_SPARM
	VALUES ("91e6ab93-8226-4c30-b048-b04518519ffb",
	"ca23de99-c4ae-4373-a590-3fbbafc1425f",
	'a3_add_space',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"46266ae5-c25f-4438-b196-558cc4646a79",
	'');
INSERT INTO PE_PE
	VALUES ("ca23de99-c4ae-4373-a590-3fbbafc1425f",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("69bb5230-a22f-407c-b8e7-9fc1bba1698e",
	"00000000-0000-0000-0000-000000000000",
	'all_inst_ref_set_vars_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;

  // create local variable proposals for variables of instance reference set types
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
    select one inst_set related by local_var->V_INS[R814];
    if ( not_empty inst_set )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Variable;
      new_item.display_text = local_var.Name;
      new_item.replacement_text = new_item.display_text;
      if ( param.a2_add_space )
        new_item.replacement_text = new_item.replacement_text + " ";
      end if;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5f024b6c-5154-49da-8596-00205754b0e7",
	"69bb5230-a22f-407c-b8e7-9fc1bba1698e",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7d435462-8703-44d0-8be9-8c0c1da70444",
	"69bb5230-a22f-407c-b8e7-9fc1bba1698e",
	'a2_add_space',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"5f024b6c-5154-49da-8596-00205754b0e7",
	'');
INSERT INTO PE_PE
	VALUES ("69bb5230-a22f-407c-b8e7-9fc1bba1698e",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("7ce9bd22-d7d8-4823-a035-cf0b6a046162",
	"00000000-0000-0000-0000-000000000000",
	'select_local_variable_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'::single_keyword_content_assist( a1_rule_token:param.a1_rule_token, a2_keyword:"from instances of", a3_append_chars:" ", a4_needs_space:true );
::single_keyword_content_assist( a1_rule_token:param.a1_rule_token, a2_keyword:"related by", a3_append_chars:" ", a4_needs_space:true );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("09f0f499-c903-41e0-a141-ebab3a61347a",
	"7ce9bd22-d7d8-4823-a035-cf0b6a046162",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("7ce9bd22-d7d8-4823-a035-cf0b6a046162",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("49b2a1cd-a538-4c9b-8b21-8f2188287287",
	"00000000-0000-0000-0000-000000000000",
	'single_keyword_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  create object instance new_item of P_P;
  new_item.type = ProposalTypes::Keyword;
  new_item.display_text = param.a2_keyword;
  new_item.replacement_text = new_item.display_text + param.a3_append_chars;
  new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
  new_item.needs_space = param.a4_needs_space;
  relate new_item to list across R1601;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("596a5085-60ba-490c-b5eb-87a2178b64a7",
	"49b2a1cd-a538-4c9b-8b21-8f2188287287",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7690ae2a-320d-4cfd-9e11-9ea9c1d9a437",
	"49b2a1cd-a538-4c9b-8b21-8f2188287287",
	'a3_append_chars',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"d65f620e-c4ee-4bc7-98be-a7c8d1253928",
	'');
INSERT INTO S_SPARM
	VALUES ("d65f620e-c4ee-4bc7-98be-a7c8d1253928",
	"49b2a1cd-a538-4c9b-8b21-8f2188287287",
	'a2_keyword',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"596a5085-60ba-490c-b5eb-87a2178b64a7",
	'');
INSERT INTO S_SPARM
	VALUES ("308ecde0-9c4d-4bdd-a904-96e606412fa6",
	"49b2a1cd-a538-4c9b-8b21-8f2188287287",
	'a4_needs_space',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	"7690ae2a-320d-4cfd-9e11-9ea9c1d9a437",
	'');
INSERT INTO PE_PE
	VALUES ("49b2a1cd-a538-4c9b-8b21-8f2188287287",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("e3a856e7-469c-4e2c-b0f8-b41a69635422",
	"00000000-0000-0000-0000-000000000000",
	'generate_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'::event_spec_content_assist( a1_rule_token:param.a1_rule_token );
act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  cur_sys_name = ::getSystemName();
  select any sys from instances of S_SYS where selected.Name == cur_sys_name;
  dt_id = GD::NULL_UNIQUE_ID();
  if not_empty sys
    dt_id = sys.getCoreTypeId(name:"inst<Event>");
  end if;
  select any pe from instances of PE_PE where selected.Element_ID == dt_id;
  select one dt related by pe->S_DT[R8001]; 
  if ( not_empty dt )

    line = ::getLineNumber( rule_token:param.a1_rule_token );
    col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
    select one list related by act->P_PL[R1603];
    if ( not_empty list )
      if ( ( list.line != line ) or ( list.col != col ) )
        list.dispose();
        create object instance list of P_PL;
        list.line = line;
        list.col = col;
        relate list to act across R1603;
      end if;
    else
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;

    // create local variable proposals for variables of type event
    i = 0;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
    while ( GD::NULL_UNIQUE_ID() != local_var_id )
      select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
      select one var_dt related by local_var->S_DT[R848];
      if ( not_empty var_dt )
        if ( var_dt.DT_ID == dt.DT_ID )
          create object instance new_item of P_P;
          new_item.type = ProposalTypes::Variable;
          new_item.display_text = local_var.Name;
          new_item.replacement_text = new_item.display_text;
          new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
          new_item.needs_space = true;
          relate new_item to list across R1601;
        end if;
      end if;
      i = i + 1;
      local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
    end while;

  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("62176fa5-50bf-40fb-b5d8-dac6223cd2b8",
	"e3a856e7-469c-4e2c-b0f8-b41a69635422",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("e3a856e7-469c-4e2c-b0f8-b41a69635422",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("69f4018f-55e2-4337-b6da-e463fc759929",
	"00000000-0000-0000-0000-000000000000",
	'is_in_participation',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE
',
	'select any left_obj from instances of O_OBJ where ( selected.Obj_ID == param.a1_left );
select any right_obj from instances of O_OBJ where ( selected.Obj_ID == param.a2_right );
select many r_rels related by left_obj->R_REL[R201];
for each r_rel in r_rels
  select any left_oir related by r_rel->R_OIR[R201] where ( selected.Obj_ID == left_obj.Obj_ID );
  select any right_oir related by r_rel->R_OIR[R201] where ( selected.Obj_ID == right_obj.Obj_ID and selected.OIR_ID != left_oir.OIR_ID );
  if ( not_empty right_oir )  // two oirs found means the classes are in participation on this association
    select one left_sub related by left_oir->R_RGO[R203]->R_SUB[R205];
    select one right_sub related by right_oir->R_RGO[R203]->R_SUB[R205];
    if ( empty left_sub or empty right_sub )  // cannot relate two subtypes to one another
      return true;
    end if;
  end if;
end for;
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("a1656ca3-fb47-4653-a948-1d70c3f92953",
	"69f4018f-55e2-4337-b6da-e463fc759929",
	'a1_left',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("b6796306-8053-4ac6-9277-9f276434ee50",
	"69f4018f-55e2-4337-b6da-e463fc759929",
	'a2_right',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"a1656ca3-fb47-4653-a948-1d70c3f92953",
	'');
INSERT INTO PE_PE
	VALUES ("69f4018f-55e2-4337-b6da-e463fc759929",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("ef3b7268-aa9e-4e7b-919a-977cd9e5ab0c",
	"00000000-0000-0000-0000-000000000000",
	'phrase_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'select any obj from instances of O_OBJ where ( selected.Obj_ID == param.a2_obj );
select any rel from instances of R_REL where ( selected.Rel_ID == param.a3_rel );
act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act and not_empty obj and not_empty rel )
  select many oirs related by rel->R_OIR[R201] where ( selected.Obj_ID == obj.Obj_ID );
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  for each oir in oirs
    phrase = oir.get_text_phrase();
    if ( "" != phrase )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Association;
      new_item.replacement_text = Util::getTic() + phrase + Util::getTic();
      new_item.display_text = new_item.replacement_text;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = false;
      relate new_item to list across R1601;
    end if;
  end for;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("1e686c21-9ae2-4e60-b3a9-01789eaa7cad",
	"ef3b7268-aa9e-4e7b-919a-977cd9e5ab0c",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("6602d29f-b659-41ef-abd2-4a5a36aec596",
	"ef3b7268-aa9e-4e7b-919a-977cd9e5ab0c",
	'a2_obj',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1e686c21-9ae2-4e60-b3a9-01789eaa7cad",
	'');
INSERT INTO S_SPARM
	VALUES ("9d20f555-ce64-409b-9b21-e1a29e5de0e4",
	"ef3b7268-aa9e-4e7b-919a-977cd9e5ab0c",
	'a3_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"6602d29f-b659-41ef-abd2-4a5a36aec596",
	'');
INSERT INTO PE_PE
	VALUES ("ef3b7268-aa9e-4e7b-919a-977cd9e5ab0c",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("2080ab19-2348-4b43-8ae9-55ec29de84d3",
	"00000000-0000-0000-0000-000000000000",
	'relate_var2_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
select any v_var from instances of V_VAR where ( selected.Var_ID == param.a2_var );
select one first_obj related by v_var->V_INT[R814]->O_OBJ[R818];
if ( not_empty act and not_empty first_obj )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  
  // create local variable proposals for variables of instance reference types
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
    select one second_obj related by local_var->V_INT[R814]->O_OBJ[R818];
    if ( not_empty second_obj )
      if ( ::is_in_participation( a1_left:first_obj.Obj_ID, a2_right:second_obj.Obj_ID ) )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Variable;
        new_item.display_text = local_var.Name;
        new_item.replacement_text = new_item.display_text + " ";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
      end if;
    end if;
    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9b9b49c5-cbaf-47a0-a14b-d68275c87493",
	"2080ab19-2348-4b43-8ae9-55ec29de84d3",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("850198ef-3b69-4931-9eed-a0b7774085ae",
	"2080ab19-2348-4b43-8ae9-55ec29de84d3",
	'a2_var',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9b9b49c5-cbaf-47a0-a14b-d68275c87493",
	'');
INSERT INTO PE_PE
	VALUES ("2080ab19-2348-4b43-8ae9-55ec29de84d3",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("bf9be826-5f8b-427e-9864-589dcd82f7b2",
	"00000000-0000-0000-0000-000000000000",
	'relate_across_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )

  // get the left instance reference
  select any left_var from instances of V_VAR where ( selected.Var_ID == param.a2_var1 );
  select one left_obj related by left_var->V_INT[R814]->O_OBJ[R818];

  // get the right instance reference
  select any right_var from instances of V_VAR where ( selected.Var_ID == param.a3_var2 );
  select one right_obj related by right_var->V_INT[R814]->O_OBJ[R818];
  
  select many right_oirs related by left_obj->R_REL[R201]->R_OIR[R201] where ( selected.Obj_ID == right_obj.Obj_ID );
  if ( not_empty right_oirs )
    line = ::getLineNumber( rule_token:param.a1_rule_token );
    col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
    select one list related by act->P_PL[R1603];
    if ( not_empty list )
      if ( ( list.line != line ) or ( list.col != col ) )
        list.dispose();
        create object instance list of P_PL;
        list.line = line;
        list.col = col;
        relate list to act across R1603;
      end if;
    else
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
    for each oir in right_oirs
      select one r_rel related by oir->R_REL[R201];
      select one o_obj related by oir->O_OBJ[R201];
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Association;
      new_item.replacement_text = "R" + GD::int_to_string( value:r_rel.Numb );
      phrase = oir.get_text_phrase();
      if ( "" != phrase and ( r_rel.is_reflexive() or PREF::getBoolean( name:"bridgepoint_prefs_content_assist_include_role_phrases" ) ) )
        new_item.replacement_text = new_item.replacement_text + "." + Util::getTic() + phrase + Util::getTic();
      end if;
      new_item.display_text = new_item.replacement_text + " - " + o_obj.Name;
      if ( "" != phrase )
        new_item.display_text = new_item.display_text + " " + Util::getTic() + phrase + Util::getTic();
      end if;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end for;
  end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("712834a9-a816-4937-bfce-f8ff99b4df4a",
	"bf9be826-5f8b-427e-9864-589dcd82f7b2",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("1d5ed317-76c8-4fce-8b23-4e3868331829",
	"bf9be826-5f8b-427e-9864-589dcd82f7b2",
	'a2_var1',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"712834a9-a816-4937-bfce-f8ff99b4df4a",
	'');
INSERT INTO S_SPARM
	VALUES ("41f55306-68f2-4ae2-8c63-4660b66f9104",
	"bf9be826-5f8b-427e-9864-589dcd82f7b2",
	'a3_var2',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"1d5ed317-76c8-4fce-8b23-4e3868331829",
	'');
INSERT INTO PE_PE
	VALUES ("bf9be826-5f8b-427e-9864-589dcd82f7b2",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a64bd77e-6176-417e-8d48-32bb88d155dc",
	"00000000-0000-0000-0000-000000000000",
	'relate_using_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'select any left_var from instances of V_VAR where ( selected.Var_ID == param.a2_var1 );
select one left_obj related by left_var->V_INT[R814]->O_OBJ[R818];
select any right_var from instances of V_VAR where ( selected.Var_ID == param.a3_var2 );
select one right_obj related by right_var->V_INT[R814]->O_OBJ[R818];
select any rel from instances of R_REL where ( selected.Rel_ID == param.a4_rel );
select any assoc_obj related by rel->R_OIR[R201]->R_RGO[R203]->R_ASSR[R205]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201] where ( selected.Obj_ID != left_obj.Obj_ID and selected.Obj_ID != right_obj.Obj_ID );
act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act and not_empty assoc_obj )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  // create local variable proposals for variables of instance reference types
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
    select one obj related by local_var->V_INT[R814]->O_OBJ[R818];
    if ( not_empty obj )
      if ( obj.Obj_ID == assoc_obj.Obj_ID )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Variable;
        new_item.display_text = local_var.Name;
        new_item.replacement_text = new_item.display_text;
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
      end if;
    end if;
    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("55ba3391-77d6-4d16-9f9f-1ec9c8b7f5a4",
	"a64bd77e-6176-417e-8d48-32bb88d155dc",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("7c8215c8-6cb1-4204-9550-88a895310f9f",
	"a64bd77e-6176-417e-8d48-32bb88d155dc",
	'a2_var1',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"55ba3391-77d6-4d16-9f9f-1ec9c8b7f5a4",
	'');
INSERT INTO S_SPARM
	VALUES ("4f1bc567-132c-4a24-ad7d-ca41f078a527",
	"a64bd77e-6176-417e-8d48-32bb88d155dc",
	'a3_var2',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"7c8215c8-6cb1-4204-9550-88a895310f9f",
	'');
INSERT INTO S_SPARM
	VALUES ("c85b1baa-ddf5-433f-bdb6-21c761c79bca",
	"a64bd77e-6176-417e-8d48-32bb88d155dc",
	'a4_rel',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"4f1bc567-132c-4a24-ad7d-ca41f078a527",
	'');
INSERT INTO PE_PE
	VALUES ("a64bd77e-6176-417e-8d48-32bb88d155dc",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("d7990a16-d0a0-4a05-87ca-3c088d832c76",
	"00000000-0000-0000-0000-000000000000",
	'rval_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );

// get cues
select any type_cue related by act->P_PCC[R1602] where ( selected.name == "declared_type" );
temp_declared_dt_id = GD::NULL_UNIQUE_ID();
if ( not_empty type_cue )
  temp_declared_dt_id = type_cue.unique_id_value;
end if;
declared_dt_id = temp_declared_dt_id; // Because of MC-Java architecture, variables must be effectively
                                      // final to be used as parameters in an invocation in a where clause.
select any declared_dt from instances of S_DT where ( selected.DT_ID == declared_dt_id );
temp_type_op = "assign";
select any op_cue related by act->P_PCC[R1602] where ( selected.name == "type_op" );
if ( not_empty op_cue )
  temp_type_op = op_cue.string_value;
end if;
type_op = temp_type_op; // Because of MC-Java architecture, variables must be effectively
                        // final to be used as parameters in an invocation in a where clause.
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  
  // get local variable proposals
  i = 0;
  local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  while ( GD::NULL_UNIQUE_ID() != local_var_id )
    select any local_var from instances of V_VAR where ( selected.Var_ID == local_var_id );
    if ( local_var.Declared )
      select one dt related by local_var->V_TRN[R814]->S_DT[R821];
      if ( empty dt )
        select one dt related by local_var->S_DT[R848];
      end if;
      include = false;
      // if no type is declared, include all locals
      include = include or ( GD::NULL_UNIQUE_ID() == declared_dt_id );
      // include locals of a compatible type
      include = include or ( ( GD::NULL_UNIQUE_ID() != declared_dt_id ) and
          ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:dt.DT_ID, op:type_op ) ) );
      // include inst ref and structured locals with a member/attribute of the same type
      select one irdt related by dt->S_IRDT[R17] where ( selected.isSet );
      select any o_attr related by irdt->O_OBJ[R123]->O_ATTR[R102]
        where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
      select any o_tfr related by irdt->O_OBJ[R123]->O_TFR[R115]
        where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
      select any s_mbr related by dt->S_SDT[R17]->S_MBR[R44]
        where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
      include = include or ( not_empty o_attr or not_empty s_mbr );
      if ( include )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::Variable;
        new_item.display_text = local_var.Name;
        new_item.replacement_text = new_item.display_text;
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
      end if;
    end if;
    i = i + 1;
    local_var_id = ::get_vars_in_scope( rule_token:param.a1_rule_token, index:i );
  end while;
  
  // get class key letter proposals
  in_generic_package = act.associateWithContainer();
  select one containing_pe related by act->ACT_BIE[R640]->PE_PE[R640];
  select one c_c related by containing_pe->C_C[R8001];
  select one ep_pkg related by containing_pe->EP_PKG[R8001];
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CLASS, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::CLASS ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::CLASS ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many o_objs related by results->O_OBJ[R8001];
  for each o_obj in o_objs
    select many o_tfrs related by o_obj->O_TFR[R115] where ( selected.Instance_Based == Scope::Class );  // must have a class based operation that returns void to be shown as an option
    select any tfr_dt related by o_tfrs->S_DT[R116]
      where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
    if ( GD::NULL_UNIQUE_ID() == declared_dt_id or not_empty tfr_dt )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Class;
      new_item.display_text = o_obj.Key_Lett;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
  end for;

  // get EE key letter proposals
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::EE, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::EE, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::EE ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::EE ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many s_ees related by results->S_EE[R8001];
  for each s_ee in s_ees
    select any brg_dt related by s_ee->S_BRG[R19]->S_DT[R20]
      where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
    if ( GD::NULL_UNIQUE_ID() == declared_dt_id or not_empty brg_dt )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::EE;
      new_item.display_text = s_ee.Key_Lett;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
  end for;
  
  // get function proposals
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::FUNCTION, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::FUNCTION, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::FUNCTION ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::FUNCTION ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many s_syncs related by results->S_SYNC[R8001];
  for each s_sync in s_syncs
    select one dt related by s_sync->S_DT[R25];
    if ( "void" != dt.Name and ( GD::NULL_UNIQUE_ID() == declared_dt_id or ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:s_sync.DT_ID, op:type_op ) ) )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Function;
      if ( "labels" == PREF::getString( name:"bridgepoint_prefs_content_assist_invocation_format" ) )
        new_item.replacement_text = s_sync.getSignature( flavor:2 );
        new_item.cursor_position = Util::indexOf( haystack:new_item.replacement_text, needle:":" ) + 1;
        if ( 0 == new_item.cursor_position )
          new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        end if;
      else
        new_item.replacement_text = s_sync.getSignature( flavor:3 );
        new_item.cursor_position = Util::indexOf( haystack:new_item.replacement_text, needle:"(" ) + 1;
        if ( 0 == new_item.cursor_position )
          new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        end if;
      end if;
      new_item.replacement_text = "::" + new_item.replacement_text;
      new_item.display_text = s_sync.getSignature( flavor:2 ) + " - " + dt.Name;
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
  end for;
  
  // get message proposals
  select any containing_c_c from instances of C_C where ( selected.Id == act.getContainingComponentId() );
  select many c_pos related by containing_c_c->C_PO[R4010];
  for each c_po in c_pos
    select any c_io related by c_po->C_IR[R4016]->C_I[R4012]->C_EP[R4003]->C_IO[R4004]
      where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
    if ( GD::NULL_UNIQUE_ID() == declared_dt_id or not_empty c_io )
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Port;
      new_item.display_text = c_po.Name;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end if;
  end for;
  
  // get EDT proposals
  if ( GD::NULL_UNIQUE_ID() == declared_dt_id )
    if not_empty c_c
      c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::DATATYPE, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
    else
      ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::DATATYPE, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
    end if;
    select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::DATATYPE ); 
    select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
    if not_empty ep_pkg
      select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::DATATYPE ); 
      select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
    end if;
    select many s_edts related by results->S_DT[R8001]->S_EDT[R17]->S_DT[R17];
    for each s_edt in s_edts
      create object instance  new_item of P_P;
      new_item.type = ProposalTypes::EDT;
      new_item.display_text = s_edt.Name;
      new_item.replacement_text = new_item.display_text + "::";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
    end for;
  end if;
  
  // get enumerator proposals
  select many s_enums related by declared_dt->S_EDT[R17]->S_ENUM[R27];
  for each s_enum in s_enums
    select one s_edt related by s_enum->S_EDT[R27]->S_DT[R17];
    create object instance  new_item of P_P;
    new_item.type = ProposalTypes::Enumerator;
    new_item.display_text = s_edt.Name + "::" + s_enum.Name;
    new_item.replacement_text = new_item.display_text;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = true;
    relate new_item to list across R1601;
  end for;
  
  // get constant proposals
  if not_empty c_c
    c_c.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CONSTANT, originatingContainerID:c_c.Id, delegatingContainerID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  else
    ep_pkg.collectVisibleElementsForName( name:"", type:ElementTypeConstants::CONSTANT, descending:false, originatingContainerID:ep_pkg.Package_ID, delegatingPkgID:GD::NULL_UNIQUE_ID(), collectGlobally:true );
  end if;
  select any resultSet related by c_c->PE_CRS[R8007] where ( selected.Name == "" and  selected.Type == ElementTypeConstants::CONSTANT ); 
  select many results related by resultSet->PE_CVS[R8008]->PE_PE[R8004];
  if not_empty ep_pkg
    select any pkgResultSet related by ep_pkg->PE_SRS[R8005] where ( selected.Name == "" and selected.Type == ElementTypeConstants::CONSTANT ); 
    select many results related by pkgResultSet->PE_VIS[R8006]->PE_PE[R8002];
  end if;
  select many cnst_csps related by results->CNST_CSP[R8001];
  select many cnst_sycs related by cnst_csps->CNST_SYC[R1504];
  if ( GD::NULL_UNIQUE_ID() != declared_dt_id )
    select many cnst_sycs related by cnst_csps->CNST_SYC[R1504]
      where ( ::data_types_compatible_for_content_assist( dt1:declared_dt_id, dt2:selected.DT_ID, op:type_op ) );
  end if;
  for each cnst_syc in cnst_sycs
    select one cnst_csp related by cnst_syc->CNST_CSP[R1504];
    select any dup_cnst_syc related by cnst_csps->CNST_SYC[R1504] where ( selected.Name == cnst_syc.Name and selected.Const_ID != cnst_syc.Const_ID );
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Constant;
    new_item.display_text = cnst_syc.Name + " - " + cnst_csp.InformalGroupName;
    new_item.replacement_text = cnst_syc.Name;
    if ( not_empty dup_cnst_syc )
      new_item.replacement_text = cnst_csp.InformalGroupName + "::" + new_item.replacement_text;
    end if;
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = true;
    relate new_item to list across R1601;
  end for;
  
  include_boolean = ( GD::NULL_UNIQUE_ID() == declared_dt_id );
  include_integer = ( GD::NULL_UNIQUE_ID() == declared_dt_id );
  if ( GD::NULL_UNIQUE_ID() != declared_dt_id )
    include_boolean = ( "boolean" == declared_dt.Name );
    include_integer = ( "integer" == declared_dt.Name );
  end if;

  // special proposals for boolean
  if ( include_boolean )
    // get keyword proposals
    i = 0;
    while i < 3
      kw = "";
      if ( 0 == i )
        kw = "not";
      elif ( 1 == i )
        kw = "not_empty";
      else
        kw = "empty";
      end if;
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Keyword;
      new_item.display_text = kw;
      new_item.replacement_text = new_item.display_text + " ";
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
      i = i + 1;
    end while;

    // get literal proposals
    i = 0;
    while i < 2
      kw = "";
      if ( 0 == i )
        kw = "true";
      else
        kw = "false";
      end if;
      create object instance new_item of P_P;
      new_item.type = ProposalTypes::Literal;
      new_item.display_text = kw;
      new_item.replacement_text = new_item.display_text;
      new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
      new_item.needs_space = true;
      relate new_item to list across R1601;
      i = i + 1;
    end while;
  end if;
    
  // special proposals for integer
  if ( include_integer )
    create object instance new_item of P_P;
    new_item.type = ProposalTypes::Keyword;
    new_item.display_text = "cardinality";
    new_item.replacement_text = new_item.display_text + " ";
    new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
    new_item.needs_space = true;
    relate new_item to list across R1601;
  end if;

end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9175a30f-ea36-41a8-a5c5-6bfe8b1bf287",
	"d7990a16-d0a0-4a05-87ca-3c088d832c76",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO PE_PE
	VALUES ("d7990a16-d0a0-4a05-87ca-3c088d832c76",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("147780d7-04e3-4676-b08a-56d527fb0645",
	"00000000-0000-0000-0000-000000000000",
	'data_types_compatible_for_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE

This function calls ''data_types_compatible'' and ignores any thrown errors
Translate:native
',
	'if ( Gd_c.Null_unique_id() != p_Dt1 && Gd_c.Null_unique_id() != p_Dt2 ) {
    try {
        return ( Gd_c.Null_unique_id() != Self.Data_types_compatible( modelRoot, p_Dt1, p_Dt2, p_Op ) );
    } catch ( RecognitionException e ) { /* do nothing */ }
}
return false;',
	"ba5eda7a-def5-0000-0000-000000000001",
	0,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9f7a3e04-98cf-422e-9e23-9df82188ce78",
	"147780d7-04e3-4676-b08a-56d527fb0645",
	'dt1',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("98f79634-352f-4042-af0e-f05e39262632",
	"147780d7-04e3-4676-b08a-56d527fb0645",
	'dt2',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9f7a3e04-98cf-422e-9e23-9df82188ce78",
	'');
INSERT INTO S_SPARM
	VALUES ("a3916771-55b1-4887-8524-e42053de2977",
	"147780d7-04e3-4676-b08a-56d527fb0645",
	'op',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"98f79634-352f-4042-af0e-f05e39262632",
	'');
INSERT INTO PE_PE
	VALUES ("147780d7-04e3-4676-b08a-56d527fb0645",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("cc5358fb-fb89-45be-a086-16162e28f879",
	"00000000-0000-0000-0000-000000000000",
	'set_declared_type_for_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  select any type_cue related by act->P_PCC[R1602] where ( selected.name == "declared_type" );
  if ( GD::NULL_UNIQUE_ID() == param.a1_dt_id )
    if ( not_empty type_cue )
      type_cue.dispose();  // remove the cue if the DT_ID is null
    end if;
  else
    if ( empty type_cue )
      create object instance type_cue of P_PCC;
      type_cue.name = "declared_type";
      relate type_cue to act across R1602;
    end if;
    type_cue.unique_id_value = param.a1_dt_id;
  end if;
  select any op_cue related by act->P_PCC[R1602] where ( selected.name == "type_op" );
  if ( "" == param.a2_op )
    if ( not_empty op_cue )
      op_cue.dispose();  // remove the cue if the op is empty string
    end if;
  else
    if ( empty op_cue )
      create object instance op_cue of P_PCC;
      op_cue.name = "type_op";
      relate op_cue to act across R1602;
    end if;
    op_cue.string_value = param.a2_op;
  end if;
end if;
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("5fe3d18e-0bc2-429c-9091-df76a943888f",
	"cc5358fb-fb89-45be-a086-16162e28f879",
	'a1_dt_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("91675351-ddb6-4946-b585-143b0775c52c",
	"cc5358fb-fb89-45be-a086-16162e28f879",
	'a2_op',
	"ba5eda7a-def5-0000-0000-000000000004",
	0,
	'',
	"5fe3d18e-0bc2-429c-9091-df76a943888f",
	'');
INSERT INTO PE_PE
	VALUES ("cc5358fb-fb89-45be-a086-16162e28f879",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("6fbd53a0-f0f7-4569-8e13-2b5039491df4",
	"00000000-0000-0000-0000-000000000000",
	'invocation_parameters_content_assist',
	'ParserValidateFunction: TRUE
ParserUtilityFunction: TRUE',
	'act_id = ::get_current_context();
select any act from instances of ACT_ACT where ( selected.Action_ID == act_id );
if ( not_empty act )
  line = ::getLineNumber( rule_token:param.a1_rule_token );
  col = ::getColumn( rule_token:param.a1_rule_token ) + GD::strlen( s: ::getText( rule_token:param.a1_rule_token ) );
  select one list related by act->P_PL[R1603];
  if ( not_empty list )
    if ( ( list.line != line ) or ( list.col != col ) )
      list.dispose();
      create object instance list of P_PL;
      list.line = line;
      list.col = col;
      relate list to act across R1603;
    end if;
  else
    create object instance list of P_PL;
    list.line = line;
    list.col = col;
    relate list to act across R1603;
  end if;
  select any v_fnv from instances of V_FNV where ( selected.Value_ID == param.a2_invocation_id );
  if ( not_empty v_fnv )
    // get first parameter
    select any s_sparm related by v_fnv->S_SYNC[R827]->S_SPARM[R24];
    select one prev_s_sparm related by s_sparm->S_SPARM[R54.''succeeds''];
    while ( not_empty prev_s_sparm )
      s_sparm = prev_s_sparm;
      select one prev_s_sparm related by s_sparm->S_SPARM[R54.''succeeds''];
    end while;
    // get existing parameters (first v_par is not created yet)
    select any first_par from instances of S_SPARM where ( selected.SParm_ID == param.a3_first_param_id );
    select many v_pars related by v_fnv->V_PAR[R817];
    // for each parameter in order
    order = 1;
    while ( not_empty s_sparm )
      include = true;
      if ( not_empty first_par )
        include = not ( first_par.Name == s_sparm.Name );
      end if;
      if ( include )
        for each v_par in v_pars
          if ( v_par.Name == s_sparm.Name )  // already been used
            include = false;
            break;
          end if;
        end for;
      end if;
      if ( include )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::FunctionParameter;
        new_item.display_text = s_sparm.Name;
        new_item.replacement_text = new_item.display_text + ":";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
        order = order + 1;
      end if;
      select one s_sparm related by s_sparm->S_SPARM[R54.''precedes''];
    end while;
  else
  select any v_trv from instances of V_TRV where ( selected.Value_ID == param.a2_invocation_id );
  if ( not_empty v_trv )
    // get first parameter
    select any o_tparm related by v_trv->O_TFR[R829]->O_TPARM[R117];
    select one prev_o_tparm related by o_tparm->O_TPARM[R124.''succeeds''];
    while ( not_empty prev_o_tparm )
      o_tparm = prev_o_tparm;
      select one prev_o_tparm related by o_tparm->O_TPARM[R124.''succeeds''];
    end while;
    // get existing parameters (first v_par is not created yet)
    select any first_par from instances of O_TPARM where ( selected.TParm_ID == param.a3_first_param_id );
    select many v_pars related by v_fnv->V_PAR[R817];
    // for each parameter in order
    order = 1;
    while ( not_empty o_tparm )
      include = true;
      if ( not_empty first_par )
        include = not ( first_par.Name == o_tparm.Name );
      end if;
      if ( include )
        for each v_par in v_pars
          if ( v_par.Name == o_tparm.Name )  // already been used
            include = false;
            break;
          end if;
        end for;
      end if;
      if ( include )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::OperationParameter;
        new_item.display_text = o_tparm.Name;
        new_item.replacement_text = new_item.display_text + ":";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
        order = order + 1;
      end if;
      select one o_tparm related by o_tparm->O_TPARM[R124.''precedes''];
    end while;
  else
  select any v_brv from instances of V_BRV where ( selected.Value_ID == param.a2_invocation_id );
  if ( not_empty v_brv )
    // get first parameter
    select any s_bparm related by v_brv->S_BRG[R828]->S_BPARM[R21];
    select one prev_s_bparm related by s_bparm->S_BPARM[R55.''succeeds''];
    while ( not_empty prev_s_bparm )
      s_bparm = prev_s_bparm;
      select one prev_s_bparm related by s_bparm->S_BPARM[R55.''succeeds''];
    end while;
    // get existing parameters (first v_par is not created yet)
    select any first_par from instances of S_BPARM where ( selected.BParm_ID == param.a3_first_param_id );
    select many v_pars related by v_fnv->V_PAR[R817];
    // for each parameter in order
    order = 1;
    while ( not_empty s_bparm )
      include = true;
      if ( not_empty first_par )
        include = not ( first_par.Name == s_bparm.Name );
      end if;
      if ( include )
        for each v_par in v_pars
          if ( v_par.Name == s_bparm.Name )  // already been used
            include = false;
            break;
          end if;
        end for;
      end if;
      if ( include )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::BridgeParameter;
        new_item.display_text = s_bparm.Name;
        new_item.replacement_text = new_item.display_text + ":";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
        order = order + 1;
      end if;
      select one s_bparm related by s_bparm->S_BPARM[R55.''precedes''];
    end while;
  else
  select any v_msv from instances of V_MSV where ( selected.Value_ID == param.a2_invocation_id );
  if ( not_empty v_msv )
    // get first parameter
    select any c_pp related by v_msv->SPR_PEP[R841]->C_EP[R4501]->C_PP[R4006];
    if ( empty c_pp )
      select any c_pp related by v_msv->SPR_REP[R845]->C_EP[R4500]->C_PP[R4006];
    end if;
    select one prev_c_pp related by c_pp->C_PP[R4021.''succeeds''];
    while ( not_empty prev_c_pp )
      c_pp = prev_c_pp;
      select one prev_c_pp related by c_pp->C_PP[R4021.''succeeds''];
    end while;
    // get existing parameters (first v_par is not created yet)
    select any first_par from instances of C_PP where ( selected.PP_Id == param.a3_first_param_id );
    select many v_pars related by v_fnv->V_PAR[R817];
    // for each parameter in order
    order = 1;
    while ( not_empty c_pp )
      include = true;
      if ( not_empty first_par )
        include = not ( first_par.Name == c_pp.Name );
      end if;
      if ( include )
        for each v_par in v_pars
          if ( v_par.Name == c_pp.Name )  // already been used
            include = false;
            break;
          end if;
        end for;
      end if;
      if ( include )
        create object instance new_item of P_P;
        new_item.type = ProposalTypes::PropertyParameter;
        new_item.display_text = c_pp.Name;
        new_item.replacement_text = new_item.display_text + ":";
        new_item.cursor_position = GD::strlen( s:new_item.replacement_text );
        new_item.needs_space = true;
        relate new_item to list across R1601;
        order = order + 1;
      end if;
      select one c_pp related by c_pp->C_PP[R4021.''precedes''];
    end while;
  end if; end if; end if; end if;
end if;',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO S_SPARM
	VALUES ("9768202f-02cd-43f4-bf16-32256a366105",
	"6fbd53a0-f0f7-4569-8e13-2b5039491df4",
	'a1_rule_token',
	"89e59e5c-3853-4d30-9b45-6246db5f3d7b",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_SPARM
	VALUES ("10185fb5-5816-474d-b7d4-a0ac22736ac9",
	"6fbd53a0-f0f7-4569-8e13-2b5039491df4",
	'a2_invocation_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"9768202f-02cd-43f4-bf16-32256a366105",
	'');
INSERT INTO S_SPARM
	VALUES ("364df122-f6db-4ded-9cab-a908d3d19933",
	"6fbd53a0-f0f7-4569-8e13-2b5039491df4",
	'a3_first_param_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"10185fb5-5816-474d-b7d4-a0ac22736ac9",
	'');
INSERT INTO PE_PE
	VALUES ("6fbd53a0-f0f7-4569-8e13-2b5039491df4",
	1,
	"9092f98e-34df-42d0-be42-dc91951c8a73",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("9092f98e-34df-42d0-be42-dc91951c8a73",
	1,
	"2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	7);
INSERT INTO EP_PKG_PROXY
	VALUES ("2467e6dc-9ef4-46c6-afa6-883c1e23a96c",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'Functions',
	'',
	0,
	'../Functions.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'org.xtuml.bp.core',
	1,
	'../../../org.xtuml.bp.core.xtuml');
