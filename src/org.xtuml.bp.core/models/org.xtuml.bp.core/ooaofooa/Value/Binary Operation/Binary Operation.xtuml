-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'Binary Operation',
	802,
	'V_BIN',
	'Values are yielded by simple or compound expressions. Compound expressions are made up of nested binary operations. This class represents such as binary operations. The operator attribute contains the string identifier of the operation to be carried out.',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("437b2013-27cc-4bcc-bff0-0403f6af02ae",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'dispose',
	'This operation disconnects an instance, and all instances it is 
responsible for, from the model.',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'select one lop related by self->V_VAL[R802];
if ( not_empty lop )
  unrelate lop from self across R802;
  lop.dispose();
end if;
select one rop related by self->V_VAL[R803];
if ( not_empty rop )
  unrelate rop from self across R803;
  rop.dispose();
end if;
delete object instance self;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000",
	0);
INSERT INTO O_TFR
	VALUES ("dffe2eb3-3c17-4ddd-a272-1cf1a7184589",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getValue',
	'Performs Binary Operation and returns the value.
',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	1,
	'//Value: Binary Operation.getValue()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select one dt related by self->V_VAL[R801]->S_DT[R820];
select one irdt related by dt->S_IRDT[R17];
coreDataTypeName = dt.getCoreDataTypeName();
if (coreDataTypeName == "boolean")
  return GD::boolean_to_instance(value:self.getBoolean(stack_frame_id: param.stack_frame_id));
elif (dt.Name == "timestamp")
  return GD::long_to_instance(value:self.getLong(stack_frame_id: param.stack_frame_id));
elif (coreDataTypeName == "integer")
  return GD::int_to_instance(value:self.getInteger(stack_frame_id: param.stack_frame_id));
elif (coreDataTypeName == "real")
  return GD::real_to_instance(value:self.getReal(stack_frame_id: param.stack_frame_id));
elif (coreDataTypeName == "string")
  return GD::string_to_instance(value:self.getString(stack_frame_id: param.stack_frame_id));
elif ( not_empty irdt and irdt.isSet )
  return self.getInstanceSet( stack_frame_id:param.stack_frame_id );
else
  error_message = "Error: Did not find a supported data type " + coreDataTypeName + " in attempt to retrieve value in binary operation.";
  USER::logError(msg:error_message,path:body.getPath());
end if;

return GD::string_to_instance(value:"Error");',
	1,
	'',
	"94882b1c-d3d7-42ea-b2a9-46803ef23b3c",
	0);
INSERT INTO O_TPARM
	VALUES ("10924281-1032-458e-9941-8f3dffe5bf93",
	"dffe2eb3-3c17-4ddd-a272-1cf1a7184589",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("bc3722c8-5188-4529-8519-cf9eb9816b17",
	"00000000-0000-0000-0000-000000000000",
	'instance',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_TFR
	VALUES ("ce8a596d-7205-4f9a-90e2-817850e8b3e4",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getBoolean',
	'Performs Binary Operation and returns the boolean value.',
	"ba5eda7a-def5-0000-0000-000000000001",
	1,
	'// Value: Binary Operation.getBoolean()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->
             I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);
if (self.Operator == "and")
  return (GD::instance_to_boolean(value:leftRtVal.getValue())
  		and GD::instance_to_boolean(value:rightRtVal.getValue())); 
elif (self.Operator == "or")
  return (GD::instance_to_boolean(value:leftRtVal.getValue())
  		or GD::instance_to_boolean(value:rightRtVal.getValue()));
elif (self.Operator == "==" or self.Operator == "!=")

  //Used to determine if the boolean binary operations contains a combination of real or int operands 
  select one dtLeft related by leftOperand->S_DT[R820];
  select one irdtLeft related by dtLeft->S_IRDT[R17];
  dtName = dtLeft.Name;
  
  // Check if this is an operation on strings  
  if (not_empty dtLeft)
    select one sdt related by dtLeft->S_SDT[R17];
    if not_empty sdt or leftOperand.getDimensions() != 0
      if self.Operator == "=="
        return leftRtVal.isEqual(to:rightRtVal.RuntimeValue_ID);
      else
        return not leftRtVal.isEqual(to:rightRtVal.RuntimeValue_ID);
      end if;
    else
      select one edt related by dtLeft->S_EDT[R17];
      if (self.Operator == "==")
        if (dtLeft.getCoreDataTypeName() == "string" or not_empty edt)
          return (GD::instance_to_string(value:leftRtVal.getValue())
                        == GD::instance_to_string(value:rightRtVal.getValue()));
        elif (dtLeft.getCoreDataTypeName() == "unique_id")
          return (GD::instance_to_string(value:leftRtVal.getValue()) 
                        == GD::instance_to_string(value:rightRtVal.getValue()));
        end if;
      else
        if (dtLeft.getCoreDataTypeName() == "string" or not_empty edt)
          return (GD::instance_to_string(value:leftRtVal.getValue())
                        != GD::instance_to_string(value:rightRtVal.getValue()));
        elif (dtLeft.getCoreDataTypeName() == "unique_id")
          return (GD::instance_to_string(value:leftRtVal.getValue())
                        != GD::instance_to_string(value:rightRtVal.getValue()));
        end if;
      end if;
    end if;    
  end if;    
  
  // Check if this is an operation on integers or reals
  dtLeftRealorInt = false;
  isTimestamp = false;
  isDate = false;
  isComponentRef = false;
  if (not_empty dtLeft)
    dtLeftRealorInt = ((dtLeft.getCoreDataTypeName() == "integer") or (dtLeft.getCoreDataTypeName() == "real"));    
    isTimestamp = dtLeft.Name == "timestamp" ;
    isDate = dtLeft.Name == "date";
    isComponentRef = dtLeft.Name == "component_ref";
  end if;

  if (isTimestamp)
    if (self.Operator == "==")
      if (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 0)
        return true;
      else
        return false;
      end if;
    else  // we know that (self.Operator == "!=")
      if (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 0)
        return false;
      else
        return true;
      end if;
    end if;
  elif (isDate)
    if (self.Operator == "==")
      if (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 0)
        return true;
      else
        return false;
      end if;
    else  // we know that (self.Operator == "!=")
      if (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 0)
        return false;
      else
        return true;
      end if;
    end if;
  elif (dtLeftRealorInt)    
    if (self.Operator == "==")  

      //Assuming the boolean binary operations contains real and/or int operands
      select one dtRight related by rightOperand->S_DT[R820];
      leftDataTypeName = dtLeft.getCoreDataTypeName();
      rightDataTypeName = dtRight.getCoreDataTypeName();
     
      if (leftDataTypeName == "integer")
        if (rightDataTypeName == "integer")
          return (GD::instance_to_int(value:leftRtVal.getValue())
          		== GD::instance_to_int(value:rightRtVal.getValue()));
        else
          return (GD::instance_to_int(value:leftRtVal.getValue())
          		== GD::instance_to_real(value:rightRtVal.getValue())); 
        end if;
      else //assuming leftReal is valid
        if (rightDataTypeName == "integer")
          return (GD::instance_to_real(value:leftRtVal.getValue())
          		== GD::instance_to_int(value:rightRtVal.getValue()));
        else
          return (GD::instance_to_real(value:leftRtVal.getValue())
          		== GD::instance_to_real(value:rightRtVal.getValue()));
        end if;
      end if;    	
    else // we know that (self.Operator == "!=")

      //Assuming the boolean binary operations contains real and/or int operands
      select one dtRight related by rightOperand->S_DT[R820];
      leftDataTypeName = dtLeft.getCoreDataTypeName();
      rightDataTypeName = dtRight.getCoreDataTypeName();
     
      if (leftDataTypeName == "integer")
        if (rightDataTypeName == "integer")
          return GD::instance_to_int(value:leftRtVal.getValue())
          		!= GD::instance_to_int(value:rightRtVal.getValue());
        else
          return GD::instance_to_int(value:leftRtVal.getValue())
          		!= GD::instance_to_real(value:rightRtVal.getValue());
        end if;
      else //assuming leftReal is valid
        if (rightDataTypeName == "integer")
          return GD::instance_to_real(value:leftRtVal.getValue())
          		!= GD::instance_to_int(value:rightRtVal.getValue());
        else
           return GD::instance_to_real(value:leftRtVal.getValue())
           		!= GD::instance_to_real(value:rightRtVal.getValue());
       end if;
      end if; 

    end if;
  elif (isComponentRef)
    if (self.Operator == "==")
      if (GD::instance_to_string(value:leftRtVal.getValue()) == GD::instance_to_string(value:rightRtVal.getValue()))
        return true;
      else
        return false;
      end if;
    else  // we know that (self.Operator == "!=")
      if (GD::instance_to_string(value:leftRtVal.getValue()) == GD::instance_to_string(value:rightRtVal.getValue()))
        return false;
      else
        return true;
      end if;
    end if;
  elif (not_empty irdtLeft or (dtName == "inst_ref<Object>") or ( dtName == "inst_ref_set<Object>"))
	// The operands are either Instance Reference or Instance Reference Set
	// The RuntimeValue instance will be queried for both Left and Right 
	// value and compare them using compareInstRefSets()

    // Instance Reference and Instance Reference Set are handled in the same way
    lVal_ID = leftOperand.getRuntimeValue(stack_frame_id:param.stack_frame_id);
    if lVal_ID != GD::NULL_UNIQUE_ID()
	  rVal_ID = rightOperand.getRuntimeValue(stack_frame_id:param.stack_frame_id);
	  if rVal_ID != GD::NULL_UNIQUE_ID()
		// The two RuntimeValue instances for both operands are found	    
        select many leftInstances related by leftRtVal->RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
        select many rightInstances related by rightRtVal->RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
        if (self.Operator == "==")
          return leftInstances == rightInstances;
        else
          return leftInstances != rightInstances;
        end if;
      end if;                                            
    end if;                                              
  else
      // There is no real, int, instance handle, or instance set, so just compare as a boolean
      if (self.Operator == "==")
        return (GD::instance_to_boolean(value:leftRtVal.getValue())
        		== GD::instance_to_boolean(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_boolean(value:leftRtVal.getValue())
        		!= GD::instance_to_boolean(value:rightRtVal.getValue()));
      end if;
  end if;  // end if (dtLeftRealorInt)
// end elif (self.Operator == "==" or self.Operator == "!=")

elif (self.Operator == "<")
  //Used to determine if the boolean binary operations contains a combination of real or int operands 
  select one dtLeft related by leftOperand->S_DT[R820];
  dtLeftRealorInt = false;
  isTimestamp = false;
  isDate = false;
  if (not_empty dtLeft)
    dtLeftRealorInt = ((dtLeft.getCoreDataTypeName() == "integer") or (dtLeft.getCoreDataTypeName() == "real"));
    isTimestamp = dtLeft.Name == "timestamp" ;
    isDate = dtLeft.Name == "date";
  end if;
  
  if (isTimestamp)
    if (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 1)
      return true;
    else
      return false;
    end if;
  elif (isDate)
    if (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 1)
      return true;
    else
      return false;
    end if;
  elif (dtLeftRealorInt)  
    //Assuming the boolean binary operations contains real and/or int operands
    select one dtRight related by rightOperand->S_DT[R820];
    leftDataTypeName = dtLeft.getCoreDataTypeName();
    rightDataTypeName = dtRight.getCoreDataTypeName();
     
    if (leftDataTypeName == "integer")
      if (rightDataTypeName == "integer")
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		< GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		< GD::instance_to_real(value:rightRtVal.getValue()));        
      end if;
    else //assuming leftReal is valid
      if (rightDataTypeName == "integer")
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		< GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		< GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    end if; 	    
  else
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getBoolean error: operator <, unhandled operand type - returning default value, false",path:pathMsg);
    return false;
  end if;
 
elif (self.Operator == ">")
  //Used to determine if the boolean binary operations contains a combination of real or int operands 
  select one dtLeft related by leftOperand->S_DT[R820];
  dtLeftRealorInt = false;
  isTimestamp = false;
  isDate = false;
  if (not_empty dtLeft)
    dtLeftRealorInt = ((dtLeft.getCoreDataTypeName() == "integer") or (dtLeft.getCoreDataTypeName() == "real"));
    isTimestamp = dtLeft.Name == "timestamp" ;
    isDate = dtLeft.Name == "date";
  end if;
  
  if (isTimestamp)
    if (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 2)
      return true;
    else
      return false;
    end if;
  elif (isDate)
    if (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 2)
      return true;
    else
      return false;
    end if;
  elif (dtLeftRealorInt)  
    //Assuming the boolean binary operations contains real and/or int operands
    select one dtRight related by rightOperand->S_DT[R820];
    leftDataTypeName = dtLeft.getCoreDataTypeName();
    rightDataTypeName = dtRight.getCoreDataTypeName();
     
    if (leftDataTypeName == "integer")
      if (rightDataTypeName == "integer")
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		> GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		> GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    else //assuming leftReal is valid
      if (rightDataTypeName == "integer")
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		> GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		> GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    end if;  
  else
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getBoolean error: operator >, unhandled operand type - returning default value, false",path:pathMsg);
    return false;  	
  end if;
elif (self.Operator == "<=")
   //Used to determine if the boolean binary operations contains a combination of real or int operands 
  select one dtLeft related by leftOperand->S_DT[R820];
  dtLeftRealorInt = false;
  isTimestamp = false;
  isDate = false;
  if (not_empty dtLeft)
    dtLeftRealorInt = ((dtLeft.getCoreDataTypeName() == "integer") or (dtLeft.getCoreDataTypeName() == "real"));
    isTimestamp = dtLeft.Name == "timestamp" ;
    isDate = dtLeft.Name == "date";
  end if;
  
  if (isTimestamp)
    if ((GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 0)
      or (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 1))
      return true;
    else
      return false;
    end if;
  elif (isDate)
    if ((GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 0)
      or (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 1))
      return true;
    else
      return false;
    end if;
  elif (dtLeftRealorInt)  
    //Assuming the boolean binary operations contains real and/or int operands
    select one dtRight related by rightOperand->S_DT[R820];
    leftDataTypeName = dtLeft.getCoreDataTypeName();
    rightDataTypeName = dtRight.getCoreDataTypeName();
     
    if (leftDataTypeName == "integer")
      if (rightDataTypeName == "integer")
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		<= GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		<= GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    else //assuming leftReal is valid
      if (rightDataTypeName == "integer")
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		<= GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		<= GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    end if;  
  else
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getBoolean error: operator <=, unhandled operand type - returning default value, false",path:pathMsg);
    return false; 	
  end if;
elif (self.Operator == ">=")
   //Used to determine if the boolean binary operations contains a combination of real or int operands 
  select one dtLeft related by leftOperand->S_DT[R820];
  dtLeftRealorInt = false;
  isTimestamp = false;
  isDate = false;
  if (not_empty dtLeft)
    dtLeftRealorInt = ((dtLeft.getCoreDataTypeName() == "integer") or (dtLeft.getCoreDataTypeName() == "real"));
    isTimestamp = dtLeft.Name == "timestamp" ;
    isDate = dtLeft.Name == "date";
  end if;
  
  if (isTimestamp)
    if ((GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 0)
      or (GD::compare_times(t1:leftRtVal.getValue(),t2:rightRtVal.getValue()) == 2))
      return true;
    else
      return false;
    end if;
  elif (isDate)
    if ((GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 0)
      or (GD::compare_dates(d1:leftRtVal.getValue(),d2:rightRtVal.getValue()) == 2))
      return true;
    else
      return false;
    end if;
  elif (dtLeftRealorInt)  
    //Assuming the boolean binary operations contains real and/or int operands
    select one dtRight related by rightOperand->S_DT[R820];
    leftDataTypeName = dtLeft.getCoreDataTypeName();
    rightDataTypeName = dtRight.getCoreDataTypeName();
     
    if (leftDataTypeName == "integer")
      if (rightDataTypeName == "integer")
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		>= GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_int(value:leftRtVal.getValue())
        		>= GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    else //assuming leftReal is valid
      if (rightDataTypeName == "integer")
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		>= GD::instance_to_int(value:rightRtVal.getValue()));
      else
        return (GD::instance_to_real(value:leftRtVal.getValue())
        		>= GD::instance_to_real(value:rightRtVal.getValue()));
      end if;
    end if; 
  else
    pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getBoolean error: operator >=, unhandled operand type - returning default value, false",path:pathMsg);
    return false;  	
  end if;
end if;

pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getBoolean error: operator unknown - returning default value, false",path:pathMsg);
return false;',
	1,
	'',
	"437b2013-27cc-4bcc-bff0-0403f6af02ae",
	0);
INSERT INTO O_TPARM
	VALUES ("161690f1-dd7c-4066-874d-67c1a92c62d9",
	"ce8a596d-7205-4f9a-90e2-817850e8b3e4",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("aaf12aee-72a0-4fcd-afd0-e88be4d337cd",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getString',
	'',
	"ba5eda7a-def5-0000-0000-000000000004",
	1,
	'// Value: Binary Operation.getString()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->
             I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);
if (self.Operator == "+")
  return (GD::instance_to_string(value:leftRtVal.getValue())
  		+ GD::instance_to_string(value:rightRtVal.getValue()));
end if;

pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getString error: returning default value, empty string",path:pathMsg);
return "";
',
	1,
	'',
	"4b480d20-5645-4b2d-9c69-43c6379ebca5",
	0);
INSERT INTO O_TPARM
	VALUES ("c6ba55e8-65b1-4e73-8b90-a4734f70e39d",
	"aaf12aee-72a0-4fcd-afd0-e88be4d337cd",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("5a9a5d5b-8712-48a8-a01c-dbe411799c86",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getInteger',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	1,
	'// Value: Binary Operation.getInteger()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->
             I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);
leftOpVal = GD::instance_to_int(value:leftRtVal.getValue());
rightOpVal = GD::instance_to_int(value:rightRtVal.getValue());
if (self.Operator == "+")
  return leftOpVal + rightOpVal;
elif (self.Operator == "-")
  return leftOpVal - rightOpVal;
elif (self.Operator == "*")
  return leftOpVal + rightOpVal;
elif (self.Operator == "/")
  return leftOpVal / rightOpVal;
elif (self.Operator == "%")
  return leftOpVal % rightOpVal;
end if;


pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getInteger error: returning default value, 0",path:pathMsg);
return 0;

',
	1,
	'',
	"ce8a596d-7205-4f9a-90e2-817850e8b3e4",
	0);
INSERT INTO O_TPARM
	VALUES ("2bea981d-9450-4f15-ac31-64be0b0a84b3",
	"5a9a5d5b-8712-48a8-a01c-dbe411799c86",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("4b480d20-5645-4b2d-9c69-43c6379ebca5",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getReal',
	'',
	"ba5eda7a-def5-0000-0000-000000000003",
	1,
	'// Value: Binary Operation.getReal()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->
             I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);
// Need to check if either of the operands are actually integers
select one leftInt related by leftOperand->V_LIN[R801];
select one rightInt related by rightOperand->V_LIN[R801];
leftValue = 0.0;
rightValue = 0.0;

// Check if the left operand is an integer and get the value
if (not_empty leftInt)
  leftValue = GD::instance_to_int(value:leftRtVal.getValue());
else
  leftValue = GD::instance_to_real(value:leftRtVal.getValue());
end if;

// Check if the right operand is an integer and get the value
if (not_empty rightInt)
  rightValue = GD::instance_to_int(value:rightRtVal.getValue());
else
  rightValue = GD::instance_to_real(value:rightRtVal.getValue());
end if;

// Perform the arithmatic operation
if (self.Operator == "+")
  return (leftValue + rightValue);
elif (self.Operator == "-")
  return (leftValue - rightValue);
elif (self.Operator == "*")
  return (leftValue * rightValue);
elif (self.Operator == "/")
  return (leftValue / rightValue);
elif (self.Operator == "%")
  return (leftValue % rightValue);
end if;

pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getReal error: returning default value, 0",path:pathMsg);
return 0;',
	1,
	'',
	"5a9a5d5b-8712-48a8-a01c-dbe411799c86",
	0);
INSERT INTO O_TPARM
	VALUES ("7dc26011-09fa-492a-8583-e4d35f1d4dd9",
	"4b480d20-5645-4b2d-9c69-43c6379ebca5",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("0e14a938-1c79-4982-8baa-5f633e2adf08",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getInstanceSet',
	'Performs Binary Operation and returns the boolean value.',
	"bc3722c8-5188-4529-8519-cf9eb9816b17",
	1,
	'// Value: Binary Operation.getInstanceSet()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);

// set operations
if ( self.Operator == "+" or self.Operator == "|" or self.Operator == "&" or self.Operator == "-" or self.Operator == "^" )

  // get the instances for left and right hand sides
  select many leftInstances related by leftRtVal->RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
  select many rightInstances related by rightRtVal->RV_SMV[R3300]->RV_IRV[R3308]->L_IIR[R3311]->I_INS[R3013];
  select many resultSet from instances of I_INS where false;

  // union
  if ( self.Operator == "+" or self.Operator == "|" )
    resultSet = leftInstances | rightInstances;
  // intersection
  elif ( self.Operator == "&" )
    resultSet = leftInstances & rightInstances;
  // difference
  elif ( self.Operator == "-" )
    resultSet = leftInstances - rightInstances;
  // symmetric difference
  elif ( self.Operator == "^" )
    resultSet = leftInstances ^ rightInstances;
  end if;
  
  // create a new runtime value for the combined set
  create object instance resultRtVal of RV_RVL;
  relate resultRtVal to stack_frame across R3310;
  select one s_dt related by self->V_VAL[R801]->S_DT[R820];
  relate s_dt to resultRtVal across R3307;
  resultRtVal.createSimpleValue();
  select one rv_irv related by resultRtVal->RV_SMV[R3300]->RV_IRV[R3308];
  select any current_iir from instances of L_IIR where false;
  for each inst in resultSet
    create object instance inst_in_reference of L_IIR;
    relate inst_in_reference to rv_irv across R3311;
    relate inst_in_reference to inst across R3013;
    if ( not_empty current_iir )
      relate inst_in_reference to current_iir across R3011.''is after'';
      current_iir = inst_in_reference;
    end if;
  end for;

  // return the ID of the new runtime value
  return GD::unique_id_to_instance( value:resultRtVal.RuntimeValue_ID );

else
  pathMsg = "<No Path Available - Empty instance>";
  if (not_empty body)
    pathMsg = body.getPath();
  end if;
  USER::logError( msg:"Binary Operation.getInstanceSet error: operator unknown - returning default value, null", path:pathMsg );
  return GD::NULL_INSTANCE();
end if;',
	1,
	'',
	"aaf12aee-72a0-4fcd-afd0-e88be4d337cd",
	0);
INSERT INTO O_TPARM
	VALUES ("11378405-d450-45d6-b176-74af1a9abc59",
	"0e14a938-1c79-4982-8baa-5f633e2adf08",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_TFR
	VALUES ("94882b1c-d3d7-42ea-b2a9-46803ef23b3c",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	'getLong',
	'',
	"f0e53f72-2765-4257-ae4c-e44680e63219",
	1,
	'// Value: Binary Operation.getInteger()
select one body related by self->V_VAL[R801]->ACT_BLK[R826]->ACT_ACT[R601];
select any stack_frame related by self->V_VAL[R801]->I_VSF[R2978]->
             I_STF[R2951] where selected.Stack_Frame_ID == param.stack_frame_id;
select one leftOperand related by self->V_VAL[R802];
select any leftResult related by leftOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one leftRtVal related by leftResult->RV_RVL[R3305];
select one rightOperand related by self->V_VAL[R803];
select any rightResult related by rightOperand->I_VSF[R2978] where
                                selected.Stack_Frame_ID == param.stack_frame_id;
select one rightRtVal related by rightResult->RV_RVL[R3305];
stack_frame.popValue(value_id:leftOperand.Value_ID);
stack_frame.popValue(value_id:rightOperand.Value_ID);
leftOpVal = GD::instance_to_long(value:leftRtVal.getValue());
rightOpVal = GD::instance_to_long(value:rightRtVal.getValue());
if (self.Operator == "+")
  return leftOpVal + rightOpVal;
elif (self.Operator == "-")
  return leftOpVal - rightOpVal;
elif (self.Operator == "*")
  return leftOpVal + rightOpVal;
elif (self.Operator == "/")
  return leftOpVal / rightOpVal;
elif (self.Operator == "%")
  return leftOpVal % rightOpVal;
end if;


pathMsg = "<No Path Available - Empty instance>";
    if (not_empty body)
      pathMsg = body.getPath();
    end if;
	USER::logError(msg:"Binary Operation.getInteger error: returning default value, 0",path:pathMsg);
return 0;

',
	1,
	'',
	"0e14a938-1c79-4982-8baa-5f633e2adf08",
	0);
INSERT INTO O_TPARM
	VALUES ("c4a004ef-5dfd-45de-af86-9aada5b1c1c9",
	"94882b1c-d3d7-42ea-b2a9-46803ef23b3c",
	'stack_frame_id',
	"ba5eda7a-def5-0000-0000-000000000005",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO S_DT_PROXY
	VALUES ("f0e53f72-2765-4257-ae4c-e44680e63219",
	"00000000-0000-0000-0000-000000000000",
	'long',
	'',
	'',
	'../../Datatypes/Datatypes.xtuml');
INSERT INTO O_REF
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"f45cba3b-f381-475e-b8a9-3b355142054d",
	"c10ff05a-ed5d-46b3-9fd9-73ec6bc9fe2f",
	"0a07b8be-4053-4dc6-a060-df5a70cbbed5",
	"af713e29-13e6-4b62-869e-eb632f17310e",
	"fb39c9bd-fd9a-4795-b6a5-72a97f517af5",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Value',
	'Value_ID',
	'R801');
INSERT INTO R_RGO_PROXY
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"f45cba3b-f381-475e-b8a9-3b355142054d",
	"c10ff05a-ed5d-46b3-9fd9-73ec6bc9fe2f",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"f45cba3b-f381-475e-b8a9-3b355142054d",
	"0a07b8be-4053-4dc6-a060-df5a70cbbed5",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("af713e29-13e6-4b62-869e-eb632f17310e",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	1,
	'Value_ID');
INSERT INTO O_BATTR_PROXY
	VALUES ("4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	'../Value/Value.xtuml');
INSERT INTO O_ATTR
	VALUES ("af713e29-13e6-4b62-869e-eb632f17310e",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"00000000-0000-0000-0000-000000000000",
	'Value_ID',
	'',
	'',
	'Value_ID',
	0,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"34d24cdc-57cc-4407-a647-3e9766d20867",
	"a9a25a96-a80b-4293-8e49-1e31d8e10391",
	"5d0376b1-91d2-47ed-83ff-36d4ef3fa3e2",
	"9998dae0-d468-4ebb-b3f8-1b1f9fcdc777",
	"185be1de-218c-4544-9be1-88e134b6bb09",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Value',
	'Value_ID',
	'R803.''has right''');
INSERT INTO R_RGO_PROXY
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"34d24cdc-57cc-4407-a647-3e9766d20867",
	"a9a25a96-a80b-4293-8e49-1e31d8e10391",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"34d24cdc-57cc-4407-a647-3e9766d20867",
	"5d0376b1-91d2-47ed-83ff-36d4ef3fa3e2",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("9998dae0-d468-4ebb-b3f8-1b1f9fcdc777",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	1,
	'Value_ID');
INSERT INTO O_ATTR
	VALUES ("9998dae0-d468-4ebb-b3f8-1b1f9fcdc777",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"af713e29-13e6-4b62-869e-eb632f17310e",
	'Right_Value_ID',
	'',
	'Right_',
	'Value_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_REF
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"31f1fdcd-bc21-40d0-a491-ed83526f3c3c",
	"5c58db7a-5ec8-4ae1-8806-b2c01a60133e",
	"26637507-00e3-435c-bf0e-87cd3026c8f1",
	"343a3a00-0371-451d-9a58-d8348a4b14ff",
	"6eb8dde0-f089-4325-a6c2-2ce46965efe2",
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'Value',
	'Value_ID',
	'R802.''has left''');
INSERT INTO R_RGO_PROXY
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"31f1fdcd-bc21-40d0-a491-ed83526f3c3c",
	"5c58db7a-5ec8-4ae1-8806-b2c01a60133e",
	'../Value.xtuml');
INSERT INTO O_RTIDA_PROXY
	VALUES ("4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	0,
	"31f1fdcd-bc21-40d0-a491-ed83526f3c3c",
	"26637507-00e3-435c-bf0e-87cd3026c8f1",
	'../Value.xtuml');
INSERT INTO O_RATTR
	VALUES ("343a3a00-0371-451d-9a58-d8348a4b14ff",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"4fd005ad-1159-4343-a12e-ed125f7adea1",
	"80366c8b-358d-4b86-a0fd-bd9d289c9cd2",
	1,
	'Value_ID');
INSERT INTO O_ATTR
	VALUES ("343a3a00-0371-451d-9a58-d8348a4b14ff",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"9998dae0-d468-4ebb-b3f8-1b1f9fcdc777",
	'Left_Value_ID',
	'',
	'Left_',
	'Value_ID',
	1,
	"ba5eda7a-def5-0000-0000-000000000007",
	'',
	'');
INSERT INTO O_NBATTR
	VALUES ("cabd4f84-7403-49da-8cb4-07db5ee74d85",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401");
INSERT INTO O_BATTR
	VALUES ("cabd4f84-7403-49da-8cb4-07db5ee74d85",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401");
INSERT INTO O_ATTR
	VALUES ("cabd4f84-7403-49da-8cb4-07db5ee74d85",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	"343a3a00-0371-451d-9a58-d8348a4b14ff",
	'Operator',
	'Full Name: Mathematical Operator
Data Domain: The character or string representing the operation. These include but are not limited to +, -, / and *.',
	'',
	'Operator',
	0,
	"ba5eda7a-def5-0000-0000-000000000004",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"cf40c1ab-d375-4f8d-8664-2593f9c59401");
INSERT INTO O_OIDA
	VALUES ("af713e29-13e6-4b62-869e-eb632f17310e",
	"cf40c1ab-d375-4f8d-8664-2593f9c59401",
	0,
	'Value_ID');
INSERT INTO O_ID
	VALUES (1,
	"cf40c1ab-d375-4f8d-8664-2593f9c59401");
INSERT INTO O_ID
	VALUES (2,
	"cf40c1ab-d375-4f8d-8664-2593f9c59401");
INSERT INTO PE_PE
	VALUES ("cf40c1ab-d375-4f8d-8664-2593f9c59401",
	1,
	"e060f94c-3f82-463e-9d98-d20315b7c196",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("e060f94c-3f82-463e-9d98-d20315b7c196",
	"00000000-0000-0000-0000-000000000000",
	"d9bc5487-4193-4817-be1c-6c3f3339aebf",
	'Value',
	'This subsystem formalizes the concepts of values (r-values) and variables 
(l-values). It also captures the concept of an actual parameter.
Notify_Changes:false
Persistent:false
// This is used by schema_gen to ignore this subsystem (for publication)
TRANSLATE_FOR_EXTERNAL_USE:FALSE
',
	800,
	'../Value.xtuml');
