.//====================================================================
.//
.// File:      $RCSfile: wizard.inc,v $
.// Version:   $Revision: 1.22 $
.// Modified:  $Date: 2013/05/12 00:16:21 $
.//
.// (c) Copyright 2004-2014 by Mentor Graphics Corp.  All rights reserved.
.//
.//=======================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//====================================================================
.//
.function clear_workspace
  .select many steps from instances of W_STEP
  .for each step in steps
    .assign step.buffer = ""
  .end for
  .select many fields from instances of W_FLD
  .for each field in fields
    .assign field.buffer = ""
  .end for
.end function
.//
.function get_ui_page_name
  .param inst_ref page
  .//
  .assign attr_name = ""
  .if ("${page.Parent_Step_Id}" != "un-initialized")
    .// get the step associated with the page
    .assign stepId = page.Step_ID
    .select any step from instances of W_STEP where (selected.Step_ID == stepId)
    .//
    .// for each step belonging to the same workflow as the page's step
	.select many steps from instances of W_STEP where (selected.Workflow_Name == step.Workflow_Name)
	.assign pageNum = 1
    .invoke result = STRING_TO_INTEGER(stepId)
    .assign stepIdInt = result.result
	.for each step in steps
	  .// if this step's id is less than that of the given page's step
	  .invoke result = STRING_TO_INTEGER(step.Step_ID)
	  .if (result.result < stepIdInt)
	    .// this step's page must come before the given page, so increment
	    .// the page number we're going to assign to the given page
	    .assign pageNum = pageNum + 1
	  .end if
	.end for
    .assign attr_name = "${pageNum}"
  .end if
.end function
.//
.function get_page_member_name
  .param inst_ref step
  .//
  .invoke page = get_ui_page_name(step)
  .assign attr_name = "${step.Workflow_Name}Page${page.name}"
.end function
.//
.function create_wizard
  .param inst_ref wfl
  .//
  .assign class_name = ""
  .//
  .select many steps related by wfl->W_STEP[R2005]
  .invoke gwcn = get_wizard_class_name(wfl)
  .assign wizard_class_name = gwcn.body
package org.xtuml.bp.core.ui;
//====================================================================
//
// File:    ${wizard_class_name}.java
//
// WARNING: Do not edit this generated file
// Generated by ${info.arch_file_name}
//
// (c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.
//
//====================================================================
import java.util.Iterator;

  .select any function from instances of S_SYNC where (selected.Sync_Id == wfl.Sync_Id)
  .select one action related by function->ACT_FNB[R695]->ACT_ACT[R698]
  .select one outer_block related by action->ACT_BLK[R601] where (selected.Block_Id == action.Block_Id)
  .invoke ui_result = ui_blck_xlate(outer_block, true)
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.jface.wizard.*;
import org.eclipse.ui.IWorkbench;

import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.*;
import org.xtuml.bp.core.util.TransactionUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * ${wizard_class_name} class
 */
public class ${wizard_class_name} extends Wizard
{
	public static final String copyright = "(c) Copyright 2003-2014 Mentor Graphics Corporation  All rights reserved.";
  
	// workbench selection when the wizard was started
	protected IStructuredSelection m_selection;
	
	// the workbench instance
	protected IWorkbench m_workbench;
	
	// the viewer the wizard was started from. This must be replaced with a listener system
	protected Viewer m_viewer;
	
	// Pages stack
	protected Stack m_pagesStack = new Stack();

	// wizard pages
  .invoke isLinkedPage = is_linked_association_wizard_page(wizard_class_name)
  .assign count = 1
  .for each step in steps
    .select any field related by step->W_FLD[R2009]
    .if (not_empty field)
      .invoke gpmn = get_page_member_name(step)
      .invoke gpcn = get_page_class_name(wfl,step)
    ${gpcn.name} ${gpmn.name};
      .assign count = count + 1
    .end if
  .end for

  .assign count = 0
	// wizard state
	  // constants
    protected static final int INITIAL_WIZARD_STATE = -1;
  .for each step in steps
    .select any field related by step->W_FLD[R2009]
    .if (not_empty field)
    protected static final int $U_{step.Workflow_Name}${count}_WIZARD_STATE = ${count};
      .assign count = count + 1
    .end if
  .end for
      // member
    protected int m_state = INITIAL_WIZARD_STATE ;
    // end wizard state

  // cache for contextual selections (public for use by unit tests)
  .select many context_items related by wfl->W_CTI[R2003]
  .for each context_item in context_items
    .select any class from instances of O_OBJ where (selected.Key_Lett == context_item.Key_Lett)
    .assign class_name = class.Name
    .invoke gcn = get_class_name(class)
    .if (context_item.Type == "any")
      public ${gcn.body} v_${context_item.Name} = null;
    .elif (context_item.Type == "many")
      public ${gcn.body} [] v_${field.Name};
    .end if
  .end for

  // cache for the users selections (public for use by unit tests)
  .select many fields related by wfl->W_STEP[R2005]->W_FLD[R2009]
  .for each field in fields
    .if (field.type == "Combo")
      .select any class from instances of O_OBJ where (selected.Key_Lett == field.Key_Lett)
      public $cr{class.Name}_c v_${field.Instance_Handle} = null;
      .if (isLinkedPage.islinked)
      public String v_${field.Instance_Handle}Prefix = "";
      .end if
    .elif (field.type == "List")
      .select any class from instances of O_OBJ where (selected.Key_Lett == field.Key_Lett)
      public $cr{class.Name}_c [] v_${field.Instance_Handle};
    .elif (field.type == "Text")
      public String v_${field.Instance_Handle} = null;
    .end if
  .end for

	/**
	 * Constructor for ${wizard_class_name}.
	 */
	public ${wizard_class_name}() {
      super();
	}
	
	/**
	 * See field.
	 */
	public IStructuredSelection getSelection() {return m_selection;}

	public void addPages()
	{
  .for each step in steps
    .select any field related by step->W_FLD[R2009]
    .if (not_empty field)
      .invoke gpmn = get_page_member_name(step)
      .invoke gpcn = get_page_class_name(wfl,step)
      ${gpmn.name} = new ${gpcn.name}("${gpcn.name}");
      addPage(${gpmn.name});
    .end if
  .end for
	}

	/**
	 * @see IWorkbenchWizard#init(IWorkbench, IStructuredSelection)
	 */
	public void init(IWorkbench workbench, IStructuredSelection selection, Viewer viewer) 
	{
      this.m_workbench = workbench;
      this.m_selection = selection;
      this.m_viewer = viewer;
    .for each context_item in context_items
      .if (context_item.Type == "many")
        .select any class from instances of O_OBJ where (selected.Key_Lett == context_item.Key_Lett)
      $Cr{class.Name}count = 0;
      .end if
    .end for
      for (Iterator iterator = selection.iterator(); iterator.hasNext();) {
        Object context = iterator.next();
    .for each context_item in context_items
      .select any class from instances of O_OBJ where (selected.Key_Lett == context_item.Key_Lett)
        if (context instanceof $Cr{class.Name}_c) {
      .if (context_item.Type == "any")
          v_${context_item.Name} = ($Cr{class.Name}_c)context;
      .end if
      .if (context_item.Type == "many")
          v_${context_item.Name}[$Cr{class.Name}count] = ($Cr{class.Name}_c)context;
          $Cr{class.Name}count++;
      .end if
        }
    .end for
      }
  .//
	}

	public boolean canFinish()
	{
      boolean pagesComplete = true;
  .for each step in steps
    .select any field related by step->W_FLD[R2009]
    .if (not_empty field)
      .invoke gpmn = get_page_member_name(step)
      pagesComplete = pagesComplete && ${gpmn.name}.isPageComplete();
    .end if
  .end for
      return pagesComplete;
	}

  .invoke clear_workspace()
  .assign count = 0
    public IWizardPage getNextPage(IWizardPage page)
    {
      List pages = new ArrayList(getPages().length );
      for (int i = 0 ; i < getPages().length ; i++) {
        pages.add(getPages()[i]);
      }
      switch (pages.indexOf(page)) {
  .for each step in steps
    .select any field related by step->W_FLD[R2009]
    .if (not_empty field)
        case $U_{step.Workflow_Name}${count}_WIZARD_STATE:
      .// The next step is:
      .// 1. the first child, if any
      .// 2. the next sibling, if any
      .// 3. the parents next sibling, if any
      .// 4. none
      .select any next_step related by step->W_STEP[R2007.'contained_by']
      .if (empty next_step)
        .// 2. the next sibling, if any
        .select any next_step related by step->W_STEP[R2008.'succeeds']
        .if (empty next_step)
          .// 3. the parents next sibling, if any
          .select any next_step related by step->W_STEP[R2007.'contains']->W_STEP[R2008.'succeeds']
        .end if
      .end if
      .if (not_empty next_step)
        .invoke gpmn = get_page_member_name(next_step)
          m_state = pages.indexOf(${gpmn.name});
          ${gpmn.name}.onPageEntry();
          return ${gpmn.name};
          
      .else
          return null;
      .end if
      .assign count = count + 1        
    .end if
  .end for      
      }
      return null;
    }
    
    public IWizardPage getPreviousPage(IWizardPage page)
    {
      if (m_pagesStack.empty()) {
        return null;
      }
      else {
        List pages = new ArrayList(getPages().length );
        for (int i = 0 ; i < getPages().length ; i++) {
          pages.add(getPages()[i]);
        }
        m_state = pages.indexOf((IWizardPage)m_pagesStack.peek());
        ((PtWizardPage)m_pagesStack.peek()).onPageEntry();
        return (IWizardPage)m_pagesStack.pop();
      }
    }
    
    
    .if (isLinkedPage.islinked)
    	private void setPrefixs(LinkedAssociation_c vARel) {
    	if (v_${field.Instance_Handle}Prefix.equalsIgnoreCase("") ){
			return;
		}
		ClassAsAssociatedOneSide_c oneSide = ClassAsAssociatedOneSide_c.getOneR_AONEOnR209(vARel);
		ReferredToIdentifierAttribute_c[] oneSideIDs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(ReferredToClassInAssoc_c.getOneR_RTOOnR204(oneSide));
		for (ReferredToIdentifierAttribute_c oneSideID : oneSideIDs) {
			Attribute_c attr  = Attribute_c.getOneO_ATTROnR106(ReferentialAttribute_c.getOneO_RATTROnR108(AttributeReferenceInClass_c.getOneO_REFOnR111(oneSideID)));
			if (!v_one_idPrefix.equalsIgnoreCase("")){
				attr.setPrefix(v_one_idPrefix);
				attr.setPfx_mode(1);
			}
		}
		
		ClassAsAssociatedOtherSide_c otherSide = ClassAsAssociatedOtherSide_c.getOneR_AOTHOnR210(vARel);
		ReferredToIdentifierAttribute_c[] otherSideIDs = ReferredToIdentifierAttribute_c.getManyO_RTIDAsOnR110(ReferredToClassInAssoc_c.getOneR_RTOOnR204(otherSide));
		for (ReferredToIdentifierAttribute_c otherSideID : otherSideIDs) {
			Attribute_c attr  = Attribute_c.getOneO_ATTROnR106(ReferentialAttribute_c.getOneO_RATTROnR108(AttributeReferenceInClass_c.getOneO_REFOnR111(otherSideID)));
			if (!v_oth_idPrefix.equalsIgnoreCase("")){
				attr.setPrefix(v_oth_idPrefix);
				attr.setPfx_mode(1);
			}
		}
	}
	.end if
    
	public boolean performFinish() 
	{
		TransactionUtil.TransactionGroup transactionGroup = null;
		ModelRoot modelRoot = v_${context_item.Name}.getModelRoot();
		try {
   .invoke transaction_name = get_transaction_name(wfl, class_name)
			transactionGroup = TransactionUtil.startTransactionsOnSelectedModelRoots(
				"${transaction_name.name}"); //$$NON-NLS-1$$
${ui_result.body}
		.if (isLinkedPage.islinked)
		setPrefixs(v_a_rel);
		.end if			
    // catch all exceptions and cancel the transaction
		} catch (Exception e) {
			if (transactionGroup != null) TransactionUtil.cancelTransactions(transactionGroup, e);
			CorePlugin.logError("Transaction: ${transaction_name.name} failed", e);//$$NON-NLS-1$$
			// return true so that the wizard will
			// close
			return true;
		}
		if (transactionGroup != null) TransactionUtil.endTransactions(transactionGroup);
    if (m_viewer != null) {
    .if (context_item.Type == "any")
      if (m_viewer instanceof StructuredViewer) {
		((StructuredViewer)m_viewer).refresh(v_${context_item.Name});
      }
      else {
      	m_viewer.refresh();
      }
    .else
      m_viewer.refresh();
    .end if
    }
    return true;
  }
}

.end function
