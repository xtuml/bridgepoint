.//=======================================================================
.//
.// File:      $RCSfile: generate_globals_util.arc,v $
.// Version:   $Revision: 1.10 $
.// Modified:  $Date: 2013/05/13 16:59:06 $
.//
.// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
.//
.//=======================================================================
.// Licensed under the Apache License, Version 2.0 (the "License"); you may not
.// use this file except in compliance with the License.  You may obtain a copy
.// of the License at
.//
.//      http://www.apache.org/licenses/LICENSE-2.0
.//
.// Unless required by applicable law or agreed to in writing, software
.// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
.// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
.// License for the specific language governing permissions and limitations under
.// the License.
.//=======================================================================
.//
.//
.invoke arc_env = GET_ENV_VAR( "PTC_MC_ARC_DIR" )
.assign mc_archetypes = arc_env.result
.if ( mc_archetypes == "" )
  .print "\nERROR: Environment variable PTC_MC_ARC_DIR not set."
  .exit 100
.end if
.//
.include "${mc_archetypes}/arch_utils.inc"
.//
package org.xtuml.bp.core.util;
//========================================================================
//
// File: org.xtuml.bp.core/src/org/xtuml/bp/core/util/GlobalsUtil.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
// Version:      $$Revision: 1.10 $$
//
// (c) Copyright 2005-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
import org.xtuml.bp.core.*;
import org.xtuml.bp.core.common.*;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.swt.widgets.Display;

/**
 *  This class holds a utility method to determine
 *  all elements that refer to a core data type,
 *  migrates them to the global equivalent and
 *  removes the old system level data type.
 *  After completion, any empty system level DT packages are also removed.
 *  It is generated, so that if new Datatype associations are introduced
 *  to the tool, they will be automatically added here.
 */
public class GlobalsUtil {
  public static void upgradeToGlobals(SystemModel_c system, IProgressMonitor monitor) {
    DataType_c[] newDts = DataType_c.getManyS_DTsOnR8001(PackageableElement_c
        ..getManyPE_PEsOnR9100(GlobalElementInSystem_c
            ..getManyG_EISsOnR9100(system)));
	  for(int i=0; i < newDts.length; i++) {
      DataType_c[] oldDts = DataType_c
          ..getManyS_DTsOnR4401(SystemDatatypeInPackage_c
              ..getManySLD_SDINPsOnR4402(system));
      // the domains will soon be converted to generics (only way for this code
      // to be called)
      DataType_c[] oldDomainDts = DataType_c.getManyS_DTsOnR14(Domain_c.getManyS_DOMsOnR28(system));
      DataType_c[] allDts = new DataType_c[oldDts.length + oldDomainDts.length];
      System.arraycopy(oldDts, 0, allDts, 0, oldDts.length);
      System.arraycopy(oldDomainDts, 0, allDts, oldDts.length, oldDomainDts.length);
      monitor.worked(20);
      if(!Ooaofooa.inUnitTest()) {
      	while(Display.getCurrent().readAndDispatch()) {};
      }
		  for (int j=0; j< allDts.length; j++) {
			  if (allDts[j].getName().equals(newDts[i].getName())) {
			    upgradeDTToGlobal(allDts[j], newDts[i]);
			    allDts[j].Dispose();
			    break;
			  }
		  }
 	  }
    DataTypePackage_c[] dtps = DataTypePackage_c
        ..getManyS_DPKsOnR4400(SystemDatatypePackage_c
            ..getManySLD_SDPsOnR4400(system));
      for (int i=0; i < dtps.length; i++) {
      SystemDatatypeInPackage_c[] sdinps = SystemDatatypeInPackage_c
          ..getManySLD_SDINPsOnR4401(dtps[i]);
      DataTypePackageInPackage_c[] dtpip = DataTypePackageInPackage_c.
                                                   getManyS_DPIPsOnR37(dtps[i]);
      ConstantInPackage_c[] cip = ConstantInPackage_c.
                                               getManyCNST_CIPsOnR1506(dtps[i]);
          if (sdinps.length == 0 && dtpip.length == 0 && cip.length == 0) {
              // fire a model element about to be deleted 
              Ooaofooa.getDefaultInstance().fireModelElementAboutToBeDeleted(dtps[i]);
        SpecificationPackage_c spPkg = SpecificationPackage_c
            ..getOneEP_SPKGOnR1402(dtps[i]);
              if (spPkg != null) {
                spPkg.Dispose();
        } else {
                dtps[i].Dispose();
              }
          }
      }
		// gather all default DT packages
		DataTypePackage_c[] systemPackages = DataTypePackage_c
				..getManyS_DPKsOnR4400(SystemDatatypePackage_c
						..getManySLD_SDPsOnR4400(system), new ClassQueryInterface_c() {
							
							@Override
							public boolean evaluate(Object candidate) {
								return ((DataTypePackage_c) candidate)
										..getName()
										..equals(Ooaofooa
												..Getcoredatatypespackagename(Ooaofooa
														..getDefaultInstance()));
							}
						});
		for(DataTypePackage_c dtPkg : systemPackages) {
			boolean unused = isPackageUnused(dtPkg);
			if(unused) {
				try {
					dtPkg.Dispose();
					dtPkg.getPersistableComponent().deleteSelfAndChildren();
					dtPkg.getFile().getParent().delete(true, monitor);
				} catch (CoreException e) {
					CorePlugin.logError("Unable to delete unused Data Type Package.", e);
				}
			}
		}
		DataTypePackage_c[] domainPackages = DataTypePackage_c
				..getManyS_DPKsOnR40(Domain_c.getManyS_DOMsOnR28(system), new ClassQueryInterface_c() {
					
					@Override
					public boolean evaluate(Object candidate) {
						return ((DataTypePackage_c) candidate)
								..getName()
								..equals(Ooaofooa
										..Getcoredatatypespackagename(Ooaofooa
												..getDefaultInstance()));
					}
				});
		for(DataTypePackage_c dtPkg : domainPackages) {
			boolean unused = isPackageUnused(dtPkg);
			if(unused) {
				try {
					dtPkg.Dispose();
					dtPkg.getPersistableComponent().deleteSelfAndChildren();
					dtPkg.getFile().getParent().delete(true, monitor);
				} catch (CoreException e) {
					CorePlugin.logError("Unable to delete unused Data Type Package.", e);
				}
			}
		}
	  system.setUseglobals(true);
 	}
 	
	private static boolean isPackageUnused(DataTypePackage_c pkg) {
		boolean foundUDT = false;
		DataType_c[] oldDts = DataType_c
				..getManyS_DTsOnR4401(SystemDatatypeInPackage_c
						..getManySLD_SDINPsOnR4401(pkg));
		for(DataType_c dt : oldDts) {
			CoreDataType_c cdt = CoreDataType_c.getOneS_CDTOnR17(dt);
			if(cdt == null) {
				foundUDT = true;
				break;
			}
			UserDataType_c udt = UserDataType_c.getOneS_UDTOnR17(dt);
			if(udt != null) {
				if(udt.getGen_type() == 0) {
					foundUDT = true;
					break;
				}
			}
		}
		oldDts = DataType_c.getManyS_DTsOnR39(DataTypeInPackage_c.getManyS_DIPsOnR39(pkg));
		for(DataType_c dt : oldDts) {
			CoreDataType_c cdt = CoreDataType_c.getOneS_CDTOnR17(dt);
			if(cdt == null) {
				foundUDT = true;
				break;
			}
			UserDataType_c udt = UserDataType_c.getOneS_UDTOnR17(dt);
			if(udt != null) {
				if(udt.getGen_type() == 0) {
					foundUDT = true;
					break;
				}
			}
		}
		ConstantSpecification_c[] specs = ConstantSpecification_c
				..getManyCNST_CSPsOnR1506(ConstantInPackage_c
						..getManyCNST_CIPsOnR1506(pkg));
		if(specs.length != 0) {
			foundUDT = true;
		}
		if(foundUDT) {
			return false;
		} else {
			// check any child packages
			DataTypePackage_c[] children = DataTypePackage_c
					..getManyS_DPKsOnR38(DataTypePackageInPackage_c
							..getManyS_DPIPsOnR37(pkg));
			if(children.length != 0) {
				return false;
			}
		}
		return true;
	}

 	public static void upgradeDTToGlobal(DataType_c oldDt, DataType_c newDt) {
 	.select any dtElement from instances of O_OBJ where (selected.Name == "Data Type")
 	.if (not_empty dtElement)
 	  .select many parts related by dtElement->R_OIR[R201]->R_RTO[R203]->R_PART[R204]
 	  .for each part in parts
 	    .select one rel related by part->R_RTO[R204]->R_OIR[R203]->R_REL[R201]
 	    .select many forms related by rel->R_OIR[R201]->R_RGO[R203]->R_FORM[R205]
 	    .for each form in forms
 	      .select one refElem related by form->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
 	      // ${refElem.Name} - R${rel.Numb}
 	      .invoke result = get_class_name(refElem)
 	      .invoke nav = get_nav_func_name(refElem, rel, "many")
 	      ${result.body} [] $l_{refElem.Name}s = ${result.body}.${nav.body}(oldDt);
 	      .assign uNum = "${info.unique_num}"
 	      for(int i${uNum}=0; i${uNum} < $l_{refElem.Name}s.length; i${uNum}++) {
 	        $l_{refElem.Name}s[i${uNum}].unrelateAcrossR${rel.Numb}From(oldDt);
 	        $l_{refElem.Name}s[i${uNum}].relateAcrossR${rel.Numb}To(newDt);
 	      }
 	    .end for
 	  .end for
 	.end if
 	      // User defined Data Type - R18
 	      CoreDataType_c oldCdt = CoreDataType_c.getOneS_CDTOnR17(oldDt);
		  if(oldCdt != null) {
 	      	UserDataType_c [] user_defined_dts = UserDataType_c.
 	                                                 getManyS_UDTsOnR18(oldDt);
 	      	for(int i=0; i < user_defined_dts.length; i++) {
 	 	      user_defined_dts[i].unrelateAcrossR18From(oldDt);
 	 	      user_defined_dts[i].relateAcrossR18To(newDt);
 	      	}
 	      }
	}
}
.//
.emit to file "src/org/xtuml/bp/core/util/GlobalsUtil.java"
.//
