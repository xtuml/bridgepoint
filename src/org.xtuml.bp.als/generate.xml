<?xml version="1.0" encoding="UTF-8"?>
<project name="bp.als" default="all" basedir=".">

  <import file="${mcj_path}/common.xml"/>

  <target name="all"
          description="Generate all code for this project"
          depends="sql,schema,grammar,validate,ooa_functions,content_assist,grammar_enhancer,compile_grammar,format_java">
  </target>

  <target name="nb_all"
          description="Generate all code for this project"
          depends="sql,schema,grammar,validate,ooa_functions,content_assist,grammar_enhancer,compile_grammar">
  </target>

  <property name="plugins-home" value="${ant.home}/../.."/>

  <property name="sql.input" value="models/org.xtuml.bp.als/grammar" />
  <property name="sql.output" value="grammar_model.sql" />
  <property name="subsystems_to_remove" value="ACT_ V_ E_ GD_ CT_ TS_ DIM_ STY_" />

  <target name="sql.depends" >
    <uptodate property="sql.buildNotNeeded" targetfile="sql/${sql.output}">
         <srcfiles dir= "${sql.input}" includes="**/*.xtuml" />
    </uptodate>
  </target>

  <target name="sql" depends="sql.depends"
          description="Generate the sql version of the Grammar model"
          unless="sql.buildNotNeeded" >
    <echo >Generating ${sql.output} ...</echo>
    <echo >Using: ${xtumlmc_build} ...</echo>   
   <copy file="../org.xtuml.bp.pkg/globals/Globals.xtuml" tofile="${sql.input}/Globals.xtuml" />
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
      <arg line="xtumlmc_cleanse_for_BridgePoint ${sql.input} sql/${sql.output} ${subsystems_to_remove}" />
    </exec>
    <delete file="${sql.input}/Globals.xtuml" />
  </target>

  <property name="sg.dep" value="ooa_schema.sql,schema_gen.arc" />
  <property name="schema.output" value="grammar_schema.sql" />

  <target name="schema.depends" >
    <uptodate property="schema.buildNotNeeded" targetfile="sql/${schema.output}">
       <srcfiles dir = "sql"        includes = "${sql.output}"/>
       <srcfiles dir = "${mcj_path}" includes = "${sg.dep}"/>
    </uptodate>
  </target>


  <target name="schema"
          depends="schema.depends"
          description="Generate the Grammar schema file"
          unless="schema.buildNotNeeded" >
    <echo >Generating ${schema.output} ...</echo>
  <ant antfile="${mcj_path}/build.xml" target="generate.schema" >
    <property name="param1" value="${sql.output}" />
    <property name="param2" value="${mcj_path}" />
    <property name="param3" value="FALSE" />
    <property name="param4" value="grammar" />
  </ant>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="sql/${schema.output}" />
  </target>

  <property name="bnf.input" value="oal.bnf" />
  <property name="antlr.output" value="sql/oal_grammar.sql" />

  <target name="grammar.depends" >
    <uptodate property="grammar.buildNotNeeded" targetfile="${antlr.output}">
       <srcfiles dir = "../org.xtuml.bp.als.oal/bnf" includes = "oal.bnf"/>
       <srcfiles dir = "lib" includes = "antlr.jar"/>
    </uptodate>
  </target>

  <target name="grammar"
          depends="grammar.depends"
          description="Generate the Grammar file"
          unless="grammar.buildNotNeeded" >
    <echo >Generating ${antlr.output} ...</echo>
    <java dir="." fork="true" classpath="lib/antlr.jar" classname="antlr.Tool" >
      <arg value="-nocodegen" />
      <arg value="-sql=${antlr.output}" />
      <arg value="../org.xtuml.bp.als.oal/bnf/oal.bnf" />
    </java>
  </target>

  <property name="ooaofooa_input" value="sql/ooaofooa.sql" />
  <property name="ooa_functions_output" value="sql/ooa_functions.sql" />
  <target name="ooa_functions.depends" >
    <uptodate property="ooa_functions.buildNotNeeded" targetfile="${ooa_functions_output}">
       <srcfiles dir = "${mcj_path}" includes = "ooa_schema.sql"/>
       <srcfiles dir = "sql" includes = "${ooaofooa_input}"/>
       <srcfiles dir = "arc" includes = "ooa_functions.arc"/>
    </uptodate>
  </target>

  <target name="ooa_functions"
          depends="ooa_functions.depends"
          description="Collect OOA functions"
          unless="ooa_functions.buildNotNeeded" >
    <echo >Collecting available OOA parser functions...</echo>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}">
    <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
    <env key="ALS_NAME" value="oal" />
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
      -import ${mcj_path}/ooa_schema.sql
      -import ${ooaofooa_input}
      -arch arc/ooa_functions.arc"/>
    </exec>
  </target>

  <property name="content_assist.output" value="sql/content_assist.sql" />
  <target name="content_assist.depends" >
    <uptodate property="content_assist.buildNotNeeded" targetfile="${content_assist.output}">
       <srcfiles dir = "sql" includes = "grammar_schema.sql"/>
       <srcfiles dir = "sql" includes = "oal_grammar.sql"/>
       <srcfiles dir = "sql" includes = "ooa_functions.sql"/>
       <srcfiles dir = "arc" includes = "content_assist.arc"/>
    </uptodate>
  </target>

  <target name="content_assist"
          depends="content_assist.depends"
          description="Add content assist hooks"
          unless="content_assist.buildNotNeeded" >
    <echo >Adding content assist hooks...</echo>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}">
    <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
    <env key="ALS_NAME" value="oal" />
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
      -import sql/grammar_schema.sql
      -import ${antlr.output}
      -import ${ooa_functions_output}
      -arch arc/content_assist.arc"/>
    </exec>
  </target>

  <property name="ge.clr.dep" value="ooaofooa_package_spec.clr" />
  <property name="ge.arc.dep" value="grammar_enhancer.arc,get_names.inc,als_sql.inc" />
  <property name="ge.mcj.dep" value="do_type.inc, arch_utils.inc, enums.inc" />
  <property name="ge.output" value="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal/oal.g" />

  <target name="grammar_enhancer.depends" >
    <uptodate property="grammar_enhancer.buildNotNeeded" targetfile="${ge.output}">
       <srcfiles dir = "arc"        includes = "${ge.arc.dep}"/>
       <srcfiles dir = "../org.xtuml.bp.core/color"  includes = "${ge.clr.dep}"/>
       <srcfiles dir = "sql"        includes = "${schema.output},udt.sql,oal_grammar.sql,content_assist.sql"/>
       <srcfiles dir = "${mcj_path}" includes = "${ge.mcj.dep}"/>
    </uptodate>
  </target>

  <target name="grammar_enhancer"
          depends="grammar_enhancer.depends"
          description="Generate the Enhanced Grammar file, and prototype functions"
          unless="grammar_enhancer.buildNotNeeded" >
    <echo >Generating ${ge.output} ...</echo>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}">
    <env key="PTC_MC_ARC_DIR" value="${mcj_path}"/>
    <env key="ALS_NAME" value="oal" />
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
      -import sql/grammar_schema.sql
      -import ${antlr.output}
      -import sql/udt.sql
      -import ${content_assist.output}
      -arch arc/grammar_enhancer.arc"/>
  </exec>

  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${ge.output}" />
    <delete file="____file.txt" />
    <delete><fileset dir="sql" includes="*.oal"/></delete>
  </target>

  <property name="validate.arc.dep" value="validate_gen.arc,get_names.inc" />
  <property name="validate.mcj.dep" value="ooa_schema.sql,fragment.inc,do_type.inc,arch_utils.inc,value.inc,statement.inc,block.inc,translate_oal.inc" />
  <property name="validate.output" value="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal/Oal_validate.java" />

  <property name="ooaofooa.sql" value="sql/ooaofooa.sql" />
  <property name="ooaofooa_input" value="sql/ooaofooa.sql" />

  <target name="validate.depends" >
    <uptodate property="validate.buildNotNeeded" targetfile="${validate.output}">
       <srcfiles dir = "sql" includes = "${ooaofooa_input}"/>
       <srcfiles dir = "arc"        includes = "${validate.arc.dep}"/>
       <srcfiles dir = "${mcj_path}" includes = "${validate.mcj.dep}"/>
    </uptodate>
  </target>

  <target name="validate"
          depends="validate.depends"
          description="Generate the validation code"
          unless="validate.buildNotNeeded" >
    <echo >Generating ${validate.output} ...</echo>

    <copy file="gen/code_generation/ooaofooa.sql" tofile="gen/code_generation/ooaofooa.xtuml"/>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
          <arg line="xtumlmc_cleanse_for_BridgePoint ${basedir}/gen/code_generation sql/ooaofooa.sql" />
    </exec>
   <delete file="gen/code_generation/ooaofooa.xtuml"/>
    <exec vmlauncher="false" failonerror="true" executable="${xtumlmc_build}" >
    <env key="PTC_MC_ARC_DIR" value="${mcj_path}" />
    <env key="ALS_NAME" value="oal" />
    <env key="VERIFY_SELECTS" value="false" />
    <env key="CHECK_FUNCTIONS_ONLY" value="true" />
    <env key="PTC_MCC_ROOT" value="ooaofooa" />
    <env key="XTUMLMC_HOME" value="${util_bin_dir}/../../" />
    <arg line="xtumlmc_gen_erate -nopersist
      -import ${mcj_path}/ooa_schema.sql
      -import ${ooaofooa_input}
      -arch ${mcj_path}/verify_selects.arc
      -arch arc/validate_gen.arc"/>
  </exec>
  <!-- Need to touch the output file for the case where the input data
       changed, but the output didn't -->
  <touch file="${validate.output}" />
    <delete file="____file.txt" />
    <delete file="____actn.arc" />
    <delete file="blck_id" />
  </target>

  <target name="format_java"
        description="Format the generated java source" >

    <taskdef name="PTCodeFormat" classname="PTCodeFormatterTask" >
        <classpath>
            <pathelement path="${mcj_path}/../org.xtuml.bp.core/tools/" />
            <fileset dir="${plugins-home}/plugins" casesensitive="yes">
                <include name="**/org.eclipse.text_*.jar" />
                <include name="**/org.eclipse.ui_*.jar" />
                <include name="**/org.eclipse.jdt.core_*.jar" />
                <include name="**/org.eclipse.core.runtime_*.jar" />
                <include name="**/org.eclipse.osgi_*.jar" />
                <include name="**/org.eclipse.core.resources_*.jar" />
                <include name="**/org.eclipse.equinox.common_*.jar" />
            </fileset>
        </classpath>
    </taskdef>
        <PTCodeFormat>
          <fileset dir="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal"
                 excludes="Err_c.java, OalPlugin.java, pt_SemanticException.java, TextParser.java, ParseRunnable.java, ParserAllActivityModifier.java"
          includes="*.java" />
        </PTCodeFormat>
  </target>

  <!-- COMPILE TARGETS -->

  <target name="compile_grammar" >

    <antlr target="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal/oal.g" >
        <classpath>
          <fileset dir="${plugins-home}/plugins" casesensitive="yes">
            <include name="**/antlr.jar" />
          </fileset>
        </classpath>
    </antlr>

    <antlr target="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal/oal_lex.g" >
        <classpath>
          <fileset dir="${plugins-home}/plugins" casesensitive="yes">
            <include name="**/antlr.jar" />
          </fileset>
        </classpath>
    </antlr>

  </target>

  <!-- Important: you have to choose "Run in the same JRE as workspace" at the Ant run configuration.-->
  <target name="refresh" description="Refresh project" >
      <echo>Refreshing bp.als.oal project, which this build updated.</echo>
      <eclipse.refreshLocal resource="../org.xtuml.bp.als.oal/src" depth="infinite" />
  </target>

  <!-- CLEAN TARGETS -->

  <target name="clean_all"
        description="Clean entire project"
        depends="clean_sql,clean_schema,clean_grammar,clean_ooa_functions,clean_content_assist,clean_grammar_enhancer,
        clean_validate" >

    <echo>Done cleaning for ${ant.project.name}</echo>

  </target>

  <target name="clean_sql"
        description="Remove the sql version of the Grammar model" >

   <echo>Removing generated sql file: ${sql.output} ...</echo>
   <delete file="sql/${sql.output}" />
   <echo>Removing generated sql file: ${ooaofooa.sql} ...</echo>
   <delete file="${ooaofooa.sql}" />

  </target>

  <target name="clean_schema"
        description="Remove the Grammar schema file" >

   <echo>Removing generated sql file: ${schema.output} ...</echo>
   <delete file="sql/${schema.output}" />

  </target>

  <target name="clean_grammar"
        description="Remove the Grammar file" >

   <echo>Removing generated sql file: ${antlr.output} ...</echo>
   <delete file="${antlr.output}" />

  </target>

  <target name="clean_ooa_functions"
        description="Remove the OOA functions file" >

   <echo>Removing generated sql file: ${ooa_functions_output} ...</echo>
   <delete file="${ooa_functions_output}" />

  </target>

  <target name="clean_content_assist"
        description="Remove the content assist functions file" >

   <echo>Removing generated sql file: ${content_assist.output} ...</echo>
   <delete file="${content_assist.output}" />

  </target>

  <target name="clean_grammar_enhancer"
        description="Remove the Enhanced Grammar file, and prototype functions" >

   <echo>Removing generated enhanced grammar file: oal.g ...</echo>
   <delete file="${ge.output}" />

   <echo>Removing files created with the enhanced grammar file ...</echo>
   <delete verbose="true" >
     <fileset dir="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal"
       includes="OalParser.java, OalTokenTypes.java, OalTokenTypes.txt" />
   </delete>

   <echo>Removing files created with the lexer grammar file ...</echo>
   <delete verbose="true" >
     <fileset dir="../org.xtuml.bp.als.oal/src/org/xtuml/bp/als/oal"
       includes="OalLexer.java, OalLexerTokenTypes.java, OalLexerTokenTypes.txt" />
   </delete>

  </target>

  <target name="clean_validate"
        description="Remove the validation code" >

    <echo>Removing validation code ...
    </echo>

    <echo>Removing generated source files ...</echo>
    <delete file="${validate.output}" />

    <echo>Removing generated sql file: oal_validate.bpi.sql ...</echo>
    <delete file="sql/oal_validate.bpi.sql" />

  </target>

</project>
