/*
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.ui.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtuml.bp.ui.xtext.services.MASLGrammarAccess;

@SuppressWarnings("all")
public class MASLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MASLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_additiveExp_CONCATENATETerminalRuleCall_1_0_2_or_MINUSTerminalRuleCall_1_0_1_or_NOT_INTerminalRuleCall_1_0_4_or_PLUSTerminalRuleCall_1_0_0_or_UNIONTerminalRuleCall_1_0_3;
	protected AbstractElementAlias match_callStatement_____DOTTerminalRuleCall_1_0_0_0_IdentifierParserRuleCall_1_0_0_1___or___TERMINATOR_SCOPETerminalRuleCall_1_0_1_0_IdentifierParserRuleCall_1_0_1_1____a;
	protected AbstractElementAlias match_caseStatement_CASETerminalRuleCall_6_q;
	protected AbstractElementAlias match_codeBlockStatement_DECLARETerminalRuleCall_0_0_q;
	protected AbstractElementAlias match_codeBlockStatement_EXCEPTIONTerminalRuleCall_3_0_q;
	protected AbstractElementAlias match_codeBlock_EXCEPTIONTerminalRuleCall_3_0_q;
	protected AbstractElementAlias match_collectionTypeRef_ANONYMOUSTerminalRuleCall_0_0_q;
	protected AbstractElementAlias match_collectionTypeRef_ANONYMOUSTerminalRuleCall_1_0_q;
	protected AbstractElementAlias match_collectionTypeRef_ANONYMOUSTerminalRuleCall_2_0_q;
	protected AbstractElementAlias match_collectionTypeRef_ANONYMOUSTerminalRuleCall_3_0_q;
	protected AbstractElementAlias match_collectionTypeRef_ANONYMOUSTerminalRuleCall_4_1_q;
	protected AbstractElementAlias match_createExpression_UNIQUETerminalRuleCall_1_q;
	protected AbstractElementAlias match_domainFunctionDefinition_FUNCTIONTerminalRuleCall_10_q;
	protected AbstractElementAlias match_domainServiceDefinition_SERVICETerminalRuleCall_8_q;
	protected AbstractElementAlias match_equality_EQUALTerminalRuleCall_1_0_0_or_NOT_EQUALTerminalRuleCall_1_0_1;
	protected AbstractElementAlias match_findComparison_EQUALTerminalRuleCall_1_0_or_GTETerminalRuleCall_1_5_or_GTTerminalRuleCall_1_3_or_LTETerminalRuleCall_1_4_or_LTTerminalRuleCall_1_2_or_NOT_EQUALTerminalRuleCall_1_1;
	protected AbstractElementAlias match_findUnary_NOTTerminalRuleCall_0_0_a;
	protected AbstractElementAlias match_forStatement_LOOPTerminalRuleCall_5_q;
	protected AbstractElementAlias match_ifStatement_IFTerminalRuleCall_7_q;
	protected AbstractElementAlias match_loopVariableSpec_REVERSETerminalRuleCall_2_q;
	protected AbstractElementAlias match_multExp_DISUNIONTerminalRuleCall_1_0_6_or_DIVIDETerminalRuleCall_1_0_1_or_INTERSECTIONTerminalRuleCall_1_0_5_or_MODTerminalRuleCall_1_0_2_or_POWERTerminalRuleCall_1_0_3_or_REMTerminalRuleCall_1_0_4_or_TIMESTerminalRuleCall_1_0_0;
	protected AbstractElementAlias match_navigateExpression_____ORDERED_BYTerminalRuleCall_1_2_0_SortOrderParserRuleCall_1_2_1___or___REVERSE_ORDERED_BYTerminalRuleCall_1_3_0_SortOrderParserRuleCall_1_3_1____a;
	protected AbstractElementAlias match_objectFunctionDefinition_FUNCTIONTerminalRuleCall_13_q;
	protected AbstractElementAlias match_objectServiceDefinition_INSTANCETerminalRuleCall_1_q;
	protected AbstractElementAlias match_objectServiceDefinition_SERVICETerminalRuleCall_11_q;
	protected AbstractElementAlias match_postfixExpression_____DOTTerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1___or___PRIMETerminalRuleCall_1_5_0_CharacteristicParserRuleCall_1_5_1___or___TERMINATOR_SCOPETerminalRuleCall_1_2_0_IdentifierParserRuleCall_1_2_1____a;
	protected AbstractElementAlias match_postfixNoCallExpression_____DOTTerminalRuleCall_1_0_0_IdentifierParserRuleCall_1_0_1___or___PRIMETerminalRuleCall_1_3_0_CharacteristicParserRuleCall_1_3_1___or___TERMINATOR_SCOPETerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1____a;
	protected AbstractElementAlias match_primaryExpression_LiteralParserRuleCall_0_1_or_NameExpressionParserRuleCall_2_1;
	protected AbstractElementAlias match_relationalExp_GTETerminalRuleCall_1_0_3_or_GTTerminalRuleCall_1_0_1_or_LTETerminalRuleCall_1_0_2_or_LTTerminalRuleCall_1_0_0;
	protected AbstractElementAlias match_stateDefinition_STATETerminalRuleCall_10_q;
	protected AbstractElementAlias match_statement_RaiseStatementParserRuleCall_1_8_q;
	protected AbstractElementAlias match_terminatorFunctionDefinition_FUNCTIONTerminalRuleCall_12_q;
	protected AbstractElementAlias match_terminatorServiceDefinition_SERVICETerminalRuleCall_10_q;
	protected AbstractElementAlias match_typeReference_DeprecatedTypeParserRuleCall_3_1_or_InstanceTypeRefParserRuleCall_1_1_or_NamedTypeRefParserRuleCall_0_1;
	protected AbstractElementAlias match_unaryExp_UnaryOperatorParserRuleCall_0_0_a;
	protected AbstractElementAlias match_variableDeclaration_READONLYTerminalRuleCall_2_q;
	protected AbstractElementAlias match_whileStatement_LOOPTerminalRuleCall_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MASLGrammarAccess) access;
		match_additiveExp_CONCATENATETerminalRuleCall_1_0_2_or_MINUSTerminalRuleCall_1_0_1_or_NOT_INTerminalRuleCall_1_0_4_or_PLUSTerminalRuleCall_1_0_0_or_UNIONTerminalRuleCall_1_0_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAdditiveExpAccess().getCONCATENATETerminalRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getAdditiveExpAccess().getMINUSTerminalRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getAdditiveExpAccess().getNOT_INTerminalRuleCall_1_0_4()), new TokenAlias(false, false, grammarAccess.getAdditiveExpAccess().getPLUSTerminalRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getAdditiveExpAccess().getUNIONTerminalRuleCall_1_0_3()));
		match_callStatement_____DOTTerminalRuleCall_1_0_0_0_IdentifierParserRuleCall_1_0_0_1___or___TERMINATOR_SCOPETerminalRuleCall_1_0_1_0_IdentifierParserRuleCall_1_0_1_1____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getDOTTerminalRuleCall_1_0_0_0()), new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getIdentifierParserRuleCall_1_0_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getTERMINATOR_SCOPETerminalRuleCall_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getCallStatementAccess().getIdentifierParserRuleCall_1_0_1_1())));
		match_caseStatement_CASETerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getCaseStatementAccess().getCASETerminalRuleCall_6());
		match_codeBlockStatement_DECLARETerminalRuleCall_0_0_q = new TokenAlias(false, true, grammarAccess.getCodeBlockStatementAccess().getDECLARETerminalRuleCall_0_0());
		match_codeBlockStatement_EXCEPTIONTerminalRuleCall_3_0_q = new TokenAlias(false, true, grammarAccess.getCodeBlockStatementAccess().getEXCEPTIONTerminalRuleCall_3_0());
		match_codeBlock_EXCEPTIONTerminalRuleCall_3_0_q = new TokenAlias(false, true, grammarAccess.getCodeBlockAccess().getEXCEPTIONTerminalRuleCall_3_0());
		match_collectionTypeRef_ANONYMOUSTerminalRuleCall_0_0_q = new TokenAlias(false, true, grammarAccess.getCollectionTypeRefAccess().getANONYMOUSTerminalRuleCall_0_0());
		match_collectionTypeRef_ANONYMOUSTerminalRuleCall_1_0_q = new TokenAlias(false, true, grammarAccess.getCollectionTypeRefAccess().getANONYMOUSTerminalRuleCall_1_0());
		match_collectionTypeRef_ANONYMOUSTerminalRuleCall_2_0_q = new TokenAlias(false, true, grammarAccess.getCollectionTypeRefAccess().getANONYMOUSTerminalRuleCall_2_0());
		match_collectionTypeRef_ANONYMOUSTerminalRuleCall_3_0_q = new TokenAlias(false, true, grammarAccess.getCollectionTypeRefAccess().getANONYMOUSTerminalRuleCall_3_0());
		match_collectionTypeRef_ANONYMOUSTerminalRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getCollectionTypeRefAccess().getANONYMOUSTerminalRuleCall_4_1());
		match_createExpression_UNIQUETerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getCreateExpressionAccess().getUNIQUETerminalRuleCall_1());
		match_domainFunctionDefinition_FUNCTIONTerminalRuleCall_10_q = new TokenAlias(false, true, grammarAccess.getDomainFunctionDefinitionAccess().getFUNCTIONTerminalRuleCall_10());
		match_domainServiceDefinition_SERVICETerminalRuleCall_8_q = new TokenAlias(false, true, grammarAccess.getDomainServiceDefinitionAccess().getSERVICETerminalRuleCall_8());
		match_equality_EQUALTerminalRuleCall_1_0_0_or_NOT_EQUALTerminalRuleCall_1_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEqualityAccess().getEQUALTerminalRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getEqualityAccess().getNOT_EQUALTerminalRuleCall_1_0_1()));
		match_findComparison_EQUALTerminalRuleCall_1_0_or_GTETerminalRuleCall_1_5_or_GTTerminalRuleCall_1_3_or_LTETerminalRuleCall_1_4_or_LTTerminalRuleCall_1_2_or_NOT_EQUALTerminalRuleCall_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getEQUALTerminalRuleCall_1_0()), new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getGTETerminalRuleCall_1_5()), new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getGTTerminalRuleCall_1_3()), new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getLTETerminalRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getLTTerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getFindComparisonAccess().getNOT_EQUALTerminalRuleCall_1_1()));
		match_findUnary_NOTTerminalRuleCall_0_0_a = new TokenAlias(true, true, grammarAccess.getFindUnaryAccess().getNOTTerminalRuleCall_0_0());
		match_forStatement_LOOPTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getForStatementAccess().getLOOPTerminalRuleCall_5());
		match_ifStatement_IFTerminalRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getIfStatementAccess().getIFTerminalRuleCall_7());
		match_loopVariableSpec_REVERSETerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getLoopVariableSpecAccess().getREVERSETerminalRuleCall_2());
		match_multExp_DISUNIONTerminalRuleCall_1_0_6_or_DIVIDETerminalRuleCall_1_0_1_or_INTERSECTIONTerminalRuleCall_1_0_5_or_MODTerminalRuleCall_1_0_2_or_POWERTerminalRuleCall_1_0_3_or_REMTerminalRuleCall_1_0_4_or_TIMESTerminalRuleCall_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMultExpAccess().getDISUNIONTerminalRuleCall_1_0_6()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getDIVIDETerminalRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getINTERSECTIONTerminalRuleCall_1_0_5()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getMODTerminalRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getPOWERTerminalRuleCall_1_0_3()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getREMTerminalRuleCall_1_0_4()), new TokenAlias(false, false, grammarAccess.getMultExpAccess().getTIMESTerminalRuleCall_1_0_0()));
		match_navigateExpression_____ORDERED_BYTerminalRuleCall_1_2_0_SortOrderParserRuleCall_1_2_1___or___REVERSE_ORDERED_BYTerminalRuleCall_1_3_0_SortOrderParserRuleCall_1_3_1____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getORDERED_BYTerminalRuleCall_1_2_0()), new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getSortOrderParserRuleCall_1_2_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getREVERSE_ORDERED_BYTerminalRuleCall_1_3_0()), new TokenAlias(false, false, grammarAccess.getNavigateExpressionAccess().getSortOrderParserRuleCall_1_3_1())));
		match_objectFunctionDefinition_FUNCTIONTerminalRuleCall_13_q = new TokenAlias(false, true, grammarAccess.getObjectFunctionDefinitionAccess().getFUNCTIONTerminalRuleCall_13());
		match_objectServiceDefinition_INSTANCETerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getObjectServiceDefinitionAccess().getINSTANCETerminalRuleCall_1());
		match_objectServiceDefinition_SERVICETerminalRuleCall_11_q = new TokenAlias(false, true, grammarAccess.getObjectServiceDefinitionAccess().getSERVICETerminalRuleCall_11());
		match_postfixExpression_____DOTTerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1___or___PRIMETerminalRuleCall_1_5_0_CharacteristicParserRuleCall_1_5_1___or___TERMINATOR_SCOPETerminalRuleCall_1_2_0_IdentifierParserRuleCall_1_2_1____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getDOTTerminalRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getIdentifierParserRuleCall_1_1_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getPRIMETerminalRuleCall_1_5_0()), new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getCharacteristicParserRuleCall_1_5_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getTERMINATOR_SCOPETerminalRuleCall_1_2_0()), new TokenAlias(false, false, grammarAccess.getPostfixExpressionAccess().getIdentifierParserRuleCall_1_2_1())));
		match_postfixNoCallExpression_____DOTTerminalRuleCall_1_0_0_IdentifierParserRuleCall_1_0_1___or___PRIMETerminalRuleCall_1_3_0_CharacteristicParserRuleCall_1_3_1___or___TERMINATOR_SCOPETerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1____a = new AlternativeAlias(true, true, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getDOTTerminalRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getIdentifierParserRuleCall_1_0_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getPRIMETerminalRuleCall_1_3_0()), new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getCharacteristicParserRuleCall_1_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getTERMINATOR_SCOPETerminalRuleCall_1_1_0()), new TokenAlias(false, false, grammarAccess.getPostfixNoCallExpressionAccess().getIdentifierParserRuleCall_1_1_1())));
		match_primaryExpression_LiteralParserRuleCall_0_1_or_NameExpressionParserRuleCall_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getNameExpressionParserRuleCall_2_1()));
		match_relationalExp_GTETerminalRuleCall_1_0_3_or_GTTerminalRuleCall_1_0_1_or_LTETerminalRuleCall_1_0_2_or_LTTerminalRuleCall_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRelationalExpAccess().getGTETerminalRuleCall_1_0_3()), new TokenAlias(false, false, grammarAccess.getRelationalExpAccess().getGTTerminalRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getRelationalExpAccess().getLTETerminalRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getRelationalExpAccess().getLTTerminalRuleCall_1_0_0()));
		match_stateDefinition_STATETerminalRuleCall_10_q = new TokenAlias(false, true, grammarAccess.getStateDefinitionAccess().getSTATETerminalRuleCall_10());
		match_statement_RaiseStatementParserRuleCall_1_8_q = new TokenAlias(false, true, grammarAccess.getStatementAccess().getRaiseStatementParserRuleCall_1_8());
		match_terminatorFunctionDefinition_FUNCTIONTerminalRuleCall_12_q = new TokenAlias(false, true, grammarAccess.getTerminatorFunctionDefinitionAccess().getFUNCTIONTerminalRuleCall_12());
		match_terminatorServiceDefinition_SERVICETerminalRuleCall_10_q = new TokenAlias(false, true, grammarAccess.getTerminatorServiceDefinitionAccess().getSERVICETerminalRuleCall_10());
		match_typeReference_DeprecatedTypeParserRuleCall_3_1_or_InstanceTypeRefParserRuleCall_1_1_or_NamedTypeRefParserRuleCall_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTypeReferenceAccess().getDeprecatedTypeParserRuleCall_3_1()), new TokenAlias(false, false, grammarAccess.getTypeReferenceAccess().getInstanceTypeRefParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getTypeReferenceAccess().getNamedTypeRefParserRuleCall_0_1()));
		match_unaryExp_UnaryOperatorParserRuleCall_0_0_a = new TokenAlias(true, true, grammarAccess.getUnaryExpAccess().getUnaryOperatorParserRuleCall_0_0());
		match_variableDeclaration_READONLYTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getVariableDeclarationAccess().getREADONLYTerminalRuleCall_2());
		match_whileStatement_LOOPTerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getWhileStatementAccess().getLOOPTerminalRuleCall_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANDRule())
			return getANDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getANONYMOUSRule())
			return getANONYMOUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getARRAYRule())
			return getARRAYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getASSIGNRule())
			return getASSIGNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBAGRule())
			return getBAGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCANCELRule())
			return getCANCELToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCASERule())
			return getCASEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCASE_ORRule())
			return getCASE_ORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCONCATENATERule())
			return getCONCATENATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCREATERule())
			return getCREATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCURRENT_STATERule())
			return getCURRENT_STATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDECLARERule())
			return getDECLAREToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDELAYRule())
			return getDELAYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDELETERule())
			return getDELETEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDELTARule())
			return getDELTAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDICTIONARYRule())
			return getDICTIONARYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDISUNIONRule())
			return getDISUNIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDIVIDERule())
			return getDIVIDEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDOTRule())
			return getDOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELSERule())
			return getELSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getELSIFRule())
			return getELSIFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEQUALRule())
			return getEQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getERASERule())
			return getERASEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEXCEPTIONRule())
			return getEXCEPTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEXITRule())
			return getEXITToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFORRule())
			return getFORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFUNCTIONRule())
			return getFUNCTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGENERATERule())
			return getGENERATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGOES_TORule())
			return getGOES_TOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGTRule())
			return getGTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getGTERule())
			return getGTEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIFRule())
			return getIFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINRule())
			return getINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINSTANCERule())
			return getINSTANCEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTERSECTIONRule())
			return getINTERSECTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getISRule())
			return getISToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLBRACKETRule())
			return getLBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLOOPRule())
			return getLOOPToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENRule())
			return getLPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLTRule())
			return getLTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLTERule())
			return getLTEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMINUSRule())
			return getMINUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMODRule())
			return getMODToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNAVIGATERule())
			return getNAVIGATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOT_EQUALRule())
			return getNOT_EQUALToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOT_INRule())
			return getNOT_INToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOFRule())
			return getOFToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getORRule())
			return getORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getORDERED_BYRule())
			return getORDERED_BYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOTHERSRule())
			return getOTHERSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPLUSRule())
			return getPLUSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPOWERRule())
			return getPOWERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPRIMERule())
			return getPRIMEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRANGE_DOTSRule())
			return getRANGE_DOTSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRBRACKETRule())
			return getRBRACKETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREADONLYRule())
			return getREADONLYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREMRule())
			return getREMToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRETURNRule())
			return getRETURNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREVERSERule())
			return getREVERSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREVERSE_ORDERED_BYRule())
			return getREVERSE_ORDERED_BYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENRule())
			return getRPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSCHEDULERule())
			return getSCHEDULEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSCOPERule())
			return getSCOPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMIRule())
			return getSEMIToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEQUENCERule())
			return getSEQUENCEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSERVICERule())
			return getSERVICEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSETRule())
			return getSETToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTATERule())
			return getSTATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTERMINATOR_SCOPERule())
			return getTERMINATOR_SCOPEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTHENRule())
			return getTHENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTIMESRule())
			return getTIMESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTORule())
			return getTOToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNIONRule())
			return getUNIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUNIQUERule())
			return getUNIQUEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUSINGRule())
			return getUSINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWHENRule())
			return getWHENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWHILERule())
			return getWHILEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWITHRule())
			return getWITHToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getXORRule())
			return getXORToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCharacteristicRule())
			return getcharacteristicToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDeprecatedTypeRule())
			return getdeprecatedTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDomainNameRule())
			return getdomainNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFindTypeRule())
			return getfindTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdentifierRule())
			return getidentifierToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getInstanceTypeRefRule())
			return getinstanceTypeRefToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLinkTypeRule())
			return getlinkTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLiteralRule())
			return getliteralToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNameExpressionRule())
			return getnameExpressionToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNamedTypeRefRule())
			return getnamedTypeRefToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getObjectNameRule())
			return getobjectNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getParameterModeRule())
			return getparameterModeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getParameterNameRule())
			return getparameterNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPragmaListRule())
			return getpragmaListToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getQualifiedEventNameRule())
			return getqualifiedEventNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getQualifiedExceptionNameRule())
			return getqualifiedExceptionNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRaiseStatementRule())
			return getraiseStatementToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getScheduleTypeRule())
			return getscheduleTypeToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getServiceNameRule())
			return getserviceNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSortOrderRule())
			return getsortOrderToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStateNameRule())
			return getstateNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStreamOperatorRule())
			return getstreamOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTerminatorNameRule())
			return getterminatorNameToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUnaryOperatorRule())
			return getunaryOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUserDefinedTypeRefRule())
			return getuserDefinedTypeRefToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVariableNameRule())
			return getvariableNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal AND                           : 'and';
	 */
	protected String getANDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "and";
	}
	
	/**
	 * terminal ANONYMOUS                     : 'anonymous';
	 */
	protected String getANONYMOUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "anonymous";
	}
	
	/**
	 * terminal ARRAY                         : 'array';
	 */
	protected String getARRAYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "array";
	}
	
	/**
	 * terminal ASSIGN                        : ':=';
	 */
	protected String getASSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":=";
	}
	
	/**
	 * terminal BAG                           : 'bag';
	 */
	protected String getBAGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "bag";
	}
	
	/**
	 * terminal BEGIN                         : 'begin';
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "begin";
	}
	
	/**
	 * terminal CANCEL                        : 'cancel';
	 */
	protected String getCANCELToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "cancel";
	}
	
	/**
	 * terminal CASE                          : 'case';
	 */
	protected String getCASEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "case";
	}
	
	/**
	 * terminal CASE_OR                       : '|';
	 */
	protected String getCASE_ORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "|";
	}
	
	/**
	 * terminal COLON                         : ':';
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * terminal COMMA                         : ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal CONCATENATE                   : '&';
	 */
	protected String getCONCATENATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&";
	}
	
	/**
	 * terminal CREATE                        : 'create';
	 */
	protected String getCREATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "create";
	}
	
	/**
	 * terminal CURRENT_STATE                 : 'Current_State' ;
	 */
	protected String getCURRENT_STATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Current_State";
	}
	
	/**
	 * terminal DECLARE                       : 'declare';
	 */
	protected String getDECLAREToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "declare";
	}
	
	/**
	 * terminal DELAY                         : 'delay';
	 */
	protected String getDELAYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "delay";
	}
	
	/**
	 * terminal DELETE                        : 'delete';
	 */
	protected String getDELETEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "delete";
	}
	
	/**
	 * terminal DELTA                         : 'delta';
	 */
	protected String getDELTAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "delta";
	}
	
	/**
	 * terminal DICTIONARY                    : 'dictionary';
	 */
	protected String getDICTIONARYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "dictionary";
	}
	
	/**
	 * terminal DISUNION                      : 'disunion';
	 */
	protected String getDISUNIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "disunion";
	}
	
	/**
	 * terminal DIVIDE                        : '/';
	 */
	protected String getDIVIDEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/";
	}
	
	/**
	 * terminal DOT                           : '.';
	 */
	protected String getDOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * terminal ELSE                          : 'else';
	 */
	protected String getELSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "else";
	}
	
	/**
	 * terminal ELSIF                         : 'elsif';
	 */
	protected String getELSIFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "elsif";
	}
	
	/**
	 * terminal END                           : 'end';
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "end";
	}
	
	/**
	 * terminal EQUAL                         : '=';
	 */
	protected String getEQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal ERASE                         : 'erase';
	 */
	protected String getERASEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "erase";
	}
	
	/**
	 * terminal EXCEPTION                     : 'exception';
	 */
	protected String getEXCEPTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "exception";
	}
	
	/**
	 * terminal EXIT                          : 'exit';
	 */
	protected String getEXITToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "exit";
	}
	
	/**
	 * terminal FOR                           : 'for';
	 */
	protected String getFORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "for";
	}
	
	/**
	 * terminal FUNCTION                      : 'function';
	 */
	protected String getFUNCTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "function";
	}
	
	/**
	 * terminal GENERATE                      : 'generate';
	 */
	protected String getGENERATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "generate";
	}
	
	/**
	 * terminal GOES_TO                       : '=>';
	 */
	protected String getGOES_TOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=>";
	}
	
	/**
	 * terminal GT                            : '>';
	 */
	protected String getGTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	/**
	 * terminal GTE                           : '>=';
	 */
	protected String getGTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">=";
	}
	
	/**
	 * terminal IF                            : 'if';
	 */
	protected String getIFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "if";
	}
	
	/**
	 * terminal IN                            : 'in';
	 */
	protected String getINToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "in";
	}
	
	/**
	 * terminal INSTANCE                      : 'instance';
	 */
	protected String getINSTANCEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "instance";
	}
	
	/**
	 * terminal INTERSECTION                  : 'intersection';
	 */
	protected String getINTERSECTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "intersection";
	}
	
	/**
	 * terminal IS                            : 'is';
	 */
	protected String getISToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "is";
	}
	
	/**
	 * terminal LBRACKET                      : '[';
	 */
	protected String getLBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * terminal LOOP                          : 'loop';
	 */
	protected String getLOOPToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "loop";
	}
	
	/**
	 * terminal LPAREN                        : '(';
	 */
	protected String getLPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal LT                            : '<';
	 */
	protected String getLTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<";
	}
	
	/**
	 * terminal LTE                           : '<=';
	 */
	protected String getLTEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "<=";
	}
	
	/**
	 * terminal MINUS                         : '-';
	 */
	protected String getMINUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * terminal MOD                           : 'mod';
	 */
	protected String getMODToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "mod";
	}
	
	/**
	 * terminal NAVIGATE                      : '->';
	 */
	protected String getNAVIGATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "->";
	}
	
	/**
	 * terminal NOT                           : 'not';
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "not";
	}
	
	/**
	 * terminal NOT_EQUAL                     : '/=';
	 */
	protected String getNOT_EQUALToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/=";
	}
	
	/**
	 * terminal NOT_IN                        : 'not_in';
	 */
	protected String getNOT_INToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "not_in";
	}
	
	/**
	 * terminal OF                            : 'of';
	 */
	protected String getOFToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "of";
	}
	
	/**
	 * terminal OR                            : 'or';
	 */
	protected String getORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "or";
	}
	
	/**
	 * terminal ORDERED_BY                    : 'ordered_by';
	 */
	protected String getORDERED_BYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ordered_by";
	}
	
	/**
	 * terminal OTHERS                        : 'others';
	 */
	protected String getOTHERSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "others";
	}
	
	/**
	 * terminal PLUS                          : '+';
	 */
	protected String getPLUSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	/**
	 * terminal POWER                         : '**';
	 */
	protected String getPOWERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "**";
	}
	
	/**
	 * terminal PRIME                         : '\'';
	 */
	protected String getPRIMEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\'";
	}
	
	/**
	 * terminal RANGE_DOTS                    : '..';
	 */
	protected String getRANGE_DOTSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "..";
	}
	
	/**
	 * terminal RBRACKET                      : ']';
	 */
	protected String getRBRACKETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * terminal READONLY                      : 'readonly';
	 */
	protected String getREADONLYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "readonly";
	}
	
	/**
	 * terminal REM                           : 'rem';
	 */
	protected String getREMToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "rem";
	}
	
	/**
	 * terminal RETURN                        : 'return';
	 */
	protected String getRETURNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "return";
	}
	
	/**
	 * terminal REVERSE                       : 'reverse';
	 */
	protected String getREVERSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "reverse";
	}
	
	/**
	 * terminal REVERSE_ORDERED_BY            : 'reverse_ordered_by';
	 */
	protected String getREVERSE_ORDERED_BYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "reverse_ordered_by";
	}
	
	/**
	 * terminal RPAREN                        : ')';
	 */
	protected String getRPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal SCHEDULE                      : 'schedule';
	 */
	protected String getSCHEDULEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "schedule";
	}
	
	/**
	 * terminal SCOPE                         : '::';
	 */
	protected String getSCOPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "::";
	}
	
	/**
	 * terminal SEMI                          : ';';
	 */
	protected String getSEMIToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal SEQUENCE                      : 'sequence';
	 */
	protected String getSEQUENCEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "sequence";
	}
	
	/**
	 * terminal SERVICE                       : 'service';
	 */
	protected String getSERVICEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "service";
	}
	
	/**
	 * terminal SET                           : 'set';
	 */
	protected String getSETToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "set";
	}
	
	/**
	 * terminal STATE                         : 'state';
	 */
	protected String getSTATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state";
	}
	
	/**
	 * terminal TERMINATOR_SCOPE              : '~>';
	 */
	protected String getTERMINATOR_SCOPEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "~>";
	}
	
	/**
	 * terminal THEN                          : 'then';
	 */
	protected String getTHENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "then";
	}
	
	/**
	 * terminal TIMES                         : '*';
	 */
	protected String getTIMESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "*";
	}
	
	/**
	 * terminal TO                            : 'to';
	 */
	protected String getTOToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "to";
	}
	
	/**
	 * terminal UNION                         : 'union';
	 */
	protected String getUNIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "union";
	}
	
	/**
	 * terminal UNIQUE                        : 'unique';
	 */
	protected String getUNIQUEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "unique";
	}
	
	/**
	 * terminal USING                         : 'using';
	 */
	protected String getUSINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "using";
	}
	
	/**
	 * terminal WHEN                          : 'when';
	 */
	protected String getWHENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "when";
	}
	
	/**
	 * terminal WHILE                         : 'while';
	 */
	protected String getWHILEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "while";
	}
	
	/**
	 * terminal WITH                          : 'with';
	 */
	protected String getWITHToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "with";
	}
	
	/**
	 * terminal XOR                           : 'xor';
	 */
	protected String getXORToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "xor";
	}
	
	/**
	 * characteristic                : IDENT
	 *                               | characteristicRW
	 *                               ;
	 */
	protected String getcharacteristicToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * deprecatedType                : INSTANCE
	 *                               | EVENT
	 *                               | SERVICE
	 *                               ;
	 */
	protected String getdeprecatedTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "instance";
	}
	
	/**
	 * domainName                    : identifier
	 *                               ;
	 */
	protected String getdomainNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * findType                      : FIND 
	 *                               | FIND_ONE 
	 *                               | FIND_ONLY
	 *                               ;
	 */
	protected String getfindTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "find";
	}
	
	/**
	 * identifier                    : IDENT
	 *                               ;
	 */
	protected String getidentifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * instanceTypeRef               : ANONYMOUS? INSTANCE OF qualifiedObjectName
	 *                               ;
	 */
	protected String getinstanceTypeRefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "instanceof";
	}
	
	/**
	 * linkType                      : LINK
	 *                               | UNLINK
	 *                               ;
	 */
	protected String getlinkTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "link";
	}
	
	/**
	 * literal                       : INTEGERLITERAL
	 *                               | REALLITERAL
	 *                                                             | STRINGLITERAL
	 *                               | TIMESTAMPLITERAL
	 *                               | DURATIONLITERAL
	 *                               | TRUE
	 *                               | FALSE
	 *                               | NULL
	 *                               | FLUSH
	 *                               | ENDL
	 *                               | THIS
	 *                               | CONSOLE
	 *                               | LINE_NO
	 *                               | FILE_NAME
	 *                               ;
	 */
	protected String getliteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "#";
	}
	
	/**
	 * nameExpression                : (domainName SCOPE)? identifier
	 *                               ;
	 */
	protected String getnameExpressionToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * namedTypeRef                  : ANONYMOUS? (domainName SCOPE)? typeName
	 *                               ;
	 */
	protected String getnamedTypeRefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * objectName                    : identifier
	 *                               ;
	 */
	protected String getobjectNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * parameterMode                 : IN
	 *                               | OUT
	 *                               ;
	 */
	protected String getparameterModeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "in";
	}
	
	/**
	 * parameterName                 : identifier
	 *                               ;
	 */
	protected String getparameterNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * pragmaList                    : (pragmaDef SEMI)*
	 *                               ;
	 */
	protected String getpragmaListToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * qualifiedEventName            : (qualifiedObjectName DOT)? eventName
	 *                               ;
	 */
	protected String getqualifiedEventNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * qualifiedExceptionName        : (domainName SCOPE)? exceptionName
	 *                               ;
	 */
	protected String getqualifiedExceptionNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * raiseStatement                : RAISE qualifiedExceptionName 
	 *                               ;
	 */
	protected String getraiseStatementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "raise";
	}
	
	/**
	 * scheduleType                  : AT 
	 *                               | DELAY
	 *                               ;
	 */
	protected String getscheduleTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "at";
	}
	
	/**
	 * serviceName                   : identifier
	 *                               ;
	 */
	protected String getserviceNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * sortOrder                     : LPAREN 
	 *                                 ( sortOrderComponent 
	 *                                 ( COMMA sortOrderComponent )* )?
	 *                                 RPAREN
	 *                               ;
	 */
	protected String getsortOrderToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * stateName                     : identifier
	 *                               ;
	 */
	protected String getstateNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * streamOperator                : STREAM_IN 
	 *                               | STREAM_OUT 
	 *                               | STREAM_LINE_IN 
	 *                               | STREAM_LINE_OUT
	 *                               ;
	 */
	protected String getstreamOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">>";
	}
	
	/**
	 * terminatorName                : identifier
	 *                               ;
	 */
	protected String getterminatorNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * unaryOperator                 : MINUS
	 *                               | PLUS
	 *                               | NOT
	 *                               | ABS
	 *                               ;
	 */
	protected String getunaryOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "-";
	}
	
	/**
	 * userDefinedTypeRef            : (domainName SCOPE)? typeName
	 *                               ;
	 */
	protected String getuserDefinedTypeRefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * variableName                  : identifier
	 *                               ;
	 */
	protected String getvariableNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_additiveExp_CONCATENATETerminalRuleCall_1_0_2_or_MINUSTerminalRuleCall_1_0_1_or_NOT_INTerminalRuleCall_1_0_4_or_PLUSTerminalRuleCall_1_0_0_or_UNIONTerminalRuleCall_1_0_3.equals(syntax))
				emit_additiveExp_CONCATENATETerminalRuleCall_1_0_2_or_MINUSTerminalRuleCall_1_0_1_or_NOT_INTerminalRuleCall_1_0_4_or_PLUSTerminalRuleCall_1_0_0_or_UNIONTerminalRuleCall_1_0_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_callStatement_____DOTTerminalRuleCall_1_0_0_0_IdentifierParserRuleCall_1_0_0_1___or___TERMINATOR_SCOPETerminalRuleCall_1_0_1_0_IdentifierParserRuleCall_1_0_1_1____a.equals(syntax))
				emit_callStatement_____DOTTerminalRuleCall_1_0_0_0_IdentifierParserRuleCall_1_0_0_1___or___TERMINATOR_SCOPETerminalRuleCall_1_0_1_0_IdentifierParserRuleCall_1_0_1_1____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_caseStatement_CASETerminalRuleCall_6_q.equals(syntax))
				emit_caseStatement_CASETerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_codeBlockStatement_DECLARETerminalRuleCall_0_0_q.equals(syntax))
				emit_codeBlockStatement_DECLARETerminalRuleCall_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_codeBlockStatement_EXCEPTIONTerminalRuleCall_3_0_q.equals(syntax))
				emit_codeBlockStatement_EXCEPTIONTerminalRuleCall_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_codeBlock_EXCEPTIONTerminalRuleCall_3_0_q.equals(syntax))
				emit_codeBlock_EXCEPTIONTerminalRuleCall_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_collectionTypeRef_ANONYMOUSTerminalRuleCall_0_0_q.equals(syntax))
				emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_collectionTypeRef_ANONYMOUSTerminalRuleCall_1_0_q.equals(syntax))
				emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_collectionTypeRef_ANONYMOUSTerminalRuleCall_2_0_q.equals(syntax))
				emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_collectionTypeRef_ANONYMOUSTerminalRuleCall_3_0_q.equals(syntax))
				emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_collectionTypeRef_ANONYMOUSTerminalRuleCall_4_1_q.equals(syntax))
				emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_createExpression_UNIQUETerminalRuleCall_1_q.equals(syntax))
				emit_createExpression_UNIQUETerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_domainFunctionDefinition_FUNCTIONTerminalRuleCall_10_q.equals(syntax))
				emit_domainFunctionDefinition_FUNCTIONTerminalRuleCall_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_domainServiceDefinition_SERVICETerminalRuleCall_8_q.equals(syntax))
				emit_domainServiceDefinition_SERVICETerminalRuleCall_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_equality_EQUALTerminalRuleCall_1_0_0_or_NOT_EQUALTerminalRuleCall_1_0_1.equals(syntax))
				emit_equality_EQUALTerminalRuleCall_1_0_0_or_NOT_EQUALTerminalRuleCall_1_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_findComparison_EQUALTerminalRuleCall_1_0_or_GTETerminalRuleCall_1_5_or_GTTerminalRuleCall_1_3_or_LTETerminalRuleCall_1_4_or_LTTerminalRuleCall_1_2_or_NOT_EQUALTerminalRuleCall_1_1.equals(syntax))
				emit_findComparison_EQUALTerminalRuleCall_1_0_or_GTETerminalRuleCall_1_5_or_GTTerminalRuleCall_1_3_or_LTETerminalRuleCall_1_4_or_LTTerminalRuleCall_1_2_or_NOT_EQUALTerminalRuleCall_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_findUnary_NOTTerminalRuleCall_0_0_a.equals(syntax))
				emit_findUnary_NOTTerminalRuleCall_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_forStatement_LOOPTerminalRuleCall_5_q.equals(syntax))
				emit_forStatement_LOOPTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ifStatement_IFTerminalRuleCall_7_q.equals(syntax))
				emit_ifStatement_IFTerminalRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_loopVariableSpec_REVERSETerminalRuleCall_2_q.equals(syntax))
				emit_loopVariableSpec_REVERSETerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_multExp_DISUNIONTerminalRuleCall_1_0_6_or_DIVIDETerminalRuleCall_1_0_1_or_INTERSECTIONTerminalRuleCall_1_0_5_or_MODTerminalRuleCall_1_0_2_or_POWERTerminalRuleCall_1_0_3_or_REMTerminalRuleCall_1_0_4_or_TIMESTerminalRuleCall_1_0_0.equals(syntax))
				emit_multExp_DISUNIONTerminalRuleCall_1_0_6_or_DIVIDETerminalRuleCall_1_0_1_or_INTERSECTIONTerminalRuleCall_1_0_5_or_MODTerminalRuleCall_1_0_2_or_POWERTerminalRuleCall_1_0_3_or_REMTerminalRuleCall_1_0_4_or_TIMESTerminalRuleCall_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_navigateExpression_____ORDERED_BYTerminalRuleCall_1_2_0_SortOrderParserRuleCall_1_2_1___or___REVERSE_ORDERED_BYTerminalRuleCall_1_3_0_SortOrderParserRuleCall_1_3_1____a.equals(syntax))
				emit_navigateExpression_____ORDERED_BYTerminalRuleCall_1_2_0_SortOrderParserRuleCall_1_2_1___or___REVERSE_ORDERED_BYTerminalRuleCall_1_3_0_SortOrderParserRuleCall_1_3_1____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_objectFunctionDefinition_FUNCTIONTerminalRuleCall_13_q.equals(syntax))
				emit_objectFunctionDefinition_FUNCTIONTerminalRuleCall_13_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_objectServiceDefinition_INSTANCETerminalRuleCall_1_q.equals(syntax))
				emit_objectServiceDefinition_INSTANCETerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_objectServiceDefinition_SERVICETerminalRuleCall_11_q.equals(syntax))
				emit_objectServiceDefinition_SERVICETerminalRuleCall_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_postfixExpression_____DOTTerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1___or___PRIMETerminalRuleCall_1_5_0_CharacteristicParserRuleCall_1_5_1___or___TERMINATOR_SCOPETerminalRuleCall_1_2_0_IdentifierParserRuleCall_1_2_1____a.equals(syntax))
				emit_postfixExpression_____DOTTerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1___or___PRIMETerminalRuleCall_1_5_0_CharacteristicParserRuleCall_1_5_1___or___TERMINATOR_SCOPETerminalRuleCall_1_2_0_IdentifierParserRuleCall_1_2_1____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_postfixNoCallExpression_____DOTTerminalRuleCall_1_0_0_IdentifierParserRuleCall_1_0_1___or___PRIMETerminalRuleCall_1_3_0_CharacteristicParserRuleCall_1_3_1___or___TERMINATOR_SCOPETerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1____a.equals(syntax))
				emit_postfixNoCallExpression_____DOTTerminalRuleCall_1_0_0_IdentifierParserRuleCall_1_0_1___or___PRIMETerminalRuleCall_1_3_0_CharacteristicParserRuleCall_1_3_1___or___TERMINATOR_SCOPETerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1____a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_primaryExpression_LiteralParserRuleCall_0_1_or_NameExpressionParserRuleCall_2_1.equals(syntax))
				emit_primaryExpression_LiteralParserRuleCall_0_1_or_NameExpressionParserRuleCall_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_relationalExp_GTETerminalRuleCall_1_0_3_or_GTTerminalRuleCall_1_0_1_or_LTETerminalRuleCall_1_0_2_or_LTTerminalRuleCall_1_0_0.equals(syntax))
				emit_relationalExp_GTETerminalRuleCall_1_0_3_or_GTTerminalRuleCall_1_0_1_or_LTETerminalRuleCall_1_0_2_or_LTTerminalRuleCall_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_stateDefinition_STATETerminalRuleCall_10_q.equals(syntax))
				emit_stateDefinition_STATETerminalRuleCall_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_statement_RaiseStatementParserRuleCall_1_8_q.equals(syntax))
				emit_statement_RaiseStatementParserRuleCall_1_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_terminatorFunctionDefinition_FUNCTIONTerminalRuleCall_12_q.equals(syntax))
				emit_terminatorFunctionDefinition_FUNCTIONTerminalRuleCall_12_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_terminatorServiceDefinition_SERVICETerminalRuleCall_10_q.equals(syntax))
				emit_terminatorServiceDefinition_SERVICETerminalRuleCall_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_typeReference_DeprecatedTypeParserRuleCall_3_1_or_InstanceTypeRefParserRuleCall_1_1_or_NamedTypeRefParserRuleCall_0_1.equals(syntax))
				emit_typeReference_DeprecatedTypeParserRuleCall_3_1_or_InstanceTypeRefParserRuleCall_1_1_or_NamedTypeRefParserRuleCall_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_unaryExp_UnaryOperatorParserRuleCall_0_0_a.equals(syntax))
				emit_unaryExp_UnaryOperatorParserRuleCall_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_variableDeclaration_READONLYTerminalRuleCall_2_q.equals(syntax))
				emit_variableDeclaration_READONLYTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_whileStatement_LOOPTerminalRuleCall_5_q.equals(syntax))
				emit_whileStatement_LOOPTerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     PLUS | MINUS | CONCATENATE | UNION | NOT_IN
	 *
	 * This ambiguous syntax occurs at:
	 *     m+=multExp (ambiguity) m+=multExp
	 */
	protected void emit_additiveExp_CONCATENATETerminalRuleCall_1_0_2_or_MINUSTerminalRuleCall_1_0_1_or_NOT_INTerminalRuleCall_1_0_4_or_PLUSTerminalRuleCall_1_0_0_or_UNIONTerminalRuleCall_1_0_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((DOT identifier) | (TERMINATOR_SCOPE identifier))*
	 *
	 * This ambiguous syntax occurs at:
	 *     a+=argumentList RPAREN (ambiguity) LBRACKET e+=expression
	 *     a+=argumentList RPAREN (ambiguity) LPAREN a+=argumentList
	 *     a+=argumentList RPAREN (ambiguity) PRIME c+=characteristic
	 *     c+=characteristic (ambiguity) LBRACKET e+=expression
	 *     c+=characteristic (ambiguity) LPAREN a+=argumentList
	 *     c+=characteristic (ambiguity) PRIME c+=characteristic
	 *     e+=expression RBRACKET (ambiguity) LBRACKET e+=expression
	 *     e+=expression RBRACKET (ambiguity) LPAREN a+=argumentList
	 *     e+=expression RBRACKET (ambiguity) PRIME c+=characteristic
	 *     p=primaryExpression (ambiguity) LBRACKET e+=expression
	 *     p=primaryExpression (ambiguity) LPAREN a+=argumentList
	 *     p=primaryExpression (ambiguity) PRIME c+=characteristic
	 */
	protected void emit_callStatement_____DOTTerminalRuleCall_1_0_0_0_IdentifierParserRuleCall_1_0_0_1___or___TERMINATOR_SCOPETerminalRuleCall_1_0_1_0_IdentifierParserRuleCall_1_0_1_1____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     CASE?
	 *
	 * This ambiguous syntax occurs at:
	 *     c1+=caseAlternative END (ambiguity) (rule end)
	 *     c2=caseOthers END (ambiguity) (rule end)
	 *     r=rangeExpression IS END (ambiguity) (rule end)
	 */
	protected void emit_caseStatement_CASETerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     DECLARE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BEGIN s=statementList
	 */
	protected void emit_codeBlockStatement_DECLARETerminalRuleCall_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EXCEPTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=statementList (ambiguity) END (rule end)
	 */
	protected void emit_codeBlockStatement_EXCEPTIONTerminalRuleCall_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EXCEPTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=statementList (ambiguity) END (rule end)
	 */
	protected void emit_codeBlock_EXCEPTIONTerminalRuleCall_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ANONYMOUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) SEQUENCE LPAREN e=expression
	 *     (rule start) (ambiguity) SEQUENCE OF t=typeReference
	 */
	protected void emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ANONYMOUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ARRAY a=arrayBounds
	 */
	protected void emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ANONYMOUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) SET OF t=typeReference
	 */
	protected void emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ANONYMOUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) BAG OF t=typeReference
	 */
	protected void emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ANONYMOUS?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) DICTIONARY (rule start)
	 *     (rule start) (ambiguity) DICTIONARY OF d=dictValueType
	 *     (rule start) (ambiguity) DICTIONARY i=instanceTypeRef
	 *     (rule start) (ambiguity) DICTIONARY n=namedTypeRef
	 */
	protected void emit_collectionTypeRef_ANONYMOUSTerminalRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     UNIQUE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) CREATE (ambiguity) objectName LPAREN RPAREN (rule start)
	 *     (rule start) CREATE (ambiguity) objectName LPAREN c+=createArgument
	 */
	protected void emit_createExpression_UNIQUETerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     FUNCTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_domainFunctionDefinition_FUNCTIONTerminalRuleCall_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SERVICE?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_domainServiceDefinition_SERVICETerminalRuleCall_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EQUAL | NOT_EQUAL
	 *
	 * This ambiguous syntax occurs at:
	 *     r+=relationalExp (ambiguity) r+=relationalExp
	 */
	protected void emit_equality_EQUALTerminalRuleCall_1_0_0_or_NOT_EQUALTerminalRuleCall_1_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         EQUAL | 
	  *         NOT_EQUAL | 
	  *         LT | 
	  *         GT | 
	  *         LTE | 
	  *         GTE
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     f=findName (ambiguity) a=additiveExp
	 */
	protected void emit_findComparison_EQUALTerminalRuleCall_1_0_or_GTETerminalRuleCall_1_5_or_GTTerminalRuleCall_1_3_or_LTETerminalRuleCall_1_4_or_LTTerminalRuleCall_1_2_or_NOT_EQUALTerminalRuleCall_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NOT*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) LPAREN f=findLogicalOr
	 */
	protected void emit_findUnary_NOTTerminalRuleCall_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LOOP?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=statementList END (ambiguity) (rule end)
	 */
	protected void emit_forStatement_LOOPTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     IF?
	 *
	 * This ambiguous syntax occurs at:
	 *     e1+=elsifBlock END (ambiguity) (rule end)
	 *     e2=elseBlock END (ambiguity) (rule end)
	 *     s=statementList END (ambiguity) (rule end)
	 */
	protected void emit_ifStatement_IFTerminalRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     REVERSE?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) FOR identifier IN (ambiguity) r=rangeExpression
	 *     (rule start) identifier IN (ambiguity) r=rangeExpression
	 */
	protected void emit_loopVariableSpec_REVERSETerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         TIMES | 
	  *         DIVIDE | 
	  *         MOD | 
	  *         POWER | 
	  *         REM | 
	  *         INTERSECTION | 
	  *         DISUNION
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     u+=unaryExp (ambiguity) u+=unaryExp
	 */
	protected void emit_multExp_DISUNIONTerminalRuleCall_1_0_6_or_DIVIDETerminalRuleCall_1_0_1_or_INTERSECTIONTerminalRuleCall_1_0_5_or_MODTerminalRuleCall_1_0_2_or_POWERTerminalRuleCall_1_0_3_or_REMTerminalRuleCall_1_0_4_or_TIMESTerminalRuleCall_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((ORDERED_BY sortOrder) | (REVERSE_ORDERED_BY sortOrder))*
	 *
	 * This ambiguous syntax occurs at:
	 *     e+=extendedExpression (ambiguity) (rule end)
	 *     e+=extendedExpression (ambiguity) NAVIGATE r+=relationshipSpec
	 *     e+=extendedExpression (ambiguity) WITH e+=extendedExpression
	 *     r+=relationshipSpec (ambiguity) (rule end)
	 *     r+=relationshipSpec (ambiguity) NAVIGATE r+=relationshipSpec
	 *     r+=relationshipSpec (ambiguity) WITH e+=extendedExpression
	 *     w+=whereClause (ambiguity) (rule end)
	 *     w+=whereClause (ambiguity) NAVIGATE r+=relationshipSpec
	 *     w+=whereClause (ambiguity) WITH e+=extendedExpression
	 */
	protected void emit_navigateExpression_____ORDERED_BYTerminalRuleCall_1_2_0_SortOrderParserRuleCall_1_2_1___or___REVERSE_ORDERED_BYTerminalRuleCall_1_3_0_SortOrderParserRuleCall_1_3_1____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     FUNCTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_objectFunctionDefinition_FUNCTIONTerminalRuleCall_13_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     INSTANCE?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=serviceVisibility (ambiguity) SERVICE domainName SCOPE objectName DOT serviceName p=parameterList
	 */
	protected void emit_objectServiceDefinition_INSTANCETerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SERVICE?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_objectServiceDefinition_SERVICETerminalRuleCall_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((DOT identifier) | (TERMINATOR_SCOPE identifier) | (PRIME characteristic))*
	 *
	 * This ambiguous syntax occurs at:
	 *     a+=argumentList RPAREN (ambiguity) (rule end)
	 *     a+=argumentList RPAREN (ambiguity) LBRACKET e+=expression
	 *     a+=argumentList RPAREN (ambiguity) LPAREN a+=argumentList
	 *     a+=argumentList RPAREN (ambiguity) PRIME characteristic LPAREN PRIME characteristic LPAREN a+=argumentList
	 *     e+=expression RBRACKET (ambiguity) (rule end)
	 *     e+=expression RBRACKET (ambiguity) LBRACKET e+=expression
	 *     e+=expression RBRACKET (ambiguity) LPAREN a+=argumentList
	 *     e+=expression RBRACKET (ambiguity) PRIME characteristic LPAREN PRIME characteristic LPAREN a+=argumentList
	 *     p=primaryExpression (ambiguity) (rule end)
	 *     p=primaryExpression (ambiguity) LBRACKET e+=expression
	 *     p=primaryExpression (ambiguity) LPAREN a+=argumentList
	 *     p=primaryExpression (ambiguity) PRIME characteristic LPAREN PRIME characteristic LPAREN a+=argumentList
	 */
	protected void emit_postfixExpression_____DOTTerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1___or___PRIMETerminalRuleCall_1_5_0_CharacteristicParserRuleCall_1_5_1___or___TERMINATOR_SCOPETerminalRuleCall_1_2_0_IdentifierParserRuleCall_1_2_1____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ((DOT identifier) | (TERMINATOR_SCOPE identifier) | (PRIME characteristic))*
	 *
	 * This ambiguous syntax occurs at:
	 *     e+=expression RBRACKET (ambiguity) (rule end)
	 *     e+=expression RBRACKET (ambiguity) LBRACKET e+=expression
	 *     p=primaryExpression (ambiguity) (rule end)
	 *     p=primaryExpression (ambiguity) LBRACKET e+=expression
	 */
	protected void emit_postfixNoCallExpression_____DOTTerminalRuleCall_1_0_0_IdentifierParserRuleCall_1_0_1___or___PRIMETerminalRuleCall_1_3_0_CharacteristicParserRuleCall_1_3_1___or___TERMINATOR_SCOPETerminalRuleCall_1_1_0_IdentifierParserRuleCall_1_1_1____a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     literal | nameExpression
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_primaryExpression_LiteralParserRuleCall_0_1_or_NameExpressionParserRuleCall_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LT | GT | LTE | GTE
	 *
	 * This ambiguous syntax occurs at:
	 *     a+=additiveExp (ambiguity) a+=additiveExp
	 */
	protected void emit_relationalExp_GTETerminalRuleCall_1_0_3_or_GTTerminalRuleCall_1_0_1_or_LTETerminalRuleCall_1_0_2_or_LTTerminalRuleCall_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STATE?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_stateDefinition_STATETerminalRuleCall_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     raiseStatement?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) SEMI pragmaList (rule start)
	 */
	protected void emit_statement_RaiseStatementParserRuleCall_1_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     FUNCTION?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_terminatorFunctionDefinition_FUNCTIONTerminalRuleCall_12_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     SERVICE?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=codeBlock (ambiguity) SEMI pragmaList (rule end)
	 */
	protected void emit_terminatorServiceDefinition_SERVICETerminalRuleCall_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     namedTypeRef | instanceTypeRef | deprecatedType
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) parameterName COLON parameterMode (ambiguity) (rule start)
	 */
	protected void emit_typeReference_DeprecatedTypeParserRuleCall_3_1_or_InstanceTypeRefParserRuleCall_1_1_or_NamedTypeRefParserRuleCall_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     unaryOperator*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) linkType n2=navigateExpression
	 *     (rule start) (ambiguity) n1=navigateExpression
	 */
	protected void emit_unaryExp_UnaryOperatorParserRuleCall_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     READONLY?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) variableName COLON (ambiguity) t=typeReferenceWithCA
	 */
	protected void emit_variableDeclaration_READONLYTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     LOOP?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=statementList END (ambiguity) (rule end)
	 */
	protected void emit_whileStatement_LOOPTerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
