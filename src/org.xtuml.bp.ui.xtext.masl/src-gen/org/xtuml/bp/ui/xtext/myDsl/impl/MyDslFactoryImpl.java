/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.ui.xtext.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtuml.bp.ui.xtext.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.DEFINITION: return createdefinition();
      case MyDslPackage.TYPE_REFERENCE: return createtypeReference();
      case MyDslPackage.TYPE_REFERENCE_WITH_CA: return createtypeReferenceWithCA();
      case MyDslPackage.CONSTRAINED_ARRAY_TYPE_REF: return createconstrainedArrayTypeRef();
      case MyDslPackage.ARRAY_BOUNDS: return createarrayBounds();
      case MyDslPackage.COLLECTION_TYPE_REF: return createcollectionTypeRef();
      case MyDslPackage.DICT_KEY_TYPE: return createdictKeyType();
      case MyDslPackage.DICT_VALUE_TYPE: return createdictValueType();
      case MyDslPackage.RELATIONSHIP_SPEC: return createrelationshipSpec();
      case MyDslPackage.STATE_TYPE: return createstateType();
      case MyDslPackage.PARAMETER_LIST: return createparameterList();
      case MyDslPackage.PARAMETER_DEFINITION: return createparameterDefinition();
      case MyDslPackage.SERVICE_VISIBILITY: return createserviceVisibility();
      case MyDslPackage.PARAMETER_TYPE: return createparameterType();
      case MyDslPackage.RETURN_TYPE: return createreturnType();
      case MyDslPackage.DOMAIN_SERVICE_DEFINITION: return createdomainServiceDefinition();
      case MyDslPackage.DOMAIN_FUNCTION_DEFINITION: return createdomainFunctionDefinition();
      case MyDslPackage.OBJECT_SERVICE_DEFINITION: return createobjectServiceDefinition();
      case MyDslPackage.TERMINATOR_SERVICE_DEFINITION: return createterminatorServiceDefinition();
      case MyDslPackage.TERMINATOR_FUNCTION_DEFINITION: return createterminatorFunctionDefinition();
      case MyDslPackage.OBJECT_FUNCTION_DEFINITION: return createobjectFunctionDefinition();
      case MyDslPackage.STATE_DEFINITION: return createstateDefinition();
      case MyDslPackage.STATEMENT_LIST: return createstatementList();
      case MyDslPackage.STATEMENT: return createstatement();
      case MyDslPackage.ASSIGN_STATEMENT: return createassignStatement();
      case MyDslPackage.STREAM_VALUE: return createstreamValue();
      case MyDslPackage.STREAM_STATEMENT: return createstreamStatement();
      case MyDslPackage.CALL_STATEMENT: return createcallStatement();
      case MyDslPackage.EXIT_STATEMENT: return createexitStatement();
      case MyDslPackage.RETURN_STATEMENT: return createreturnStatement();
      case MyDslPackage.DELAY_STATEMENT: return createdelayStatement();
      case MyDslPackage.DELETE_STATEMENT: return createdeleteStatement();
      case MyDslPackage.ERASE_STATEMENT: return createeraseStatement();
      case MyDslPackage.LINK_STATEMENT: return createlinkStatement();
      case MyDslPackage.SCHEDULE_STATEMENT: return createscheduleStatement();
      case MyDslPackage.CANCEL_TIMER_STATEMENT: return createcancelTimerStatement();
      case MyDslPackage.GENERATE_STATEMENT: return creategenerateStatement();
      case MyDslPackage.IF_STATEMENT: return createifStatement();
      case MyDslPackage.ELSIF_BLOCK: return createelsifBlock();
      case MyDslPackage.ELSE_BLOCK: return createelseBlock();
      case MyDslPackage.WHILE_STATEMENT: return createwhileStatement();
      case MyDslPackage.CONDITION: return createcondition();
      case MyDslPackage.CASE_STATEMENT: return createcaseStatement();
      case MyDslPackage.CASE_ALTERNATIVE: return createcaseAlternative();
      case MyDslPackage.CHOICE_LIST: return createchoiceList();
      case MyDslPackage.CASE_OTHERS: return createcaseOthers();
      case MyDslPackage.FOR_STATEMENT: return createforStatement();
      case MyDslPackage.LOOP_VARIABLE_SPEC: return createloopVariableSpec();
      case MyDslPackage.CODE_BLOCK_STATEMENT: return createcodeBlockStatement();
      case MyDslPackage.CODE_BLOCK: return createcodeBlock();
      case MyDslPackage.VARIABLE_DECLARATION: return createvariableDeclaration();
      case MyDslPackage.EXCEPTION_HANDLER: return createexceptionHandler();
      case MyDslPackage.OTHER_HANDLER: return createotherHandler();
      case MyDslPackage.FIND_CONDITION: return createfindCondition();
      case MyDslPackage.FIND_LOGICAL_OR: return createfindLogicalOr();
      case MyDslPackage.FIND_LOGICAL_XOR: return createfindLogicalXor();
      case MyDslPackage.FIND_LOGICAL_AND: return createfindLogicalAnd();
      case MyDslPackage.FIND_PRIMARY: return createfindPrimary();
      case MyDslPackage.FIND_UNARY: return createfindUnary();
      case MyDslPackage.FIND_COMPARISON: return createfindComparison();
      case MyDslPackage.FIND_NAME: return createfindName();
      case MyDslPackage.EXPRESSION: return createexpression();
      case MyDslPackage.RANGE_EXPRESSION: return createrangeExpression();
      case MyDslPackage.LOGICAL_OR: return createlogicalOr();
      case MyDslPackage.LOGICAL_XOR: return createlogicalXor();
      case MyDslPackage.LOGICAL_AND: return createlogicalAnd();
      case MyDslPackage.EQUALITY: return createequality();
      case MyDslPackage.RELATIONAL_EXP: return createrelationalExp();
      case MyDslPackage.ADDITIVE_EXP: return createadditiveExp();
      case MyDslPackage.MULT_EXP: return createmultExp();
      case MyDslPackage.UNARY_EXP: return createunaryExp();
      case MyDslPackage.LINK_EXPRESSION: return createlinkExpression();
      case MyDslPackage.NAVIGATE_EXPRESSION: return createnavigateExpression();
      case MyDslPackage.EXTENDED_EXPRESSION: return createextendedExpression();
      case MyDslPackage.CREATE_EXPRESSION: return createcreateExpression();
      case MyDslPackage.CREATE_ARGUMENT_LIST: return createcreateArgumentList();
      case MyDslPackage.CREATE_ARGUMENT: return createcreateArgument();
      case MyDslPackage.FIND_EXPRESSION: return createfindExpression();
      case MyDslPackage.WHERE_CLAUSE: return createwhereClause();
      case MyDslPackage.POSTFIX_EXPRESSION: return createpostfixExpression();
      case MyDslPackage.POSTFIX_NO_CALL_EXPRESSION: return createpostfixNoCallExpression();
      case MyDslPackage.PRIMARY_EXPRESSION: return createprimaryExpression();
      case MyDslPackage.TYPE_NAME_EXPRESSION: return createtypeNameExpression();
      case MyDslPackage.PARENTHESISED_EXPRESSION: return createparenthesisedExpression();
      case MyDslPackage.ARGUMENT_LIST: return createargumentList();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public definition createdefinition()
  {
    definitionImpl definition = new definitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeReference createtypeReference()
  {
    typeReferenceImpl typeReference = new typeReferenceImpl();
    return typeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeReferenceWithCA createtypeReferenceWithCA()
  {
    typeReferenceWithCAImpl typeReferenceWithCA = new typeReferenceWithCAImpl();
    return typeReferenceWithCA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public constrainedArrayTypeRef createconstrainedArrayTypeRef()
  {
    constrainedArrayTypeRefImpl constrainedArrayTypeRef = new constrainedArrayTypeRefImpl();
    return constrainedArrayTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public arrayBounds createarrayBounds()
  {
    arrayBoundsImpl arrayBounds = new arrayBoundsImpl();
    return arrayBounds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public collectionTypeRef createcollectionTypeRef()
  {
    collectionTypeRefImpl collectionTypeRef = new collectionTypeRefImpl();
    return collectionTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dictKeyType createdictKeyType()
  {
    dictKeyTypeImpl dictKeyType = new dictKeyTypeImpl();
    return dictKeyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public dictValueType createdictValueType()
  {
    dictValueTypeImpl dictValueType = new dictValueTypeImpl();
    return dictValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public relationshipSpec createrelationshipSpec()
  {
    relationshipSpecImpl relationshipSpec = new relationshipSpecImpl();
    return relationshipSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stateType createstateType()
  {
    stateTypeImpl stateType = new stateTypeImpl();
    return stateType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameterList createparameterList()
  {
    parameterListImpl parameterList = new parameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameterDefinition createparameterDefinition()
  {
    parameterDefinitionImpl parameterDefinition = new parameterDefinitionImpl();
    return parameterDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public serviceVisibility createserviceVisibility()
  {
    serviceVisibilityImpl serviceVisibility = new serviceVisibilityImpl();
    return serviceVisibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parameterType createparameterType()
  {
    parameterTypeImpl parameterType = new parameterTypeImpl();
    return parameterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public returnType createreturnType()
  {
    returnTypeImpl returnType = new returnTypeImpl();
    return returnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public domainServiceDefinition createdomainServiceDefinition()
  {
    domainServiceDefinitionImpl domainServiceDefinition = new domainServiceDefinitionImpl();
    return domainServiceDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public domainFunctionDefinition createdomainFunctionDefinition()
  {
    domainFunctionDefinitionImpl domainFunctionDefinition = new domainFunctionDefinitionImpl();
    return domainFunctionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public objectServiceDefinition createobjectServiceDefinition()
  {
    objectServiceDefinitionImpl objectServiceDefinition = new objectServiceDefinitionImpl();
    return objectServiceDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public terminatorServiceDefinition createterminatorServiceDefinition()
  {
    terminatorServiceDefinitionImpl terminatorServiceDefinition = new terminatorServiceDefinitionImpl();
    return terminatorServiceDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public terminatorFunctionDefinition createterminatorFunctionDefinition()
  {
    terminatorFunctionDefinitionImpl terminatorFunctionDefinition = new terminatorFunctionDefinitionImpl();
    return terminatorFunctionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public objectFunctionDefinition createobjectFunctionDefinition()
  {
    objectFunctionDefinitionImpl objectFunctionDefinition = new objectFunctionDefinitionImpl();
    return objectFunctionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public stateDefinition createstateDefinition()
  {
    stateDefinitionImpl stateDefinition = new stateDefinitionImpl();
    return stateDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statementList createstatementList()
  {
    statementListImpl statementList = new statementListImpl();
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public statement createstatement()
  {
    statementImpl statement = new statementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public assignStatement createassignStatement()
  {
    assignStatementImpl assignStatement = new assignStatementImpl();
    return assignStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public streamValue createstreamValue()
  {
    streamValueImpl streamValue = new streamValueImpl();
    return streamValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public streamStatement createstreamStatement()
  {
    streamStatementImpl streamStatement = new streamStatementImpl();
    return streamStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public callStatement createcallStatement()
  {
    callStatementImpl callStatement = new callStatementImpl();
    return callStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public exitStatement createexitStatement()
  {
    exitStatementImpl exitStatement = new exitStatementImpl();
    return exitStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public returnStatement createreturnStatement()
  {
    returnStatementImpl returnStatement = new returnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public delayStatement createdelayStatement()
  {
    delayStatementImpl delayStatement = new delayStatementImpl();
    return delayStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public deleteStatement createdeleteStatement()
  {
    deleteStatementImpl deleteStatement = new deleteStatementImpl();
    return deleteStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public eraseStatement createeraseStatement()
  {
    eraseStatementImpl eraseStatement = new eraseStatementImpl();
    return eraseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public linkStatement createlinkStatement()
  {
    linkStatementImpl linkStatement = new linkStatementImpl();
    return linkStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public scheduleStatement createscheduleStatement()
  {
    scheduleStatementImpl scheduleStatement = new scheduleStatementImpl();
    return scheduleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public cancelTimerStatement createcancelTimerStatement()
  {
    cancelTimerStatementImpl cancelTimerStatement = new cancelTimerStatementImpl();
    return cancelTimerStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public generateStatement creategenerateStatement()
  {
    generateStatementImpl generateStatement = new generateStatementImpl();
    return generateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ifStatement createifStatement()
  {
    ifStatementImpl ifStatement = new ifStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public elsifBlock createelsifBlock()
  {
    elsifBlockImpl elsifBlock = new elsifBlockImpl();
    return elsifBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public elseBlock createelseBlock()
  {
    elseBlockImpl elseBlock = new elseBlockImpl();
    return elseBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public whileStatement createwhileStatement()
  {
    whileStatementImpl whileStatement = new whileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public condition createcondition()
  {
    conditionImpl condition = new conditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public caseStatement createcaseStatement()
  {
    caseStatementImpl caseStatement = new caseStatementImpl();
    return caseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public caseAlternative createcaseAlternative()
  {
    caseAlternativeImpl caseAlternative = new caseAlternativeImpl();
    return caseAlternative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public choiceList createchoiceList()
  {
    choiceListImpl choiceList = new choiceListImpl();
    return choiceList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public caseOthers createcaseOthers()
  {
    caseOthersImpl caseOthers = new caseOthersImpl();
    return caseOthers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public forStatement createforStatement()
  {
    forStatementImpl forStatement = new forStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public loopVariableSpec createloopVariableSpec()
  {
    loopVariableSpecImpl loopVariableSpec = new loopVariableSpecImpl();
    return loopVariableSpec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public codeBlockStatement createcodeBlockStatement()
  {
    codeBlockStatementImpl codeBlockStatement = new codeBlockStatementImpl();
    return codeBlockStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public codeBlock createcodeBlock()
  {
    codeBlockImpl codeBlock = new codeBlockImpl();
    return codeBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public variableDeclaration createvariableDeclaration()
  {
    variableDeclarationImpl variableDeclaration = new variableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public exceptionHandler createexceptionHandler()
  {
    exceptionHandlerImpl exceptionHandler = new exceptionHandlerImpl();
    return exceptionHandler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public otherHandler createotherHandler()
  {
    otherHandlerImpl otherHandler = new otherHandlerImpl();
    return otherHandler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findCondition createfindCondition()
  {
    findConditionImpl findCondition = new findConditionImpl();
    return findCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findLogicalOr createfindLogicalOr()
  {
    findLogicalOrImpl findLogicalOr = new findLogicalOrImpl();
    return findLogicalOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findLogicalXor createfindLogicalXor()
  {
    findLogicalXorImpl findLogicalXor = new findLogicalXorImpl();
    return findLogicalXor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findLogicalAnd createfindLogicalAnd()
  {
    findLogicalAndImpl findLogicalAnd = new findLogicalAndImpl();
    return findLogicalAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findPrimary createfindPrimary()
  {
    findPrimaryImpl findPrimary = new findPrimaryImpl();
    return findPrimary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findUnary createfindUnary()
  {
    findUnaryImpl findUnary = new findUnaryImpl();
    return findUnary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findComparison createfindComparison()
  {
    findComparisonImpl findComparison = new findComparisonImpl();
    return findComparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findName createfindName()
  {
    findNameImpl findName = new findNameImpl();
    return findName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public expression createexpression()
  {
    expressionImpl expression = new expressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public rangeExpression createrangeExpression()
  {
    rangeExpressionImpl rangeExpression = new rangeExpressionImpl();
    return rangeExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public logicalOr createlogicalOr()
  {
    logicalOrImpl logicalOr = new logicalOrImpl();
    return logicalOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public logicalXor createlogicalXor()
  {
    logicalXorImpl logicalXor = new logicalXorImpl();
    return logicalXor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public logicalAnd createlogicalAnd()
  {
    logicalAndImpl logicalAnd = new logicalAndImpl();
    return logicalAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public equality createequality()
  {
    equalityImpl equality = new equalityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public relationalExp createrelationalExp()
  {
    relationalExpImpl relationalExp = new relationalExpImpl();
    return relationalExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public additiveExp createadditiveExp()
  {
    additiveExpImpl additiveExp = new additiveExpImpl();
    return additiveExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public multExp createmultExp()
  {
    multExpImpl multExp = new multExpImpl();
    return multExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public unaryExp createunaryExp()
  {
    unaryExpImpl unaryExp = new unaryExpImpl();
    return unaryExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public linkExpression createlinkExpression()
  {
    linkExpressionImpl linkExpression = new linkExpressionImpl();
    return linkExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public navigateExpression createnavigateExpression()
  {
    navigateExpressionImpl navigateExpression = new navigateExpressionImpl();
    return navigateExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public extendedExpression createextendedExpression()
  {
    extendedExpressionImpl extendedExpression = new extendedExpressionImpl();
    return extendedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public createExpression createcreateExpression()
  {
    createExpressionImpl createExpression = new createExpressionImpl();
    return createExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public createArgumentList createcreateArgumentList()
  {
    createArgumentListImpl createArgumentList = new createArgumentListImpl();
    return createArgumentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public createArgument createcreateArgument()
  {
    createArgumentImpl createArgument = new createArgumentImpl();
    return createArgument;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public findExpression createfindExpression()
  {
    findExpressionImpl findExpression = new findExpressionImpl();
    return findExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public whereClause createwhereClause()
  {
    whereClauseImpl whereClause = new whereClauseImpl();
    return whereClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public postfixExpression createpostfixExpression()
  {
    postfixExpressionImpl postfixExpression = new postfixExpressionImpl();
    return postfixExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public postfixNoCallExpression createpostfixNoCallExpression()
  {
    postfixNoCallExpressionImpl postfixNoCallExpression = new postfixNoCallExpressionImpl();
    return postfixNoCallExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public primaryExpression createprimaryExpression()
  {
    primaryExpressionImpl primaryExpression = new primaryExpressionImpl();
    return primaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeNameExpression createtypeNameExpression()
  {
    typeNameExpressionImpl typeNameExpression = new typeNameExpressionImpl();
    return typeNameExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public parenthesisedExpression createparenthesisedExpression()
  {
    parenthesisedExpressionImpl parenthesisedExpression = new parenthesisedExpressionImpl();
    return parenthesisedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public argumentList createargumentList()
  {
    argumentListImpl argumentList = new argumentListImpl();
    return argumentList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
