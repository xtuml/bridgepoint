/*
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.ui.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MASLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectServiceDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectFunctionDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStateDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDomainServiceDefinitionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDomainFunctionDefinitionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTerminatorServiceDefinitionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cTerminatorFunctionDefinitionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//definition:
		//	objectServiceDefinition
		//	| objectFunctionDefinition
		//	| stateDefinition
		//	| domainServiceDefinition
		//	| domainFunctionDefinition
		//	| terminatorServiceDefinition
		//	| terminatorFunctionDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//objectServiceDefinition | objectFunctionDefinition | stateDefinition | domainServiceDefinition |
		//domainFunctionDefinition | terminatorServiceDefinition | terminatorFunctionDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//objectServiceDefinition
		public RuleCall getObjectServiceDefinitionParserRuleCall_0() { return cObjectServiceDefinitionParserRuleCall_0; }
		
		//objectFunctionDefinition
		public RuleCall getObjectFunctionDefinitionParserRuleCall_1() { return cObjectFunctionDefinitionParserRuleCall_1; }
		
		//stateDefinition
		public RuleCall getStateDefinitionParserRuleCall_2() { return cStateDefinitionParserRuleCall_2; }
		
		//domainServiceDefinition
		public RuleCall getDomainServiceDefinitionParserRuleCall_3() { return cDomainServiceDefinitionParserRuleCall_3; }
		
		//domainFunctionDefinition
		public RuleCall getDomainFunctionDefinitionParserRuleCall_4() { return cDomainFunctionDefinitionParserRuleCall_4; }
		
		//terminatorServiceDefinition
		public RuleCall getTerminatorServiceDefinitionParserRuleCall_5() { return cTerminatorServiceDefinitionParserRuleCall_5; }
		
		//terminatorFunctionDefinition
		public RuleCall getTerminatorFunctionDefinitionParserRuleCall_6() { return cTerminatorFunctionDefinitionParserRuleCall_6; }
	}
	public class DomainNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.domainName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Domain Definition
		////---------------------------------------------------------
		//domainName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ExceptionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.exceptionName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Exception Declaration
		////---------------------------------------------------------
		//exceptionName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.typeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cNamedTypeRefParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeReferenceAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cInstanceTypeRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cCAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCCollectionTypeRefParserRuleCall_2_0 = (RuleCall)cCAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cTypeReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cDeprecatedTypeParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		////---------------------------------------------------------
		//// Type Reference
		////---------------------------------------------------------
		//typeReference:
		//	{typeReference} namedTypeRef
		//	| {typeReference} instanceTypeRef
		//	| c=collectionTypeRef
		//	| {typeReference} deprecatedType;
		@Override public ParserRule getRule() { return rule; }
		
		//{typeReference} namedTypeRef | {typeReference} instanceTypeRef | c=collectionTypeRef | {typeReference} deprecatedType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{typeReference} namedTypeRef
		public Group getGroup_0() { return cGroup_0; }
		
		//{typeReference}
		public Action getTypeReferenceAction_0_0() { return cTypeReferenceAction_0_0; }
		
		//namedTypeRef
		public RuleCall getNamedTypeRefParserRuleCall_0_1() { return cNamedTypeRefParserRuleCall_0_1; }
		
		//{typeReference} instanceTypeRef
		public Group getGroup_1() { return cGroup_1; }
		
		//{typeReference}
		public Action getTypeReferenceAction_1_0() { return cTypeReferenceAction_1_0; }
		
		//instanceTypeRef
		public RuleCall getInstanceTypeRefParserRuleCall_1_1() { return cInstanceTypeRefParserRuleCall_1_1; }
		
		//c=collectionTypeRef
		public Assignment getCAssignment_2() { return cCAssignment_2; }
		
		//collectionTypeRef
		public RuleCall getCCollectionTypeRefParserRuleCall_2_0() { return cCCollectionTypeRefParserRuleCall_2_0; }
		
		//{typeReference} deprecatedType
		public Group getGroup_3() { return cGroup_3; }
		
		//{typeReference}
		public Action getTypeReferenceAction_3_0() { return cTypeReferenceAction_3_0; }
		
		//deprecatedType
		public RuleCall getDeprecatedTypeParserRuleCall_3_1() { return cDeprecatedTypeParserRuleCall_3_1; }
	}
	public class TypeReferenceWithCAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.typeReferenceWithCA");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstrainedArrayTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//typeReferenceWithCA:
		//	typeReference
		//	| constrainedArrayTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference | constrainedArrayTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//typeReference
		public RuleCall getTypeReferenceParserRuleCall_0() { return cTypeReferenceParserRuleCall_0; }
		
		//constrainedArrayTypeRef
		public RuleCall getConstrainedArrayTypeRefParserRuleCall_1() { return cConstrainedArrayTypeRefParserRuleCall_1; }
	}
	public class DeprecatedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.deprecatedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINSTANCETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSERVICETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//deprecatedType:
		//	INSTANCE
		//	| EVENT
		//	| SERVICE;
		@Override public ParserRule getRule() { return rule; }
		
		//INSTANCE | EVENT | SERVICE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSTANCE
		public RuleCall getINSTANCETerminalRuleCall_0() { return cINSTANCETerminalRuleCall_0; }
		
		//EVENT
		public RuleCall getEVENTTerminalRuleCall_1() { return cEVENTTerminalRuleCall_1; }
		
		//SERVICE
		public RuleCall getSERVICETerminalRuleCall_2() { return cSERVICETerminalRuleCall_2; }
	}
	public class QualifiedObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.qualifiedObjectName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cDomainNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSCOPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cObjectNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//qualifiedObjectName:
		//	(domainName SCOPE)? objectName;
		@Override public ParserRule getRule() { return rule; }
		
		//(domainName SCOPE)? objectName
		public Group getGroup() { return cGroup; }
		
		//(domainName SCOPE)?
		public Group getGroup_0() { return cGroup_0; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_0_0() { return cDomainNameParserRuleCall_0_0; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_0_1() { return cSCOPETerminalRuleCall_0_1; }
		
		//objectName
		public RuleCall getObjectNameParserRuleCall_1() { return cObjectNameParserRuleCall_1; }
	}
	public class InstanceTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.instanceTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANONYMOUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINSTANCETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cOFTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cQualifiedObjectNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//instanceTypeRef:
		//	ANONYMOUS? INSTANCE OF qualifiedObjectName;
		@Override public ParserRule getRule() { return rule; }
		
		//ANONYMOUS? INSTANCE OF qualifiedObjectName
		public Group getGroup() { return cGroup; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_0() { return cANONYMOUSTerminalRuleCall_0; }
		
		//INSTANCE
		public RuleCall getINSTANCETerminalRuleCall_1() { return cINSTANCETerminalRuleCall_1; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_2() { return cOFTerminalRuleCall_2; }
		
		//qualifiedObjectName
		public RuleCall getQualifiedObjectNameParserRuleCall_3() { return cQualifiedObjectNameParserRuleCall_3; }
	}
	public class NamedTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.namedTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cANONYMOUSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cSCOPETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//namedTypeRef:
		//	ANONYMOUS? (domainName SCOPE)? typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//ANONYMOUS? (domainName SCOPE)? typeName
		public Group getGroup() { return cGroup; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_0() { return cANONYMOUSTerminalRuleCall_0; }
		
		//(domainName SCOPE)?
		public Group getGroup_1() { return cGroup_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_1_0() { return cDomainNameParserRuleCall_1_0; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_1_1() { return cSCOPETerminalRuleCall_1_1; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
	}
	public class UserDefinedTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.userDefinedTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cDomainNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSCOPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//userDefinedTypeRef:
		//	(domainName SCOPE)? typeName;
		@Override public ParserRule getRule() { return rule; }
		
		//(domainName SCOPE)? typeName
		public Group getGroup() { return cGroup; }
		
		//(domainName SCOPE)?
		public Group getGroup_0() { return cGroup_0; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_0_0() { return cDomainNameParserRuleCall_0_0; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_0_1() { return cSCOPETerminalRuleCall_0_1; }
		
		//typeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class ConstrainedArrayTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.constrainedArrayTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUserDefinedTypeRefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArrayBoundsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//constrainedArrayTypeRef:
		//	userDefinedTypeRef arrayBounds;
		@Override public ParserRule getRule() { return rule; }
		
		//userDefinedTypeRef arrayBounds
		public Group getGroup() { return cGroup; }
		
		//userDefinedTypeRef
		public RuleCall getUserDefinedTypeRefParserRuleCall_0() { return cUserDefinedTypeRefParserRuleCall_0; }
		
		//arrayBounds
		public RuleCall getArrayBoundsParserRuleCall_1() { return cArrayBoundsParserRuleCall_1; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.typeName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//typeName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ArrayBoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.arrayBounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//arrayBounds:
		//	LPAREN e=expression RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//LPAREN e=expression RPAREN
		public Group getGroup() { return cGroup; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0() { return cLPARENTerminalRuleCall_0; }
		
		//e=expression
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_0() { return cEExpressionParserRuleCall_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2() { return cRPARENTerminalRuleCall_2; }
	}
	public class CollectionTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.collectionTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cANONYMOUSTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSEQUENCETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_0_2_0 = (RuleCall)cGroup_0_2.eContents().get(0);
		private final Assignment cEAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_0_2_1_0 = (RuleCall)cEAssignment_0_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_0_2_2 = (RuleCall)cGroup_0_2.eContents().get(2);
		private final RuleCall cOFTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Assignment cTAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTTypeReferenceParserRuleCall_0_4_0 = (RuleCall)cTAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cANONYMOUSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cARRAYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cAAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAArrayBoundsParserRuleCall_1_2_0 = (RuleCall)cAAssignment_1_2.eContents().get(0);
		private final RuleCall cOFTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Assignment cTAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTTypeReferenceParserRuleCall_1_4_0 = (RuleCall)cTAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cANONYMOUSTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cSETTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cOFTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Assignment cTAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTTypeReferenceParserRuleCall_2_3_0 = (RuleCall)cTAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cANONYMOUSTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cBAGTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cOFTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Assignment cTAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cTTypeReferenceParserRuleCall_3_3_0 = (RuleCall)cTAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCollectionTypeRefAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cANONYMOUSTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cDICTIONARYTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final RuleCall cDictKeyTypeParserRuleCall_4_3_0 = (RuleCall)cGroup_4_3.eContents().get(0);
		private final RuleCall cOFTerminalRuleCall_4_3_1 = (RuleCall)cGroup_4_3.eContents().get(1);
		private final Assignment cDAssignment_4_3_2 = (Assignment)cGroup_4_3.eContents().get(2);
		private final RuleCall cDDictValueTypeParserRuleCall_4_3_2_0 = (RuleCall)cDAssignment_4_3_2.eContents().get(0);
		
		//collectionTypeRef:
		//	ANONYMOUS? SEQUENCE (LPAREN e=expression RPAREN)? OF t=typeReference
		//	| ANONYMOUS? ARRAY a=arrayBounds OF t=typeReference
		//	| ANONYMOUS? SET OF t=typeReference
		//	| ANONYMOUS? BAG OF t=typeReference
		//	| {collectionTypeRef} ANONYMOUS? DICTIONARY (dictKeyType? OF d=dictValueType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ANONYMOUS? SEQUENCE (LPAREN e=expression RPAREN)? OF t=typeReference | ANONYMOUS? ARRAY a=arrayBounds OF t=typeReference
		//| ANONYMOUS? SET OF t=typeReference | ANONYMOUS? BAG OF t=typeReference | {collectionTypeRef} ANONYMOUS? DICTIONARY
		//(dictKeyType? OF d=dictValueType)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ANONYMOUS? SEQUENCE (LPAREN e=expression RPAREN)? OF t=typeReference
		public Group getGroup_0() { return cGroup_0; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_0_0() { return cANONYMOUSTerminalRuleCall_0_0; }
		
		//SEQUENCE
		public RuleCall getSEQUENCETerminalRuleCall_0_1() { return cSEQUENCETerminalRuleCall_0_1; }
		
		//(LPAREN e=expression RPAREN)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_2_0() { return cLPARENTerminalRuleCall_0_2_0; }
		
		//e=expression
		public Assignment getEAssignment_0_2_1() { return cEAssignment_0_2_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_0_2_1_0() { return cEExpressionParserRuleCall_0_2_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_2_2() { return cRPARENTerminalRuleCall_0_2_2; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_0_3() { return cOFTerminalRuleCall_0_3; }
		
		//t=typeReference
		public Assignment getTAssignment_0_4() { return cTAssignment_0_4; }
		
		//typeReference
		public RuleCall getTTypeReferenceParserRuleCall_0_4_0() { return cTTypeReferenceParserRuleCall_0_4_0; }
		
		//ANONYMOUS? ARRAY a=arrayBounds OF t=typeReference
		public Group getGroup_1() { return cGroup_1; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_1_0() { return cANONYMOUSTerminalRuleCall_1_0; }
		
		//ARRAY
		public RuleCall getARRAYTerminalRuleCall_1_1() { return cARRAYTerminalRuleCall_1_1; }
		
		//a=arrayBounds
		public Assignment getAAssignment_1_2() { return cAAssignment_1_2; }
		
		//arrayBounds
		public RuleCall getAArrayBoundsParserRuleCall_1_2_0() { return cAArrayBoundsParserRuleCall_1_2_0; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_1_3() { return cOFTerminalRuleCall_1_3; }
		
		//t=typeReference
		public Assignment getTAssignment_1_4() { return cTAssignment_1_4; }
		
		//typeReference
		public RuleCall getTTypeReferenceParserRuleCall_1_4_0() { return cTTypeReferenceParserRuleCall_1_4_0; }
		
		//ANONYMOUS? SET OF t=typeReference
		public Group getGroup_2() { return cGroup_2; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_2_0() { return cANONYMOUSTerminalRuleCall_2_0; }
		
		//SET
		public RuleCall getSETTerminalRuleCall_2_1() { return cSETTerminalRuleCall_2_1; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_2_2() { return cOFTerminalRuleCall_2_2; }
		
		//t=typeReference
		public Assignment getTAssignment_2_3() { return cTAssignment_2_3; }
		
		//typeReference
		public RuleCall getTTypeReferenceParserRuleCall_2_3_0() { return cTTypeReferenceParserRuleCall_2_3_0; }
		
		//ANONYMOUS? BAG OF t=typeReference
		public Group getGroup_3() { return cGroup_3; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_3_0() { return cANONYMOUSTerminalRuleCall_3_0; }
		
		//BAG
		public RuleCall getBAGTerminalRuleCall_3_1() { return cBAGTerminalRuleCall_3_1; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_3_2() { return cOFTerminalRuleCall_3_2; }
		
		//t=typeReference
		public Assignment getTAssignment_3_3() { return cTAssignment_3_3; }
		
		//typeReference
		public RuleCall getTTypeReferenceParserRuleCall_3_3_0() { return cTTypeReferenceParserRuleCall_3_3_0; }
		
		//{collectionTypeRef} ANONYMOUS? DICTIONARY (dictKeyType? OF d=dictValueType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//{collectionTypeRef}
		public Action getCollectionTypeRefAction_4_0() { return cCollectionTypeRefAction_4_0; }
		
		//ANONYMOUS?
		public RuleCall getANONYMOUSTerminalRuleCall_4_1() { return cANONYMOUSTerminalRuleCall_4_1; }
		
		//DICTIONARY
		public RuleCall getDICTIONARYTerminalRuleCall_4_2() { return cDICTIONARYTerminalRuleCall_4_2; }
		
		//(dictKeyType? OF d=dictValueType)?
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//dictKeyType?
		public RuleCall getDictKeyTypeParserRuleCall_4_3_0() { return cDictKeyTypeParserRuleCall_4_3_0; }
		
		//OF
		public RuleCall getOFTerminalRuleCall_4_3_1() { return cOFTerminalRuleCall_4_3_1; }
		
		//d=dictValueType
		public Assignment getDAssignment_4_3_2() { return cDAssignment_4_3_2; }
		
		//dictValueType
		public RuleCall getDDictValueTypeParserRuleCall_4_3_2_0() { return cDDictValueTypeParserRuleCall_4_3_2_0; }
	}
	public class DictKeyTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.dictKeyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNNamedTypeRefParserRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Assignment cIAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIInstanceTypeRefParserRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		
		//dictKeyType:
		//	n=namedTypeRef
		//	| i=instanceTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//n=namedTypeRef | i=instanceTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//n=namedTypeRef
		public Assignment getNAssignment_0() { return cNAssignment_0; }
		
		//namedTypeRef
		public RuleCall getNNamedTypeRefParserRuleCall_0_0() { return cNNamedTypeRefParserRuleCall_0_0; }
		
		//i=instanceTypeRef
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//instanceTypeRef
		public RuleCall getIInstanceTypeRefParserRuleCall_1_0() { return cIInstanceTypeRefParserRuleCall_1_0; }
	}
	public class DictValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.dictValueType");
		private final Assignment cTAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTTypeReferenceParserRuleCall_0 = (RuleCall)cTAssignment.eContents().get(0);
		
		//dictValueType:
		//	t=typeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//t=typeReference
		public Assignment getTAssignment() { return cTAssignment; }
		
		//typeReference
		public RuleCall getTTypeReferenceParserRuleCall_0() { return cTTypeReferenceParserRuleCall_0; }
	}
	public class TerminatorNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.terminatorName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Terminator Definition
		////---------------------------------------------------------
		//terminatorName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.objectName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////---------------------------------------------------------
		//// Object Definition
		////---------------------------------------------------------
		//objectName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class AttributeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.attributeName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//attributeName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class RelationshipSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.relationshipSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRRELATIONSHIPNAMETerminalRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRIdentifierParserRuleCall_1_1_0 = (RuleCall)cRAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cRAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRObjectNameParserRuleCall_1_2_1_0 = (RuleCall)cRAssignment_1_2_1.eContents().get(0);
		
		//relationshipSpec:
		//	r+=RELATIONSHIPNAME (DOT r+=identifier (DOT r+=objectName)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//r+=RELATIONSHIPNAME (DOT r+=identifier (DOT r+=objectName)?)?
		public Group getGroup() { return cGroup; }
		
		//r+=RELATIONSHIPNAME
		public Assignment getRAssignment_0() { return cRAssignment_0; }
		
		//RELATIONSHIPNAME
		public RuleCall getRRELATIONSHIPNAMETerminalRuleCall_0_0() { return cRRELATIONSHIPNAMETerminalRuleCall_0_0; }
		
		//(DOT r+=identifier (DOT r+=objectName)?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0() { return cDOTTerminalRuleCall_1_0; }
		
		//r+=identifier
		public Assignment getRAssignment_1_1() { return cRAssignment_1_1; }
		
		//identifier
		public RuleCall getRIdentifierParserRuleCall_1_1_0() { return cRIdentifierParserRuleCall_1_1_0; }
		
		//(DOT r+=objectName)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_2_0() { return cDOTTerminalRuleCall_1_2_0; }
		
		//r+=objectName
		public Assignment getRAssignment_1_2_1() { return cRAssignment_1_2_1; }
		
		//objectName
		public RuleCall getRObjectNameParserRuleCall_1_2_1_0() { return cRObjectNameParserRuleCall_1_2_1_0; }
	}
	public class ServiceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.serviceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINSTANCETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDEFERREDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRELATIONSHIPNAMETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//serviceType:
		//	(INSTANCE (DEFERRED LPAREN RELATIONSHIPNAME RPAREN)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(INSTANCE (DEFERRED LPAREN RELATIONSHIPNAME RPAREN)?)?
		public Group getGroup() { return cGroup; }
		
		//INSTANCE
		public RuleCall getINSTANCETerminalRuleCall_0() { return cINSTANCETerminalRuleCall_0; }
		
		//(DEFERRED LPAREN RELATIONSHIPNAME RPAREN)?
		public Group getGroup_1() { return cGroup_1; }
		
		//DEFERRED
		public RuleCall getDEFERREDTerminalRuleCall_1_0() { return cDEFERREDTerminalRuleCall_1_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_1() { return cLPARENTerminalRuleCall_1_1; }
		
		//RELATIONSHIPNAME
		public RuleCall getRELATIONSHIPNAMETerminalRuleCall_1_2() { return cRELATIONSHIPNAMETerminalRuleCall_1_2; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_3() { return cRPARENTerminalRuleCall_1_3; }
	}
	public class EventNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.eventName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//eventName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class StateNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.stateName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//stateName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class StateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.stateType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSAlternatives_1_0 = (Alternatives)cSAssignment_1.eContents().get(0);
		private final RuleCall cSASSIGNERTerminalRuleCall_1_0_0 = (RuleCall)cSAlternatives_1_0.eContents().get(0);
		private final RuleCall cSAssignerStartParserRuleCall_1_0_1 = (RuleCall)cSAlternatives_1_0.eContents().get(1);
		private final RuleCall cSCREATIONTerminalRuleCall_1_0_2 = (RuleCall)cSAlternatives_1_0.eContents().get(2);
		private final RuleCall cSTERMINALTerminalRuleCall_1_0_3 = (RuleCall)cSAlternatives_1_0.eContents().get(3);
		
		//stateType:
		//	{stateType} s=(ASSIGNER
		//	| assignerStart
		//	| CREATION
		//	| TERMINAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{stateType} s=(ASSIGNER | assignerStart | CREATION | TERMINAL)?
		public Group getGroup() { return cGroup; }
		
		//{stateType}
		public Action getStateTypeAction_0() { return cStateTypeAction_0; }
		
		//s=(ASSIGNER | assignerStart | CREATION | TERMINAL)?
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//(ASSIGNER | assignerStart | CREATION | TERMINAL)
		public Alternatives getSAlternatives_1_0() { return cSAlternatives_1_0; }
		
		//ASSIGNER
		public RuleCall getSASSIGNERTerminalRuleCall_1_0_0() { return cSASSIGNERTerminalRuleCall_1_0_0; }
		
		//assignerStart
		public RuleCall getSAssignerStartParserRuleCall_1_0_1() { return cSAssignerStartParserRuleCall_1_0_1; }
		
		//CREATION
		public RuleCall getSCREATIONTerminalRuleCall_1_0_2() { return cSCREATIONTerminalRuleCall_1_0_2; }
		
		//TERMINAL
		public RuleCall getSTERMINALTerminalRuleCall_1_0_3() { return cSTERMINALTerminalRuleCall_1_0_3; }
	}
	public class AssignerStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.assignerStart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cASSIGNERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSTARTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//assignerStart:
		//	ASSIGNER START;
		@Override public ParserRule getRule() { return rule; }
		
		//ASSIGNER START
		public Group getGroup() { return cGroup; }
		
		//ASSIGNER
		public RuleCall getASSIGNERTerminalRuleCall_0() { return cASSIGNERTerminalRuleCall_0; }
		
		//START
		public RuleCall getSTARTTerminalRuleCall_1() { return cSTARTTerminalRuleCall_1; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterListAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cPAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPParameterDefinitionParserRuleCall_2_0 = (RuleCall)cPAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cCOMMATerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cPAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPParameterDefinitionParserRuleCall_3_1_0 = (RuleCall)cPAssignment_3_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////---------------------------------------------------------
		//// Service Declaration
		////---------------------------------------------------------
		//parameterList:
		//	{parameterList} LPAREN
		//	p+=parameterDefinition? (COMMA p+=parameterDefinition)*
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{parameterList} LPAREN p+=parameterDefinition? (COMMA p+=parameterDefinition)* RPAREN
		public Group getGroup() { return cGroup; }
		
		//{parameterList}
		public Action getParameterListAction_0() { return cParameterListAction_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//p+=parameterDefinition?
		public Assignment getPAssignment_2() { return cPAssignment_2; }
		
		//parameterDefinition
		public RuleCall getPParameterDefinitionParserRuleCall_2_0() { return cPParameterDefinitionParserRuleCall_2_0; }
		
		//(COMMA p+=parameterDefinition)*
		public Group getGroup_3() { return cGroup_3; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_0() { return cCOMMATerminalRuleCall_3_0; }
		
		//p+=parameterDefinition
		public Assignment getPAssignment_3_1() { return cPAssignment_3_1; }
		
		//parameterDefinition
		public RuleCall getPParameterDefinitionParserRuleCall_3_1_0() { return cPParameterDefinitionParserRuleCall_3_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }
	}
	public class ParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cParameterModeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cParameterTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//parameterDefinition:
		//	parameterName COLON parameterMode parameterType;
		@Override public ParserRule getRule() { return rule; }
		
		//parameterName COLON parameterMode parameterType
		public Group getGroup() { return cGroup; }
		
		//parameterName
		public RuleCall getParameterNameParserRuleCall_0() { return cParameterNameParserRuleCall_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }
		
		//parameterMode
		public RuleCall getParameterModeParserRuleCall_2() { return cParameterModeParserRuleCall_2; }
		
		//parameterType
		public RuleCall getParameterTypeParserRuleCall_3() { return cParameterTypeParserRuleCall_3; }
	}
	public class ServiceVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.serviceVisibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cServiceVisibilityAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cVAlternatives_1_0 = (Alternatives)cVAssignment_1.eContents().get(0);
		private final RuleCall cVPRIVATETerminalRuleCall_1_0_0 = (RuleCall)cVAlternatives_1_0.eContents().get(0);
		private final RuleCall cVPUBLICTerminalRuleCall_1_0_1 = (RuleCall)cVAlternatives_1_0.eContents().get(1);
		
		//serviceVisibility:
		//	{serviceVisibility} v=(PRIVATE
		//	| PUBLIC)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{serviceVisibility} v=(PRIVATE | PUBLIC)?
		public Group getGroup() { return cGroup; }
		
		//{serviceVisibility}
		public Action getServiceVisibilityAction_0() { return cServiceVisibilityAction_0; }
		
		//v=(PRIVATE | PUBLIC)?
		public Assignment getVAssignment_1() { return cVAssignment_1; }
		
		//(PRIVATE | PUBLIC)
		public Alternatives getVAlternatives_1_0() { return cVAlternatives_1_0; }
		
		//PRIVATE
		public RuleCall getVPRIVATETerminalRuleCall_1_0_0() { return cVPRIVATETerminalRuleCall_1_0_0; }
		
		//PUBLIC
		public RuleCall getVPUBLICTerminalRuleCall_1_0_1() { return cVPUBLICTerminalRuleCall_1_0_1; }
	}
	public class ParameterModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parameterMode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOUTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//parameterMode:
		//	IN
		//	| OUT;
		@Override public ParserRule getRule() { return rule; }
		
		//IN | OUT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN
		public RuleCall getINTerminalRuleCall_0() { return cINTerminalRuleCall_0; }
		
		//OUT
		public RuleCall getOUTTerminalRuleCall_1() { return cOUTTerminalRuleCall_1; }
	}
	public class ServiceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.serviceName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//serviceName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ParameterNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parameterName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//parameterName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parameterType");
		private final RuleCall cTypeReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//parameterType:
		//	typeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference
		public RuleCall getTypeReferenceParserRuleCall() { return cTypeReferenceParserRuleCall; }
	}
	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.returnType");
		private final RuleCall cTypeReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//returnType:
		//	typeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//typeReference
		public RuleCall getTypeReferenceParserRuleCall() { return cTypeReferenceParserRuleCall; }
	}
	public class PragmaListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.pragmaList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPragmaDefParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////---------------------------------------------------------
		//// Pragma Definition
		////---------------------------------------------------------
		//pragmaList:
		//	(pragmaDef SEMI)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(pragmaDef SEMI)*
		public Group getGroup() { return cGroup; }
		
		//pragmaDef
		public RuleCall getPragmaDefParserRuleCall_0() { return cPragmaDefParserRuleCall_0; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_1() { return cSEMITerminalRuleCall_1; }
	}
	public class PragmaDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.pragmaDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRAGMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPragmaNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cPragmaValueParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final RuleCall cPragmaValueParserRuleCall_3_1_1 = (RuleCall)cGroup_3_1.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//pragmaDef:
		//	PRAGMA pragmaName
		//	LPAREN (pragmaValue (COMMA pragmaValue)*)?
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//PRAGMA pragmaName LPAREN (pragmaValue (COMMA pragmaValue)*)? RPAREN
		public Group getGroup() { return cGroup; }
		
		//PRAGMA
		public RuleCall getPRAGMATerminalRuleCall_0() { return cPRAGMATerminalRuleCall_0; }
		
		//pragmaName
		public RuleCall getPragmaNameParserRuleCall_1() { return cPragmaNameParserRuleCall_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }
		
		//(pragmaValue (COMMA pragmaValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//pragmaValue
		public RuleCall getPragmaValueParserRuleCall_3_0() { return cPragmaValueParserRuleCall_3_0; }
		
		//(COMMA pragmaValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_3_1_0() { return cCOMMATerminalRuleCall_3_1_0; }
		
		//pragmaValue
		public RuleCall getPragmaValueParserRuleCall_3_1_1() { return cPragmaValueParserRuleCall_3_1_1; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }
	}
	public class PragmaValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.pragmaValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//pragmaValue:
		//	identifier
		//	| literal;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier | literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}
	public class PragmaNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.pragmaName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//pragmaName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class DomainServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.domainServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSServiceVisibilityParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cSERVICETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSCOPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cServiceNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPParameterListParserRuleCall_5_0 = (RuleCall)cPAssignment_5.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cCAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCCodeBlockParserRuleCall_7_0 = (RuleCall)cCAssignment_7.eContents().get(0);
		private final RuleCall cSERVICETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cSEMITerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cPragmaListParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		////---------------------------------------------------------
		//// Dynamic Behaviour
		////---------------------------------------------------------
		//domainServiceDefinition:
		//	s=serviceVisibility SERVICE
		//	domainName SCOPE serviceName
		//	p=parameterList IS
		//	c=codeBlock
		//	SERVICE? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=serviceVisibility SERVICE domainName SCOPE serviceName p=parameterList IS c=codeBlock SERVICE? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=serviceVisibility
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//serviceVisibility
		public RuleCall getSServiceVisibilityParserRuleCall_0_0() { return cSServiceVisibilityParserRuleCall_0_0; }
		
		//SERVICE
		public RuleCall getSERVICETerminalRuleCall_1() { return cSERVICETerminalRuleCall_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_2() { return cDomainNameParserRuleCall_2; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_3() { return cSCOPETerminalRuleCall_3; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_4() { return cServiceNameParserRuleCall_4; }
		
		//p=parameterList
		public Assignment getPAssignment_5() { return cPAssignment_5; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_5_0() { return cPParameterListParserRuleCall_5_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_6() { return cISTerminalRuleCall_6; }
		
		//c=codeBlock
		public Assignment getCAssignment_7() { return cCAssignment_7; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_7_0() { return cCCodeBlockParserRuleCall_7_0; }
		
		//SERVICE?
		public RuleCall getSERVICETerminalRuleCall_8() { return cSERVICETerminalRuleCall_8; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_9() { return cSEMITerminalRuleCall_9; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_10() { return cPragmaListParserRuleCall_10; }
	}
	public class DomainFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.domainFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSServiceVisibilityParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSCOPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cServiceNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cPAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPParameterListParserRuleCall_5_0 = (RuleCall)cPAssignment_5.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cRAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRReturnTypeParserRuleCall_7_0 = (RuleCall)cRAssignment_7.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cCAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCCodeBlockParserRuleCall_9_0 = (RuleCall)cCAssignment_9.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMITerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cPragmaListParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//domainFunctionDefinition:
		//	s=serviceVisibility FUNCTION
		//	domainName SCOPE serviceName
		//	p=parameterList
		//	RETURN r=returnType IS c=codeBlock
		//	FUNCTION? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=serviceVisibility FUNCTION domainName SCOPE serviceName p=parameterList RETURN r=returnType IS c=codeBlock FUNCTION?
		//SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=serviceVisibility
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//serviceVisibility
		public RuleCall getSServiceVisibilityParserRuleCall_0_0() { return cSServiceVisibilityParserRuleCall_0_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONTerminalRuleCall_1() { return cFUNCTIONTerminalRuleCall_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_2() { return cDomainNameParserRuleCall_2; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_3() { return cSCOPETerminalRuleCall_3; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_4() { return cServiceNameParserRuleCall_4; }
		
		//p=parameterList
		public Assignment getPAssignment_5() { return cPAssignment_5; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_5_0() { return cPParameterListParserRuleCall_5_0; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_6() { return cRETURNTerminalRuleCall_6; }
		
		//r=returnType
		public Assignment getRAssignment_7() { return cRAssignment_7; }
		
		//returnType
		public RuleCall getRReturnTypeParserRuleCall_7_0() { return cRReturnTypeParserRuleCall_7_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_8() { return cISTerminalRuleCall_8; }
		
		//c=codeBlock
		public Assignment getCAssignment_9() { return cCAssignment_9; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_9_0() { return cCCodeBlockParserRuleCall_9_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONTerminalRuleCall_10() { return cFUNCTIONTerminalRuleCall_10; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_11() { return cSEMITerminalRuleCall_11; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_12() { return cPragmaListParserRuleCall_12; }
	}
	public class ObjectServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.objectServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSServiceVisibilityParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cINSTANCETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSERVICETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cDomainNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSCOPETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cObjectNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cDOTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cServiceNameParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cPAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPParameterListParserRuleCall_8_0 = (RuleCall)cPAssignment_8.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cCAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCCodeBlockParserRuleCall_10_0 = (RuleCall)cCAssignment_10.eContents().get(0);
		private final RuleCall cSERVICETerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cSEMITerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cPragmaListParserRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		
		//objectServiceDefinition:
		//	s=serviceVisibility INSTANCE? SERVICE
		//	domainName SCOPE objectName DOT serviceName
		//	p=parameterList IS c=codeBlock
		//	SERVICE? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=serviceVisibility INSTANCE? SERVICE domainName SCOPE objectName DOT serviceName p=parameterList IS c=codeBlock
		//SERVICE? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=serviceVisibility
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//serviceVisibility
		public RuleCall getSServiceVisibilityParserRuleCall_0_0() { return cSServiceVisibilityParserRuleCall_0_0; }
		
		//INSTANCE?
		public RuleCall getINSTANCETerminalRuleCall_1() { return cINSTANCETerminalRuleCall_1; }
		
		//SERVICE
		public RuleCall getSERVICETerminalRuleCall_2() { return cSERVICETerminalRuleCall_2; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_3() { return cDomainNameParserRuleCall_3; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_4() { return cSCOPETerminalRuleCall_4; }
		
		//objectName
		public RuleCall getObjectNameParserRuleCall_5() { return cObjectNameParserRuleCall_5; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_6() { return cDOTTerminalRuleCall_6; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_7() { return cServiceNameParserRuleCall_7; }
		
		//p=parameterList
		public Assignment getPAssignment_8() { return cPAssignment_8; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_8_0() { return cPParameterListParserRuleCall_8_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_9() { return cISTerminalRuleCall_9; }
		
		//c=codeBlock
		public Assignment getCAssignment_10() { return cCAssignment_10; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_10_0() { return cCCodeBlockParserRuleCall_10_0; }
		
		//SERVICE?
		public RuleCall getSERVICETerminalRuleCall_11() { return cSERVICETerminalRuleCall_11; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_12() { return cSEMITerminalRuleCall_12; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_13() { return cPragmaListParserRuleCall_13; }
	}
	public class TerminatorServiceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.terminatorServiceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSServiceVisibilityParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cSERVICETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSCOPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTerminatorNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cTERMINATOR_SCOPETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cServiceNameParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPParameterListParserRuleCall_7_0 = (RuleCall)cPAssignment_7.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cCAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCCodeBlockParserRuleCall_9_0 = (RuleCall)cCAssignment_9.eContents().get(0);
		private final RuleCall cSERVICETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMITerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cPragmaListParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//terminatorServiceDefinition:
		//	s=serviceVisibility SERVICE
		//	domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName
		//	p=parameterList IS
		//	c=codeBlock
		//	SERVICE? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=serviceVisibility SERVICE domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName p=parameterList IS c=codeBlock
		//SERVICE? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=serviceVisibility
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//serviceVisibility
		public RuleCall getSServiceVisibilityParserRuleCall_0_0() { return cSServiceVisibilityParserRuleCall_0_0; }
		
		//SERVICE
		public RuleCall getSERVICETerminalRuleCall_1() { return cSERVICETerminalRuleCall_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_2() { return cDomainNameParserRuleCall_2; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_3() { return cSCOPETerminalRuleCall_3; }
		
		//terminatorName
		public RuleCall getTerminatorNameParserRuleCall_4() { return cTerminatorNameParserRuleCall_4; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPETerminalRuleCall_5() { return cTERMINATOR_SCOPETerminalRuleCall_5; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_6() { return cServiceNameParserRuleCall_6; }
		
		//p=parameterList
		public Assignment getPAssignment_7() { return cPAssignment_7; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_7_0() { return cPParameterListParserRuleCall_7_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_8() { return cISTerminalRuleCall_8; }
		
		//c=codeBlock
		public Assignment getCAssignment_9() { return cCAssignment_9; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_9_0() { return cCCodeBlockParserRuleCall_9_0; }
		
		//SERVICE?
		public RuleCall getSERVICETerminalRuleCall_10() { return cSERVICETerminalRuleCall_10; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_11() { return cSEMITerminalRuleCall_11; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_12() { return cPragmaListParserRuleCall_12; }
	}
	public class TerminatorFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.terminatorFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSServiceVisibilityParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSCOPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cTerminatorNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cTERMINATOR_SCOPETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cServiceNameParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPParameterListParserRuleCall_7_0 = (RuleCall)cPAssignment_7.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cRAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRReturnTypeParserRuleCall_9_0 = (RuleCall)cRAssignment_9.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cCAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cCCodeBlockParserRuleCall_11_0 = (RuleCall)cCAssignment_11.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final RuleCall cSEMITerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final RuleCall cPragmaListParserRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		
		//terminatorFunctionDefinition:
		//	s=serviceVisibility FUNCTION
		//	domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName
		//	p=parameterList RETURN r=returnType IS
		//	c=codeBlock
		//	FUNCTION? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=serviceVisibility FUNCTION domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName p=parameterList RETURN
		//r=returnType IS c=codeBlock FUNCTION? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=serviceVisibility
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//serviceVisibility
		public RuleCall getSServiceVisibilityParserRuleCall_0_0() { return cSServiceVisibilityParserRuleCall_0_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONTerminalRuleCall_1() { return cFUNCTIONTerminalRuleCall_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_2() { return cDomainNameParserRuleCall_2; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_3() { return cSCOPETerminalRuleCall_3; }
		
		//terminatorName
		public RuleCall getTerminatorNameParserRuleCall_4() { return cTerminatorNameParserRuleCall_4; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPETerminalRuleCall_5() { return cTERMINATOR_SCOPETerminalRuleCall_5; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_6() { return cServiceNameParserRuleCall_6; }
		
		//p=parameterList
		public Assignment getPAssignment_7() { return cPAssignment_7; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_7_0() { return cPParameterListParserRuleCall_7_0; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_8() { return cRETURNTerminalRuleCall_8; }
		
		//r=returnType
		public Assignment getRAssignment_9() { return cRAssignment_9; }
		
		//returnType
		public RuleCall getRReturnTypeParserRuleCall_9_0() { return cRReturnTypeParserRuleCall_9_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_10() { return cISTerminalRuleCall_10; }
		
		//c=codeBlock
		public Assignment getCAssignment_11() { return cCAssignment_11; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_11_0() { return cCCodeBlockParserRuleCall_11_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONTerminalRuleCall_12() { return cFUNCTIONTerminalRuleCall_12; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_13() { return cSEMITerminalRuleCall_13; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_14() { return cPragmaListParserRuleCall_14; }
	}
	public class ObjectFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.objectFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVServiceVisibilityParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSServiceTypeParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cDomainNameParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cSCOPETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cObjectNameParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cDOTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cServiceNameParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cPAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPParameterListParserRuleCall_8_0 = (RuleCall)cPAssignment_8.eContents().get(0);
		private final RuleCall cRETURNTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Assignment cRAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRReturnTypeParserRuleCall_10_0 = (RuleCall)cRAssignment_10.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Assignment cCAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCCodeBlockParserRuleCall_12_0 = (RuleCall)cCAssignment_12.eContents().get(0);
		private final RuleCall cFUNCTIONTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final RuleCall cSEMITerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final RuleCall cPragmaListParserRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		
		//objectFunctionDefinition:
		//	v=serviceVisibility s=serviceType FUNCTION
		//	domainName SCOPE objectName DOT serviceName
		//	p=parameterList
		//	RETURN r=returnType IS c=codeBlock
		//	FUNCTION? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//v=serviceVisibility s=serviceType FUNCTION domainName SCOPE objectName DOT serviceName p=parameterList RETURN
		//r=returnType IS c=codeBlock FUNCTION? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//v=serviceVisibility
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//serviceVisibility
		public RuleCall getVServiceVisibilityParserRuleCall_0_0() { return cVServiceVisibilityParserRuleCall_0_0; }
		
		//s=serviceType
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//serviceType
		public RuleCall getSServiceTypeParserRuleCall_1_0() { return cSServiceTypeParserRuleCall_1_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONTerminalRuleCall_2() { return cFUNCTIONTerminalRuleCall_2; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_3() { return cDomainNameParserRuleCall_3; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_4() { return cSCOPETerminalRuleCall_4; }
		
		//objectName
		public RuleCall getObjectNameParserRuleCall_5() { return cObjectNameParserRuleCall_5; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_6() { return cDOTTerminalRuleCall_6; }
		
		//serviceName
		public RuleCall getServiceNameParserRuleCall_7() { return cServiceNameParserRuleCall_7; }
		
		//p=parameterList
		public Assignment getPAssignment_8() { return cPAssignment_8; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_8_0() { return cPParameterListParserRuleCall_8_0; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_9() { return cRETURNTerminalRuleCall_9; }
		
		//r=returnType
		public Assignment getRAssignment_10() { return cRAssignment_10; }
		
		//returnType
		public RuleCall getRReturnTypeParserRuleCall_10_0() { return cRReturnTypeParserRuleCall_10_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_11() { return cISTerminalRuleCall_11; }
		
		//c=codeBlock
		public Assignment getCAssignment_12() { return cCAssignment_12; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_12_0() { return cCCodeBlockParserRuleCall_12_0; }
		
		//FUNCTION?
		public RuleCall getFUNCTIONTerminalRuleCall_13() { return cFUNCTIONTerminalRuleCall_13; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_14() { return cSEMITerminalRuleCall_14; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_15() { return cPragmaListParserRuleCall_15; }
	}
	public class StateDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.stateDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSStateTypeParserRuleCall_0_0 = (RuleCall)cSAssignment_0.eContents().get(0);
		private final RuleCall cSTATETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDomainNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cSCOPETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cObjectNameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cDOTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cStateNameParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cPAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cPParameterListParserRuleCall_7_0 = (RuleCall)cPAssignment_7.eContents().get(0);
		private final RuleCall cISTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cCAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cCCodeBlockParserRuleCall_9_0 = (RuleCall)cCAssignment_9.eContents().get(0);
		private final RuleCall cSTATETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cSEMITerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cPragmaListParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//stateDefinition:
		//	s=stateType STATE
		//	domainName SCOPE objectName DOT stateName
		//	p=parameterList IS c=codeBlock
		//	STATE? SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//s=stateType STATE domainName SCOPE objectName DOT stateName p=parameterList IS c=codeBlock STATE? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//s=stateType
		public Assignment getSAssignment_0() { return cSAssignment_0; }
		
		//stateType
		public RuleCall getSStateTypeParserRuleCall_0_0() { return cSStateTypeParserRuleCall_0_0; }
		
		//STATE
		public RuleCall getSTATETerminalRuleCall_1() { return cSTATETerminalRuleCall_1; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_2() { return cDomainNameParserRuleCall_2; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_3() { return cSCOPETerminalRuleCall_3; }
		
		//objectName
		public RuleCall getObjectNameParserRuleCall_4() { return cObjectNameParserRuleCall_4; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_5() { return cDOTTerminalRuleCall_5; }
		
		//stateName
		public RuleCall getStateNameParserRuleCall_6() { return cStateNameParserRuleCall_6; }
		
		//p=parameterList
		public Assignment getPAssignment_7() { return cPAssignment_7; }
		
		//parameterList
		public RuleCall getPParameterListParserRuleCall_7_0() { return cPParameterListParserRuleCall_7_0; }
		
		//IS
		public RuleCall getISTerminalRuleCall_8() { return cISTerminalRuleCall_8; }
		
		//c=codeBlock
		public Assignment getCAssignment_9() { return cCAssignment_9; }
		
		//codeBlock
		public RuleCall getCCodeBlockParserRuleCall_9_0() { return cCCodeBlockParserRuleCall_9_0; }
		
		//STATE?
		public RuleCall getSTATETerminalRuleCall_10() { return cSTATETerminalRuleCall_10; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_11() { return cSEMITerminalRuleCall_11; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_12() { return cPragmaListParserRuleCall_12; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.statementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSStatementParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		////---------------------------------------------------------
		//// Statements
		////---------------------------------------------------------
		//statementList:
		//	{statementList} s+=statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//{statementList} s+=statement*
		public Group getGroup() { return cGroup; }
		
		//{statementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//s+=statement*
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//statement
		public RuleCall getSStatementParserRuleCall_1_0() { return cSStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cCAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cCCodeBlockStatementParserRuleCall_1_0_0 = (RuleCall)cCAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cEAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cEAssignStatementParserRuleCall_1_1_0_0 = (RuleCall)cEAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Assignment cSAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cSStreamStatementParserRuleCall_1_2_0_0 = (RuleCall)cSAssignment_1_2_0.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cNAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cNNullStatementParserRuleCall_1_3_0_0 = (RuleCall)cNAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Assignment cCAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cCCallStatementParserRuleCall_1_4_0_0 = (RuleCall)cCAssignment_1_4_0.eContents().get(0);
		private final Assignment cEAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final RuleCall cEExitStatementParserRuleCall_1_5_0 = (RuleCall)cEAssignment_1_5.eContents().get(0);
		private final Assignment cRAssignment_1_6 = (Assignment)cAlternatives_1.eContents().get(6);
		private final RuleCall cRReturnStatementParserRuleCall_1_6_0 = (RuleCall)cRAssignment_1_6.eContents().get(0);
		private final Assignment cDAssignment_1_7 = (Assignment)cAlternatives_1.eContents().get(7);
		private final RuleCall cDDelayStatementParserRuleCall_1_7_0 = (RuleCall)cDAssignment_1_7.eContents().get(0);
		private final RuleCall cRaiseStatementParserRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final Assignment cDAssignment_1_9 = (Assignment)cAlternatives_1.eContents().get(9);
		private final RuleCall cDDeleteStatementParserRuleCall_1_9_0 = (RuleCall)cDAssignment_1_9.eContents().get(0);
		private final Assignment cEAssignment_1_10 = (Assignment)cAlternatives_1.eContents().get(10);
		private final RuleCall cEEraseStatementParserRuleCall_1_10_0 = (RuleCall)cEAssignment_1_10.eContents().get(0);
		private final Assignment cLAssignment_1_11 = (Assignment)cAlternatives_1.eContents().get(11);
		private final RuleCall cLLinkStatementParserRuleCall_1_11_0 = (RuleCall)cLAssignment_1_11.eContents().get(0);
		private final Assignment cSAssignment_1_12 = (Assignment)cAlternatives_1.eContents().get(12);
		private final RuleCall cSScheduleStatementParserRuleCall_1_12_0 = (RuleCall)cSAssignment_1_12.eContents().get(0);
		private final Assignment cCAssignment_1_13 = (Assignment)cAlternatives_1.eContents().get(13);
		private final RuleCall cCCancelTimerStatementParserRuleCall_1_13_0 = (RuleCall)cCAssignment_1_13.eContents().get(0);
		private final Assignment cGAssignment_1_14 = (Assignment)cAlternatives_1.eContents().get(14);
		private final RuleCall cGGenerateStatementParserRuleCall_1_14_0 = (RuleCall)cGAssignment_1_14.eContents().get(0);
		private final Assignment cIAssignment_1_15 = (Assignment)cAlternatives_1.eContents().get(15);
		private final RuleCall cIIfStatementParserRuleCall_1_15_0 = (RuleCall)cIAssignment_1_15.eContents().get(0);
		private final Assignment cCAssignment_1_16 = (Assignment)cAlternatives_1.eContents().get(16);
		private final RuleCall cCCaseStatementParserRuleCall_1_16_0 = (RuleCall)cCAssignment_1_16.eContents().get(0);
		private final Assignment cFAssignment_1_17 = (Assignment)cAlternatives_1.eContents().get(17);
		private final RuleCall cFForStatementParserRuleCall_1_17_0 = (RuleCall)cFAssignment_1_17.eContents().get(0);
		private final Assignment cWAssignment_1_18 = (Assignment)cAlternatives_1.eContents().get(18);
		private final RuleCall cWWhileStatementParserRuleCall_1_18_0 = (RuleCall)cWAssignment_1_18.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cPragmaListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//statement:
		//	{statement} (c=codeBlockStatement
		//	/ *
		//                                | =>( e=expression ASSIGN ) a=assignStatement
		//                                | =>( e=expression streamOperator ) s=streamStatement
		//                                | =>( NULL ) n=nullStatement
		//                                | =>( p=primaryExpression ( DOT | TERMINATOR_SCOPE | LBRACKET | PRIME ) ) c=callStatement
		//                                * /
		//	| => (e=assignStatement) | => (s=streamStatement) | => (n=nullStatement) | => (c=callStatement) | e=exitStatement
		//	| r=returnStatement
		//	| d=delayStatement
		//	| raiseStatement
		//	| d=deleteStatement
		//	| e=eraseStatement
		//	| l=linkStatement
		//	| s=scheduleStatement
		//	| c=cancelTimerStatement
		//	| g=generateStatement
		//	| i=ifStatement
		//	| c=caseStatement
		//	| f=forStatement
		//	| w=whileStatement)? / * empty statement * /
		//	SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//{statement} (c=codeBlockStatement / *
		//                                | =>( e=expression ASSIGN ) a=assignStatement
		//                                | =>( e=expression streamOperator ) s=streamStatement
		//                                | =>( NULL ) n=nullStatement
		//                                | =>( p=primaryExpression ( DOT | TERMINATOR_SCOPE | LBRACKET | PRIME ) ) c=callStatement
		//                                * / | => (e=assignStatement) | => (s=streamStatement) | => (n=nullStatement) | =>
		//(c=callStatement) | e=exitStatement | r=returnStatement | d=delayStatement | raiseStatement | d=deleteStatement |
		//e=eraseStatement | l=linkStatement | s=scheduleStatement | c=cancelTimerStatement | g=generateStatement | i=ifStatement
		//| c=caseStatement | f=forStatement | w=whileStatement)? / * empty statement * / SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//{statement}
		public Action getStatementAction_0() { return cStatementAction_0; }
		
		//(c=codeBlockStatement / *
		//                                | =>( e=expression ASSIGN ) a=assignStatement
		//                                | =>( e=expression streamOperator ) s=streamStatement
		//                                | =>( NULL ) n=nullStatement
		//                                | =>( p=primaryExpression ( DOT | TERMINATOR_SCOPE | LBRACKET | PRIME ) ) c=callStatement
		//                                * / | => (e=assignStatement) | => (s=streamStatement) | => (n=nullStatement) | =>
		//(c=callStatement) | e=exitStatement | r=returnStatement | d=delayStatement | raiseStatement | d=deleteStatement |
		//e=eraseStatement | l=linkStatement | s=scheduleStatement | c=cancelTimerStatement | g=generateStatement | i=ifStatement
		//| c=caseStatement | f=forStatement | w=whileStatement)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//c=codeBlockStatement
		public Assignment getCAssignment_1_0() { return cCAssignment_1_0; }
		
		//codeBlockStatement
		public RuleCall getCCodeBlockStatementParserRuleCall_1_0_0() { return cCCodeBlockStatementParserRuleCall_1_0_0; }
		
		//=> (e=assignStatement)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//e=assignStatement
		public Assignment getEAssignment_1_1_0() { return cEAssignment_1_1_0; }
		
		//assignStatement
		public RuleCall getEAssignStatementParserRuleCall_1_1_0_0() { return cEAssignStatementParserRuleCall_1_1_0_0; }
		
		//=> (s=streamStatement)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//s=streamStatement
		public Assignment getSAssignment_1_2_0() { return cSAssignment_1_2_0; }
		
		//streamStatement
		public RuleCall getSStreamStatementParserRuleCall_1_2_0_0() { return cSStreamStatementParserRuleCall_1_2_0_0; }
		
		//=> (n=nullStatement)
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//n=nullStatement
		public Assignment getNAssignment_1_3_0() { return cNAssignment_1_3_0; }
		
		//nullStatement
		public RuleCall getNNullStatementParserRuleCall_1_3_0_0() { return cNNullStatementParserRuleCall_1_3_0_0; }
		
		//=> (c=callStatement)
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//c=callStatement
		public Assignment getCAssignment_1_4_0() { return cCAssignment_1_4_0; }
		
		//callStatement
		public RuleCall getCCallStatementParserRuleCall_1_4_0_0() { return cCCallStatementParserRuleCall_1_4_0_0; }
		
		//e=exitStatement
		public Assignment getEAssignment_1_5() { return cEAssignment_1_5; }
		
		//exitStatement
		public RuleCall getEExitStatementParserRuleCall_1_5_0() { return cEExitStatementParserRuleCall_1_5_0; }
		
		//r=returnStatement
		public Assignment getRAssignment_1_6() { return cRAssignment_1_6; }
		
		//returnStatement
		public RuleCall getRReturnStatementParserRuleCall_1_6_0() { return cRReturnStatementParserRuleCall_1_6_0; }
		
		//d=delayStatement
		public Assignment getDAssignment_1_7() { return cDAssignment_1_7; }
		
		//delayStatement
		public RuleCall getDDelayStatementParserRuleCall_1_7_0() { return cDDelayStatementParserRuleCall_1_7_0; }
		
		//raiseStatement
		public RuleCall getRaiseStatementParserRuleCall_1_8() { return cRaiseStatementParserRuleCall_1_8; }
		
		//d=deleteStatement
		public Assignment getDAssignment_1_9() { return cDAssignment_1_9; }
		
		//deleteStatement
		public RuleCall getDDeleteStatementParserRuleCall_1_9_0() { return cDDeleteStatementParserRuleCall_1_9_0; }
		
		//e=eraseStatement
		public Assignment getEAssignment_1_10() { return cEAssignment_1_10; }
		
		//eraseStatement
		public RuleCall getEEraseStatementParserRuleCall_1_10_0() { return cEEraseStatementParserRuleCall_1_10_0; }
		
		//l=linkStatement
		public Assignment getLAssignment_1_11() { return cLAssignment_1_11; }
		
		//linkStatement
		public RuleCall getLLinkStatementParserRuleCall_1_11_0() { return cLLinkStatementParserRuleCall_1_11_0; }
		
		//s=scheduleStatement
		public Assignment getSAssignment_1_12() { return cSAssignment_1_12; }
		
		//scheduleStatement
		public RuleCall getSScheduleStatementParserRuleCall_1_12_0() { return cSScheduleStatementParserRuleCall_1_12_0; }
		
		//c=cancelTimerStatement
		public Assignment getCAssignment_1_13() { return cCAssignment_1_13; }
		
		//cancelTimerStatement
		public RuleCall getCCancelTimerStatementParserRuleCall_1_13_0() { return cCCancelTimerStatementParserRuleCall_1_13_0; }
		
		//g=generateStatement
		public Assignment getGAssignment_1_14() { return cGAssignment_1_14; }
		
		//generateStatement
		public RuleCall getGGenerateStatementParserRuleCall_1_14_0() { return cGGenerateStatementParserRuleCall_1_14_0; }
		
		//i=ifStatement
		public Assignment getIAssignment_1_15() { return cIAssignment_1_15; }
		
		//ifStatement
		public RuleCall getIIfStatementParserRuleCall_1_15_0() { return cIIfStatementParserRuleCall_1_15_0; }
		
		//c=caseStatement
		public Assignment getCAssignment_1_16() { return cCAssignment_1_16; }
		
		//caseStatement
		public RuleCall getCCaseStatementParserRuleCall_1_16_0() { return cCCaseStatementParserRuleCall_1_16_0; }
		
		//f=forStatement
		public Assignment getFAssignment_1_17() { return cFAssignment_1_17; }
		
		//forStatement
		public RuleCall getFForStatementParserRuleCall_1_17_0() { return cFForStatementParserRuleCall_1_17_0; }
		
		//w=whileStatement
		public Assignment getWAssignment_1_18() { return cWAssignment_1_18; }
		
		//whileStatement
		public RuleCall getWWhileStatementParserRuleCall_1_18_0() { return cWWhileStatementParserRuleCall_1_18_0; }
		
		/// * empty statement * / SEMI
		public RuleCall getSEMITerminalRuleCall_2() { return cSEMITerminalRuleCall_2; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_3() { return cPragmaListParserRuleCall_3; }
	}
	public class NullStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.nullStatement");
		private final RuleCall cNULLTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//nullStatement:
		//	NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall() { return cNULLTerminalRuleCall; }
	}
	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.assignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLhsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLhsExpressionParserRuleCall_0_0 = (RuleCall)cLhsAssignment_0.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//assignStatement:
		//	lhs=expression ASSIGN rhs=expression;
		@Override public ParserRule getRule() { return rule; }
		
		//lhs=expression ASSIGN rhs=expression
		public Group getGroup() { return cGroup; }
		
		//lhs=expression
		public Assignment getLhsAssignment_0() { return cLhsAssignment_0; }
		
		//expression
		public RuleCall getLhsExpressionParserRuleCall_0_0() { return cLhsExpressionParserRuleCall_0_0; }
		
		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_1() { return cASSIGNTerminalRuleCall_1; }
		
		//rhs=expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }
		
		//expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}
	public class StreamOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.streamOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTREAM_INTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTREAM_OUTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTREAM_LINE_INTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTREAM_LINE_OUTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//streamOperator:
		//	STREAM_IN
		//	| STREAM_OUT
		//	| STREAM_LINE_IN
		//	| STREAM_LINE_OUT;
		@Override public ParserRule getRule() { return rule; }
		
		//STREAM_IN | STREAM_OUT | STREAM_LINE_IN | STREAM_LINE_OUT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STREAM_IN
		public RuleCall getSTREAM_INTerminalRuleCall_0() { return cSTREAM_INTerminalRuleCall_0; }
		
		//STREAM_OUT
		public RuleCall getSTREAM_OUTTerminalRuleCall_1() { return cSTREAM_OUTTerminalRuleCall_1; }
		
		//STREAM_LINE_IN
		public RuleCall getSTREAM_LINE_INTerminalRuleCall_2() { return cSTREAM_LINE_INTerminalRuleCall_2; }
		
		//STREAM_LINE_OUT
		public RuleCall getSTREAM_LINE_OUTTerminalRuleCall_3() { return cSTREAM_LINE_OUTTerminalRuleCall_3; }
	}
	public class StreamValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.streamValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStreamOperatorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//streamValue:
		//	streamOperator expression;
		@Override public ParserRule getRule() { return rule; }
		
		//streamOperator expression
		public Group getGroup() { return cGroup; }
		
		//streamOperator
		public RuleCall getStreamOperatorParserRuleCall_0() { return cStreamOperatorParserRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class StreamStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.streamStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExpressionParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSStreamValueParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//streamStatement:
		//	e=expression s+=streamValue+;
		@Override public ParserRule getRule() { return rule; }
		
		//e=expression s+=streamValue+
		public Group getGroup() { return cGroup; }
		
		//e=expression
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_0_0() { return cEExpressionParserRuleCall_0_0; }
		
		//s+=streamValue+
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//streamValue
		public RuleCall getSStreamValueParserRuleCall_1_0() { return cSStreamValueParserRuleCall_1_0; }
	}
	public class CallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.callStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_0_0_0 = (RuleCall)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cTERMINATOR_SCOPETerminalRuleCall_1_0_1_0 = (RuleCall)cGroup_1_0_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_1_1 = (RuleCall)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cLBRACKETTerminalRuleCall_1_0_2_0 = (RuleCall)cGroup_1_0_2.eContents().get(0);
		private final Assignment cEAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_0_2_1_0 = (RuleCall)cEAssignment_1_0_2_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_1_0_2_2 = (RuleCall)cGroup_1_0_2.eContents().get(2);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cPRIMETerminalRuleCall_1_0_3_0 = (RuleCall)cGroup_1_0_3.eContents().get(0);
		private final Assignment cCAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cCCharacteristicParserRuleCall_1_0_3_1_0 = (RuleCall)cCAssignment_1_0_3_1.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cAAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAArgumentListParserRuleCall_1_2_0 = (RuleCall)cAAssignment_1_2.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//callStatement:
		//	p=primaryExpression
		//	((DOT identifier
		//	| TERMINATOR_SCOPE identifier
		//	| LBRACKET e+=expression RBRACKET
		//	| PRIME c+=characteristic)*
		//	LPAREN a+=argumentList RPAREN)+;
		@Override public ParserRule getRule() { return rule; }
		
		//p=primaryExpression ((DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | PRIME
		//c+=characteristic)* LPAREN a+=argumentList RPAREN)+
		public Group getGroup() { return cGroup; }
		
		//p=primaryExpression
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//primaryExpression
		public RuleCall getPPrimaryExpressionParserRuleCall_0_0() { return cPPrimaryExpressionParserRuleCall_0_0; }
		
		//((DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | PRIME c+=characteristic)* LPAREN
		//a+=argumentList RPAREN)+
		public Group getGroup_1() { return cGroup_1; }
		
		//(DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | PRIME c+=characteristic)*
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//DOT identifier
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_0_0() { return cDOTTerminalRuleCall_1_0_0_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_0_0_1() { return cIdentifierParserRuleCall_1_0_0_1; }
		
		//TERMINATOR_SCOPE identifier
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPETerminalRuleCall_1_0_1_0() { return cTERMINATOR_SCOPETerminalRuleCall_1_0_1_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_0_1_1() { return cIdentifierParserRuleCall_1_0_1_1; }
		
		//LBRACKET e+=expression RBRACKET
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1_0_2_0() { return cLBRACKETTerminalRuleCall_1_0_2_0; }
		
		//e+=expression
		public Assignment getEAssignment_1_0_2_1() { return cEAssignment_1_0_2_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_0_2_1_0() { return cEExpressionParserRuleCall_1_0_2_1_0; }
		
		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_1_0_2_2() { return cRBRACKETTerminalRuleCall_1_0_2_2; }
		
		//PRIME c+=characteristic
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//PRIME
		public RuleCall getPRIMETerminalRuleCall_1_0_3_0() { return cPRIMETerminalRuleCall_1_0_3_0; }
		
		//c+=characteristic
		public Assignment getCAssignment_1_0_3_1() { return cCAssignment_1_0_3_1; }
		
		//characteristic
		public RuleCall getCCharacteristicParserRuleCall_1_0_3_1_0() { return cCCharacteristicParserRuleCall_1_0_3_1_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_1() { return cLPARENTerminalRuleCall_1_1; }
		
		//a+=argumentList
		public Assignment getAAssignment_1_2() { return cAAssignment_1_2; }
		
		//argumentList
		public RuleCall getAArgumentListParserRuleCall_1_2_0() { return cAArgumentListParserRuleCall_1_2_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_3() { return cRPARENTerminalRuleCall_1_3; }
	}
	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.exitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cEXITTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cWHENTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cCAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCConditionParserRuleCall_2_1_0 = (RuleCall)cCAssignment_2_1.eContents().get(0);
		
		//exitStatement:
		//	{exitStatement} EXIT (WHEN c=condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{exitStatement} EXIT (WHEN c=condition)?
		public Group getGroup() { return cGroup; }
		
		//{exitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }
		
		//EXIT
		public RuleCall getEXITTerminalRuleCall_1() { return cEXITTerminalRuleCall_1; }
		
		//(WHEN c=condition)?
		public Group getGroup_2() { return cGroup_2; }
		
		//WHEN
		public RuleCall getWHENTerminalRuleCall_2_0() { return cWHENTerminalRuleCall_2_0; }
		
		//c=condition
		public Assignment getCAssignment_2_1() { return cCAssignment_2_1; }
		
		//condition
		public RuleCall getCConditionParserRuleCall_2_1_0() { return cCConditionParserRuleCall_2_1_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.returnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRETURNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//returnStatement:
		//	RETURN expression;
		@Override public ParserRule getRule() { return rule; }
		
		//RETURN expression
		public Group getGroup() { return cGroup; }
		
		//RETURN
		public RuleCall getRETURNTerminalRuleCall_0() { return cRETURNTerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class DelayStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.delayStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELAYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//delayStatement:
		//	DELAY expression;
		@Override public ParserRule getRule() { return rule; }
		
		//DELAY expression
		public Group getGroup() { return cGroup; }
		
		//DELAY
		public RuleCall getDELAYTerminalRuleCall_0() { return cDELAYTerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class RaiseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.raiseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRAISETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cQualifiedExceptionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//raiseStatement:
		//	RAISE qualifiedExceptionName;
		@Override public ParserRule getRule() { return rule; }
		
		//RAISE qualifiedExceptionName
		public Group getGroup() { return cGroup; }
		
		//RAISE
		public RuleCall getRAISETerminalRuleCall_0() { return cRAISETerminalRuleCall_0; }
		
		//qualifiedExceptionName
		public RuleCall getQualifiedExceptionNameParserRuleCall_1() { return cQualifiedExceptionNameParserRuleCall_1; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.deleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELETETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//deleteStatement:
		//	DELETE expression;
		@Override public ParserRule getRule() { return rule; }
		
		//DELETE expression
		public Group getGroup() { return cGroup; }
		
		//DELETE
		public RuleCall getDELETETerminalRuleCall_0() { return cDELETETerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class EraseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.eraseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cERASETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//eraseStatement:
		//	ERASE expression;
		@Override public ParserRule getRule() { return rule; }
		
		//ERASE expression
		public Group getGroup() { return cGroup; }
		
		//ERASE
		public RuleCall getERASETerminalRuleCall_0() { return cERASETerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class LinkStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.linkStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLinkTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cN1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cN1NavigateExpressionParserRuleCall_1_0 = (RuleCall)cN1Assignment_1.eContents().get(0);
		private final Assignment cRAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRRelationshipSpecParserRuleCall_2_0 = (RuleCall)cRAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cN2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cN2NavigateExpressionParserRuleCall_3_0_0 = (RuleCall)cN2Assignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final RuleCall cUSINGTerminalRuleCall_3_1_0 = (RuleCall)cGroup_3_1.eContents().get(0);
		private final Assignment cN3Assignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cN3NavigateExpressionParserRuleCall_3_1_1_0 = (RuleCall)cN3Assignment_3_1_1.eContents().get(0);
		
		//linkStatement:
		//	linkType
		//	n1=navigateExpression r=relationshipSpec (n2=navigateExpression (USING n3=navigateExpression)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//linkType n1=navigateExpression r=relationshipSpec (n2=navigateExpression (USING n3=navigateExpression)?)?
		public Group getGroup() { return cGroup; }
		
		//linkType
		public RuleCall getLinkTypeParserRuleCall_0() { return cLinkTypeParserRuleCall_0; }
		
		//n1=navigateExpression
		public Assignment getN1Assignment_1() { return cN1Assignment_1; }
		
		//navigateExpression
		public RuleCall getN1NavigateExpressionParserRuleCall_1_0() { return cN1NavigateExpressionParserRuleCall_1_0; }
		
		//r=relationshipSpec
		public Assignment getRAssignment_2() { return cRAssignment_2; }
		
		//relationshipSpec
		public RuleCall getRRelationshipSpecParserRuleCall_2_0() { return cRRelationshipSpecParserRuleCall_2_0; }
		
		//(n2=navigateExpression (USING n3=navigateExpression)?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//n2=navigateExpression
		public Assignment getN2Assignment_3_0() { return cN2Assignment_3_0; }
		
		//navigateExpression
		public RuleCall getN2NavigateExpressionParserRuleCall_3_0_0() { return cN2NavigateExpressionParserRuleCall_3_0_0; }
		
		//(USING n3=navigateExpression)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//USING
		public RuleCall getUSINGTerminalRuleCall_3_1_0() { return cUSINGTerminalRuleCall_3_1_0; }
		
		//n3=navigateExpression
		public Assignment getN3Assignment_3_1_1() { return cN3Assignment_3_1_1; }
		
		//navigateExpression
		public RuleCall getN3NavigateExpressionParserRuleCall_3_1_1_0() { return cN3NavigateExpressionParserRuleCall_3_1_1_0; }
	}
	public class LinkTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.linkType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLINKTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNLINKTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//linkType:
		//	LINK
		//	| UNLINK;
		@Override public ParserRule getRule() { return rule; }
		
		//LINK | UNLINK
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LINK
		public RuleCall getLINKTerminalRuleCall_0() { return cLINKTerminalRuleCall_0; }
		
		//UNLINK
		public RuleCall getUNLINKTerminalRuleCall_1() { return cUNLINKTerminalRuleCall_1; }
	}
	public class ScheduleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.scheduleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSCHEDULETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGGenerateStatementParserRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final RuleCall cScheduleTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cEAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEExpressionParserRuleCall_4_0 = (RuleCall)cEAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cDELTATerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cEAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_5_1_0 = (RuleCall)cEAssignment_5_1.eContents().get(0);
		
		//scheduleStatement:
		//	SCHEDULE expression
		//	g=generateStatement
		//	scheduleType e+=expression (DELTA e+=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//SCHEDULE expression g=generateStatement scheduleType e+=expression (DELTA e+=expression)?
		public Group getGroup() { return cGroup; }
		
		//SCHEDULE
		public RuleCall getSCHEDULETerminalRuleCall_0() { return cSCHEDULETerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//g=generateStatement
		public Assignment getGAssignment_2() { return cGAssignment_2; }
		
		//generateStatement
		public RuleCall getGGenerateStatementParserRuleCall_2_0() { return cGGenerateStatementParserRuleCall_2_0; }
		
		//scheduleType
		public RuleCall getScheduleTypeParserRuleCall_3() { return cScheduleTypeParserRuleCall_3; }
		
		//e+=expression
		public Assignment getEAssignment_4() { return cEAssignment_4; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_4_0() { return cEExpressionParserRuleCall_4_0; }
		
		//(DELTA e+=expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//DELTA
		public RuleCall getDELTATerminalRuleCall_5_0() { return cDELTATerminalRuleCall_5_0; }
		
		//e+=expression
		public Assignment getEAssignment_5_1() { return cEAssignment_5_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_5_1_0() { return cEExpressionParserRuleCall_5_1_0; }
	}
	public class CancelTimerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.cancelTimerStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCANCELTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//cancelTimerStatement:
		//	CANCEL expression;
		@Override public ParserRule getRule() { return rule; }
		
		//CANCEL expression
		public Group getGroup() { return cGroup; }
		
		//CANCEL
		public RuleCall getCANCELTerminalRuleCall_0() { return cCANCELTerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
	}
	public class ScheduleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.scheduleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cATTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDELAYTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//scheduleType:
		//	AT
		//	| DELAY;
		@Override public ParserRule getRule() { return rule; }
		
		//AT | DELAY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AT
		public RuleCall getATTerminalRuleCall_0() { return cATTerminalRuleCall_0; }
		
		//DELAY
		public RuleCall getDELAYTerminalRuleCall_1() { return cDELAYTerminalRuleCall_1; }
	}
	public class GenerateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.generateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGENERATETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cQualifiedEventNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cArgumentListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final RuleCall cTOTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Assignment cEAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_5_1_0 = (RuleCall)cEAssignment_5_1.eContents().get(0);
		
		//generateStatement:
		//	GENERATE qualifiedEventName
		//	LPAREN argumentList RPAREN (TO e=expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//GENERATE qualifiedEventName LPAREN argumentList RPAREN (TO e=expression)?
		public Group getGroup() { return cGroup; }
		
		//GENERATE
		public RuleCall getGENERATETerminalRuleCall_0() { return cGENERATETerminalRuleCall_0; }
		
		//qualifiedEventName
		public RuleCall getQualifiedEventNameParserRuleCall_1() { return cQualifiedEventNameParserRuleCall_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }
		
		//argumentList
		public RuleCall getArgumentListParserRuleCall_3() { return cArgumentListParserRuleCall_3; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }
		
		//(TO e=expression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//TO
		public RuleCall getTOTerminalRuleCall_5_0() { return cTOTerminalRuleCall_5_0; }
		
		//e=expression
		public Assignment getEAssignment_5_1() { return cEAssignment_5_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_5_1_0() { return cEExpressionParserRuleCall_5_1_0; }
	}
	public class QualifiedEventNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.qualifiedEventName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cQualifiedObjectNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cEventNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//qualifiedEventName:
		//	(qualifiedObjectName DOT)? eventName;
		@Override public ParserRule getRule() { return rule; }
		
		//(qualifiedObjectName DOT)? eventName
		public Group getGroup() { return cGroup; }
		
		//(qualifiedObjectName DOT)?
		public Group getGroup_0() { return cGroup_0; }
		
		//qualifiedObjectName
		public RuleCall getQualifiedObjectNameParserRuleCall_0_0() { return cQualifiedObjectNameParserRuleCall_0_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_0_1() { return cDOTTerminalRuleCall_0_1; }
		
		//eventName
		public RuleCall getEventNameParserRuleCall_1() { return cEventNameParserRuleCall_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ifStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCConditionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final RuleCall cTHENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSStatementListParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final Assignment cE1Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cE1ElsifBlockParserRuleCall_4_0 = (RuleCall)cE1Assignment_4.eContents().get(0);
		private final Assignment cE2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cE2ElseBlockParserRuleCall_5_0 = (RuleCall)cE2Assignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cIFTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//ifStatement:
		//	IF c=condition THEN
		//	s=statementList
		//	e1+=elsifBlock*
		//	e2=elseBlock?
		//	END IF?;
		@Override public ParserRule getRule() { return rule; }
		
		//IF c=condition THEN s=statementList e1+=elsifBlock* e2=elseBlock? END IF?
		public Group getGroup() { return cGroup; }
		
		//IF
		public RuleCall getIFTerminalRuleCall_0() { return cIFTerminalRuleCall_0; }
		
		//c=condition
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//condition
		public RuleCall getCConditionParserRuleCall_1_0() { return cCConditionParserRuleCall_1_0; }
		
		//THEN
		public RuleCall getTHENTerminalRuleCall_2() { return cTHENTerminalRuleCall_2; }
		
		//s=statementList
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_3_0() { return cSStatementListParserRuleCall_3_0; }
		
		//e1+=elsifBlock*
		public Assignment getE1Assignment_4() { return cE1Assignment_4; }
		
		//elsifBlock
		public RuleCall getE1ElsifBlockParserRuleCall_4_0() { return cE1ElsifBlockParserRuleCall_4_0; }
		
		//e2=elseBlock?
		public Assignment getE2Assignment_5() { return cE2Assignment_5; }
		
		//elseBlock
		public RuleCall getE2ElseBlockParserRuleCall_5_0() { return cE2ElseBlockParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
		
		//IF?
		public RuleCall getIFTerminalRuleCall_7() { return cIFTerminalRuleCall_7; }
	}
	public class ElsifBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.elsifBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cELSIFTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCConditionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final RuleCall cTHENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSStatementListParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		
		//elsifBlock:
		//	ELSIF c=condition THEN
		//	s=statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ELSIF c=condition THEN s=statementList
		public Group getGroup() { return cGroup; }
		
		//ELSIF
		public RuleCall getELSIFTerminalRuleCall_0() { return cELSIFTerminalRuleCall_0; }
		
		//c=condition
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//condition
		public RuleCall getCConditionParserRuleCall_1_0() { return cCConditionParserRuleCall_1_0; }
		
		//THEN
		public RuleCall getTHENTerminalRuleCall_2() { return cTHENTerminalRuleCall_2; }
		
		//s=statementList
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_3_0() { return cSStatementListParserRuleCall_3_0; }
	}
	public class ElseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.elseBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cELSETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cStatementListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//elseBlock:
		//	ELSE statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//ELSE statementList
		public Group getGroup() { return cGroup; }
		
		//ELSE
		public RuleCall getELSETerminalRuleCall_0() { return cELSETerminalRuleCall_0; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_1() { return cStatementListParserRuleCall_1; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.whileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHILETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCConditionParserRuleCall_1_0 = (RuleCall)cCAssignment_1.eContents().get(0);
		private final RuleCall cLOOPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSStatementListParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cLOOPTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//whileStatement:
		//	WHILE c=condition
		//	LOOP
		//	s=statementList
		//	END LOOP?;
		@Override public ParserRule getRule() { return rule; }
		
		//WHILE c=condition LOOP s=statementList END LOOP?
		public Group getGroup() { return cGroup; }
		
		//WHILE
		public RuleCall getWHILETerminalRuleCall_0() { return cWHILETerminalRuleCall_0; }
		
		//c=condition
		public Assignment getCAssignment_1() { return cCAssignment_1; }
		
		//condition
		public RuleCall getCConditionParserRuleCall_1_0() { return cCConditionParserRuleCall_1_0; }
		
		//LOOP
		public RuleCall getLOOPTerminalRuleCall_2() { return cLOOPTerminalRuleCall_2; }
		
		//s=statementList
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_3_0() { return cSStatementListParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
		
		//LOOP?
		public RuleCall getLOOPTerminalRuleCall_5() { return cLOOPTerminalRuleCall_5; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//condition:
		//	expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.caseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCASETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cISTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cC1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cC1CaseAlternativeParserRuleCall_3_0 = (RuleCall)cC1Assignment_3.eContents().get(0);
		private final Assignment cC2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cC2CaseOthersParserRuleCall_4_0 = (RuleCall)cC2Assignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCASETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//caseStatement:
		//	CASE expression IS
		//	c1+=caseAlternative*
		//	c2=caseOthers?
		//	END CASE?;
		@Override public ParserRule getRule() { return rule; }
		
		//CASE expression IS c1+=caseAlternative* c2=caseOthers? END CASE?
		public Group getGroup() { return cGroup; }
		
		//CASE
		public RuleCall getCASETerminalRuleCall_0() { return cCASETerminalRuleCall_0; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }
		
		//IS
		public RuleCall getISTerminalRuleCall_2() { return cISTerminalRuleCall_2; }
		
		//c1+=caseAlternative*
		public Assignment getC1Assignment_3() { return cC1Assignment_3; }
		
		//caseAlternative
		public RuleCall getC1CaseAlternativeParserRuleCall_3_0() { return cC1CaseAlternativeParserRuleCall_3_0; }
		
		//c2=caseOthers?
		public Assignment getC2Assignment_4() { return cC2Assignment_4; }
		
		//caseOthers
		public RuleCall getC2CaseOthersParserRuleCall_4_0() { return cC2CaseOthersParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
		
		//CASE?
		public RuleCall getCASETerminalRuleCall_6() { return cCASETerminalRuleCall_6; }
	}
	public class CaseAlternativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.caseAlternative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cChoiceListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cGOES_TOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSStatementListParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		
		//caseAlternative:
		//	WHEN choiceList GOES_TO s=statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN choiceList GOES_TO s=statementList
		public Group getGroup() { return cGroup; }
		
		//WHEN
		public RuleCall getWHENTerminalRuleCall_0() { return cWHENTerminalRuleCall_0; }
		
		//choiceList
		public RuleCall getChoiceListParserRuleCall_1() { return cChoiceListParserRuleCall_1; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_2() { return cGOES_TOTerminalRuleCall_2; }
		
		//s=statementList
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_3_0() { return cSStatementListParserRuleCall_3_0; }
	}
	public class ChoiceListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.choiceList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExpressionParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cCASE_ORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//choiceList:
		//	e+=expression (CASE_OR e+=expression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=expression (CASE_OR e+=expression)*
		public Group getGroup() { return cGroup; }
		
		//e+=expression
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_0_0() { return cEExpressionParserRuleCall_0_0; }
		
		//(CASE_OR e+=expression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//CASE_OR
		public RuleCall getCASE_ORTerminalRuleCall_1_0() { return cCASE_ORTerminalRuleCall_1_0; }
		
		//e+=expression
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_1_0() { return cEExpressionParserRuleCall_1_1_0; }
	}
	public class CaseOthersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.caseOthers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOTHERSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cGOES_TOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//caseOthers:
		//	WHEN OTHERS GOES_TO statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN OTHERS GOES_TO statementList
		public Group getGroup() { return cGroup; }
		
		//WHEN
		public RuleCall getWHENTerminalRuleCall_0() { return cWHENTerminalRuleCall_0; }
		
		//OTHERS
		public RuleCall getOTHERSTerminalRuleCall_1() { return cOTHERSTerminalRuleCall_1; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_2() { return cGOES_TOTerminalRuleCall_2; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_3() { return cStatementListParserRuleCall_3; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.forStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFORTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLoopVariableSpecParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLOOPTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSStatementListParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cLOOPTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//forStatement:
		//	FOR loopVariableSpec
		//	LOOP
		//	s=statementList
		//	END LOOP?;
		@Override public ParserRule getRule() { return rule; }
		
		//FOR loopVariableSpec LOOP s=statementList END LOOP?
		public Group getGroup() { return cGroup; }
		
		//FOR
		public RuleCall getFORTerminalRuleCall_0() { return cFORTerminalRuleCall_0; }
		
		//loopVariableSpec
		public RuleCall getLoopVariableSpecParserRuleCall_1() { return cLoopVariableSpecParserRuleCall_1; }
		
		//LOOP
		public RuleCall getLOOPTerminalRuleCall_2() { return cLOOPTerminalRuleCall_2; }
		
		//s=statementList
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_3_0() { return cSStatementListParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
		
		//LOOP?
		public RuleCall getLOOPTerminalRuleCall_5() { return cLOOPTerminalRuleCall_5; }
	}
	public class LoopVariableSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.loopVariableSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cREVERSETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//loopVariableSpec:
		//	identifier IN REVERSE? expression;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier IN REVERSE? expression
		public Group getGroup() { return cGroup; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//IN
		public RuleCall getINTerminalRuleCall_1() { return cINTerminalRuleCall_1; }
		
		//REVERSE?
		public RuleCall getREVERSETerminalRuleCall_2() { return cREVERSETerminalRuleCall_2; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_3() { return cExpressionParserRuleCall_3; }
	}
	public class CodeBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.codeBlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cDECLARETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cVAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cVVariableDeclarationParserRuleCall_0_1_0 = (RuleCall)cVAssignment_0_1.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSStatementListParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEXCEPTIONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cEAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEExceptionHandlerParserRuleCall_3_1_0 = (RuleCall)cEAssignment_3_1.eContents().get(0);
		private final Assignment cPAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPOtherHandlerParserRuleCall_3_2_0 = (RuleCall)cPAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		////---------------------------------------------------------
		//// Code Blocks
		////---------------------------------------------------------
		//codeBlockStatement:
		//	(DECLARE
		//	v+=variableDeclaration*)?
		//	BEGIN
		//	s=statementList (EXCEPTION
		//	e+=exceptionHandler*
		//	p=otherHandler?)?
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//(DECLARE v+=variableDeclaration*)? BEGIN s=statementList (EXCEPTION e+=exceptionHandler* p=otherHandler?)? END
		public Group getGroup() { return cGroup; }
		
		//(DECLARE v+=variableDeclaration*)?
		public Group getGroup_0() { return cGroup_0; }
		
		//DECLARE
		public RuleCall getDECLARETerminalRuleCall_0_0() { return cDECLARETerminalRuleCall_0_0; }
		
		//v+=variableDeclaration*
		public Assignment getVAssignment_0_1() { return cVAssignment_0_1; }
		
		//variableDeclaration
		public RuleCall getVVariableDeclarationParserRuleCall_0_1_0() { return cVVariableDeclarationParserRuleCall_0_1_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//s=statementList
		public Assignment getSAssignment_2() { return cSAssignment_2; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_2_0() { return cSStatementListParserRuleCall_2_0; }
		
		//(EXCEPTION e+=exceptionHandler* p=otherHandler?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//EXCEPTION
		public RuleCall getEXCEPTIONTerminalRuleCall_3_0() { return cEXCEPTIONTerminalRuleCall_3_0; }
		
		//e+=exceptionHandler*
		public Assignment getEAssignment_3_1() { return cEAssignment_3_1; }
		
		//exceptionHandler
		public RuleCall getEExceptionHandlerParserRuleCall_3_1_0() { return cEExceptionHandlerParserRuleCall_3_1_0; }
		
		//p=otherHandler?
		public Assignment getPAssignment_3_2() { return cPAssignment_3_2; }
		
		//otherHandler
		public RuleCall getPOtherHandlerParserRuleCall_3_2_0() { return cPOtherHandlerParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class CodeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.codeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSStatementListParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cEXCEPTIONTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cEAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEExceptionHandlerParserRuleCall_3_1_0 = (RuleCall)cEAssignment_3_1.eContents().get(0);
		private final Assignment cOAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOOtherHandlerParserRuleCall_3_2_0 = (RuleCall)cOAssignment_3_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//codeBlock:
		//	v+=variableDeclaration*
		//	BEGIN
		//	s=statementList (EXCEPTION
		//	e+=exceptionHandler*
		//	o=otherHandler?)?
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//v+=variableDeclaration* BEGIN s=statementList (EXCEPTION e+=exceptionHandler* o=otherHandler?)? END
		public Group getGroup() { return cGroup; }
		
		//v+=variableDeclaration*
		public Assignment getVAssignment_0() { return cVAssignment_0; }
		
		//variableDeclaration
		public RuleCall getVVariableDeclarationParserRuleCall_0_0() { return cVVariableDeclarationParserRuleCall_0_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//s=statementList
		public Assignment getSAssignment_2() { return cSAssignment_2; }
		
		//statementList
		public RuleCall getSStatementListParserRuleCall_2_0() { return cSStatementListParserRuleCall_2_0; }
		
		//(EXCEPTION e+=exceptionHandler* o=otherHandler?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//EXCEPTION
		public RuleCall getEXCEPTIONTerminalRuleCall_3_0() { return cEXCEPTIONTerminalRuleCall_3_0; }
		
		//e+=exceptionHandler*
		public Assignment getEAssignment_3_1() { return cEAssignment_3_1; }
		
		//exceptionHandler
		public RuleCall getEExceptionHandlerParserRuleCall_3_1_0() { return cEExceptionHandlerParserRuleCall_3_1_0; }
		
		//o=otherHandler?
		public Assignment getOAssignment_3_2() { return cOAssignment_3_2; }
		
		//otherHandler
		public RuleCall getOOtherHandlerParserRuleCall_3_2_0() { return cOOtherHandlerParserRuleCall_3_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.variableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVariableNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cREADONLYTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cTAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTTypeReferenceWithCAParserRuleCall_3_0 = (RuleCall)cTAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cASSIGNTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cEAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_4_1_0 = (RuleCall)cEAssignment_4_1.eContents().get(0);
		private final RuleCall cSEMITerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cPragmaListParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//variableDeclaration:
		//	variableName COLON
		//	READONLY? t=typeReferenceWithCA (ASSIGN e=expression)?
		//	SEMI pragmaList;
		@Override public ParserRule getRule() { return rule; }
		
		//variableName COLON READONLY? t=typeReferenceWithCA (ASSIGN e=expression)? SEMI pragmaList
		public Group getGroup() { return cGroup; }
		
		//variableName
		public RuleCall getVariableNameParserRuleCall_0() { return cVariableNameParserRuleCall_0; }
		
		//COLON
		public RuleCall getCOLONTerminalRuleCall_1() { return cCOLONTerminalRuleCall_1; }
		
		//READONLY?
		public RuleCall getREADONLYTerminalRuleCall_2() { return cREADONLYTerminalRuleCall_2; }
		
		//t=typeReferenceWithCA
		public Assignment getTAssignment_3() { return cTAssignment_3; }
		
		//typeReferenceWithCA
		public RuleCall getTTypeReferenceWithCAParserRuleCall_3_0() { return cTTypeReferenceWithCAParserRuleCall_3_0; }
		
		//(ASSIGN e=expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_4_0() { return cASSIGNTerminalRuleCall_4_0; }
		
		//e=expression
		public Assignment getEAssignment_4_1() { return cEAssignment_4_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_4_1_0() { return cEExpressionParserRuleCall_4_1_0; }
		
		//SEMI
		public RuleCall getSEMITerminalRuleCall_5() { return cSEMITerminalRuleCall_5; }
		
		//pragmaList
		public RuleCall getPragmaListParserRuleCall_6() { return cPragmaListParserRuleCall_6; }
	}
	public class ExceptionHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.exceptionHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cQualifiedExceptionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cGOES_TOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//exceptionHandler:
		//	WHEN qualifiedExceptionName GOES_TO statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN qualifiedExceptionName GOES_TO statementList
		public Group getGroup() { return cGroup; }
		
		//WHEN
		public RuleCall getWHENTerminalRuleCall_0() { return cWHENTerminalRuleCall_0; }
		
		//qualifiedExceptionName
		public RuleCall getQualifiedExceptionNameParserRuleCall_1() { return cQualifiedExceptionNameParserRuleCall_1; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_2() { return cGOES_TOTerminalRuleCall_2; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_3() { return cStatementListParserRuleCall_3; }
	}
	public class OtherHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.otherHandler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWHENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cOTHERSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cGOES_TOTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cStatementListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//otherHandler:
		//	WHEN OTHERS GOES_TO statementList;
		@Override public ParserRule getRule() { return rule; }
		
		//WHEN OTHERS GOES_TO statementList
		public Group getGroup() { return cGroup; }
		
		//WHEN
		public RuleCall getWHENTerminalRuleCall_0() { return cWHENTerminalRuleCall_0; }
		
		//OTHERS
		public RuleCall getOTHERSTerminalRuleCall_1() { return cOTHERSTerminalRuleCall_1; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_2() { return cGOES_TOTerminalRuleCall_2; }
		
		//statementList
		public RuleCall getStatementListParserRuleCall_3() { return cStatementListParserRuleCall_3; }
	}
	public class QualifiedExceptionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.qualifiedExceptionName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cDomainNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSCOPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExceptionNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//qualifiedExceptionName:
		//	(domainName SCOPE)? exceptionName;
		@Override public ParserRule getRule() { return rule; }
		
		//(domainName SCOPE)? exceptionName
		public Group getGroup() { return cGroup; }
		
		//(domainName SCOPE)?
		public Group getGroup_0() { return cGroup_0; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_0_0() { return cDomainNameParserRuleCall_0_0; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_0_1() { return cSCOPETerminalRuleCall_0_1; }
		
		//exceptionName
		public RuleCall getExceptionNameParserRuleCall_1() { return cExceptionNameParserRuleCall_1; }
	}
	public class VariableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.variableName");
		private final RuleCall cIdentifierParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//variableName:
		//	identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall() { return cIdentifierParserRuleCall; }
	}
	public class FindConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findCondition");
		private final Assignment cFAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFFindLogicalOrParserRuleCall_0 = (RuleCall)cFAssignment.eContents().get(0);
		
		////---------------------------------------------------------
		//// Find Condition Definition
		////---------------------------------------------------------
		//findCondition:
		//	f=findLogicalOr;
		@Override public ParserRule getRule() { return rule; }
		
		//f=findLogicalOr
		public Assignment getFAssignment() { return cFAssignment; }
		
		//findLogicalOr
		public RuleCall getFFindLogicalOrParserRuleCall_0() { return cFFindLogicalOrParserRuleCall_0; }
	}
	public class FindLogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findLogicalOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFindLogicalXorParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFFindLogicalXorParserRuleCall_1_1_0 = (RuleCall)cFAssignment_1_1.eContents().get(0);
		
		//findLogicalOr:
		//	f+=findLogicalXor (OR f+=findLogicalXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//f+=findLogicalXor (OR f+=findLogicalXor)*
		public Group getGroup() { return cGroup; }
		
		//f+=findLogicalXor
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//findLogicalXor
		public RuleCall getFFindLogicalXorParserRuleCall_0_0() { return cFFindLogicalXorParserRuleCall_0_0; }
		
		//(OR f+=findLogicalXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OR
		public RuleCall getORTerminalRuleCall_1_0() { return cORTerminalRuleCall_1_0; }
		
		//f+=findLogicalXor
		public Assignment getFAssignment_1_1() { return cFAssignment_1_1; }
		
		//findLogicalXor
		public RuleCall getFFindLogicalXorParserRuleCall_1_1_0() { return cFFindLogicalXorParserRuleCall_1_1_0; }
	}
	public class FindLogicalXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findLogicalXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFindLogicalAndParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cXORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFFindLogicalAndParserRuleCall_1_1_0 = (RuleCall)cFAssignment_1_1.eContents().get(0);
		
		//findLogicalXor:
		//	f+=findLogicalAnd (XOR f+=findLogicalAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//f+=findLogicalAnd (XOR f+=findLogicalAnd)*
		public Group getGroup() { return cGroup; }
		
		//f+=findLogicalAnd
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//findLogicalAnd
		public RuleCall getFFindLogicalAndParserRuleCall_0_0() { return cFFindLogicalAndParserRuleCall_0_0; }
		
		//(XOR f+=findLogicalAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//XOR
		public RuleCall getXORTerminalRuleCall_1_0() { return cXORTerminalRuleCall_1_0; }
		
		//f+=findLogicalAnd
		public Assignment getFAssignment_1_1() { return cFAssignment_1_1; }
		
		//findLogicalAnd
		public RuleCall getFFindLogicalAndParserRuleCall_1_1_0() { return cFFindLogicalAndParserRuleCall_1_1_0; }
	}
	public class FindLogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findLogicalAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFindPrimaryParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cFAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFFindPrimaryParserRuleCall_1_1_0 = (RuleCall)cFAssignment_1_1.eContents().get(0);
		
		//findLogicalAnd:
		//	f+=findPrimary (AND f+=findPrimary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//f+=findPrimary (AND f+=findPrimary)*
		public Group getGroup() { return cGroup; }
		
		//f+=findPrimary
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//findPrimary
		public RuleCall getFFindPrimaryParserRuleCall_0_0() { return cFFindPrimaryParserRuleCall_0_0; }
		
		//(AND f+=findPrimary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_1_0() { return cANDTerminalRuleCall_1_0; }
		
		//f+=findPrimary
		public Assignment getFAssignment_1_1() { return cFAssignment_1_1; }
		
		//findPrimary
		public RuleCall getFFindPrimaryParserRuleCall_1_1_0() { return cFFindPrimaryParserRuleCall_1_1_0; }
	}
	public class FindPrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findPrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFindComparisonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFindUnaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//findPrimary:
		//	findComparison
		//	| findUnary;
		@Override public ParserRule getRule() { return rule; }
		
		//findComparison | findUnary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//findComparison
		public RuleCall getFindComparisonParserRuleCall_0() { return cFindComparisonParserRuleCall_0; }
		
		//findUnary
		public RuleCall getFindUnaryParserRuleCall_1() { return cFindUnaryParserRuleCall_1; }
	}
	public class FindUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNOTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cFindUnaryParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFindConditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//findUnary:
		//	NOT findUnary
		//	| LPAREN findCondition RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//NOT findUnary | LPAREN findCondition RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT findUnary
		public Group getGroup_0() { return cGroup_0; }
		
		//NOT
		public RuleCall getNOTTerminalRuleCall_0_0() { return cNOTTerminalRuleCall_0_0; }
		
		//findUnary
		public RuleCall getFindUnaryParserRuleCall_0_1() { return cFindUnaryParserRuleCall_0_1; }
		
		//LPAREN findCondition RPAREN
		public Group getGroup_1() { return cGroup_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }
		
		//findCondition
		public RuleCall getFindConditionParserRuleCall_1_1() { return cFindConditionParserRuleCall_1_1; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }
	}
	public class FindComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFFindNameParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cEQUALTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cNOT_EQUALTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cLTTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cGTTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cLTETerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cGTETerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final Assignment cAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAAdditiveExpParserRuleCall_2_0 = (RuleCall)cAAssignment_2.eContents().get(0);
		
		//findComparison:
		//	f=findName (EQUAL | NOT_EQUAL | LT | GT | LTE | GTE) a=additiveExp;
		@Override public ParserRule getRule() { return rule; }
		
		//f=findName (EQUAL | NOT_EQUAL | LT | GT | LTE | GTE) a=additiveExp
		public Group getGroup() { return cGroup; }
		
		//f=findName
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//findName
		public RuleCall getFFindNameParserRuleCall_0_0() { return cFFindNameParserRuleCall_0_0; }
		
		//(EQUAL | NOT_EQUAL | LT | GT | LTE | GTE)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_1_0() { return cEQUALTerminalRuleCall_1_0; }
		
		//NOT_EQUAL
		public RuleCall getNOT_EQUALTerminalRuleCall_1_1() { return cNOT_EQUALTerminalRuleCall_1_1; }
		
		//LT
		public RuleCall getLTTerminalRuleCall_1_2() { return cLTTerminalRuleCall_1_2; }
		
		//GT
		public RuleCall getGTTerminalRuleCall_1_3() { return cGTTerminalRuleCall_1_3; }
		
		//LTE
		public RuleCall getLTETerminalRuleCall_1_4() { return cLTETerminalRuleCall_1_4; }
		
		//GTE
		public RuleCall getGTETerminalRuleCall_1_5() { return cGTETerminalRuleCall_1_5; }
		
		//a=additiveExp
		public Assignment getAAssignment_2() { return cAAssignment_2; }
		
		//additiveExp
		public RuleCall getAAdditiveExpParserRuleCall_2_0() { return cAAdditiveExpParserRuleCall_2_0; }
	}
	public class FindNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cI1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cI1IdentifierParserRuleCall_0_0 = (RuleCall)cI1Assignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cI2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cI2IdentifierParserRuleCall_1_0_1_0 = (RuleCall)cI2Assignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cLBRACKETTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cEAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		
		//findName:
		//	i1=identifier
		//	(DOT i2+=identifier
		//	| LBRACKET e+=expression RBRACKET)*;
		@Override public ParserRule getRule() { return rule; }
		
		//i1=identifier (DOT i2+=identifier | LBRACKET e+=expression RBRACKET)*
		public Group getGroup() { return cGroup; }
		
		//i1=identifier
		public Assignment getI1Assignment_0() { return cI1Assignment_0; }
		
		//identifier
		public RuleCall getI1IdentifierParserRuleCall_0_0() { return cI1IdentifierParserRuleCall_0_0; }
		
		//(DOT i2+=identifier | LBRACKET e+=expression RBRACKET)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//DOT i2+=identifier
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_0() { return cDOTTerminalRuleCall_1_0_0; }
		
		//i2+=identifier
		public Assignment getI2Assignment_1_0_1() { return cI2Assignment_1_0_1; }
		
		//identifier
		public RuleCall getI2IdentifierParserRuleCall_1_0_1_0() { return cI2IdentifierParserRuleCall_1_0_1_0; }
		
		//LBRACKET e+=expression RBRACKET
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1_1_0() { return cLBRACKETTerminalRuleCall_1_1_0; }
		
		//e+=expression
		public Assignment getEAssignment_1_1_1() { return cEAssignment_1_1_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_1_1_0() { return cEExpressionParserRuleCall_1_1_1_0; }
		
		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_1_1_2() { return cRBRACKETTerminalRuleCall_1_1_2; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.expression");
		private final Assignment cRAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRRangeExpressionParserRuleCall_0 = (RuleCall)cRAssignment.eContents().get(0);
		
		////---------------------------------------------------------
		//// Expression Definition
		////---------------------------------------------------------
		//expression:
		//	r=rangeExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//r=rangeExpression
		public Assignment getRAssignment() { return cRAssignment; }
		
		//rangeExpression
		public RuleCall getRRangeExpressionParserRuleCall_0() { return cRRangeExpressionParserRuleCall_0; }
	}
	public class RangeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.rangeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLLogicalOrParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cRANGE_DOTSTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLLogicalOrParserRuleCall_1_1_0 = (RuleCall)cLAssignment_1_1.eContents().get(0);
		
		//rangeExpression:
		//	l+=logicalOr (RANGE_DOTS l+=logicalOr)?;
		@Override public ParserRule getRule() { return rule; }
		
		//l+=logicalOr (RANGE_DOTS l+=logicalOr)?
		public Group getGroup() { return cGroup; }
		
		//l+=logicalOr
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//logicalOr
		public RuleCall getLLogicalOrParserRuleCall_0_0() { return cLLogicalOrParserRuleCall_0_0; }
		
		//(RANGE_DOTS l+=logicalOr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//RANGE_DOTS
		public RuleCall getRANGE_DOTSTerminalRuleCall_1_0() { return cRANGE_DOTSTerminalRuleCall_1_0; }
		
		//l+=logicalOr
		public Assignment getLAssignment_1_1() { return cLAssignment_1_1; }
		
		//logicalOr
		public RuleCall getLLogicalOrParserRuleCall_1_1_0() { return cLLogicalOrParserRuleCall_1_1_0; }
	}
	public class LogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.logicalOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLLogicalXorParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLLogicalXorParserRuleCall_1_1_0 = (RuleCall)cLAssignment_1_1.eContents().get(0);
		
		//logicalOr:
		//	l+=logicalXor (OR l+=logicalXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//l+=logicalXor (OR l+=logicalXor)*
		public Group getGroup() { return cGroup; }
		
		//l+=logicalXor
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//logicalXor
		public RuleCall getLLogicalXorParserRuleCall_0_0() { return cLLogicalXorParserRuleCall_0_0; }
		
		//(OR l+=logicalXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OR
		public RuleCall getORTerminalRuleCall_1_0() { return cORTerminalRuleCall_1_0; }
		
		//l+=logicalXor
		public Assignment getLAssignment_1_1() { return cLAssignment_1_1; }
		
		//logicalXor
		public RuleCall getLLogicalXorParserRuleCall_1_1_0() { return cLLogicalXorParserRuleCall_1_1_0; }
	}
	public class LogicalXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.logicalXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLLogicalAndParserRuleCall_0_0 = (RuleCall)cLAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cXORTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cLAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLLogicalAndParserRuleCall_1_1_0 = (RuleCall)cLAssignment_1_1.eContents().get(0);
		
		//logicalXor:
		//	l+=logicalAnd (XOR l+=logicalAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//l+=logicalAnd (XOR l+=logicalAnd)*
		public Group getGroup() { return cGroup; }
		
		//l+=logicalAnd
		public Assignment getLAssignment_0() { return cLAssignment_0; }
		
		//logicalAnd
		public RuleCall getLLogicalAndParserRuleCall_0_0() { return cLLogicalAndParserRuleCall_0_0; }
		
		//(XOR l+=logicalAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//XOR
		public RuleCall getXORTerminalRuleCall_1_0() { return cXORTerminalRuleCall_1_0; }
		
		//l+=logicalAnd
		public Assignment getLAssignment_1_1() { return cLAssignment_1_1; }
		
		//logicalAnd
		public RuleCall getLLogicalAndParserRuleCall_1_1_0() { return cLLogicalAndParserRuleCall_1_1_0; }
	}
	public class LogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.logicalAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEEqualityParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cANDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEEqualityParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//logicalAnd:
		//	e+=equality (AND e+=equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=equality (AND e+=equality)*
		public Group getGroup() { return cGroup; }
		
		//e+=equality
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//equality
		public RuleCall getEEqualityParserRuleCall_0_0() { return cEEqualityParserRuleCall_0_0; }
		
		//(AND e+=equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//AND
		public RuleCall getANDTerminalRuleCall_1_0() { return cANDTerminalRuleCall_1_0; }
		
		//e+=equality
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }
		
		//equality
		public RuleCall getEEqualityParserRuleCall_1_1_0() { return cEEqualityParserRuleCall_1_1_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRRelationalExpParserRuleCall_0_0 = (RuleCall)cRAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cEQUALTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cNOT_EQUALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRRelationalExpParserRuleCall_1_1_0 = (RuleCall)cRAssignment_1_1.eContents().get(0);
		
		//equality:
		//	r+=relationalExp ((EQUAL | NOT_EQUAL) r+=relationalExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//r+=relationalExp ((EQUAL | NOT_EQUAL) r+=relationalExp)*
		public Group getGroup() { return cGroup; }
		
		//r+=relationalExp
		public Assignment getRAssignment_0() { return cRAssignment_0; }
		
		//relationalExp
		public RuleCall getRRelationalExpParserRuleCall_0_0() { return cRRelationalExpParserRuleCall_0_0; }
		
		//((EQUAL | NOT_EQUAL) r+=relationalExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(EQUAL | NOT_EQUAL)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//EQUAL
		public RuleCall getEQUALTerminalRuleCall_1_0_0() { return cEQUALTerminalRuleCall_1_0_0; }
		
		//NOT_EQUAL
		public RuleCall getNOT_EQUALTerminalRuleCall_1_0_1() { return cNOT_EQUALTerminalRuleCall_1_0_1; }
		
		//r+=relationalExp
		public Assignment getRAssignment_1_1() { return cRAssignment_1_1; }
		
		//relationalExp
		public RuleCall getRRelationalExpParserRuleCall_1_1_0() { return cRRelationalExpParserRuleCall_1_1_0; }
	}
	public class RelationalExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.relationalExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAAdditiveExpParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cLTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cGTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cLTETerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cGTETerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final Assignment cAAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAAdditiveExpParserRuleCall_1_1_0 = (RuleCall)cAAssignment_1_1.eContents().get(0);
		
		//relationalExp:
		//	a+=additiveExp ((LT | GT | LTE | GTE) a+=additiveExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//a+=additiveExp ((LT | GT | LTE | GTE) a+=additiveExp)*
		public Group getGroup() { return cGroup; }
		
		//a+=additiveExp
		public Assignment getAAssignment_0() { return cAAssignment_0; }
		
		//additiveExp
		public RuleCall getAAdditiveExpParserRuleCall_0_0() { return cAAdditiveExpParserRuleCall_0_0; }
		
		//((LT | GT | LTE | GTE) a+=additiveExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(LT | GT | LTE | GTE)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//LT
		public RuleCall getLTTerminalRuleCall_1_0_0() { return cLTTerminalRuleCall_1_0_0; }
		
		//GT
		public RuleCall getGTTerminalRuleCall_1_0_1() { return cGTTerminalRuleCall_1_0_1; }
		
		//LTE
		public RuleCall getLTETerminalRuleCall_1_0_2() { return cLTETerminalRuleCall_1_0_2; }
		
		//GTE
		public RuleCall getGTETerminalRuleCall_1_0_3() { return cGTETerminalRuleCall_1_0_3; }
		
		//a+=additiveExp
		public Assignment getAAssignment_1_1() { return cAAssignment_1_1; }
		
		//additiveExp
		public RuleCall getAAdditiveExpParserRuleCall_1_1_0() { return cAAdditiveExpParserRuleCall_1_1_0; }
	}
	public class AdditiveExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.additiveExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMMultExpParserRuleCall_0_0 = (RuleCall)cMAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cMINUSTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cCONCATENATETerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cUNIONTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cNOT_INTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final Assignment cMAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMMultExpParserRuleCall_1_1_0 = (RuleCall)cMAssignment_1_1.eContents().get(0);
		
		//additiveExp:
		//	m+=multExp ((PLUS | MINUS | CONCATENATE | UNION | NOT_IN) m+=multExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//m+=multExp ((PLUS | MINUS | CONCATENATE | UNION | NOT_IN) m+=multExp)*
		public Group getGroup() { return cGroup; }
		
		//m+=multExp
		public Assignment getMAssignment_0() { return cMAssignment_0; }
		
		//multExp
		public RuleCall getMMultExpParserRuleCall_0_0() { return cMMultExpParserRuleCall_0_0; }
		
		//((PLUS | MINUS | CONCATENATE | UNION | NOT_IN) m+=multExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(PLUS | MINUS | CONCATENATE | UNION | NOT_IN)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1_0_0() { return cPLUSTerminalRuleCall_1_0_0; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_1_0_1() { return cMINUSTerminalRuleCall_1_0_1; }
		
		//CONCATENATE
		public RuleCall getCONCATENATETerminalRuleCall_1_0_2() { return cCONCATENATETerminalRuleCall_1_0_2; }
		
		//UNION
		public RuleCall getUNIONTerminalRuleCall_1_0_3() { return cUNIONTerminalRuleCall_1_0_3; }
		
		//NOT_IN
		public RuleCall getNOT_INTerminalRuleCall_1_0_4() { return cNOT_INTerminalRuleCall_1_0_4; }
		
		//m+=multExp
		public Assignment getMAssignment_1_1() { return cMAssignment_1_1; }
		
		//multExp
		public RuleCall getMMultExpParserRuleCall_1_1_0() { return cMMultExpParserRuleCall_1_1_0; }
	}
	public class MultExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.multExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUUnaryExpParserRuleCall_0_0 = (RuleCall)cUAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cTIMESTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDIVIDETerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cPOWERTerminalRuleCall_1_0_3 = (RuleCall)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cREMTerminalRuleCall_1_0_4 = (RuleCall)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cINTERSECTIONTerminalRuleCall_1_0_5 = (RuleCall)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cDISUNIONTerminalRuleCall_1_0_6 = (RuleCall)cAlternatives_1_0.eContents().get(6);
		private final Assignment cUAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUUnaryExpParserRuleCall_1_1_0 = (RuleCall)cUAssignment_1_1.eContents().get(0);
		
		//multExp:
		//	u+=unaryExp ((TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION) u+=unaryExp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//u+=unaryExp ((TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION) u+=unaryExp)*
		public Group getGroup() { return cGroup; }
		
		//u+=unaryExp
		public Assignment getUAssignment_0() { return cUAssignment_0; }
		
		//unaryExp
		public RuleCall getUUnaryExpParserRuleCall_0_0() { return cUUnaryExpParserRuleCall_0_0; }
		
		//((TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION) u+=unaryExp)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//TIMES
		public RuleCall getTIMESTerminalRuleCall_1_0_0() { return cTIMESTerminalRuleCall_1_0_0; }
		
		//DIVIDE
		public RuleCall getDIVIDETerminalRuleCall_1_0_1() { return cDIVIDETerminalRuleCall_1_0_1; }
		
		//MOD
		public RuleCall getMODTerminalRuleCall_1_0_2() { return cMODTerminalRuleCall_1_0_2; }
		
		//POWER
		public RuleCall getPOWERTerminalRuleCall_1_0_3() { return cPOWERTerminalRuleCall_1_0_3; }
		
		//REM
		public RuleCall getREMTerminalRuleCall_1_0_4() { return cREMTerminalRuleCall_1_0_4; }
		
		//INTERSECTION
		public RuleCall getINTERSECTIONTerminalRuleCall_1_0_5() { return cINTERSECTIONTerminalRuleCall_1_0_5; }
		
		//DISUNION
		public RuleCall getDISUNIONTerminalRuleCall_1_0_6() { return cDISUNIONTerminalRuleCall_1_0_6; }
		
		//u+=unaryExp
		public Assignment getUAssignment_1_1() { return cUAssignment_1_1; }
		
		//unaryExp
		public RuleCall getUUnaryExpParserRuleCall_1_1_0() { return cUUnaryExpParserRuleCall_1_1_0; }
	}
	public class UnaryExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.unaryExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cUnaryOperatorParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cUnaryExpParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cLinkExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//unaryExp:
		//	unaryOperator unaryExp
		//	| linkExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//unaryOperator unaryExp | linkExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//unaryOperator unaryExp
		public Group getGroup_0() { return cGroup_0; }
		
		//unaryOperator
		public RuleCall getUnaryOperatorParserRuleCall_0_0() { return cUnaryOperatorParserRuleCall_0_0; }
		
		//unaryExp
		public RuleCall getUnaryExpParserRuleCall_0_1() { return cUnaryExpParserRuleCall_0_1; }
		
		//linkExpression
		public RuleCall getLinkExpressionParserRuleCall_1() { return cLinkExpressionParserRuleCall_1; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.unaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMINUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPLUSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNOTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cABSTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//unaryOperator:
		//	MINUS
		//	| PLUS
		//	| NOT
		//	| ABS;
		@Override public ParserRule getRule() { return rule; }
		
		//MINUS | PLUS | NOT | ABS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MINUS
		public RuleCall getMINUSTerminalRuleCall_0() { return cMINUSTerminalRuleCall_0; }
		
		//PLUS
		public RuleCall getPLUSTerminalRuleCall_1() { return cPLUSTerminalRuleCall_1; }
		
		//NOT
		public RuleCall getNOTTerminalRuleCall_2() { return cNOTTerminalRuleCall_2; }
		
		//ABS
		public RuleCall getABSTerminalRuleCall_3() { return cABSTerminalRuleCall_3; }
	}
	public class LinkExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.linkExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cN1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cN1NavigateExpressionParserRuleCall_0_0 = (RuleCall)cN1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLinkTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cN2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cN2NavigateExpressionParserRuleCall_1_1_0 = (RuleCall)cN2Assignment_1_1.eContents().get(0);
		private final Assignment cRAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRRelationshipSpecParserRuleCall_1_2_0 = (RuleCall)cRAssignment_1_2.eContents().get(0);
		private final Assignment cN3Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cN3NavigateExpressionParserRuleCall_1_3_0 = (RuleCall)cN3Assignment_1_3.eContents().get(0);
		
		//linkExpression:
		//	n1=navigateExpression
		//	| linkType
		//	n2=navigateExpression r=relationshipSpec
		//	n3=navigateExpression?;
		@Override public ParserRule getRule() { return rule; }
		
		//n1=navigateExpression | linkType n2=navigateExpression r=relationshipSpec n3=navigateExpression?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//n1=navigateExpression
		public Assignment getN1Assignment_0() { return cN1Assignment_0; }
		
		//navigateExpression
		public RuleCall getN1NavigateExpressionParserRuleCall_0_0() { return cN1NavigateExpressionParserRuleCall_0_0; }
		
		//linkType n2=navigateExpression r=relationshipSpec n3=navigateExpression?
		public Group getGroup_1() { return cGroup_1; }
		
		//linkType
		public RuleCall getLinkTypeParserRuleCall_1_0() { return cLinkTypeParserRuleCall_1_0; }
		
		//n2=navigateExpression
		public Assignment getN2Assignment_1_1() { return cN2Assignment_1_1; }
		
		//navigateExpression
		public RuleCall getN2NavigateExpressionParserRuleCall_1_1_0() { return cN2NavigateExpressionParserRuleCall_1_1_0; }
		
		//r=relationshipSpec
		public Assignment getRAssignment_1_2() { return cRAssignment_1_2; }
		
		//relationshipSpec
		public RuleCall getRRelationshipSpecParserRuleCall_1_2_0() { return cRRelationshipSpecParserRuleCall_1_2_0; }
		
		//n3=navigateExpression?
		public Assignment getN3Assignment_1_3() { return cN3Assignment_1_3; }
		
		//navigateExpression
		public RuleCall getN3NavigateExpressionParserRuleCall_1_3_0() { return cN3NavigateExpressionParserRuleCall_1_3_0; }
	}
	public class NavigateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.navigateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEExtendedExpressionParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cNAVIGATETerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cRAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRRelationshipSpecParserRuleCall_1_0_1_0 = (RuleCall)cRAssignment_1_0_1.eContents().get(0);
		private final Assignment cWAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cWWhereClauseParserRuleCall_1_0_2_0 = (RuleCall)cWAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cWITHTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cEAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEExtendedExpressionParserRuleCall_1_1_1_0 = (RuleCall)cEAssignment_1_1_1.eContents().get(0);
		private final RuleCall cNAVIGATETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cRAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cRRelationshipSpecParserRuleCall_1_1_3_0 = (RuleCall)cRAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cORDERED_BYTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cSortOrderParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cREVERSE_ORDERED_BYTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final RuleCall cSortOrderParserRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		
		//navigateExpression:
		//	e+=extendedExpression
		//	(NAVIGATE r+=relationshipSpec w+=whereClause?
		//	| WITH e+=extendedExpression
		//	NAVIGATE r+=relationshipSpec
		//	| ORDERED_BY sortOrder
		//	| REVERSE_ORDERED_BY sortOrder)*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=extendedExpression (NAVIGATE r+=relationshipSpec w+=whereClause? | WITH e+=extendedExpression NAVIGATE
		//r+=relationshipSpec | ORDERED_BY sortOrder | REVERSE_ORDERED_BY sortOrder)*
		public Group getGroup() { return cGroup; }
		
		//e+=extendedExpression
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//extendedExpression
		public RuleCall getEExtendedExpressionParserRuleCall_0_0() { return cEExtendedExpressionParserRuleCall_0_0; }
		
		//(NAVIGATE r+=relationshipSpec w+=whereClause? | WITH e+=extendedExpression NAVIGATE r+=relationshipSpec | ORDERED_BY
		//sortOrder | REVERSE_ORDERED_BY sortOrder)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//NAVIGATE r+=relationshipSpec w+=whereClause?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//NAVIGATE
		public RuleCall getNAVIGATETerminalRuleCall_1_0_0() { return cNAVIGATETerminalRuleCall_1_0_0; }
		
		//r+=relationshipSpec
		public Assignment getRAssignment_1_0_1() { return cRAssignment_1_0_1; }
		
		//relationshipSpec
		public RuleCall getRRelationshipSpecParserRuleCall_1_0_1_0() { return cRRelationshipSpecParserRuleCall_1_0_1_0; }
		
		//w+=whereClause?
		public Assignment getWAssignment_1_0_2() { return cWAssignment_1_0_2; }
		
		//whereClause
		public RuleCall getWWhereClauseParserRuleCall_1_0_2_0() { return cWWhereClauseParserRuleCall_1_0_2_0; }
		
		//WITH e+=extendedExpression NAVIGATE r+=relationshipSpec
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//WITH
		public RuleCall getWITHTerminalRuleCall_1_1_0() { return cWITHTerminalRuleCall_1_1_0; }
		
		//e+=extendedExpression
		public Assignment getEAssignment_1_1_1() { return cEAssignment_1_1_1; }
		
		//extendedExpression
		public RuleCall getEExtendedExpressionParserRuleCall_1_1_1_0() { return cEExtendedExpressionParserRuleCall_1_1_1_0; }
		
		//NAVIGATE
		public RuleCall getNAVIGATETerminalRuleCall_1_1_2() { return cNAVIGATETerminalRuleCall_1_1_2; }
		
		//r+=relationshipSpec
		public Assignment getRAssignment_1_1_3() { return cRAssignment_1_1_3; }
		
		//relationshipSpec
		public RuleCall getRRelationshipSpecParserRuleCall_1_1_3_0() { return cRRelationshipSpecParserRuleCall_1_1_3_0; }
		
		//ORDERED_BY sortOrder
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//ORDERED_BY
		public RuleCall getORDERED_BYTerminalRuleCall_1_2_0() { return cORDERED_BYTerminalRuleCall_1_2_0; }
		
		//sortOrder
		public RuleCall getSortOrderParserRuleCall_1_2_1() { return cSortOrderParserRuleCall_1_2_1; }
		
		//REVERSE_ORDERED_BY sortOrder
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//REVERSE_ORDERED_BY
		public RuleCall getREVERSE_ORDERED_BYTerminalRuleCall_1_3_0() { return cREVERSE_ORDERED_BYTerminalRuleCall_1_3_0; }
		
		//sortOrder
		public RuleCall getSortOrderParserRuleCall_1_3_1() { return cSortOrderParserRuleCall_1_3_1; }
	}
	public class ExtendedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.extendedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostfixExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFindExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//extendedExpression:
		//	postfixExpression
		//	| createExpression
		//	| findExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//postfixExpression | createExpression | findExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//postfixExpression
		public RuleCall getPostfixExpressionParserRuleCall_0() { return cPostfixExpressionParserRuleCall_0; }
		
		//createExpression
		public RuleCall getCreateExpressionParserRuleCall_1() { return cCreateExpressionParserRuleCall_1; }
		
		//findExpression
		public RuleCall getFindExpressionParserRuleCall_2() { return cFindExpressionParserRuleCall_2; }
	}
	public class SortOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.sortOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSortOrderComponentParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cSortOrderComponentParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//sortOrder:
		//	LPAREN (sortOrderComponent (COMMA sortOrderComponent)*)?
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//LPAREN (sortOrderComponent (COMMA sortOrderComponent)*)? RPAREN
		public Group getGroup() { return cGroup; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0() { return cLPARENTerminalRuleCall_0; }
		
		//(sortOrderComponent (COMMA sortOrderComponent)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//sortOrderComponent
		public RuleCall getSortOrderComponentParserRuleCall_1_0() { return cSortOrderComponentParserRuleCall_1_0; }
		
		//(COMMA sortOrderComponent)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_1_0() { return cCOMMATerminalRuleCall_1_1_0; }
		
		//sortOrderComponent
		public RuleCall getSortOrderComponentParserRuleCall_1_1_1() { return cSortOrderComponentParserRuleCall_1_1_1; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2() { return cRPARENTerminalRuleCall_2; }
	}
	public class SortOrderComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.sortOrderComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cREVERSETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//sortOrderComponent:
		//	REVERSE? identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//REVERSE? identifier
		public Group getGroup() { return cGroup; }
		
		//REVERSE?
		public RuleCall getREVERSETerminalRuleCall_0() { return cREVERSETerminalRuleCall_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class CreateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.createExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCREATETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cUNIQUETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cObjectNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cCreateArgumentListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//createExpression:
		//	CREATE UNIQUE? objectName createArgumentList;
		@Override public ParserRule getRule() { return rule; }
		
		//CREATE UNIQUE? objectName createArgumentList
		public Group getGroup() { return cGroup; }
		
		//CREATE
		public RuleCall getCREATETerminalRuleCall_0() { return cCREATETerminalRuleCall_0; }
		
		//UNIQUE?
		public RuleCall getUNIQUETerminalRuleCall_1() { return cUNIQUETerminalRuleCall_1; }
		
		//objectName
		public RuleCall getObjectNameParserRuleCall_2() { return cObjectNameParserRuleCall_2; }
		
		//createArgumentList
		public RuleCall getCreateArgumentListParserRuleCall_3() { return cCreateArgumentListParserRuleCall_3; }
	}
	public class CreateArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.createArgumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCreateArgumentListAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCCreateArgumentParserRuleCall_2_0_0 = (RuleCall)cCAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_2_1_0 = (RuleCall)cGroup_2_1.eContents().get(0);
		private final Assignment cCAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCCreateArgumentParserRuleCall_2_1_1_0 = (RuleCall)cCAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//createArgumentList:
		//	{createArgumentList} LPAREN (c+=createArgument (COMMA c+=createArgument)*)?
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{createArgumentList} LPAREN (c+=createArgument (COMMA c+=createArgument)*)? RPAREN
		public Group getGroup() { return cGroup; }
		
		//{createArgumentList}
		public Action getCreateArgumentListAction_0() { return cCreateArgumentListAction_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//(c+=createArgument (COMMA c+=createArgument)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//c+=createArgument
		public Assignment getCAssignment_2_0() { return cCAssignment_2_0; }
		
		//createArgument
		public RuleCall getCCreateArgumentParserRuleCall_2_0_0() { return cCCreateArgumentParserRuleCall_2_0_0; }
		
		//(COMMA c+=createArgument)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_1_0() { return cCOMMATerminalRuleCall_2_1_0; }
		
		//c+=createArgument
		public Assignment getCAssignment_2_1_1() { return cCAssignment_2_1_1; }
		
		//createArgument
		public RuleCall getCCreateArgumentParserRuleCall_2_1_1_0() { return cCCreateArgumentParserRuleCall_2_1_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class CreateArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.createArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cAAttributeNameParserRuleCall_0_0_0 = (RuleCall)cAAssignment_0_0.eContents().get(0);
		private final RuleCall cGOES_TOTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cEAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cEExpressionParserRuleCall_0_2_0 = (RuleCall)cEAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cCURRENT_STATETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cGOES_TOTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cSAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSStateNameParserRuleCall_1_2_0 = (RuleCall)cSAssignment_1_2.eContents().get(0);
		
		//createArgument:
		//	a=attributeName GOES_TO e=expression
		//	| CURRENT_STATE GOES_TO s=stateName;
		@Override public ParserRule getRule() { return rule; }
		
		//a=attributeName GOES_TO e=expression | CURRENT_STATE GOES_TO s=stateName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//a=attributeName GOES_TO e=expression
		public Group getGroup_0() { return cGroup_0; }
		
		//a=attributeName
		public Assignment getAAssignment_0_0() { return cAAssignment_0_0; }
		
		//attributeName
		public RuleCall getAAttributeNameParserRuleCall_0_0_0() { return cAAttributeNameParserRuleCall_0_0_0; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_0_1() { return cGOES_TOTerminalRuleCall_0_1; }
		
		//e=expression
		public Assignment getEAssignment_0_2() { return cEAssignment_0_2; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_0_2_0() { return cEExpressionParserRuleCall_0_2_0; }
		
		//CURRENT_STATE GOES_TO s=stateName
		public Group getGroup_1() { return cGroup_1; }
		
		//CURRENT_STATE
		public RuleCall getCURRENT_STATETerminalRuleCall_1_0() { return cCURRENT_STATETerminalRuleCall_1_0; }
		
		//GOES_TO
		public RuleCall getGOES_TOTerminalRuleCall_1_1() { return cGOES_TOTerminalRuleCall_1_1; }
		
		//s=stateName
		public Assignment getSAssignment_1_2() { return cSAssignment_1_2; }
		
		//stateName
		public RuleCall getSStateNameParserRuleCall_1_2_0() { return cSStateNameParserRuleCall_1_2_0; }
	}
	public class FindExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFindTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPPostfixNoCallExpressionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Assignment cWAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWWhereClauseParserRuleCall_2_0 = (RuleCall)cWAssignment_2.eContents().get(0);
		
		//findExpression:
		//	findType p=postfixNoCallExpression
		//	w=whereClause;
		@Override public ParserRule getRule() { return rule; }
		
		//findType p=postfixNoCallExpression w=whereClause
		public Group getGroup() { return cGroup; }
		
		//findType
		public RuleCall getFindTypeParserRuleCall_0() { return cFindTypeParserRuleCall_0; }
		
		//p=postfixNoCallExpression
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//postfixNoCallExpression
		public RuleCall getPPostfixNoCallExpressionParserRuleCall_1_0() { return cPPostfixNoCallExpressionParserRuleCall_1_0; }
		
		//w=whereClause
		public Assignment getWAssignment_2() { return cWAssignment_2; }
		
		//whereClause
		public RuleCall getWWhereClauseParserRuleCall_2_0() { return cWWhereClauseParserRuleCall_2_0; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.whereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhereClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cFindConditionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//whereClause:
		//	{whereClause} LPAREN findCondition? RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//{whereClause} LPAREN findCondition? RPAREN
		public Group getGroup() { return cGroup; }
		
		//{whereClause}
		public Action getWhereClauseAction_0() { return cWhereClauseAction_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1() { return cLPARENTerminalRuleCall_1; }
		
		//findCondition?
		public RuleCall getFindConditionParserRuleCall_2() { return cFindConditionParserRuleCall_2; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class FindTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.findType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFINDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFIND_ONETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFIND_ONLYTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//findType:
		//	FIND
		//	| FIND_ONE
		//	| FIND_ONLY;
		@Override public ParserRule getRule() { return rule; }
		
		//FIND | FIND_ONE | FIND_ONLY
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FIND
		public RuleCall getFINDTerminalRuleCall_0() { return cFINDTerminalRuleCall_0; }
		
		//FIND_ONE
		public RuleCall getFIND_ONETerminalRuleCall_1() { return cFIND_ONETerminalRuleCall_1; }
		
		//FIND_ONLY
		public RuleCall getFIND_ONLYTerminalRuleCall_2() { return cFIND_ONLYTerminalRuleCall_2; }
	}
	public class PostfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.postfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Assignment cAAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAArgumentListParserRuleCall_1_0_1_0 = (RuleCall)cAAssignment_1_0_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cDOTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cTERMINATOR_SCOPETerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cLBRACKETTerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final Assignment cEAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_3_1_0 = (RuleCall)cEAssignment_1_3_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_1_3_2 = (RuleCall)cGroup_1_3.eContents().get(2);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Group cGroup_1_4_0 = (Group)cGroup_1_4.eContents().get(0);
		private final RuleCall cPRIMETerminalRuleCall_1_4_0_0 = (RuleCall)cGroup_1_4_0.eContents().get(0);
		private final RuleCall cCharacteristicParserRuleCall_1_4_0_1 = (RuleCall)cGroup_1_4_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_4_0_2 = (RuleCall)cGroup_1_4_0.eContents().get(2);
		private final RuleCall cPRIMETerminalRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final RuleCall cCharacteristicParserRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		private final RuleCall cLPARENTerminalRuleCall_1_4_3 = (RuleCall)cGroup_1_4.eContents().get(3);
		private final Assignment cAAssignment_1_4_4 = (Assignment)cGroup_1_4.eContents().get(4);
		private final RuleCall cAArgumentListParserRuleCall_1_4_4_0 = (RuleCall)cAAssignment_1_4_4.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_4_5 = (RuleCall)cGroup_1_4.eContents().get(5);
		private final Group cGroup_1_5 = (Group)cAlternatives_1.eContents().get(5);
		private final RuleCall cPRIMETerminalRuleCall_1_5_0 = (RuleCall)cGroup_1_5.eContents().get(0);
		private final RuleCall cCharacteristicParserRuleCall_1_5_1 = (RuleCall)cGroup_1_5.eContents().get(1);
		
		//postfixExpression:
		//	p=primaryExpression
		//	(LPAREN a+=argumentList RPAREN
		//	| DOT identifier
		//	| TERMINATOR_SCOPE identifier
		//	| LBRACKET e+=expression RBRACKET
		//	| (PRIME characteristic LPAREN) =>
		//	PRIME characteristic LPAREN a+=argumentList RPAREN
		//	| PRIME characteristic)*;
		@Override public ParserRule getRule() { return rule; }
		
		//p=primaryExpression (LPAREN a+=argumentList RPAREN | DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET
		//e+=expression RBRACKET | (PRIME characteristic LPAREN) => PRIME characteristic LPAREN a+=argumentList RPAREN | PRIME
		//characteristic)*
		public Group getGroup() { return cGroup; }
		
		//p=primaryExpression
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//primaryExpression
		public RuleCall getPPrimaryExpressionParserRuleCall_0_0() { return cPPrimaryExpressionParserRuleCall_0_0; }
		
		//(LPAREN a+=argumentList RPAREN | DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | (PRIME
		//characteristic LPAREN) => PRIME characteristic LPAREN a+=argumentList RPAREN | PRIME characteristic)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//LPAREN a+=argumentList RPAREN
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0_0() { return cLPARENTerminalRuleCall_1_0_0; }
		
		//a+=argumentList
		public Assignment getAAssignment_1_0_1() { return cAAssignment_1_0_1; }
		
		//argumentList
		public RuleCall getAArgumentListParserRuleCall_1_0_1_0() { return cAArgumentListParserRuleCall_1_0_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_0_2() { return cRPARENTerminalRuleCall_1_0_2; }
		
		//DOT identifier
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_1_0() { return cDOTTerminalRuleCall_1_1_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_1_1() { return cIdentifierParserRuleCall_1_1_1; }
		
		//TERMINATOR_SCOPE identifier
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPETerminalRuleCall_1_2_0() { return cTERMINATOR_SCOPETerminalRuleCall_1_2_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_2_1() { return cIdentifierParserRuleCall_1_2_1; }
		
		//LBRACKET e+=expression RBRACKET
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1_3_0() { return cLBRACKETTerminalRuleCall_1_3_0; }
		
		//e+=expression
		public Assignment getEAssignment_1_3_1() { return cEAssignment_1_3_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_3_1_0() { return cEExpressionParserRuleCall_1_3_1_0; }
		
		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_1_3_2() { return cRBRACKETTerminalRuleCall_1_3_2; }
		
		//(PRIME characteristic LPAREN) => PRIME characteristic LPAREN a+=argumentList RPAREN
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//(PRIME characteristic LPAREN)
		public Group getGroup_1_4_0() { return cGroup_1_4_0; }
		
		//PRIME
		public RuleCall getPRIMETerminalRuleCall_1_4_0_0() { return cPRIMETerminalRuleCall_1_4_0_0; }
		
		//characteristic
		public RuleCall getCharacteristicParserRuleCall_1_4_0_1() { return cCharacteristicParserRuleCall_1_4_0_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_4_0_2() { return cLPARENTerminalRuleCall_1_4_0_2; }
		
		//=> PRIME
		public RuleCall getPRIMETerminalRuleCall_1_4_1() { return cPRIMETerminalRuleCall_1_4_1; }
		
		//characteristic
		public RuleCall getCharacteristicParserRuleCall_1_4_2() { return cCharacteristicParserRuleCall_1_4_2; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_4_3() { return cLPARENTerminalRuleCall_1_4_3; }
		
		//a+=argumentList
		public Assignment getAAssignment_1_4_4() { return cAAssignment_1_4_4; }
		
		//argumentList
		public RuleCall getAArgumentListParserRuleCall_1_4_4_0() { return cAArgumentListParserRuleCall_1_4_4_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_4_5() { return cRPARENTerminalRuleCall_1_4_5; }
		
		//PRIME characteristic
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//PRIME
		public RuleCall getPRIMETerminalRuleCall_1_5_0() { return cPRIMETerminalRuleCall_1_5_0; }
		
		//characteristic
		public RuleCall getCharacteristicParserRuleCall_1_5_1() { return cCharacteristicParserRuleCall_1_5_1; }
	}
	public class PostfixNoCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.postfixNoCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cDOTTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final RuleCall cTERMINATOR_SCOPETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final RuleCall cLBRACKETTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cEAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_2_1_0 = (RuleCall)cEAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRBRACKETTerminalRuleCall_1_2_2 = (RuleCall)cGroup_1_2.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final RuleCall cPRIMETerminalRuleCall_1_3_0 = (RuleCall)cGroup_1_3.eContents().get(0);
		private final RuleCall cCharacteristicParserRuleCall_1_3_1 = (RuleCall)cGroup_1_3.eContents().get(1);
		
		//postfixNoCallExpression:
		//	p=primaryExpression
		//	(DOT identifier
		//	| TERMINATOR_SCOPE identifier
		//	| LBRACKET e+=expression RBRACKET
		//	| PRIME characteristic)*;
		@Override public ParserRule getRule() { return rule; }
		
		//p=primaryExpression (DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | PRIME
		//characteristic)*
		public Group getGroup() { return cGroup; }
		
		//p=primaryExpression
		public Assignment getPAssignment_0() { return cPAssignment_0; }
		
		//primaryExpression
		public RuleCall getPPrimaryExpressionParserRuleCall_0_0() { return cPPrimaryExpressionParserRuleCall_0_0; }
		
		//(DOT identifier | TERMINATOR_SCOPE identifier | LBRACKET e+=expression RBRACKET | PRIME characteristic)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//DOT identifier
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//DOT
		public RuleCall getDOTTerminalRuleCall_1_0_0() { return cDOTTerminalRuleCall_1_0_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_0_1() { return cIdentifierParserRuleCall_1_0_1; }
		
		//TERMINATOR_SCOPE identifier
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//TERMINATOR_SCOPE
		public RuleCall getTERMINATOR_SCOPETerminalRuleCall_1_1_0() { return cTERMINATOR_SCOPETerminalRuleCall_1_1_0; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1_1_1() { return cIdentifierParserRuleCall_1_1_1; }
		
		//LBRACKET e+=expression RBRACKET
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//LBRACKET
		public RuleCall getLBRACKETTerminalRuleCall_1_2_0() { return cLBRACKETTerminalRuleCall_1_2_0; }
		
		//e+=expression
		public Assignment getEAssignment_1_2_1() { return cEAssignment_1_2_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_2_1_0() { return cEExpressionParserRuleCall_1_2_1_0; }
		
		//RBRACKET
		public RuleCall getRBRACKETTerminalRuleCall_1_2_2() { return cRBRACKETTerminalRuleCall_1_2_2; }
		
		//PRIME characteristic
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//PRIME
		public RuleCall getPRIMETerminalRuleCall_1_3_0() { return cPRIMETerminalRuleCall_1_3_0; }
		
		//characteristic
		public RuleCall getCharacteristicParserRuleCall_1_3_1() { return cCharacteristicParserRuleCall_1_3_1; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.primaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrimaryExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cParenthesisedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrimaryExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cNameExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cTypeNameExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//primaryExpression:
		//	{primaryExpression} literal
		//	| parenthesisedExpression
		//	| {primaryExpression} nameExpression
		//	| typeNameExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{primaryExpression} literal | parenthesisedExpression | {primaryExpression} nameExpression | typeNameExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{primaryExpression} literal
		public Group getGroup_0() { return cGroup_0; }
		
		//{primaryExpression}
		public Action getPrimaryExpressionAction_0_0() { return cPrimaryExpressionAction_0_0; }
		
		//literal
		public RuleCall getLiteralParserRuleCall_0_1() { return cLiteralParserRuleCall_0_1; }
		
		//parenthesisedExpression
		public RuleCall getParenthesisedExpressionParserRuleCall_1() { return cParenthesisedExpressionParserRuleCall_1; }
		
		//{primaryExpression} nameExpression
		public Group getGroup_2() { return cGroup_2; }
		
		//{primaryExpression}
		public Action getPrimaryExpressionAction_2_0() { return cPrimaryExpressionAction_2_0; }
		
		//nameExpression
		public RuleCall getNameExpressionParserRuleCall_2_1() { return cNameExpressionParserRuleCall_2_1; }
		
		//typeNameExpression
		public RuleCall getTypeNameExpressionParserRuleCall_3() { return cTypeNameExpressionParserRuleCall_3; }
	}
	public class TypeNameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.typeNameExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeNameExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cInstanceTypeRefParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cCollectionTypeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//typeNameExpression:
		//	{typeNameExpression} instanceTypeRef
		//	| collectionTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{typeNameExpression} instanceTypeRef | collectionTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{typeNameExpression} instanceTypeRef
		public Group getGroup_0() { return cGroup_0; }
		
		//{typeNameExpression}
		public Action getTypeNameExpressionAction_0_0() { return cTypeNameExpressionAction_0_0; }
		
		//instanceTypeRef
		public RuleCall getInstanceTypeRefParserRuleCall_0_1() { return cInstanceTypeRefParserRuleCall_0_1; }
		
		//collectionTypeRef
		public RuleCall getCollectionTypeRefParserRuleCall_1() { return cCollectionTypeRefParserRuleCall_1; }
	}
	public class NameExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.nameExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cDomainNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cSCOPETerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//nameExpression:
		//	(domainName SCOPE)? identifier;
		@Override public ParserRule getRule() { return rule; }
		
		//(domainName SCOPE)? identifier
		public Group getGroup() { return cGroup; }
		
		//(domainName SCOPE)?
		public Group getGroup_0() { return cGroup_0; }
		
		//domainName
		public RuleCall getDomainNameParserRuleCall_0_0() { return cDomainNameParserRuleCall_0_0; }
		
		//SCOPE
		public RuleCall getSCOPETerminalRuleCall_0_1() { return cSCOPETerminalRuleCall_0_1; }
		
		//identifier
		public RuleCall getIdentifierParserRuleCall_1() { return cIdentifierParserRuleCall_1; }
	}
	public class ParenthesisedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.parenthesisedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMATerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cEAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEExpressionParserRuleCall_2_1_0 = (RuleCall)cEAssignment_2_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//parenthesisedExpression:
		//	LPAREN e+=expression (COMMA e+=expression)*
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//LPAREN e+=expression (COMMA e+=expression)* RPAREN
		public Group getGroup() { return cGroup; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0() { return cLPARENTerminalRuleCall_0; }
		
		//e+=expression
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_1_0() { return cEExpressionParserRuleCall_1_0; }
		
		//(COMMA e+=expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_2_0() { return cCOMMATerminalRuleCall_2_0; }
		
		//e+=expression
		public Assignment getEAssignment_2_1() { return cEAssignment_2_1; }
		
		//expression
		public RuleCall getEExpressionParserRuleCall_2_1_0() { return cEExpressionParserRuleCall_2_1_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_3() { return cRPARENTerminalRuleCall_3; }
	}
	public class ArgumentListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.argumentList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgumentListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cE1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cE1ExpressionParserRuleCall_1_0_0 = (RuleCall)cE1Assignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cE1Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cE1ExpressionParserRuleCall_1_1_1_0 = (RuleCall)cE1Assignment_1_1_1.eContents().get(0);
		
		//argumentList:
		//	{argumentList} (e1+=expression (COMMA e1+=expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{argumentList} (e1+=expression (COMMA e1+=expression)*)?
		public Group getGroup() { return cGroup; }
		
		//{argumentList}
		public Action getArgumentListAction_0() { return cArgumentListAction_0; }
		
		//(e1+=expression (COMMA e1+=expression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//e1+=expression
		public Assignment getE1Assignment_1_0() { return cE1Assignment_1_0; }
		
		//expression
		public RuleCall getE1ExpressionParserRuleCall_1_0_0() { return cE1ExpressionParserRuleCall_1_0_0; }
		
		//(COMMA e1+=expression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_1_1_0() { return cCOMMATerminalRuleCall_1_1_0; }
		
		//e1+=expression
		public Assignment getE1Assignment_1_1_1() { return cE1Assignment_1_1_1; }
		
		//expression
		public RuleCall getE1ExpressionParserRuleCall_1_1_1_0() { return cE1ExpressionParserRuleCall_1_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERLITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREALLITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGLITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTIMESTAMPLITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDURATIONLITERALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTRUETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFALSETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNULLTerminalRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cFLUSHTerminalRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cENDLTerminalRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTHISTerminalRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCONSOLETerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLINE_NOTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cFILE_NAMETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//literal:
		//	INTEGERLITERAL
		//	| REALLITERAL
		//	//| CHARACTERLITERAL
		//	| STRINGLITERAL
		//	| TIMESTAMPLITERAL
		//	| DURATIONLITERAL
		//	| TRUE
		//	| FALSE
		//	| NULL
		//	| FLUSH
		//	| ENDL
		//	| THIS
		//	| CONSOLE
		//	| LINE_NO
		//	| FILE_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//INTEGERLITERAL | REALLITERAL //| CHARACTERLITERAL
		//| STRINGLITERAL | TIMESTAMPLITERAL | DURATIONLITERAL | TRUE | FALSE | NULL | FLUSH | ENDL | THIS | CONSOLE | LINE_NO |
		//FILE_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTEGERLITERAL
		public RuleCall getINTEGERLITERALTerminalRuleCall_0() { return cINTEGERLITERALTerminalRuleCall_0; }
		
		//REALLITERAL
		public RuleCall getREALLITERALTerminalRuleCall_1() { return cREALLITERALTerminalRuleCall_1; }
		
		//STRINGLITERAL
		public RuleCall getSTRINGLITERALTerminalRuleCall_2() { return cSTRINGLITERALTerminalRuleCall_2; }
		
		//TIMESTAMPLITERAL
		public RuleCall getTIMESTAMPLITERALTerminalRuleCall_3() { return cTIMESTAMPLITERALTerminalRuleCall_3; }
		
		//DURATIONLITERAL
		public RuleCall getDURATIONLITERALTerminalRuleCall_4() { return cDURATIONLITERALTerminalRuleCall_4; }
		
		//TRUE
		public RuleCall getTRUETerminalRuleCall_5() { return cTRUETerminalRuleCall_5; }
		
		//FALSE
		public RuleCall getFALSETerminalRuleCall_6() { return cFALSETerminalRuleCall_6; }
		
		//NULL
		public RuleCall getNULLTerminalRuleCall_7() { return cNULLTerminalRuleCall_7; }
		
		//FLUSH
		public RuleCall getFLUSHTerminalRuleCall_8() { return cFLUSHTerminalRuleCall_8; }
		
		//ENDL
		public RuleCall getENDLTerminalRuleCall_9() { return cENDLTerminalRuleCall_9; }
		
		//THIS
		public RuleCall getTHISTerminalRuleCall_10() { return cTHISTerminalRuleCall_10; }
		
		//CONSOLE
		public RuleCall getCONSOLETerminalRuleCall_11() { return cCONSOLETerminalRuleCall_11; }
		
		//LINE_NO
		public RuleCall getLINE_NOTerminalRuleCall_12() { return cLINE_NOTerminalRuleCall_12; }
		
		//FILE_NAME
		public RuleCall getFILE_NAMETerminalRuleCall_13() { return cFILE_NAMETerminalRuleCall_13; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.identifier");
		private final RuleCall cIDENTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//identifier:
		//	IDENT;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall() { return cIDENTTerminalRuleCall; }
	}
	public class CharacteristicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.characteristic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCharacteristicRWParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//characteristic:
		//	IDENT
		//	| characteristicRW;
		@Override public ParserRule getRule() { return rule; }
		
		//IDENT | characteristicRW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IDENT
		public RuleCall getIDENTTerminalRuleCall_0() { return cIDENTTerminalRuleCall_0; }
		
		//characteristicRW
		public RuleCall getCharacteristicRWParserRuleCall_1() { return cCharacteristicRWParserRuleCall_1; }
	}
	public class CharacteristicRWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.characteristicRW");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRANGETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDELTATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//characteristicRW:
		//	RANGE | DELTA;
		@Override public ParserRule getRule() { return rule; }
		
		//RANGE | DELTA
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RANGE
		public RuleCall getRANGETerminalRuleCall_0() { return cRANGETerminalRuleCall_0; }
		
		//DELTA
		public RuleCall getDELTATerminalRuleCall_1() { return cDELTATerminalRuleCall_1; }
	}
	
	
	private final DefinitionElements pDefinition;
	private final DomainNameElements pDomainName;
	private final ExceptionNameElements pExceptionName;
	private final TypeReferenceElements pTypeReference;
	private final TypeReferenceWithCAElements pTypeReferenceWithCA;
	private final DeprecatedTypeElements pDeprecatedType;
	private final QualifiedObjectNameElements pQualifiedObjectName;
	private final InstanceTypeRefElements pInstanceTypeRef;
	private final NamedTypeRefElements pNamedTypeRef;
	private final UserDefinedTypeRefElements pUserDefinedTypeRef;
	private final ConstrainedArrayTypeRefElements pConstrainedArrayTypeRef;
	private final TypeNameElements pTypeName;
	private final ArrayBoundsElements pArrayBounds;
	private final CollectionTypeRefElements pCollectionTypeRef;
	private final DictKeyTypeElements pDictKeyType;
	private final DictValueTypeElements pDictValueType;
	private final TerminatorNameElements pTerminatorName;
	private final ObjectNameElements pObjectName;
	private final AttributeNameElements pAttributeName;
	private final RelationshipSpecElements pRelationshipSpec;
	private final ServiceTypeElements pServiceType;
	private final EventNameElements pEventName;
	private final StateNameElements pStateName;
	private final StateTypeElements pStateType;
	private final AssignerStartElements pAssignerStart;
	private final ParameterListElements pParameterList;
	private final ParameterDefinitionElements pParameterDefinition;
	private final ServiceVisibilityElements pServiceVisibility;
	private final ParameterModeElements pParameterMode;
	private final ServiceNameElements pServiceName;
	private final ParameterNameElements pParameterName;
	private final ParameterTypeElements pParameterType;
	private final ReturnTypeElements pReturnType;
	private final PragmaListElements pPragmaList;
	private final PragmaDefElements pPragmaDef;
	private final PragmaValueElements pPragmaValue;
	private final PragmaNameElements pPragmaName;
	private final DomainServiceDefinitionElements pDomainServiceDefinition;
	private final DomainFunctionDefinitionElements pDomainFunctionDefinition;
	private final ObjectServiceDefinitionElements pObjectServiceDefinition;
	private final TerminatorServiceDefinitionElements pTerminatorServiceDefinition;
	private final TerminatorFunctionDefinitionElements pTerminatorFunctionDefinition;
	private final ObjectFunctionDefinitionElements pObjectFunctionDefinition;
	private final StateDefinitionElements pStateDefinition;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final NullStatementElements pNullStatement;
	private final AssignStatementElements pAssignStatement;
	private final StreamOperatorElements pStreamOperator;
	private final StreamValueElements pStreamValue;
	private final StreamStatementElements pStreamStatement;
	private final CallStatementElements pCallStatement;
	private final ExitStatementElements pExitStatement;
	private final ReturnStatementElements pReturnStatement;
	private final DelayStatementElements pDelayStatement;
	private final RaiseStatementElements pRaiseStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final EraseStatementElements pEraseStatement;
	private final LinkStatementElements pLinkStatement;
	private final LinkTypeElements pLinkType;
	private final ScheduleStatementElements pScheduleStatement;
	private final CancelTimerStatementElements pCancelTimerStatement;
	private final ScheduleTypeElements pScheduleType;
	private final GenerateStatementElements pGenerateStatement;
	private final QualifiedEventNameElements pQualifiedEventName;
	private final IfStatementElements pIfStatement;
	private final ElsifBlockElements pElsifBlock;
	private final ElseBlockElements pElseBlock;
	private final WhileStatementElements pWhileStatement;
	private final ConditionElements pCondition;
	private final CaseStatementElements pCaseStatement;
	private final CaseAlternativeElements pCaseAlternative;
	private final ChoiceListElements pChoiceList;
	private final CaseOthersElements pCaseOthers;
	private final ForStatementElements pForStatement;
	private final LoopVariableSpecElements pLoopVariableSpec;
	private final CodeBlockStatementElements pCodeBlockStatement;
	private final CodeBlockElements pCodeBlock;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ExceptionHandlerElements pExceptionHandler;
	private final OtherHandlerElements pOtherHandler;
	private final QualifiedExceptionNameElements pQualifiedExceptionName;
	private final VariableNameElements pVariableName;
	private final FindConditionElements pFindCondition;
	private final FindLogicalOrElements pFindLogicalOr;
	private final FindLogicalXorElements pFindLogicalXor;
	private final FindLogicalAndElements pFindLogicalAnd;
	private final FindPrimaryElements pFindPrimary;
	private final FindUnaryElements pFindUnary;
	private final FindComparisonElements pFindComparison;
	private final FindNameElements pFindName;
	private final ExpressionElements pExpression;
	private final RangeExpressionElements pRangeExpression;
	private final LogicalOrElements pLogicalOr;
	private final LogicalXorElements pLogicalXor;
	private final LogicalAndElements pLogicalAnd;
	private final EqualityElements pEquality;
	private final RelationalExpElements pRelationalExp;
	private final AdditiveExpElements pAdditiveExp;
	private final MultExpElements pMultExp;
	private final UnaryExpElements pUnaryExp;
	private final UnaryOperatorElements pUnaryOperator;
	private final LinkExpressionElements pLinkExpression;
	private final NavigateExpressionElements pNavigateExpression;
	private final ExtendedExpressionElements pExtendedExpression;
	private final SortOrderElements pSortOrder;
	private final SortOrderComponentElements pSortOrderComponent;
	private final CreateExpressionElements pCreateExpression;
	private final CreateArgumentListElements pCreateArgumentList;
	private final CreateArgumentElements pCreateArgument;
	private final FindExpressionElements pFindExpression;
	private final WhereClauseElements pWhereClause;
	private final FindTypeElements pFindType;
	private final PostfixExpressionElements pPostfixExpression;
	private final PostfixNoCallExpressionElements pPostfixNoCallExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final TypeNameExpressionElements pTypeNameExpression;
	private final NameExpressionElements pNameExpression;
	private final ParenthesisedExpressionElements pParenthesisedExpression;
	private final ArgumentListElements pArgumentList;
	private final LiteralElements pLiteral;
	private final IdentifierElements pIdentifier;
	private final CharacteristicElements pCharacteristic;
	private final CharacteristicRWElements pCharacteristicRW;
	private final TerminalRule tAND;
	private final TerminalRule tOR;
	private final TerminalRule tXOR;
	private final TerminalRule tABS;
	private final TerminalRule tNOT;
	private final TerminalRule tPLUS;
	private final TerminalRule tMINUS;
	private final TerminalRule tCONCATENATE;
	private final TerminalRule tUNION;
	private final TerminalRule tNOT_IN;
	private final TerminalRule tDIVIDE;
	private final TerminalRule tTIMES;
	private final TerminalRule tINTERSECTION;
	private final TerminalRule tMOD;
	private final TerminalRule tPOWER;
	private final TerminalRule tREM;
	private final TerminalRule tDISUNION;
	private final TerminalRule tEQUAL;
	private final TerminalRule tNOT_EQUAL;
	private final TerminalRule tGT;
	private final TerminalRule tGTE;
	private final TerminalRule tLT;
	private final TerminalRule tLTE;
	private final TerminalRule tSTREAM_LINE_IN;
	private final TerminalRule tSTREAM_LINE_OUT;
	private final TerminalRule tSTREAM_IN;
	private final TerminalRule tSTREAM_OUT;
	private final TerminalRule tASSIGN;
	private final TerminalRule tCOLON;
	private final TerminalRule tCOMMA;
	private final TerminalRule tDOT;
	private final TerminalRule tLTGT;
	private final TerminalRule tPRIME;
	private final TerminalRule tRANGE_DOTS;
	private final TerminalRule tLPAREN;
	private final TerminalRule tRPAREN;
	private final TerminalRule tLBRACKET;
	private final TerminalRule tRBRACKET;
	private final TerminalRule tSCOPE;
	private final TerminalRule tSEMI;
	private final TerminalRule tGOES_TO;
	private final TerminalRule tNAVIGATE;
	private final TerminalRule tTERMINATOR_SCOPE;
	private final TerminalRule tCASE_OR;
	private final TerminalRule tARRAY;
	private final TerminalRule tANONYMOUS;
	private final TerminalRule tASSIGNER;
	private final TerminalRule tAT;
	private final TerminalRule tBAG;
	private final TerminalRule tBEGIN;
	private final TerminalRule tCANNOT_HAPPEN;
	private final TerminalRule tCANCEL;
	private final TerminalRule tCASE;
	private final TerminalRule tCONDITIONALLY;
	private final TerminalRule tCONSOLE;
	private final TerminalRule tCREATE;
	private final TerminalRule tCREATION;
	private final TerminalRule tCURRENT_STATE;
	private final TerminalRule tDECLARE;
	private final TerminalRule tDEFERRED;
	private final TerminalRule tDELAY;
	private final TerminalRule tDELETE;
	private final TerminalRule tDELTA;
	private final TerminalRule tDICTIONARY;
	private final TerminalRule tDIGITS;
	private final TerminalRule tDOMAIN;
	private final TerminalRule tELSE;
	private final TerminalRule tELSIF;
	private final TerminalRule tEND;
	private final TerminalRule tENUM;
	private final TerminalRule tERASE;
	private final TerminalRule tEVENT;
	private final TerminalRule tEXCEPTION;
	private final TerminalRule tEXIT;
	private final TerminalRule tFIND;
	private final TerminalRule tFIND_ONE;
	private final TerminalRule tFIND_ONLY;
	private final TerminalRule tFOR;
	private final TerminalRule tFUNCTION;
	private final TerminalRule tGENERATE;
	private final TerminalRule tIDENTIF;
	private final TerminalRule tIF;
	private final TerminalRule tIGNORE;
	private final TerminalRule tIN;
	private final TerminalRule tINSTANCE;
	private final TerminalRule tIS_A;
	private final TerminalRule tIS;
	private final TerminalRule tLINK;
	private final TerminalRule tLOOP;
	private final TerminalRule tMANY;
	private final TerminalRule tNON_EXISTENT;
	private final TerminalRule tOBJECT;
	private final TerminalRule tOF;
	private final TerminalRule tONE;
	private final TerminalRule tORDERED_BY;
	private final TerminalRule tOTHERS;
	private final TerminalRule tOUT;
	private final TerminalRule tPRAGMA;
	private final TerminalRule tPREFERRED;
	private final TerminalRule tPRIVATE;
	private final TerminalRule tPROJECT;
	private final TerminalRule tPUBLIC;
	private final TerminalRule tRAISE;
	private final TerminalRule tRANGE;
	private final TerminalRule tREADONLY;
	private final TerminalRule tREFERENTIAL;
	private final TerminalRule tRELATIONSHIP;
	private final TerminalRule tRETURN;
	private final TerminalRule tREVERSE;
	private final TerminalRule tREVERSE_ORDERED_BY;
	private final TerminalRule tSCHEDULE;
	private final TerminalRule tSEQUENCE;
	private final TerminalRule tSERVICE;
	private final TerminalRule tSET;
	private final TerminalRule tSTART;
	private final TerminalRule tSTATE;
	private final TerminalRule tSTRUCTURE;
	private final TerminalRule tTERMINAL;
	private final TerminalRule tTERMINATOR;
	private final TerminalRule tTHEN;
	private final TerminalRule tTHIS;
	private final TerminalRule tTO;
	private final TerminalRule tTRANSITION;
	private final TerminalRule tTYPE;
	private final TerminalRule tUNCONDITIONALLY;
	private final TerminalRule tUNIQUE;
	private final TerminalRule tUNLINK;
	private final TerminalRule tUSING;
	private final TerminalRule tWHEN;
	private final TerminalRule tWHILE;
	private final TerminalRule tWITH;
	private final TerminalRule tNULL;
	private final TerminalRule tFLUSH;
	private final TerminalRule tENDL;
	private final TerminalRule tTRUE;
	private final TerminalRule tFALSE;
	private final TerminalRule tLINE_NO;
	private final TerminalRule tFILE_NAME;
	private final TerminalRule tINTEGERLITERAL;
	private final TerminalRule tREALLITERAL;
	private final TerminalRule tUNBASEDEXPONENT;
	private final TerminalRule tBASEDEXPONENT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBASEDDIGIT;
	private final TerminalRule tLETTER;
	private final TerminalRule tDURATIONLITERAL;
	private final TerminalRule tTIMESTAMPLITERAL;
	private final TerminalRule tSTRINGLITERAL;
	private final TerminalRule tESCAPESEQUENCE;
	private final TerminalRule tOCTALESCAPE;
	private final TerminalRule tUNICODEESCAPE;
	private final TerminalRule tHEXDIGIT;
	private final TerminalRule tRELATIONSHIPNAME;
	private final TerminalRule tIDENT;
	private final TerminalRule tCOMMENT;
	private final TerminalRule tWHITESPACE;
	
	private final Grammar grammar;

	@Inject
	public MASLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDefinition = new DefinitionElements();
		this.pDomainName = new DomainNameElements();
		this.pExceptionName = new ExceptionNameElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pTypeReferenceWithCA = new TypeReferenceWithCAElements();
		this.pDeprecatedType = new DeprecatedTypeElements();
		this.pQualifiedObjectName = new QualifiedObjectNameElements();
		this.pInstanceTypeRef = new InstanceTypeRefElements();
		this.pNamedTypeRef = new NamedTypeRefElements();
		this.pUserDefinedTypeRef = new UserDefinedTypeRefElements();
		this.pConstrainedArrayTypeRef = new ConstrainedArrayTypeRefElements();
		this.pTypeName = new TypeNameElements();
		this.pArrayBounds = new ArrayBoundsElements();
		this.pCollectionTypeRef = new CollectionTypeRefElements();
		this.pDictKeyType = new DictKeyTypeElements();
		this.pDictValueType = new DictValueTypeElements();
		this.pTerminatorName = new TerminatorNameElements();
		this.pObjectName = new ObjectNameElements();
		this.pAttributeName = new AttributeNameElements();
		this.pRelationshipSpec = new RelationshipSpecElements();
		this.pServiceType = new ServiceTypeElements();
		this.pEventName = new EventNameElements();
		this.pStateName = new StateNameElements();
		this.pStateType = new StateTypeElements();
		this.pAssignerStart = new AssignerStartElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDefinition = new ParameterDefinitionElements();
		this.pServiceVisibility = new ServiceVisibilityElements();
		this.pParameterMode = new ParameterModeElements();
		this.pServiceName = new ServiceNameElements();
		this.pParameterName = new ParameterNameElements();
		this.pParameterType = new ParameterTypeElements();
		this.pReturnType = new ReturnTypeElements();
		this.pPragmaList = new PragmaListElements();
		this.pPragmaDef = new PragmaDefElements();
		this.pPragmaValue = new PragmaValueElements();
		this.pPragmaName = new PragmaNameElements();
		this.pDomainServiceDefinition = new DomainServiceDefinitionElements();
		this.pDomainFunctionDefinition = new DomainFunctionDefinitionElements();
		this.pObjectServiceDefinition = new ObjectServiceDefinitionElements();
		this.pTerminatorServiceDefinition = new TerminatorServiceDefinitionElements();
		this.pTerminatorFunctionDefinition = new TerminatorFunctionDefinitionElements();
		this.pObjectFunctionDefinition = new ObjectFunctionDefinitionElements();
		this.pStateDefinition = new StateDefinitionElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pNullStatement = new NullStatementElements();
		this.pAssignStatement = new AssignStatementElements();
		this.pStreamOperator = new StreamOperatorElements();
		this.pStreamValue = new StreamValueElements();
		this.pStreamStatement = new StreamStatementElements();
		this.pCallStatement = new CallStatementElements();
		this.pExitStatement = new ExitStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pDelayStatement = new DelayStatementElements();
		this.pRaiseStatement = new RaiseStatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pEraseStatement = new EraseStatementElements();
		this.pLinkStatement = new LinkStatementElements();
		this.pLinkType = new LinkTypeElements();
		this.pScheduleStatement = new ScheduleStatementElements();
		this.pCancelTimerStatement = new CancelTimerStatementElements();
		this.pScheduleType = new ScheduleTypeElements();
		this.pGenerateStatement = new GenerateStatementElements();
		this.pQualifiedEventName = new QualifiedEventNameElements();
		this.pIfStatement = new IfStatementElements();
		this.pElsifBlock = new ElsifBlockElements();
		this.pElseBlock = new ElseBlockElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pCondition = new ConditionElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseAlternative = new CaseAlternativeElements();
		this.pChoiceList = new ChoiceListElements();
		this.pCaseOthers = new CaseOthersElements();
		this.pForStatement = new ForStatementElements();
		this.pLoopVariableSpec = new LoopVariableSpecElements();
		this.pCodeBlockStatement = new CodeBlockStatementElements();
		this.pCodeBlock = new CodeBlockElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pExceptionHandler = new ExceptionHandlerElements();
		this.pOtherHandler = new OtherHandlerElements();
		this.pQualifiedExceptionName = new QualifiedExceptionNameElements();
		this.pVariableName = new VariableNameElements();
		this.pFindCondition = new FindConditionElements();
		this.pFindLogicalOr = new FindLogicalOrElements();
		this.pFindLogicalXor = new FindLogicalXorElements();
		this.pFindLogicalAnd = new FindLogicalAndElements();
		this.pFindPrimary = new FindPrimaryElements();
		this.pFindUnary = new FindUnaryElements();
		this.pFindComparison = new FindComparisonElements();
		this.pFindName = new FindNameElements();
		this.pExpression = new ExpressionElements();
		this.pRangeExpression = new RangeExpressionElements();
		this.pLogicalOr = new LogicalOrElements();
		this.pLogicalXor = new LogicalXorElements();
		this.pLogicalAnd = new LogicalAndElements();
		this.pEquality = new EqualityElements();
		this.pRelationalExp = new RelationalExpElements();
		this.pAdditiveExp = new AdditiveExpElements();
		this.pMultExp = new MultExpElements();
		this.pUnaryExp = new UnaryExpElements();
		this.pUnaryOperator = new UnaryOperatorElements();
		this.pLinkExpression = new LinkExpressionElements();
		this.pNavigateExpression = new NavigateExpressionElements();
		this.pExtendedExpression = new ExtendedExpressionElements();
		this.pSortOrder = new SortOrderElements();
		this.pSortOrderComponent = new SortOrderComponentElements();
		this.pCreateExpression = new CreateExpressionElements();
		this.pCreateArgumentList = new CreateArgumentListElements();
		this.pCreateArgument = new CreateArgumentElements();
		this.pFindExpression = new FindExpressionElements();
		this.pWhereClause = new WhereClauseElements();
		this.pFindType = new FindTypeElements();
		this.pPostfixExpression = new PostfixExpressionElements();
		this.pPostfixNoCallExpression = new PostfixNoCallExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pTypeNameExpression = new TypeNameExpressionElements();
		this.pNameExpression = new NameExpressionElements();
		this.pParenthesisedExpression = new ParenthesisedExpressionElements();
		this.pArgumentList = new ArgumentListElements();
		this.pLiteral = new LiteralElements();
		this.pIdentifier = new IdentifierElements();
		this.pCharacteristic = new CharacteristicElements();
		this.pCharacteristicRW = new CharacteristicRWElements();
		this.tAND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.AND");
		this.tOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OR");
		this.tXOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.XOR");
		this.tABS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ABS");
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NOT");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PLUS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.MINUS");
		this.tCONCATENATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CONCATENATE");
		this.tUNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNION");
		this.tNOT_IN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NOT_IN");
		this.tDIVIDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DIVIDE");
		this.tTIMES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TIMES");
		this.tINTERSECTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.INTERSECTION");
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.MOD");
		this.tPOWER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.POWER");
		this.tREM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.REM");
		this.tDISUNION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DISUNION");
		this.tEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.EQUAL");
		this.tNOT_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NOT_EQUAL");
		this.tGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.GT");
		this.tGTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.GTE");
		this.tLT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LT");
		this.tLTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LTE");
		this.tSTREAM_LINE_IN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STREAM_LINE_IN");
		this.tSTREAM_LINE_OUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STREAM_LINE_OUT");
		this.tSTREAM_IN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STREAM_IN");
		this.tSTREAM_OUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STREAM_OUT");
		this.tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ASSIGN");
		this.tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.COLON");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.COMMA");
		this.tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DOT");
		this.tLTGT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LTGT");
		this.tPRIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PRIME");
		this.tRANGE_DOTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RANGE_DOTS");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LPAREN");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RPAREN");
		this.tLBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LBRACKET");
		this.tRBRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RBRACKET");
		this.tSCOPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SCOPE");
		this.tSEMI = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SEMI");
		this.tGOES_TO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.GOES_TO");
		this.tNAVIGATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NAVIGATE");
		this.tTERMINATOR_SCOPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TERMINATOR_SCOPE");
		this.tCASE_OR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CASE_OR");
		this.tARRAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ARRAY");
		this.tANONYMOUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ANONYMOUS");
		this.tASSIGNER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ASSIGNER");
		this.tAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.AT");
		this.tBAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.BAG");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.BEGIN");
		this.tCANNOT_HAPPEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CANNOT_HAPPEN");
		this.tCANCEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CANCEL");
		this.tCASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CASE");
		this.tCONDITIONALLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CONDITIONALLY");
		this.tCONSOLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CONSOLE");
		this.tCREATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CREATE");
		this.tCREATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CREATION");
		this.tCURRENT_STATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.CURRENT_STATE");
		this.tDECLARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DECLARE");
		this.tDEFERRED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DEFERRED");
		this.tDELAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DELAY");
		this.tDELETE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DELETE");
		this.tDELTA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DELTA");
		this.tDICTIONARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DICTIONARY");
		this.tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DIGITS");
		this.tDOMAIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DOMAIN");
		this.tELSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ELSE");
		this.tELSIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ELSIF");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.END");
		this.tENUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ENUM");
		this.tERASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ERASE");
		this.tEVENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.EVENT");
		this.tEXCEPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.EXCEPTION");
		this.tEXIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.EXIT");
		this.tFIND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FIND");
		this.tFIND_ONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FIND_ONE");
		this.tFIND_ONLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FIND_ONLY");
		this.tFOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FOR");
		this.tFUNCTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FUNCTION");
		this.tGENERATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.GENERATE");
		this.tIDENTIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IDENTIF");
		this.tIF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IF");
		this.tIGNORE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IGNORE");
		this.tIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IN");
		this.tINSTANCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.INSTANCE");
		this.tIS_A = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IS_A");
		this.tIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IS");
		this.tLINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LINK");
		this.tLOOP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LOOP");
		this.tMANY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.MANY");
		this.tNON_EXISTENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NON_EXISTENT");
		this.tOBJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OBJECT");
		this.tOF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OF");
		this.tONE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ONE");
		this.tORDERED_BY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ORDERED_BY");
		this.tOTHERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OTHERS");
		this.tOUT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OUT");
		this.tPRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PRAGMA");
		this.tPREFERRED = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PREFERRED");
		this.tPRIVATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PRIVATE");
		this.tPROJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PROJECT");
		this.tPUBLIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.PUBLIC");
		this.tRAISE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RAISE");
		this.tRANGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RANGE");
		this.tREADONLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.READONLY");
		this.tREFERENTIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.REFERENTIAL");
		this.tRELATIONSHIP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RELATIONSHIP");
		this.tRETURN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RETURN");
		this.tREVERSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.REVERSE");
		this.tREVERSE_ORDERED_BY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.REVERSE_ORDERED_BY");
		this.tSCHEDULE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SCHEDULE");
		this.tSEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SEQUENCE");
		this.tSERVICE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SERVICE");
		this.tSET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.SET");
		this.tSTART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.START");
		this.tSTATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STATE");
		this.tSTRUCTURE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STRUCTURE");
		this.tTERMINAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TERMINAL");
		this.tTERMINATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TERMINATOR");
		this.tTHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.THEN");
		this.tTHIS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.THIS");
		this.tTO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TO");
		this.tTRANSITION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TRANSITION");
		this.tTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TYPE");
		this.tUNCONDITIONALLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNCONDITIONALLY");
		this.tUNIQUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNIQUE");
		this.tUNLINK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNLINK");
		this.tUSING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.USING");
		this.tWHEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.WHEN");
		this.tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.WHILE");
		this.tWITH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.WITH");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.NULL");
		this.tFLUSH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FLUSH");
		this.tENDL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ENDL");
		this.tTRUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TRUE");
		this.tFALSE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FALSE");
		this.tLINE_NO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LINE_NO");
		this.tFILE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.FILE_NAME");
		this.tINTEGERLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.INTEGERLITERAL");
		this.tREALLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.REALLITERAL");
		this.tUNBASEDEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNBASEDEXPONENT");
		this.tBASEDEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.BASEDEXPONENT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DIGIT");
		this.tBASEDDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.BASEDDIGIT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.LETTER");
		this.tDURATIONLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.DURATIONLITERAL");
		this.tTIMESTAMPLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.TIMESTAMPLITERAL");
		this.tSTRINGLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.STRINGLITERAL");
		this.tESCAPESEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.ESCAPESEQUENCE");
		this.tOCTALESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.OCTALESCAPE");
		this.tUNICODEESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.UNICODEESCAPE");
		this.tHEXDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.HEXDIGIT");
		this.tRELATIONSHIPNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.RELATIONSHIPNAME");
		this.tIDENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.IDENT");
		this.tCOMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.COMMENT");
		this.tWHITESPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtuml.bp.ui.xtext.MASL.WHITESPACE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtuml.bp.ui.xtext.MASL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//definition:
	//	objectServiceDefinition
	//	| objectFunctionDefinition
	//	| stateDefinition
	//	| domainServiceDefinition
	//	| domainFunctionDefinition
	//	| terminatorServiceDefinition
	//	| terminatorFunctionDefinition;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Domain Definition
	////---------------------------------------------------------
	//domainName:
	//	identifier;
	public DomainNameElements getDomainNameAccess() {
		return pDomainName;
	}
	
	public ParserRule getDomainNameRule() {
		return getDomainNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Exception Declaration
	////---------------------------------------------------------
	//exceptionName:
	//	identifier;
	public ExceptionNameElements getExceptionNameAccess() {
		return pExceptionName;
	}
	
	public ParserRule getExceptionNameRule() {
		return getExceptionNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Type Reference
	////---------------------------------------------------------
	//typeReference:
	//	{typeReference} namedTypeRef
	//	| {typeReference} instanceTypeRef
	//	| c=collectionTypeRef
	//	| {typeReference} deprecatedType;
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//typeReferenceWithCA:
	//	typeReference
	//	| constrainedArrayTypeRef;
	public TypeReferenceWithCAElements getTypeReferenceWithCAAccess() {
		return pTypeReferenceWithCA;
	}
	
	public ParserRule getTypeReferenceWithCARule() {
		return getTypeReferenceWithCAAccess().getRule();
	}
	
	//deprecatedType:
	//	INSTANCE
	//	| EVENT
	//	| SERVICE;
	public DeprecatedTypeElements getDeprecatedTypeAccess() {
		return pDeprecatedType;
	}
	
	public ParserRule getDeprecatedTypeRule() {
		return getDeprecatedTypeAccess().getRule();
	}
	
	//qualifiedObjectName:
	//	(domainName SCOPE)? objectName;
	public QualifiedObjectNameElements getQualifiedObjectNameAccess() {
		return pQualifiedObjectName;
	}
	
	public ParserRule getQualifiedObjectNameRule() {
		return getQualifiedObjectNameAccess().getRule();
	}
	
	//instanceTypeRef:
	//	ANONYMOUS? INSTANCE OF qualifiedObjectName;
	public InstanceTypeRefElements getInstanceTypeRefAccess() {
		return pInstanceTypeRef;
	}
	
	public ParserRule getInstanceTypeRefRule() {
		return getInstanceTypeRefAccess().getRule();
	}
	
	//namedTypeRef:
	//	ANONYMOUS? (domainName SCOPE)? typeName;
	public NamedTypeRefElements getNamedTypeRefAccess() {
		return pNamedTypeRef;
	}
	
	public ParserRule getNamedTypeRefRule() {
		return getNamedTypeRefAccess().getRule();
	}
	
	//userDefinedTypeRef:
	//	(domainName SCOPE)? typeName;
	public UserDefinedTypeRefElements getUserDefinedTypeRefAccess() {
		return pUserDefinedTypeRef;
	}
	
	public ParserRule getUserDefinedTypeRefRule() {
		return getUserDefinedTypeRefAccess().getRule();
	}
	
	//constrainedArrayTypeRef:
	//	userDefinedTypeRef arrayBounds;
	public ConstrainedArrayTypeRefElements getConstrainedArrayTypeRefAccess() {
		return pConstrainedArrayTypeRef;
	}
	
	public ParserRule getConstrainedArrayTypeRefRule() {
		return getConstrainedArrayTypeRefAccess().getRule();
	}
	
	//typeName:
	//	identifier;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//arrayBounds:
	//	LPAREN e=expression RPAREN;
	public ArrayBoundsElements getArrayBoundsAccess() {
		return pArrayBounds;
	}
	
	public ParserRule getArrayBoundsRule() {
		return getArrayBoundsAccess().getRule();
	}
	
	//collectionTypeRef:
	//	ANONYMOUS? SEQUENCE (LPAREN e=expression RPAREN)? OF t=typeReference
	//	| ANONYMOUS? ARRAY a=arrayBounds OF t=typeReference
	//	| ANONYMOUS? SET OF t=typeReference
	//	| ANONYMOUS? BAG OF t=typeReference
	//	| {collectionTypeRef} ANONYMOUS? DICTIONARY (dictKeyType? OF d=dictValueType)?;
	public CollectionTypeRefElements getCollectionTypeRefAccess() {
		return pCollectionTypeRef;
	}
	
	public ParserRule getCollectionTypeRefRule() {
		return getCollectionTypeRefAccess().getRule();
	}
	
	//dictKeyType:
	//	n=namedTypeRef
	//	| i=instanceTypeRef;
	public DictKeyTypeElements getDictKeyTypeAccess() {
		return pDictKeyType;
	}
	
	public ParserRule getDictKeyTypeRule() {
		return getDictKeyTypeAccess().getRule();
	}
	
	//dictValueType:
	//	t=typeReference;
	public DictValueTypeElements getDictValueTypeAccess() {
		return pDictValueType;
	}
	
	public ParserRule getDictValueTypeRule() {
		return getDictValueTypeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Terminator Definition
	////---------------------------------------------------------
	//terminatorName:
	//	identifier;
	public TerminatorNameElements getTerminatorNameAccess() {
		return pTerminatorName;
	}
	
	public ParserRule getTerminatorNameRule() {
		return getTerminatorNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Object Definition
	////---------------------------------------------------------
	//objectName:
	//	identifier;
	public ObjectNameElements getObjectNameAccess() {
		return pObjectName;
	}
	
	public ParserRule getObjectNameRule() {
		return getObjectNameAccess().getRule();
	}
	
	//attributeName:
	//	identifier;
	public AttributeNameElements getAttributeNameAccess() {
		return pAttributeName;
	}
	
	public ParserRule getAttributeNameRule() {
		return getAttributeNameAccess().getRule();
	}
	
	//relationshipSpec:
	//	r+=RELATIONSHIPNAME (DOT r+=identifier (DOT r+=objectName)?)?;
	public RelationshipSpecElements getRelationshipSpecAccess() {
		return pRelationshipSpec;
	}
	
	public ParserRule getRelationshipSpecRule() {
		return getRelationshipSpecAccess().getRule();
	}
	
	//serviceType:
	//	(INSTANCE (DEFERRED LPAREN RELATIONSHIPNAME RPAREN)?)?;
	public ServiceTypeElements getServiceTypeAccess() {
		return pServiceType;
	}
	
	public ParserRule getServiceTypeRule() {
		return getServiceTypeAccess().getRule();
	}
	
	//eventName:
	//	identifier;
	public EventNameElements getEventNameAccess() {
		return pEventName;
	}
	
	public ParserRule getEventNameRule() {
		return getEventNameAccess().getRule();
	}
	
	//stateName:
	//	identifier;
	public StateNameElements getStateNameAccess() {
		return pStateName;
	}
	
	public ParserRule getStateNameRule() {
		return getStateNameAccess().getRule();
	}
	
	//stateType:
	//	{stateType} s=(ASSIGNER
	//	| assignerStart
	//	| CREATION
	//	| TERMINAL)?;
	public StateTypeElements getStateTypeAccess() {
		return pStateType;
	}
	
	public ParserRule getStateTypeRule() {
		return getStateTypeAccess().getRule();
	}
	
	//assignerStart:
	//	ASSIGNER START;
	public AssignerStartElements getAssignerStartAccess() {
		return pAssignerStart;
	}
	
	public ParserRule getAssignerStartRule() {
		return getAssignerStartAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Service Declaration
	////---------------------------------------------------------
	//parameterList:
	//	{parameterList} LPAREN
	//	p+=parameterDefinition? (COMMA p+=parameterDefinition)*
	//	RPAREN;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//parameterDefinition:
	//	parameterName COLON parameterMode parameterType;
	public ParameterDefinitionElements getParameterDefinitionAccess() {
		return pParameterDefinition;
	}
	
	public ParserRule getParameterDefinitionRule() {
		return getParameterDefinitionAccess().getRule();
	}
	
	//serviceVisibility:
	//	{serviceVisibility} v=(PRIVATE
	//	| PUBLIC)?;
	public ServiceVisibilityElements getServiceVisibilityAccess() {
		return pServiceVisibility;
	}
	
	public ParserRule getServiceVisibilityRule() {
		return getServiceVisibilityAccess().getRule();
	}
	
	//parameterMode:
	//	IN
	//	| OUT;
	public ParameterModeElements getParameterModeAccess() {
		return pParameterMode;
	}
	
	public ParserRule getParameterModeRule() {
		return getParameterModeAccess().getRule();
	}
	
	//serviceName:
	//	identifier;
	public ServiceNameElements getServiceNameAccess() {
		return pServiceName;
	}
	
	public ParserRule getServiceNameRule() {
		return getServiceNameAccess().getRule();
	}
	
	//parameterName:
	//	identifier;
	public ParameterNameElements getParameterNameAccess() {
		return pParameterName;
	}
	
	public ParserRule getParameterNameRule() {
		return getParameterNameAccess().getRule();
	}
	
	//parameterType:
	//	typeReference;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//returnType:
	//	typeReference;
	public ReturnTypeElements getReturnTypeAccess() {
		return pReturnType;
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Pragma Definition
	////---------------------------------------------------------
	//pragmaList:
	//	(pragmaDef SEMI)*;
	public PragmaListElements getPragmaListAccess() {
		return pPragmaList;
	}
	
	public ParserRule getPragmaListRule() {
		return getPragmaListAccess().getRule();
	}
	
	//pragmaDef:
	//	PRAGMA pragmaName
	//	LPAREN (pragmaValue (COMMA pragmaValue)*)?
	//	RPAREN;
	public PragmaDefElements getPragmaDefAccess() {
		return pPragmaDef;
	}
	
	public ParserRule getPragmaDefRule() {
		return getPragmaDefAccess().getRule();
	}
	
	//pragmaValue:
	//	identifier
	//	| literal;
	public PragmaValueElements getPragmaValueAccess() {
		return pPragmaValue;
	}
	
	public ParserRule getPragmaValueRule() {
		return getPragmaValueAccess().getRule();
	}
	
	//pragmaName:
	//	identifier;
	public PragmaNameElements getPragmaNameAccess() {
		return pPragmaName;
	}
	
	public ParserRule getPragmaNameRule() {
		return getPragmaNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Dynamic Behaviour
	////---------------------------------------------------------
	//domainServiceDefinition:
	//	s=serviceVisibility SERVICE
	//	domainName SCOPE serviceName
	//	p=parameterList IS
	//	c=codeBlock
	//	SERVICE? SEMI pragmaList;
	public DomainServiceDefinitionElements getDomainServiceDefinitionAccess() {
		return pDomainServiceDefinition;
	}
	
	public ParserRule getDomainServiceDefinitionRule() {
		return getDomainServiceDefinitionAccess().getRule();
	}
	
	//domainFunctionDefinition:
	//	s=serviceVisibility FUNCTION
	//	domainName SCOPE serviceName
	//	p=parameterList
	//	RETURN r=returnType IS c=codeBlock
	//	FUNCTION? SEMI pragmaList;
	public DomainFunctionDefinitionElements getDomainFunctionDefinitionAccess() {
		return pDomainFunctionDefinition;
	}
	
	public ParserRule getDomainFunctionDefinitionRule() {
		return getDomainFunctionDefinitionAccess().getRule();
	}
	
	//objectServiceDefinition:
	//	s=serviceVisibility INSTANCE? SERVICE
	//	domainName SCOPE objectName DOT serviceName
	//	p=parameterList IS c=codeBlock
	//	SERVICE? SEMI pragmaList;
	public ObjectServiceDefinitionElements getObjectServiceDefinitionAccess() {
		return pObjectServiceDefinition;
	}
	
	public ParserRule getObjectServiceDefinitionRule() {
		return getObjectServiceDefinitionAccess().getRule();
	}
	
	//terminatorServiceDefinition:
	//	s=serviceVisibility SERVICE
	//	domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName
	//	p=parameterList IS
	//	c=codeBlock
	//	SERVICE? SEMI pragmaList;
	public TerminatorServiceDefinitionElements getTerminatorServiceDefinitionAccess() {
		return pTerminatorServiceDefinition;
	}
	
	public ParserRule getTerminatorServiceDefinitionRule() {
		return getTerminatorServiceDefinitionAccess().getRule();
	}
	
	//terminatorFunctionDefinition:
	//	s=serviceVisibility FUNCTION
	//	domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName
	//	p=parameterList RETURN r=returnType IS
	//	c=codeBlock
	//	FUNCTION? SEMI pragmaList;
	public TerminatorFunctionDefinitionElements getTerminatorFunctionDefinitionAccess() {
		return pTerminatorFunctionDefinition;
	}
	
	public ParserRule getTerminatorFunctionDefinitionRule() {
		return getTerminatorFunctionDefinitionAccess().getRule();
	}
	
	//objectFunctionDefinition:
	//	v=serviceVisibility s=serviceType FUNCTION
	//	domainName SCOPE objectName DOT serviceName
	//	p=parameterList
	//	RETURN r=returnType IS c=codeBlock
	//	FUNCTION? SEMI pragmaList;
	public ObjectFunctionDefinitionElements getObjectFunctionDefinitionAccess() {
		return pObjectFunctionDefinition;
	}
	
	public ParserRule getObjectFunctionDefinitionRule() {
		return getObjectFunctionDefinitionAccess().getRule();
	}
	
	//stateDefinition:
	//	s=stateType STATE
	//	domainName SCOPE objectName DOT stateName
	//	p=parameterList IS c=codeBlock
	//	STATE? SEMI pragmaList;
	public StateDefinitionElements getStateDefinitionAccess() {
		return pStateDefinition;
	}
	
	public ParserRule getStateDefinitionRule() {
		return getStateDefinitionAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Statements
	////---------------------------------------------------------
	//statementList:
	//	{statementList} s+=statement*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//statement:
	//	{statement} (c=codeBlockStatement
	//	/ *
	//                                | =>( e=expression ASSIGN ) a=assignStatement
	//                                | =>( e=expression streamOperator ) s=streamStatement
	//                                | =>( NULL ) n=nullStatement
	//                                | =>( p=primaryExpression ( DOT | TERMINATOR_SCOPE | LBRACKET | PRIME ) ) c=callStatement
	//                                * /
	//	| => (e=assignStatement) | => (s=streamStatement) | => (n=nullStatement) | => (c=callStatement) | e=exitStatement
	//	| r=returnStatement
	//	| d=delayStatement
	//	| raiseStatement
	//	| d=deleteStatement
	//	| e=eraseStatement
	//	| l=linkStatement
	//	| s=scheduleStatement
	//	| c=cancelTimerStatement
	//	| g=generateStatement
	//	| i=ifStatement
	//	| c=caseStatement
	//	| f=forStatement
	//	| w=whileStatement)? / * empty statement * /
	//	SEMI pragmaList;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//nullStatement:
	//	NULL;
	public NullStatementElements getNullStatementAccess() {
		return pNullStatement;
	}
	
	public ParserRule getNullStatementRule() {
		return getNullStatementAccess().getRule();
	}
	
	//assignStatement:
	//	lhs=expression ASSIGN rhs=expression;
	public AssignStatementElements getAssignStatementAccess() {
		return pAssignStatement;
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}
	
	//streamOperator:
	//	STREAM_IN
	//	| STREAM_OUT
	//	| STREAM_LINE_IN
	//	| STREAM_LINE_OUT;
	public StreamOperatorElements getStreamOperatorAccess() {
		return pStreamOperator;
	}
	
	public ParserRule getStreamOperatorRule() {
		return getStreamOperatorAccess().getRule();
	}
	
	//streamValue:
	//	streamOperator expression;
	public StreamValueElements getStreamValueAccess() {
		return pStreamValue;
	}
	
	public ParserRule getStreamValueRule() {
		return getStreamValueAccess().getRule();
	}
	
	//streamStatement:
	//	e=expression s+=streamValue+;
	public StreamStatementElements getStreamStatementAccess() {
		return pStreamStatement;
	}
	
	public ParserRule getStreamStatementRule() {
		return getStreamStatementAccess().getRule();
	}
	
	//callStatement:
	//	p=primaryExpression
	//	((DOT identifier
	//	| TERMINATOR_SCOPE identifier
	//	| LBRACKET e+=expression RBRACKET
	//	| PRIME c+=characteristic)*
	//	LPAREN a+=argumentList RPAREN)+;
	public CallStatementElements getCallStatementAccess() {
		return pCallStatement;
	}
	
	public ParserRule getCallStatementRule() {
		return getCallStatementAccess().getRule();
	}
	
	//exitStatement:
	//	{exitStatement} EXIT (WHEN c=condition)?;
	public ExitStatementElements getExitStatementAccess() {
		return pExitStatement;
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}
	
	//returnStatement:
	//	RETURN expression;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//delayStatement:
	//	DELAY expression;
	public DelayStatementElements getDelayStatementAccess() {
		return pDelayStatement;
	}
	
	public ParserRule getDelayStatementRule() {
		return getDelayStatementAccess().getRule();
	}
	
	//raiseStatement:
	//	RAISE qualifiedExceptionName;
	public RaiseStatementElements getRaiseStatementAccess() {
		return pRaiseStatement;
	}
	
	public ParserRule getRaiseStatementRule() {
		return getRaiseStatementAccess().getRule();
	}
	
	//deleteStatement:
	//	DELETE expression;
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//eraseStatement:
	//	ERASE expression;
	public EraseStatementElements getEraseStatementAccess() {
		return pEraseStatement;
	}
	
	public ParserRule getEraseStatementRule() {
		return getEraseStatementAccess().getRule();
	}
	
	//linkStatement:
	//	linkType
	//	n1=navigateExpression r=relationshipSpec (n2=navigateExpression (USING n3=navigateExpression)?)?;
	public LinkStatementElements getLinkStatementAccess() {
		return pLinkStatement;
	}
	
	public ParserRule getLinkStatementRule() {
		return getLinkStatementAccess().getRule();
	}
	
	//linkType:
	//	LINK
	//	| UNLINK;
	public LinkTypeElements getLinkTypeAccess() {
		return pLinkType;
	}
	
	public ParserRule getLinkTypeRule() {
		return getLinkTypeAccess().getRule();
	}
	
	//scheduleStatement:
	//	SCHEDULE expression
	//	g=generateStatement
	//	scheduleType e+=expression (DELTA e+=expression)?;
	public ScheduleStatementElements getScheduleStatementAccess() {
		return pScheduleStatement;
	}
	
	public ParserRule getScheduleStatementRule() {
		return getScheduleStatementAccess().getRule();
	}
	
	//cancelTimerStatement:
	//	CANCEL expression;
	public CancelTimerStatementElements getCancelTimerStatementAccess() {
		return pCancelTimerStatement;
	}
	
	public ParserRule getCancelTimerStatementRule() {
		return getCancelTimerStatementAccess().getRule();
	}
	
	//scheduleType:
	//	AT
	//	| DELAY;
	public ScheduleTypeElements getScheduleTypeAccess() {
		return pScheduleType;
	}
	
	public ParserRule getScheduleTypeRule() {
		return getScheduleTypeAccess().getRule();
	}
	
	//generateStatement:
	//	GENERATE qualifiedEventName
	//	LPAREN argumentList RPAREN (TO e=expression)?;
	public GenerateStatementElements getGenerateStatementAccess() {
		return pGenerateStatement;
	}
	
	public ParserRule getGenerateStatementRule() {
		return getGenerateStatementAccess().getRule();
	}
	
	//qualifiedEventName:
	//	(qualifiedObjectName DOT)? eventName;
	public QualifiedEventNameElements getQualifiedEventNameAccess() {
		return pQualifiedEventName;
	}
	
	public ParserRule getQualifiedEventNameRule() {
		return getQualifiedEventNameAccess().getRule();
	}
	
	//ifStatement:
	//	IF c=condition THEN
	//	s=statementList
	//	e1+=elsifBlock*
	//	e2=elseBlock?
	//	END IF?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//elsifBlock:
	//	ELSIF c=condition THEN
	//	s=statementList;
	public ElsifBlockElements getElsifBlockAccess() {
		return pElsifBlock;
	}
	
	public ParserRule getElsifBlockRule() {
		return getElsifBlockAccess().getRule();
	}
	
	//elseBlock:
	//	ELSE statementList;
	public ElseBlockElements getElseBlockAccess() {
		return pElseBlock;
	}
	
	public ParserRule getElseBlockRule() {
		return getElseBlockAccess().getRule();
	}
	
	//whileStatement:
	//	WHILE c=condition
	//	LOOP
	//	s=statementList
	//	END LOOP?;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//condition:
	//	expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//caseStatement:
	//	CASE expression IS
	//	c1+=caseAlternative*
	//	c2=caseOthers?
	//	END CASE?;
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//caseAlternative:
	//	WHEN choiceList GOES_TO s=statementList;
	public CaseAlternativeElements getCaseAlternativeAccess() {
		return pCaseAlternative;
	}
	
	public ParserRule getCaseAlternativeRule() {
		return getCaseAlternativeAccess().getRule();
	}
	
	//choiceList:
	//	e+=expression (CASE_OR e+=expression)*;
	public ChoiceListElements getChoiceListAccess() {
		return pChoiceList;
	}
	
	public ParserRule getChoiceListRule() {
		return getChoiceListAccess().getRule();
	}
	
	//caseOthers:
	//	WHEN OTHERS GOES_TO statementList;
	public CaseOthersElements getCaseOthersAccess() {
		return pCaseOthers;
	}
	
	public ParserRule getCaseOthersRule() {
		return getCaseOthersAccess().getRule();
	}
	
	//forStatement:
	//	FOR loopVariableSpec
	//	LOOP
	//	s=statementList
	//	END LOOP?;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//loopVariableSpec:
	//	identifier IN REVERSE? expression;
	public LoopVariableSpecElements getLoopVariableSpecAccess() {
		return pLoopVariableSpec;
	}
	
	public ParserRule getLoopVariableSpecRule() {
		return getLoopVariableSpecAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Code Blocks
	////---------------------------------------------------------
	//codeBlockStatement:
	//	(DECLARE
	//	v+=variableDeclaration*)?
	//	BEGIN
	//	s=statementList (EXCEPTION
	//	e+=exceptionHandler*
	//	p=otherHandler?)?
	//	END;
	public CodeBlockStatementElements getCodeBlockStatementAccess() {
		return pCodeBlockStatement;
	}
	
	public ParserRule getCodeBlockStatementRule() {
		return getCodeBlockStatementAccess().getRule();
	}
	
	//codeBlock:
	//	v+=variableDeclaration*
	//	BEGIN
	//	s=statementList (EXCEPTION
	//	e+=exceptionHandler*
	//	o=otherHandler?)?
	//	END;
	public CodeBlockElements getCodeBlockAccess() {
		return pCodeBlock;
	}
	
	public ParserRule getCodeBlockRule() {
		return getCodeBlockAccess().getRule();
	}
	
	//variableDeclaration:
	//	variableName COLON
	//	READONLY? t=typeReferenceWithCA (ASSIGN e=expression)?
	//	SEMI pragmaList;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//exceptionHandler:
	//	WHEN qualifiedExceptionName GOES_TO statementList;
	public ExceptionHandlerElements getExceptionHandlerAccess() {
		return pExceptionHandler;
	}
	
	public ParserRule getExceptionHandlerRule() {
		return getExceptionHandlerAccess().getRule();
	}
	
	//otherHandler:
	//	WHEN OTHERS GOES_TO statementList;
	public OtherHandlerElements getOtherHandlerAccess() {
		return pOtherHandler;
	}
	
	public ParserRule getOtherHandlerRule() {
		return getOtherHandlerAccess().getRule();
	}
	
	//qualifiedExceptionName:
	//	(domainName SCOPE)? exceptionName;
	public QualifiedExceptionNameElements getQualifiedExceptionNameAccess() {
		return pQualifiedExceptionName;
	}
	
	public ParserRule getQualifiedExceptionNameRule() {
		return getQualifiedExceptionNameAccess().getRule();
	}
	
	//variableName:
	//	identifier;
	public VariableNameElements getVariableNameAccess() {
		return pVariableName;
	}
	
	public ParserRule getVariableNameRule() {
		return getVariableNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Find Condition Definition
	////---------------------------------------------------------
	//findCondition:
	//	f=findLogicalOr;
	public FindConditionElements getFindConditionAccess() {
		return pFindCondition;
	}
	
	public ParserRule getFindConditionRule() {
		return getFindConditionAccess().getRule();
	}
	
	//findLogicalOr:
	//	f+=findLogicalXor (OR f+=findLogicalXor)*;
	public FindLogicalOrElements getFindLogicalOrAccess() {
		return pFindLogicalOr;
	}
	
	public ParserRule getFindLogicalOrRule() {
		return getFindLogicalOrAccess().getRule();
	}
	
	//findLogicalXor:
	//	f+=findLogicalAnd (XOR f+=findLogicalAnd)*;
	public FindLogicalXorElements getFindLogicalXorAccess() {
		return pFindLogicalXor;
	}
	
	public ParserRule getFindLogicalXorRule() {
		return getFindLogicalXorAccess().getRule();
	}
	
	//findLogicalAnd:
	//	f+=findPrimary (AND f+=findPrimary)*;
	public FindLogicalAndElements getFindLogicalAndAccess() {
		return pFindLogicalAnd;
	}
	
	public ParserRule getFindLogicalAndRule() {
		return getFindLogicalAndAccess().getRule();
	}
	
	//findPrimary:
	//	findComparison
	//	| findUnary;
	public FindPrimaryElements getFindPrimaryAccess() {
		return pFindPrimary;
	}
	
	public ParserRule getFindPrimaryRule() {
		return getFindPrimaryAccess().getRule();
	}
	
	//findUnary:
	//	NOT findUnary
	//	| LPAREN findCondition RPAREN;
	public FindUnaryElements getFindUnaryAccess() {
		return pFindUnary;
	}
	
	public ParserRule getFindUnaryRule() {
		return getFindUnaryAccess().getRule();
	}
	
	//findComparison:
	//	f=findName (EQUAL | NOT_EQUAL | LT | GT | LTE | GTE) a=additiveExp;
	public FindComparisonElements getFindComparisonAccess() {
		return pFindComparison;
	}
	
	public ParserRule getFindComparisonRule() {
		return getFindComparisonAccess().getRule();
	}
	
	//findName:
	//	i1=identifier
	//	(DOT i2+=identifier
	//	| LBRACKET e+=expression RBRACKET)*;
	public FindNameElements getFindNameAccess() {
		return pFindName;
	}
	
	public ParserRule getFindNameRule() {
		return getFindNameAccess().getRule();
	}
	
	////---------------------------------------------------------
	//// Expression Definition
	////---------------------------------------------------------
	//expression:
	//	r=rangeExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//rangeExpression:
	//	l+=logicalOr (RANGE_DOTS l+=logicalOr)?;
	public RangeExpressionElements getRangeExpressionAccess() {
		return pRangeExpression;
	}
	
	public ParserRule getRangeExpressionRule() {
		return getRangeExpressionAccess().getRule();
	}
	
	//logicalOr:
	//	l+=logicalXor (OR l+=logicalXor)*;
	public LogicalOrElements getLogicalOrAccess() {
		return pLogicalOr;
	}
	
	public ParserRule getLogicalOrRule() {
		return getLogicalOrAccess().getRule();
	}
	
	//logicalXor:
	//	l+=logicalAnd (XOR l+=logicalAnd)*;
	public LogicalXorElements getLogicalXorAccess() {
		return pLogicalXor;
	}
	
	public ParserRule getLogicalXorRule() {
		return getLogicalXorAccess().getRule();
	}
	
	//logicalAnd:
	//	e+=equality (AND e+=equality)*;
	public LogicalAndElements getLogicalAndAccess() {
		return pLogicalAnd;
	}
	
	public ParserRule getLogicalAndRule() {
		return getLogicalAndAccess().getRule();
	}
	
	//equality:
	//	r+=relationalExp ((EQUAL | NOT_EQUAL) r+=relationalExp)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//relationalExp:
	//	a+=additiveExp ((LT | GT | LTE | GTE) a+=additiveExp)*;
	public RelationalExpElements getRelationalExpAccess() {
		return pRelationalExp;
	}
	
	public ParserRule getRelationalExpRule() {
		return getRelationalExpAccess().getRule();
	}
	
	//additiveExp:
	//	m+=multExp ((PLUS | MINUS | CONCATENATE | UNION | NOT_IN) m+=multExp)*;
	public AdditiveExpElements getAdditiveExpAccess() {
		return pAdditiveExp;
	}
	
	public ParserRule getAdditiveExpRule() {
		return getAdditiveExpAccess().getRule();
	}
	
	//multExp:
	//	u+=unaryExp ((TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION) u+=unaryExp)*;
	public MultExpElements getMultExpAccess() {
		return pMultExp;
	}
	
	public ParserRule getMultExpRule() {
		return getMultExpAccess().getRule();
	}
	
	//unaryExp:
	//	unaryOperator unaryExp
	//	| linkExpression;
	public UnaryExpElements getUnaryExpAccess() {
		return pUnaryExp;
	}
	
	public ParserRule getUnaryExpRule() {
		return getUnaryExpAccess().getRule();
	}
	
	//unaryOperator:
	//	MINUS
	//	| PLUS
	//	| NOT
	//	| ABS;
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//linkExpression:
	//	n1=navigateExpression
	//	| linkType
	//	n2=navigateExpression r=relationshipSpec
	//	n3=navigateExpression?;
	public LinkExpressionElements getLinkExpressionAccess() {
		return pLinkExpression;
	}
	
	public ParserRule getLinkExpressionRule() {
		return getLinkExpressionAccess().getRule();
	}
	
	//navigateExpression:
	//	e+=extendedExpression
	//	(NAVIGATE r+=relationshipSpec w+=whereClause?
	//	| WITH e+=extendedExpression
	//	NAVIGATE r+=relationshipSpec
	//	| ORDERED_BY sortOrder
	//	| REVERSE_ORDERED_BY sortOrder)*;
	public NavigateExpressionElements getNavigateExpressionAccess() {
		return pNavigateExpression;
	}
	
	public ParserRule getNavigateExpressionRule() {
		return getNavigateExpressionAccess().getRule();
	}
	
	//extendedExpression:
	//	postfixExpression
	//	| createExpression
	//	| findExpression;
	public ExtendedExpressionElements getExtendedExpressionAccess() {
		return pExtendedExpression;
	}
	
	public ParserRule getExtendedExpressionRule() {
		return getExtendedExpressionAccess().getRule();
	}
	
	//sortOrder:
	//	LPAREN (sortOrderComponent (COMMA sortOrderComponent)*)?
	//	RPAREN;
	public SortOrderElements getSortOrderAccess() {
		return pSortOrder;
	}
	
	public ParserRule getSortOrderRule() {
		return getSortOrderAccess().getRule();
	}
	
	//sortOrderComponent:
	//	REVERSE? identifier;
	public SortOrderComponentElements getSortOrderComponentAccess() {
		return pSortOrderComponent;
	}
	
	public ParserRule getSortOrderComponentRule() {
		return getSortOrderComponentAccess().getRule();
	}
	
	//createExpression:
	//	CREATE UNIQUE? objectName createArgumentList;
	public CreateExpressionElements getCreateExpressionAccess() {
		return pCreateExpression;
	}
	
	public ParserRule getCreateExpressionRule() {
		return getCreateExpressionAccess().getRule();
	}
	
	//createArgumentList:
	//	{createArgumentList} LPAREN (c+=createArgument (COMMA c+=createArgument)*)?
	//	RPAREN;
	public CreateArgumentListElements getCreateArgumentListAccess() {
		return pCreateArgumentList;
	}
	
	public ParserRule getCreateArgumentListRule() {
		return getCreateArgumentListAccess().getRule();
	}
	
	//createArgument:
	//	a=attributeName GOES_TO e=expression
	//	| CURRENT_STATE GOES_TO s=stateName;
	public CreateArgumentElements getCreateArgumentAccess() {
		return pCreateArgument;
	}
	
	public ParserRule getCreateArgumentRule() {
		return getCreateArgumentAccess().getRule();
	}
	
	//findExpression:
	//	findType p=postfixNoCallExpression
	//	w=whereClause;
	public FindExpressionElements getFindExpressionAccess() {
		return pFindExpression;
	}
	
	public ParserRule getFindExpressionRule() {
		return getFindExpressionAccess().getRule();
	}
	
	//whereClause:
	//	{whereClause} LPAREN findCondition? RPAREN;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//findType:
	//	FIND
	//	| FIND_ONE
	//	| FIND_ONLY;
	public FindTypeElements getFindTypeAccess() {
		return pFindType;
	}
	
	public ParserRule getFindTypeRule() {
		return getFindTypeAccess().getRule();
	}
	
	//postfixExpression:
	//	p=primaryExpression
	//	(LPAREN a+=argumentList RPAREN
	//	| DOT identifier
	//	| TERMINATOR_SCOPE identifier
	//	| LBRACKET e+=expression RBRACKET
	//	| (PRIME characteristic LPAREN) =>
	//	PRIME characteristic LPAREN a+=argumentList RPAREN
	//	| PRIME characteristic)*;
	public PostfixExpressionElements getPostfixExpressionAccess() {
		return pPostfixExpression;
	}
	
	public ParserRule getPostfixExpressionRule() {
		return getPostfixExpressionAccess().getRule();
	}
	
	//postfixNoCallExpression:
	//	p=primaryExpression
	//	(DOT identifier
	//	| TERMINATOR_SCOPE identifier
	//	| LBRACKET e+=expression RBRACKET
	//	| PRIME characteristic)*;
	public PostfixNoCallExpressionElements getPostfixNoCallExpressionAccess() {
		return pPostfixNoCallExpression;
	}
	
	public ParserRule getPostfixNoCallExpressionRule() {
		return getPostfixNoCallExpressionAccess().getRule();
	}
	
	//primaryExpression:
	//	{primaryExpression} literal
	//	| parenthesisedExpression
	//	| {primaryExpression} nameExpression
	//	| typeNameExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//typeNameExpression:
	//	{typeNameExpression} instanceTypeRef
	//	| collectionTypeRef;
	public TypeNameExpressionElements getTypeNameExpressionAccess() {
		return pTypeNameExpression;
	}
	
	public ParserRule getTypeNameExpressionRule() {
		return getTypeNameExpressionAccess().getRule();
	}
	
	//nameExpression:
	//	(domainName SCOPE)? identifier;
	public NameExpressionElements getNameExpressionAccess() {
		return pNameExpression;
	}
	
	public ParserRule getNameExpressionRule() {
		return getNameExpressionAccess().getRule();
	}
	
	//parenthesisedExpression:
	//	LPAREN e+=expression (COMMA e+=expression)*
	//	RPAREN;
	public ParenthesisedExpressionElements getParenthesisedExpressionAccess() {
		return pParenthesisedExpression;
	}
	
	public ParserRule getParenthesisedExpressionRule() {
		return getParenthesisedExpressionAccess().getRule();
	}
	
	//argumentList:
	//	{argumentList} (e1+=expression (COMMA e1+=expression)*)?;
	public ArgumentListElements getArgumentListAccess() {
		return pArgumentList;
	}
	
	public ParserRule getArgumentListRule() {
		return getArgumentListAccess().getRule();
	}
	
	//literal:
	//	INTEGERLITERAL
	//	| REALLITERAL
	//	//| CHARACTERLITERAL
	//	| STRINGLITERAL
	//	| TIMESTAMPLITERAL
	//	| DURATIONLITERAL
	//	| TRUE
	//	| FALSE
	//	| NULL
	//	| FLUSH
	//	| ENDL
	//	| THIS
	//	| CONSOLE
	//	| LINE_NO
	//	| FILE_NAME;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//identifier:
	//	IDENT;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//characteristic:
	//	IDENT
	//	| characteristicRW;
	public CharacteristicElements getCharacteristicAccess() {
		return pCharacteristic;
	}
	
	public ParserRule getCharacteristicRule() {
		return getCharacteristicAccess().getRule();
	}
	
	//characteristicRW:
	//	RANGE | DELTA;
	public CharacteristicRWElements getCharacteristicRWAccess() {
		return pCharacteristicRW;
	}
	
	public ParserRule getCharacteristicRWRule() {
		return getCharacteristicRWAccess().getRule();
	}
	
	//terminal AND:
	//	'and';
	public TerminalRule getANDRule() {
		return tAND;
	}
	
	//terminal OR:
	//	'or';
	public TerminalRule getORRule() {
		return tOR;
	}
	
	//terminal XOR:
	//	'xor';
	public TerminalRule getXORRule() {
		return tXOR;
	}
	
	//terminal ABS:
	//	'abs';
	public TerminalRule getABSRule() {
		return tABS;
	}
	
	//terminal NOT:
	//	'not';
	public TerminalRule getNOTRule() {
		return tNOT;
	}
	
	//terminal PLUS:
	//	'+';
	public TerminalRule getPLUSRule() {
		return tPLUS;
	}
	
	//terminal MINUS:
	//	'-';
	public TerminalRule getMINUSRule() {
		return tMINUS;
	}
	
	//terminal CONCATENATE:
	//	'&';
	public TerminalRule getCONCATENATERule() {
		return tCONCATENATE;
	}
	
	//terminal UNION:
	//	'union';
	public TerminalRule getUNIONRule() {
		return tUNION;
	}
	
	//terminal NOT_IN:
	//	'not_in';
	public TerminalRule getNOT_INRule() {
		return tNOT_IN;
	}
	
	//terminal DIVIDE:
	//	'/';
	public TerminalRule getDIVIDERule() {
		return tDIVIDE;
	}
	
	//terminal TIMES:
	//	'*';
	public TerminalRule getTIMESRule() {
		return tTIMES;
	}
	
	//terminal INTERSECTION:
	//	'intersection';
	public TerminalRule getINTERSECTIONRule() {
		return tINTERSECTION;
	}
	
	//terminal MOD:
	//	'mod';
	public TerminalRule getMODRule() {
		return tMOD;
	}
	
	//terminal POWER:
	//	'**';
	public TerminalRule getPOWERRule() {
		return tPOWER;
	}
	
	//terminal REM:
	//	'rem';
	public TerminalRule getREMRule() {
		return tREM;
	}
	
	//terminal DISUNION:
	//	'disunion';
	public TerminalRule getDISUNIONRule() {
		return tDISUNION;
	}
	
	//terminal EQUAL:
	//	'=';
	public TerminalRule getEQUALRule() {
		return tEQUAL;
	}
	
	//terminal NOT_EQUAL:
	//	'/=';
	public TerminalRule getNOT_EQUALRule() {
		return tNOT_EQUAL;
	}
	
	//terminal GT:
	//	'>';
	public TerminalRule getGTRule() {
		return tGT;
	}
	
	//terminal GTE:
	//	'>=';
	public TerminalRule getGTERule() {
		return tGTE;
	}
	
	//terminal LT:
	//	'<';
	public TerminalRule getLTRule() {
		return tLT;
	}
	
	//terminal LTE:
	//	'<=';
	public TerminalRule getLTERule() {
		return tLTE;
	}
	
	//terminal STREAM_LINE_IN:
	//	'>>>';
	public TerminalRule getSTREAM_LINE_INRule() {
		return tSTREAM_LINE_IN;
	}
	
	//terminal STREAM_LINE_OUT:
	//	'<<<';
	public TerminalRule getSTREAM_LINE_OUTRule() {
		return tSTREAM_LINE_OUT;
	}
	
	//terminal STREAM_IN:
	//	'>>';
	public TerminalRule getSTREAM_INRule() {
		return tSTREAM_IN;
	}
	
	//terminal STREAM_OUT:
	//	'<<';
	public TerminalRule getSTREAM_OUTRule() {
		return tSTREAM_OUT;
	}
	
	//terminal ASSIGN:
	//	':=';
	public TerminalRule getASSIGNRule() {
		return tASSIGN;
	}
	
	//terminal COLON:
	//	':';
	public TerminalRule getCOLONRule() {
		return tCOLON;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal DOT:
	//	'.';
	public TerminalRule getDOTRule() {
		return tDOT;
	}
	
	//terminal LTGT:
	//	'<>';
	public TerminalRule getLTGTRule() {
		return tLTGT;
	}
	
	//terminal PRIME:
	//	'\'';
	public TerminalRule getPRIMERule() {
		return tPRIME;
	}
	
	//terminal RANGE_DOTS:
	//	'..';
	public TerminalRule getRANGE_DOTSRule() {
		return tRANGE_DOTS;
	}
	
	//terminal LPAREN:
	//	'(';
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	}
	
	//terminal RPAREN:
	//	')';
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	}
	
	//terminal LBRACKET:
	//	'[';
	public TerminalRule getLBRACKETRule() {
		return tLBRACKET;
	}
	
	//terminal RBRACKET:
	//	']';
	public TerminalRule getRBRACKETRule() {
		return tRBRACKET;
	}
	
	//terminal SCOPE:
	//	'::';
	public TerminalRule getSCOPERule() {
		return tSCOPE;
	}
	
	//terminal SEMI:
	//	';';
	public TerminalRule getSEMIRule() {
		return tSEMI;
	}
	
	//terminal GOES_TO:
	//	'=>';
	public TerminalRule getGOES_TORule() {
		return tGOES_TO;
	}
	
	//terminal NAVIGATE:
	//	'->';
	public TerminalRule getNAVIGATERule() {
		return tNAVIGATE;
	}
	
	//terminal TERMINATOR_SCOPE:
	//	'~>';
	public TerminalRule getTERMINATOR_SCOPERule() {
		return tTERMINATOR_SCOPE;
	}
	
	//terminal CASE_OR:
	//	'|';
	public TerminalRule getCASE_ORRule() {
		return tCASE_OR;
	}
	
	//terminal ARRAY:
	//	'array';
	public TerminalRule getARRAYRule() {
		return tARRAY;
	}
	
	//terminal ANONYMOUS:
	//	'anonymous';
	public TerminalRule getANONYMOUSRule() {
		return tANONYMOUS;
	}
	
	//terminal ASSIGNER:
	//	'assigner';
	public TerminalRule getASSIGNERRule() {
		return tASSIGNER;
	}
	
	//terminal AT:
	//	'at';
	public TerminalRule getATRule() {
		return tAT;
	}
	
	//terminal BAG:
	//	'bag';
	public TerminalRule getBAGRule() {
		return tBAG;
	}
	
	//terminal BEGIN:
	//	'begin';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal CANNOT_HAPPEN:
	//	'Cannot_Happen' | 'cannot_happen';
	public TerminalRule getCANNOT_HAPPENRule() {
		return tCANNOT_HAPPEN;
	}
	
	//terminal CANCEL:
	//	'cancel';
	public TerminalRule getCANCELRule() {
		return tCANCEL;
	}
	
	//terminal CASE:
	//	'case';
	public TerminalRule getCASERule() {
		return tCASE;
	}
	
	//terminal CONDITIONALLY:
	//	'conditionally';
	public TerminalRule getCONDITIONALLYRule() {
		return tCONDITIONALLY;
	}
	
	//terminal CONSOLE:
	//	'console';
	public TerminalRule getCONSOLERule() {
		return tCONSOLE;
	}
	
	//terminal CREATE:
	//	'create';
	public TerminalRule getCREATERule() {
		return tCREATE;
	}
	
	//terminal CREATION:
	//	'creation';
	public TerminalRule getCREATIONRule() {
		return tCREATION;
	}
	
	//terminal CURRENT_STATE:
	//	'Current_State' / * | 'current_state' * /;
	public TerminalRule getCURRENT_STATERule() {
		return tCURRENT_STATE;
	}
	
	//terminal DECLARE:
	//	'declare';
	public TerminalRule getDECLARERule() {
		return tDECLARE;
	}
	
	//terminal DEFERRED:
	//	'deferred';
	public TerminalRule getDEFERREDRule() {
		return tDEFERRED;
	}
	
	//terminal DELAY:
	//	'delay';
	public TerminalRule getDELAYRule() {
		return tDELAY;
	}
	
	//terminal DELETE:
	//	'delete';
	public TerminalRule getDELETERule() {
		return tDELETE;
	}
	
	//terminal DELTA:
	//	'delta';
	public TerminalRule getDELTARule() {
		return tDELTA;
	}
	
	//terminal DICTIONARY:
	//	'dictionary';
	public TerminalRule getDICTIONARYRule() {
		return tDICTIONARY;
	}
	
	//terminal DIGITS:
	//	'digits';
	public TerminalRule getDIGITSRule() {
		return tDIGITS;
	}
	
	//terminal DOMAIN:
	//	'domain';
	public TerminalRule getDOMAINRule() {
		return tDOMAIN;
	}
	
	//terminal ELSE:
	//	'else';
	public TerminalRule getELSERule() {
		return tELSE;
	}
	
	//terminal ELSIF:
	//	'elsif';
	public TerminalRule getELSIFRule() {
		return tELSIF;
	}
	
	//terminal END:
	//	'end';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ENUM:
	//	'enum';
	public TerminalRule getENUMRule() {
		return tENUM;
	}
	
	//terminal ERASE:
	//	'erase';
	public TerminalRule getERASERule() {
		return tERASE;
	}
	
	//terminal EVENT:
	//	'event';
	public TerminalRule getEVENTRule() {
		return tEVENT;
	}
	
	//terminal EXCEPTION:
	//	'exception';
	public TerminalRule getEXCEPTIONRule() {
		return tEXCEPTION;
	}
	
	//terminal EXIT:
	//	'exit';
	public TerminalRule getEXITRule() {
		return tEXIT;
	}
	
	//terminal FIND:
	//	'find' | 'find_all';
	public TerminalRule getFINDRule() {
		return tFIND;
	}
	
	//terminal FIND_ONE:
	//	'find_one';
	public TerminalRule getFIND_ONERule() {
		return tFIND_ONE;
	}
	
	//terminal FIND_ONLY:
	//	'find_only';
	public TerminalRule getFIND_ONLYRule() {
		return tFIND_ONLY;
	}
	
	//terminal FOR:
	//	'for';
	public TerminalRule getFORRule() {
		return tFOR;
	}
	
	//terminal FUNCTION:
	//	'function';
	public TerminalRule getFUNCTIONRule() {
		return tFUNCTION;
	}
	
	//terminal GENERATE:
	//	'generate';
	public TerminalRule getGENERATERule() {
		return tGENERATE;
	}
	
	//terminal IDENTIF:
	//	'identifier';
	public TerminalRule getIDENTIFRule() {
		return tIDENTIF;
	}
	
	//terminal IF:
	//	'if';
	public TerminalRule getIFRule() {
		return tIF;
	}
	
	//terminal IGNORE:
	//	'Ignore' / * | 'ignore' * /;
	public TerminalRule getIGNORERule() {
		return tIGNORE;
	}
	
	//terminal IN:
	//	'in';
	public TerminalRule getINRule() {
		return tIN;
	}
	
	//terminal INSTANCE:
	//	'instance';
	public TerminalRule getINSTANCERule() {
		return tINSTANCE;
	}
	
	//terminal IS_A:
	//	'is_a';
	public TerminalRule getIS_ARule() {
		return tIS_A;
	}
	
	//terminal IS:
	//	'is';
	public TerminalRule getISRule() {
		return tIS;
	}
	
	//terminal LINK:
	//	'link';
	public TerminalRule getLINKRule() {
		return tLINK;
	}
	
	//terminal LOOP:
	//	'loop';
	public TerminalRule getLOOPRule() {
		return tLOOP;
	}
	
	//terminal MANY:
	//	'many';
	public TerminalRule getMANYRule() {
		return tMANY;
	}
	
	//terminal NON_EXISTENT:
	//	'Non_Existent' | 'Non_Existant' | 'non_existent';
	public TerminalRule getNON_EXISTENTRule() {
		return tNON_EXISTENT;
	}
	
	//terminal OBJECT:
	//	'object';
	public TerminalRule getOBJECTRule() {
		return tOBJECT;
	}
	
	//terminal OF:
	//	'of';
	public TerminalRule getOFRule() {
		return tOF;
	}
	
	//terminal ONE:
	//	'one';
	public TerminalRule getONERule() {
		return tONE;
	}
	
	//terminal ORDERED_BY:
	//	'ordered_by';
	public TerminalRule getORDERED_BYRule() {
		return tORDERED_BY;
	}
	
	//terminal OTHERS:
	//	'others';
	public TerminalRule getOTHERSRule() {
		return tOTHERS;
	}
	
	//terminal OUT:
	//	'out';
	public TerminalRule getOUTRule() {
		return tOUT;
	}
	
	//terminal PRAGMA:
	//	'pragma';
	public TerminalRule getPRAGMARule() {
		return tPRAGMA;
	}
	
	//terminal PREFERRED:
	//	'preferred';
	public TerminalRule getPREFERREDRule() {
		return tPREFERRED;
	}
	
	//terminal PRIVATE:
	//	'private';
	public TerminalRule getPRIVATERule() {
		return tPRIVATE;
	}
	
	//terminal PROJECT:
	//	'project';
	public TerminalRule getPROJECTRule() {
		return tPROJECT;
	}
	
	//terminal PUBLIC:
	//	'public';
	public TerminalRule getPUBLICRule() {
		return tPUBLIC;
	}
	
	//terminal RAISE:
	//	'raise';
	public TerminalRule getRAISERule() {
		return tRAISE;
	}
	
	//terminal RANGE:
	//	'range';
	public TerminalRule getRANGERule() {
		return tRANGE;
	}
	
	//terminal READONLY:
	//	'readonly';
	public TerminalRule getREADONLYRule() {
		return tREADONLY;
	}
	
	//terminal REFERENTIAL:
	//	'referential';
	public TerminalRule getREFERENTIALRule() {
		return tREFERENTIAL;
	}
	
	//terminal RELATIONSHIP:
	//	'relationship';
	public TerminalRule getRELATIONSHIPRule() {
		return tRELATIONSHIP;
	}
	
	//terminal RETURN:
	//	'return';
	public TerminalRule getRETURNRule() {
		return tRETURN;
	}
	
	//terminal REVERSE:
	//	'reverse';
	public TerminalRule getREVERSERule() {
		return tREVERSE;
	}
	
	//terminal REVERSE_ORDERED_BY:
	//	'reverse_ordered_by';
	public TerminalRule getREVERSE_ORDERED_BYRule() {
		return tREVERSE_ORDERED_BY;
	}
	
	//terminal SCHEDULE:
	//	'schedule';
	public TerminalRule getSCHEDULERule() {
		return tSCHEDULE;
	}
	
	//terminal SEQUENCE:
	//	'sequence';
	public TerminalRule getSEQUENCERule() {
		return tSEQUENCE;
	}
	
	//terminal SERVICE:
	//	'service';
	public TerminalRule getSERVICERule() {
		return tSERVICE;
	}
	
	//terminal SET:
	//	'set';
	public TerminalRule getSETRule() {
		return tSET;
	}
	
	//terminal START:
	//	'start';
	public TerminalRule getSTARTRule() {
		return tSTART;
	}
	
	//terminal STATE:
	//	'state';
	public TerminalRule getSTATERule() {
		return tSTATE;
	}
	
	//terminal STRUCTURE:
	//	'structure';
	public TerminalRule getSTRUCTURERule() {
		return tSTRUCTURE;
	}
	
	//terminal TERMINAL:
	//	'terminal';
	public TerminalRule getTERMINALRule() {
		return tTERMINAL;
	}
	
	//terminal TERMINATOR:
	//	'terminator';
	public TerminalRule getTERMINATORRule() {
		return tTERMINATOR;
	}
	
	//terminal THEN:
	//	'then';
	public TerminalRule getTHENRule() {
		return tTHEN;
	}
	
	//terminal THIS:
	//	'this';
	public TerminalRule getTHISRule() {
		return tTHIS;
	}
	
	//terminal TO:
	//	'to';
	public TerminalRule getTORule() {
		return tTO;
	}
	
	//terminal TRANSITION:
	//	'transition';
	public TerminalRule getTRANSITIONRule() {
		return tTRANSITION;
	}
	
	//terminal TYPE:
	//	'type' | 'subtype';
	public TerminalRule getTYPERule() {
		return tTYPE;
	}
	
	//terminal UNCONDITIONALLY:
	//	'unconditionally';
	public TerminalRule getUNCONDITIONALLYRule() {
		return tUNCONDITIONALLY;
	}
	
	//terminal UNIQUE:
	//	'unique';
	public TerminalRule getUNIQUERule() {
		return tUNIQUE;
	}
	
	//terminal UNLINK:
	//	'unlink';
	public TerminalRule getUNLINKRule() {
		return tUNLINK;
	}
	
	//terminal USING:
	//	'using';
	public TerminalRule getUSINGRule() {
		return tUSING;
	}
	
	//terminal WHEN:
	//	'when';
	public TerminalRule getWHENRule() {
		return tWHEN;
	}
	
	//terminal WHILE:
	//	'while';
	public TerminalRule getWHILERule() {
		return tWHILE;
	}
	
	//terminal WITH:
	//	'with';
	public TerminalRule getWITHRule() {
		return tWITH;
	}
	
	//terminal NULL:
	//	'null';
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal FLUSH:
	//	'flush';
	public TerminalRule getFLUSHRule() {
		return tFLUSH;
	}
	
	//terminal ENDL:
	//	'endl';
	public TerminalRule getENDLRule() {
		return tENDL;
	}
	
	//terminal TRUE:
	//	'true';
	public TerminalRule getTRUERule() {
		return tTRUE;
	}
	
	//terminal FALSE:
	//	'false';
	public TerminalRule getFALSERule() {
		return tFALSE;
	}
	
	//terminal LINE_NO:
	//	'#LINE#';
	public TerminalRule getLINE_NORule() {
		return tLINE_NO;
	}
	
	//terminal FILE_NAME:
	//	'#FILE#';
	public TerminalRule getFILE_NAMERule() {
		return tFILE_NAME;
	}
	
	//terminal INTEGERLITERAL:
	//	DIGIT DIGIT? '#' BASEDDIGIT+
	//	| DIGIT+;
	public TerminalRule getINTEGERLITERALRule() {
		return tINTEGERLITERAL;
	}
	
	//terminal REALLITERAL:
	//	DIGIT+ ('.' DIGIT+)? UNBASEDEXPONENT?
	//	| '.' DIGIT+ UNBASEDEXPONENT?
	//	| DIGIT DIGIT? '#' (BASEDDIGIT+ ('.' BASEDDIGIT+ BASEDEXPONENT?
	//	| BASEDEXPONENT
	//	| '#'?) | '.' BASEDDIGIT+ BASEDEXPONENT?);
	public TerminalRule getREALLITERALRule() {
		return tREALLITERAL;
	}
	
	//terminal fragment UNBASEDEXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getUNBASEDEXPONENTRule() {
		return tUNBASEDEXPONENT;
	}
	
	//terminal fragment BASEDEXPONENT:
	//	'#' ('+' | '-')? DIGIT+;
	public TerminalRule getBASEDEXPONENTRule() {
		return tBASEDEXPONENT;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment BASEDDIGIT:
	//	'0'..'9' | 'a'..'z' | 'A'..'Z';
	public TerminalRule getBASEDDIGITRule() {
		return tBASEDDIGIT;
	}
	
	//terminal fragment LETTER:
	//	'A'..'Z' | 'a'..'z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal DURATIONLITERAL:
	//	'@P' !('@' | ' ' | '\t' | '\f' | '\n' | '\r')* '@';
	public TerminalRule getDURATIONLITERALRule() {
		return tDURATIONLITERAL;
	}
	
	//terminal TIMESTAMPLITERAL:
	//	'@' !('@' | ' ' | '\t' | '\f' | '\n' | '\r')* '@';
	public TerminalRule getTIMESTAMPLITERALRule() {
		return tTIMESTAMPLITERAL;
	}
	
	//terminal STRINGLITERAL:
	//	'"' (ESCAPESEQUENCE | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGLITERALRule() {
		return tSTRINGLITERAL;
	}
	
	//terminal fragment ESCAPESEQUENCE:
	//	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\') | UNICODEESCAPE
	//	| OCTALESCAPE;
	public TerminalRule getESCAPESEQUENCERule() {
		return tESCAPESEQUENCE;
	}
	
	//terminal fragment OCTALESCAPE:
	//	'\\' '0'..'3' '0'..'7' '0'..'7' | '\\' '0'..'7' '0'..'7' | '\\' '0'..'7';
	public TerminalRule getOCTALESCAPERule() {
		return tOCTALESCAPE;
	}
	
	//terminal fragment UNICODEESCAPE:
	//	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;
	public TerminalRule getUNICODEESCAPERule() {
		return tUNICODEESCAPE;
	}
	
	//terminal fragment HEXDIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEXDIGITRule() {
		return tHEXDIGIT;
	}
	
	//terminal RELATIONSHIPNAME:
	//	'R' '1'..'9' DIGIT*;
	public TerminalRule getRELATIONSHIPNAMERule() {
		return tRELATIONSHIPNAME;
	}
	
	//terminal IDENT:
	//	(LETTER | '_') (LETTER | DIGIT | '_')*;
	public TerminalRule getIDENTRule() {
		return tIDENT;
	}
	
	//terminal COMMENT:
	//	'//' !('\n' | '\r')* '\r'? '\n';
	public TerminalRule getCOMMENTRule() {
		return tCOMMENT;
	}
	
	//terminal WHITESPACE:
	//	' ' | '\t' | '\f' | '\n' | '\r'+;
	public TerminalRule getWHITESPACERule() {
		return tWHITESPACE;
	}
}
