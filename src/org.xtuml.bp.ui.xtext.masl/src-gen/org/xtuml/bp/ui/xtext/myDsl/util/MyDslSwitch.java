/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.ui.xtext.myDsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtuml.bp.ui.xtext.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.ui.xtext.myDsl.MyDslPackage
 * @generated
 */
public class MyDslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyDslPackage.DEFINITION:
      {
        definition definition = (definition)theEObject;
        T result = casedefinition(definition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_REFERENCE:
      {
        typeReference typeReference = (typeReference)theEObject;
        T result = casetypeReference(typeReference);
        if (result == null) result = casetypeReferenceWithCA(typeReference);
        if (result == null) result = caseparameterType(typeReference);
        if (result == null) result = casereturnType(typeReference);
        if (result == null) result = caseparameterDefinition(typeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_REFERENCE_WITH_CA:
      {
        typeReferenceWithCA typeReferenceWithCA = (typeReferenceWithCA)theEObject;
        T result = casetypeReferenceWithCA(typeReferenceWithCA);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONSTRAINED_ARRAY_TYPE_REF:
      {
        constrainedArrayTypeRef constrainedArrayTypeRef = (constrainedArrayTypeRef)theEObject;
        T result = caseconstrainedArrayTypeRef(constrainedArrayTypeRef);
        if (result == null) result = casetypeReferenceWithCA(constrainedArrayTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARRAY_BOUNDS:
      {
        arrayBounds arrayBounds = (arrayBounds)theEObject;
        T result = casearrayBounds(arrayBounds);
        if (result == null) result = caseconstrainedArrayTypeRef(arrayBounds);
        if (result == null) result = casetypeReferenceWithCA(arrayBounds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.COLLECTION_TYPE_REF:
      {
        collectionTypeRef collectionTypeRef = (collectionTypeRef)theEObject;
        T result = casecollectionTypeRef(collectionTypeRef);
        if (result == null) result = casetypeNameExpression(collectionTypeRef);
        if (result == null) result = caseprimaryExpression(collectionTypeRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DICT_KEY_TYPE:
      {
        dictKeyType dictKeyType = (dictKeyType)theEObject;
        T result = casedictKeyType(dictKeyType);
        if (result == null) result = casecollectionTypeRef(dictKeyType);
        if (result == null) result = casetypeNameExpression(dictKeyType);
        if (result == null) result = caseprimaryExpression(dictKeyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DICT_VALUE_TYPE:
      {
        dictValueType dictValueType = (dictValueType)theEObject;
        T result = casedictValueType(dictValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONSHIP_SPEC:
      {
        relationshipSpec relationshipSpec = (relationshipSpec)theEObject;
        T result = caserelationshipSpec(relationshipSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATE_TYPE:
      {
        stateType stateType = (stateType)theEObject;
        T result = casestateType(stateType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_LIST:
      {
        parameterList parameterList = (parameterList)theEObject;
        T result = caseparameterList(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_DEFINITION:
      {
        parameterDefinition parameterDefinition = (parameterDefinition)theEObject;
        T result = caseparameterDefinition(parameterDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SERVICE_VISIBILITY:
      {
        serviceVisibility serviceVisibility = (serviceVisibility)theEObject;
        T result = caseserviceVisibility(serviceVisibility);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARAMETER_TYPE:
      {
        parameterType parameterType = (parameterType)theEObject;
        T result = caseparameterType(parameterType);
        if (result == null) result = caseparameterDefinition(parameterType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RETURN_TYPE:
      {
        returnType returnType = (returnType)theEObject;
        T result = casereturnType(returnType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DOMAIN_SERVICE_DEFINITION:
      {
        domainServiceDefinition domainServiceDefinition = (domainServiceDefinition)theEObject;
        T result = casedomainServiceDefinition(domainServiceDefinition);
        if (result == null) result = casedefinition(domainServiceDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DOMAIN_FUNCTION_DEFINITION:
      {
        domainFunctionDefinition domainFunctionDefinition = (domainFunctionDefinition)theEObject;
        T result = casedomainFunctionDefinition(domainFunctionDefinition);
        if (result == null) result = casedefinition(domainFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBJECT_SERVICE_DEFINITION:
      {
        objectServiceDefinition objectServiceDefinition = (objectServiceDefinition)theEObject;
        T result = caseobjectServiceDefinition(objectServiceDefinition);
        if (result == null) result = casedefinition(objectServiceDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TERMINATOR_SERVICE_DEFINITION:
      {
        terminatorServiceDefinition terminatorServiceDefinition = (terminatorServiceDefinition)theEObject;
        T result = caseterminatorServiceDefinition(terminatorServiceDefinition);
        if (result == null) result = casedefinition(terminatorServiceDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TERMINATOR_FUNCTION_DEFINITION:
      {
        terminatorFunctionDefinition terminatorFunctionDefinition = (terminatorFunctionDefinition)theEObject;
        T result = caseterminatorFunctionDefinition(terminatorFunctionDefinition);
        if (result == null) result = casedefinition(terminatorFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OBJECT_FUNCTION_DEFINITION:
      {
        objectFunctionDefinition objectFunctionDefinition = (objectFunctionDefinition)theEObject;
        T result = caseobjectFunctionDefinition(objectFunctionDefinition);
        if (result == null) result = casedefinition(objectFunctionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATE_DEFINITION:
      {
        stateDefinition stateDefinition = (stateDefinition)theEObject;
        T result = casestateDefinition(stateDefinition);
        if (result == null) result = casedefinition(stateDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATEMENT_LIST:
      {
        statementList statementList = (statementList)theEObject;
        T result = casestatementList(statementList);
        if (result == null) result = caseelseBlock(statementList);
        if (result == null) result = casecaseOthers(statementList);
        if (result == null) result = caseexceptionHandler(statementList);
        if (result == null) result = caseotherHandler(statementList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STATEMENT:
      {
        statement statement = (statement)theEObject;
        T result = casestatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ASSIGN_STATEMENT:
      {
        assignStatement assignStatement = (assignStatement)theEObject;
        T result = caseassignStatement(assignStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_VALUE:
      {
        streamValue streamValue = (streamValue)theEObject;
        T result = casestreamValue(streamValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.STREAM_STATEMENT:
      {
        streamStatement streamStatement = (streamStatement)theEObject;
        T result = casestreamStatement(streamStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CALL_STATEMENT:
      {
        callStatement callStatement = (callStatement)theEObject;
        T result = casecallStatement(callStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXIT_STATEMENT:
      {
        exitStatement exitStatement = (exitStatement)theEObject;
        T result = caseexitStatement(exitStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RETURN_STATEMENT:
      {
        returnStatement returnStatement = (returnStatement)theEObject;
        T result = casereturnStatement(returnStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DELAY_STATEMENT:
      {
        delayStatement delayStatement = (delayStatement)theEObject;
        T result = casedelayStatement(delayStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.DELETE_STATEMENT:
      {
        deleteStatement deleteStatement = (deleteStatement)theEObject;
        T result = casedeleteStatement(deleteStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ERASE_STATEMENT:
      {
        eraseStatement eraseStatement = (eraseStatement)theEObject;
        T result = caseeraseStatement(eraseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LINK_STATEMENT:
      {
        linkStatement linkStatement = (linkStatement)theEObject;
        T result = caselinkStatement(linkStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.SCHEDULE_STATEMENT:
      {
        scheduleStatement scheduleStatement = (scheduleStatement)theEObject;
        T result = casescheduleStatement(scheduleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CANCEL_TIMER_STATEMENT:
      {
        cancelTimerStatement cancelTimerStatement = (cancelTimerStatement)theEObject;
        T result = casecancelTimerStatement(cancelTimerStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.GENERATE_STATEMENT:
      {
        generateStatement generateStatement = (generateStatement)theEObject;
        T result = casegenerateStatement(generateStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.IF_STATEMENT:
      {
        ifStatement ifStatement = (ifStatement)theEObject;
        T result = caseifStatement(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ELSIF_BLOCK:
      {
        elsifBlock elsifBlock = (elsifBlock)theEObject;
        T result = caseelsifBlock(elsifBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ELSE_BLOCK:
      {
        elseBlock elseBlock = (elseBlock)theEObject;
        T result = caseelseBlock(elseBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.WHILE_STATEMENT:
      {
        whileStatement whileStatement = (whileStatement)theEObject;
        T result = casewhileStatement(whileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CONDITION:
      {
        condition condition = (condition)theEObject;
        T result = casecondition(condition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CASE_STATEMENT:
      {
        caseStatement caseStatement = (caseStatement)theEObject;
        T result = casecaseStatement(caseStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CASE_ALTERNATIVE:
      {
        caseAlternative caseAlternative = (caseAlternative)theEObject;
        T result = casecaseAlternative(caseAlternative);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CHOICE_LIST:
      {
        choiceList choiceList = (choiceList)theEObject;
        T result = casechoiceList(choiceList);
        if (result == null) result = casecaseAlternative(choiceList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CASE_OTHERS:
      {
        caseOthers caseOthers = (caseOthers)theEObject;
        T result = casecaseOthers(caseOthers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FOR_STATEMENT:
      {
        forStatement forStatement = (forStatement)theEObject;
        T result = caseforStatement(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOOP_VARIABLE_SPEC:
      {
        loopVariableSpec loopVariableSpec = (loopVariableSpec)theEObject;
        T result = caseloopVariableSpec(loopVariableSpec);
        if (result == null) result = caseforStatement(loopVariableSpec);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CODE_BLOCK_STATEMENT:
      {
        codeBlockStatement codeBlockStatement = (codeBlockStatement)theEObject;
        T result = casecodeBlockStatement(codeBlockStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CODE_BLOCK:
      {
        codeBlock codeBlock = (codeBlock)theEObject;
        T result = casecodeBlock(codeBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.VARIABLE_DECLARATION:
      {
        variableDeclaration variableDeclaration = (variableDeclaration)theEObject;
        T result = casevariableDeclaration(variableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXCEPTION_HANDLER:
      {
        exceptionHandler exceptionHandler = (exceptionHandler)theEObject;
        T result = caseexceptionHandler(exceptionHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.OTHER_HANDLER:
      {
        otherHandler otherHandler = (otherHandler)theEObject;
        T result = caseotherHandler(otherHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_CONDITION:
      {
        findCondition findCondition = (findCondition)theEObject;
        T result = casefindCondition(findCondition);
        if (result == null) result = casefindUnary(findCondition);
        if (result == null) result = casewhereClause(findCondition);
        if (result == null) result = casefindPrimary(findCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_LOGICAL_OR:
      {
        findLogicalOr findLogicalOr = (findLogicalOr)theEObject;
        T result = casefindLogicalOr(findLogicalOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_LOGICAL_XOR:
      {
        findLogicalXor findLogicalXor = (findLogicalXor)theEObject;
        T result = casefindLogicalXor(findLogicalXor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_LOGICAL_AND:
      {
        findLogicalAnd findLogicalAnd = (findLogicalAnd)theEObject;
        T result = casefindLogicalAnd(findLogicalAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_PRIMARY:
      {
        findPrimary findPrimary = (findPrimary)theEObject;
        T result = casefindPrimary(findPrimary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_UNARY:
      {
        findUnary findUnary = (findUnary)theEObject;
        T result = casefindUnary(findUnary);
        if (result == null) result = casefindPrimary(findUnary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_COMPARISON:
      {
        findComparison findComparison = (findComparison)theEObject;
        T result = casefindComparison(findComparison);
        if (result == null) result = casefindPrimary(findComparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_NAME:
      {
        findName findName = (findName)theEObject;
        T result = casefindName(findName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = casestreamValue(expression);
        if (result == null) result = casereturnStatement(expression);
        if (result == null) result = casedelayStatement(expression);
        if (result == null) result = casedeleteStatement(expression);
        if (result == null) result = caseeraseStatement(expression);
        if (result == null) result = casescheduleStatement(expression);
        if (result == null) result = casecancelTimerStatement(expression);
        if (result == null) result = casecondition(expression);
        if (result == null) result = casecaseStatement(expression);
        if (result == null) result = caseloopVariableSpec(expression);
        if (result == null) result = caseforStatement(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RANGE_EXPRESSION:
      {
        rangeExpression rangeExpression = (rangeExpression)theEObject;
        T result = caserangeExpression(rangeExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_OR:
      {
        logicalOr logicalOr = (logicalOr)theEObject;
        T result = caselogicalOr(logicalOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_XOR:
      {
        logicalXor logicalXor = (logicalXor)theEObject;
        T result = caselogicalXor(logicalXor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LOGICAL_AND:
      {
        logicalAnd logicalAnd = (logicalAnd)theEObject;
        T result = caselogicalAnd(logicalAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EQUALITY:
      {
        equality equality = (equality)theEObject;
        T result = caseequality(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.RELATIONAL_EXP:
      {
        relationalExp relationalExp = (relationalExp)theEObject;
        T result = caserelationalExp(relationalExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ADDITIVE_EXP:
      {
        additiveExp additiveExp = (additiveExp)theEObject;
        T result = caseadditiveExp(additiveExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.MULT_EXP:
      {
        multExp multExp = (multExp)theEObject;
        T result = casemultExp(multExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.UNARY_EXP:
      {
        unaryExp unaryExp = (unaryExp)theEObject;
        T result = caseunaryExp(unaryExp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.LINK_EXPRESSION:
      {
        linkExpression linkExpression = (linkExpression)theEObject;
        T result = caselinkExpression(linkExpression);
        if (result == null) result = caseunaryExp(linkExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.NAVIGATE_EXPRESSION:
      {
        navigateExpression navigateExpression = (navigateExpression)theEObject;
        T result = casenavigateExpression(navigateExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.EXTENDED_EXPRESSION:
      {
        extendedExpression extendedExpression = (extendedExpression)theEObject;
        T result = caseextendedExpression(extendedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CREATE_EXPRESSION:
      {
        createExpression createExpression = (createExpression)theEObject;
        T result = casecreateExpression(createExpression);
        if (result == null) result = caseextendedExpression(createExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CREATE_ARGUMENT_LIST:
      {
        createArgumentList createArgumentList = (createArgumentList)theEObject;
        T result = casecreateArgumentList(createArgumentList);
        if (result == null) result = casecreateExpression(createArgumentList);
        if (result == null) result = caseextendedExpression(createArgumentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.CREATE_ARGUMENT:
      {
        createArgument createArgument = (createArgument)theEObject;
        T result = casecreateArgument(createArgument);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.FIND_EXPRESSION:
      {
        findExpression findExpression = (findExpression)theEObject;
        T result = casefindExpression(findExpression);
        if (result == null) result = caseextendedExpression(findExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.WHERE_CLAUSE:
      {
        whereClause whereClause = (whereClause)theEObject;
        T result = casewhereClause(whereClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_EXPRESSION:
      {
        postfixExpression postfixExpression = (postfixExpression)theEObject;
        T result = casepostfixExpression(postfixExpression);
        if (result == null) result = caseextendedExpression(postfixExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.POSTFIX_NO_CALL_EXPRESSION:
      {
        postfixNoCallExpression postfixNoCallExpression = (postfixNoCallExpression)theEObject;
        T result = casepostfixNoCallExpression(postfixNoCallExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PRIMARY_EXPRESSION:
      {
        primaryExpression primaryExpression = (primaryExpression)theEObject;
        T result = caseprimaryExpression(primaryExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.TYPE_NAME_EXPRESSION:
      {
        typeNameExpression typeNameExpression = (typeNameExpression)theEObject;
        T result = casetypeNameExpression(typeNameExpression);
        if (result == null) result = caseprimaryExpression(typeNameExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.PARENTHESISED_EXPRESSION:
      {
        parenthesisedExpression parenthesisedExpression = (parenthesisedExpression)theEObject;
        T result = caseparenthesisedExpression(parenthesisedExpression);
        if (result == null) result = caseprimaryExpression(parenthesisedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyDslPackage.ARGUMENT_LIST:
      {
        argumentList argumentList = (argumentList)theEObject;
        T result = caseargumentList(argumentList);
        if (result == null) result = casegenerateStatement(argumentList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedefinition(definition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeReference(typeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Reference With CA</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Reference With CA</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeReferenceWithCA(typeReferenceWithCA object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>constrained Array Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>constrained Array Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseconstrainedArrayTypeRef(constrainedArrayTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>array Bounds</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>array Bounds</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casearrayBounds(arrayBounds object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>collection Type Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>collection Type Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecollectionTypeRef(collectionTypeRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dict Key Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dict Key Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedictKeyType(dictKeyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>dict Value Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>dict Value Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedictValueType(dictValueType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relationship Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relationship Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelationshipSpec(relationshipSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>state Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>state Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestateType(stateType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameterList(parameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameterDefinition(parameterDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>service Visibility</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>service Visibility</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseserviceVisibility(serviceVisibility object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parameter Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parameter Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparameterType(parameterType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>return Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>return Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casereturnType(returnType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>domain Service Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>domain Service Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedomainServiceDefinition(domainServiceDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>domain Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>domain Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedomainFunctionDefinition(domainFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>object Service Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>object Service Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseobjectServiceDefinition(objectServiceDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>terminator Service Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>terminator Service Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseterminatorServiceDefinition(terminatorServiceDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>terminator Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>terminator Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseterminatorFunctionDefinition(terminatorFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>object Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>object Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseobjectFunctionDefinition(objectFunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>state Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>state Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestateDefinition(stateDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatementList(statementList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestatement(statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>assign Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>assign Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseassignStatement(assignStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestreamValue(streamValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>stream Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>stream Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casestreamStatement(streamStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>call Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>call Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecallStatement(callStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exit Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exit Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexitStatement(exitStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>return Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>return Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casereturnStatement(returnStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>delay Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>delay Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedelayStatement(delayStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>delete Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>delete Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casedeleteStatement(deleteStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>erase Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>erase Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseeraseStatement(eraseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>link Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>link Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselinkStatement(linkStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>schedule Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>schedule Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casescheduleStatement(scheduleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>cancel Timer Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>cancel Timer Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecancelTimerStatement(cancelTimerStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>generate Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>generate Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casegenerateStatement(generateStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>if Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>if Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseifStatement(ifStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>elsif Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>elsif Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseelsifBlock(elsifBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>else Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>else Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseelseBlock(elseBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>while Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>while Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhileStatement(whileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecondition(condition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecaseStatement(caseStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case Alternative</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case Alternative</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecaseAlternative(caseAlternative object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>choice List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>choice List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casechoiceList(choiceList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>case Others</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>case Others</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecaseOthers(caseOthers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>for Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>for Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseforStatement(forStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>loop Variable Spec</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>loop Variable Spec</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseloopVariableSpec(loopVariableSpec object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>code Block Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>code Block Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecodeBlockStatement(codeBlockStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>code Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>code Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecodeBlock(codeBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevariableDeclaration(variableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>exception Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>exception Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexceptionHandler(exceptionHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>other Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>other Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseotherHandler(otherHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindCondition(findCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Logical Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Logical Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindLogicalOr(findLogicalOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Logical Xor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Logical Xor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindLogicalXor(findLogicalXor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Logical And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Logical And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindLogicalAnd(findLogicalAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Primary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Primary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindPrimary(findPrimary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Unary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Unary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindUnary(findUnary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindComparison(findComparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindName(findName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>range Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>range Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserangeExpression(rangeExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogicalOr(logicalOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical Xor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical Xor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogicalXor(logicalXor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>logical And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>logical And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselogicalAnd(logicalAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseequality(equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>relational Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>relational Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caserelationalExp(relationalExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>additive Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>additive Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseadditiveExp(additiveExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>mult Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>mult Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casemultExp(multExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>unary Exp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>unary Exp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseunaryExp(unaryExp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>link Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>link Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caselinkExpression(linkExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>navigate Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>navigate Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenavigateExpression(navigateExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>extended Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>extended Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseextendedExpression(extendedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>create Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>create Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecreateExpression(createExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>create Argument List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>create Argument List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecreateArgumentList(createArgumentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>create Argument</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>create Argument</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casecreateArgument(createArgument object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>find Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>find Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casefindExpression(findExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>where Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>where Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casewhereClause(whereClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfixExpression(postfixExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>postfix No Call Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>postfix No Call Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casepostfixNoCallExpression(postfixNoCallExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>primary Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>primary Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseprimaryExpression(primaryExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>type Name Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>type Name Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetypeNameExpression(typeNameExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>parenthesised Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>parenthesised Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseparenthesisedExpression(parenthesisedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>argument List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>argument List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseargumentList(argumentList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyDslSwitch
