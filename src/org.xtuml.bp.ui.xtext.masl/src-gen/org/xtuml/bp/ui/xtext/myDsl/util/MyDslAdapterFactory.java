/**
 * generated by Xtext 2.9.1
 */
package org.xtuml.bp.ui.xtext.myDsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtuml.bp.ui.xtext.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtuml.bp.ui.xtext.myDsl.MyDslPackage
 * @generated
 */
public class MyDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslSwitch<Adapter> modelSwitch =
    new MyDslSwitch<Adapter>()
    {
      @Override
      public Adapter casedefinition(definition object)
      {
        return createdefinitionAdapter();
      }
      @Override
      public Adapter casetypeReference(typeReference object)
      {
        return createtypeReferenceAdapter();
      }
      @Override
      public Adapter casetypeReferenceWithCA(typeReferenceWithCA object)
      {
        return createtypeReferenceWithCAAdapter();
      }
      @Override
      public Adapter caseconstrainedArrayTypeRef(constrainedArrayTypeRef object)
      {
        return createconstrainedArrayTypeRefAdapter();
      }
      @Override
      public Adapter casearrayBounds(arrayBounds object)
      {
        return createarrayBoundsAdapter();
      }
      @Override
      public Adapter casecollectionTypeRef(collectionTypeRef object)
      {
        return createcollectionTypeRefAdapter();
      }
      @Override
      public Adapter casedictKeyType(dictKeyType object)
      {
        return createdictKeyTypeAdapter();
      }
      @Override
      public Adapter casedictValueType(dictValueType object)
      {
        return createdictValueTypeAdapter();
      }
      @Override
      public Adapter caserelationshipSpec(relationshipSpec object)
      {
        return createrelationshipSpecAdapter();
      }
      @Override
      public Adapter casestateType(stateType object)
      {
        return createstateTypeAdapter();
      }
      @Override
      public Adapter caseparameterList(parameterList object)
      {
        return createparameterListAdapter();
      }
      @Override
      public Adapter caseparameterDefinition(parameterDefinition object)
      {
        return createparameterDefinitionAdapter();
      }
      @Override
      public Adapter caseserviceVisibility(serviceVisibility object)
      {
        return createserviceVisibilityAdapter();
      }
      @Override
      public Adapter caseparameterType(parameterType object)
      {
        return createparameterTypeAdapter();
      }
      @Override
      public Adapter casereturnType(returnType object)
      {
        return createreturnTypeAdapter();
      }
      @Override
      public Adapter casedomainServiceDefinition(domainServiceDefinition object)
      {
        return createdomainServiceDefinitionAdapter();
      }
      @Override
      public Adapter casedomainFunctionDefinition(domainFunctionDefinition object)
      {
        return createdomainFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseobjectServiceDefinition(objectServiceDefinition object)
      {
        return createobjectServiceDefinitionAdapter();
      }
      @Override
      public Adapter caseterminatorServiceDefinition(terminatorServiceDefinition object)
      {
        return createterminatorServiceDefinitionAdapter();
      }
      @Override
      public Adapter caseterminatorFunctionDefinition(terminatorFunctionDefinition object)
      {
        return createterminatorFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseobjectFunctionDefinition(objectFunctionDefinition object)
      {
        return createobjectFunctionDefinitionAdapter();
      }
      @Override
      public Adapter casestateDefinition(stateDefinition object)
      {
        return createstateDefinitionAdapter();
      }
      @Override
      public Adapter casestatementList(statementList object)
      {
        return createstatementListAdapter();
      }
      @Override
      public Adapter casestatement(statement object)
      {
        return createstatementAdapter();
      }
      @Override
      public Adapter caseassignStatement(assignStatement object)
      {
        return createassignStatementAdapter();
      }
      @Override
      public Adapter casestreamValue(streamValue object)
      {
        return createstreamValueAdapter();
      }
      @Override
      public Adapter casestreamStatement(streamStatement object)
      {
        return createstreamStatementAdapter();
      }
      @Override
      public Adapter casecallStatement(callStatement object)
      {
        return createcallStatementAdapter();
      }
      @Override
      public Adapter caseexitStatement(exitStatement object)
      {
        return createexitStatementAdapter();
      }
      @Override
      public Adapter casereturnStatement(returnStatement object)
      {
        return createreturnStatementAdapter();
      }
      @Override
      public Adapter casedelayStatement(delayStatement object)
      {
        return createdelayStatementAdapter();
      }
      @Override
      public Adapter casedeleteStatement(deleteStatement object)
      {
        return createdeleteStatementAdapter();
      }
      @Override
      public Adapter caseeraseStatement(eraseStatement object)
      {
        return createeraseStatementAdapter();
      }
      @Override
      public Adapter caselinkStatement(linkStatement object)
      {
        return createlinkStatementAdapter();
      }
      @Override
      public Adapter casescheduleStatement(scheduleStatement object)
      {
        return createscheduleStatementAdapter();
      }
      @Override
      public Adapter casecancelTimerStatement(cancelTimerStatement object)
      {
        return createcancelTimerStatementAdapter();
      }
      @Override
      public Adapter casegenerateStatement(generateStatement object)
      {
        return creategenerateStatementAdapter();
      }
      @Override
      public Adapter caseifStatement(ifStatement object)
      {
        return createifStatementAdapter();
      }
      @Override
      public Adapter caseelsifBlock(elsifBlock object)
      {
        return createelsifBlockAdapter();
      }
      @Override
      public Adapter caseelseBlock(elseBlock object)
      {
        return createelseBlockAdapter();
      }
      @Override
      public Adapter casewhileStatement(whileStatement object)
      {
        return createwhileStatementAdapter();
      }
      @Override
      public Adapter casecondition(condition object)
      {
        return createconditionAdapter();
      }
      @Override
      public Adapter casecaseStatement(caseStatement object)
      {
        return createcaseStatementAdapter();
      }
      @Override
      public Adapter casecaseAlternative(caseAlternative object)
      {
        return createcaseAlternativeAdapter();
      }
      @Override
      public Adapter casechoiceList(choiceList object)
      {
        return createchoiceListAdapter();
      }
      @Override
      public Adapter casecaseOthers(caseOthers object)
      {
        return createcaseOthersAdapter();
      }
      @Override
      public Adapter caseforStatement(forStatement object)
      {
        return createforStatementAdapter();
      }
      @Override
      public Adapter caseloopVariableSpec(loopVariableSpec object)
      {
        return createloopVariableSpecAdapter();
      }
      @Override
      public Adapter casecodeBlockStatement(codeBlockStatement object)
      {
        return createcodeBlockStatementAdapter();
      }
      @Override
      public Adapter casecodeBlock(codeBlock object)
      {
        return createcodeBlockAdapter();
      }
      @Override
      public Adapter casevariableDeclaration(variableDeclaration object)
      {
        return createvariableDeclarationAdapter();
      }
      @Override
      public Adapter caseexceptionHandler(exceptionHandler object)
      {
        return createexceptionHandlerAdapter();
      }
      @Override
      public Adapter caseotherHandler(otherHandler object)
      {
        return createotherHandlerAdapter();
      }
      @Override
      public Adapter casefindCondition(findCondition object)
      {
        return createfindConditionAdapter();
      }
      @Override
      public Adapter casefindLogicalOr(findLogicalOr object)
      {
        return createfindLogicalOrAdapter();
      }
      @Override
      public Adapter casefindLogicalXor(findLogicalXor object)
      {
        return createfindLogicalXorAdapter();
      }
      @Override
      public Adapter casefindLogicalAnd(findLogicalAnd object)
      {
        return createfindLogicalAndAdapter();
      }
      @Override
      public Adapter casefindPrimary(findPrimary object)
      {
        return createfindPrimaryAdapter();
      }
      @Override
      public Adapter casefindUnary(findUnary object)
      {
        return createfindUnaryAdapter();
      }
      @Override
      public Adapter casefindComparison(findComparison object)
      {
        return createfindComparisonAdapter();
      }
      @Override
      public Adapter casefindName(findName object)
      {
        return createfindNameAdapter();
      }
      @Override
      public Adapter caseexpression(expression object)
      {
        return createexpressionAdapter();
      }
      @Override
      public Adapter caserangeExpression(rangeExpression object)
      {
        return createrangeExpressionAdapter();
      }
      @Override
      public Adapter caselogicalOr(logicalOr object)
      {
        return createlogicalOrAdapter();
      }
      @Override
      public Adapter caselogicalXor(logicalXor object)
      {
        return createlogicalXorAdapter();
      }
      @Override
      public Adapter caselogicalAnd(logicalAnd object)
      {
        return createlogicalAndAdapter();
      }
      @Override
      public Adapter caseequality(equality object)
      {
        return createequalityAdapter();
      }
      @Override
      public Adapter caserelationalExp(relationalExp object)
      {
        return createrelationalExpAdapter();
      }
      @Override
      public Adapter caseadditiveExp(additiveExp object)
      {
        return createadditiveExpAdapter();
      }
      @Override
      public Adapter casemultExp(multExp object)
      {
        return createmultExpAdapter();
      }
      @Override
      public Adapter caseunaryExp(unaryExp object)
      {
        return createunaryExpAdapter();
      }
      @Override
      public Adapter caselinkExpression(linkExpression object)
      {
        return createlinkExpressionAdapter();
      }
      @Override
      public Adapter casenavigateExpression(navigateExpression object)
      {
        return createnavigateExpressionAdapter();
      }
      @Override
      public Adapter caseextendedExpression(extendedExpression object)
      {
        return createextendedExpressionAdapter();
      }
      @Override
      public Adapter casecreateExpression(createExpression object)
      {
        return createcreateExpressionAdapter();
      }
      @Override
      public Adapter casecreateArgumentList(createArgumentList object)
      {
        return createcreateArgumentListAdapter();
      }
      @Override
      public Adapter casecreateArgument(createArgument object)
      {
        return createcreateArgumentAdapter();
      }
      @Override
      public Adapter casefindExpression(findExpression object)
      {
        return createfindExpressionAdapter();
      }
      @Override
      public Adapter casewhereClause(whereClause object)
      {
        return createwhereClauseAdapter();
      }
      @Override
      public Adapter casepostfixExpression(postfixExpression object)
      {
        return createpostfixExpressionAdapter();
      }
      @Override
      public Adapter casepostfixNoCallExpression(postfixNoCallExpression object)
      {
        return createpostfixNoCallExpressionAdapter();
      }
      @Override
      public Adapter caseprimaryExpression(primaryExpression object)
      {
        return createprimaryExpressionAdapter();
      }
      @Override
      public Adapter casetypeNameExpression(typeNameExpression object)
      {
        return createtypeNameExpressionAdapter();
      }
      @Override
      public Adapter caseparenthesisedExpression(parenthesisedExpression object)
      {
        return createparenthesisedExpressionAdapter();
      }
      @Override
      public Adapter caseargumentList(argumentList object)
      {
        return createargumentListAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.definition <em>definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.definition
   * @generated
   */
  public Adapter createdefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.typeReference <em>type Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.typeReference
   * @generated
   */
  public Adapter createtypeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.typeReferenceWithCA <em>type Reference With CA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.typeReferenceWithCA
   * @generated
   */
  public Adapter createtypeReferenceWithCAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.constrainedArrayTypeRef <em>constrained Array Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.constrainedArrayTypeRef
   * @generated
   */
  public Adapter createconstrainedArrayTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.arrayBounds <em>array Bounds</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.arrayBounds
   * @generated
   */
  public Adapter createarrayBoundsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.collectionTypeRef <em>collection Type Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.collectionTypeRef
   * @generated
   */
  public Adapter createcollectionTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.dictKeyType <em>dict Key Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.dictKeyType
   * @generated
   */
  public Adapter createdictKeyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.dictValueType <em>dict Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.dictValueType
   * @generated
   */
  public Adapter createdictValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.relationshipSpec <em>relationship Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.relationshipSpec
   * @generated
   */
  public Adapter createrelationshipSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.stateType <em>state Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.stateType
   * @generated
   */
  public Adapter createstateTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.parameterList <em>parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.parameterList
   * @generated
   */
  public Adapter createparameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.parameterDefinition <em>parameter Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.parameterDefinition
   * @generated
   */
  public Adapter createparameterDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.serviceVisibility <em>service Visibility</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.serviceVisibility
   * @generated
   */
  public Adapter createserviceVisibilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.parameterType <em>parameter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.parameterType
   * @generated
   */
  public Adapter createparameterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.returnType <em>return Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.returnType
   * @generated
   */
  public Adapter createreturnTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.domainServiceDefinition <em>domain Service Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.domainServiceDefinition
   * @generated
   */
  public Adapter createdomainServiceDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.domainFunctionDefinition <em>domain Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.domainFunctionDefinition
   * @generated
   */
  public Adapter createdomainFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.objectServiceDefinition <em>object Service Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.objectServiceDefinition
   * @generated
   */
  public Adapter createobjectServiceDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.terminatorServiceDefinition <em>terminator Service Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.terminatorServiceDefinition
   * @generated
   */
  public Adapter createterminatorServiceDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.terminatorFunctionDefinition <em>terminator Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.terminatorFunctionDefinition
   * @generated
   */
  public Adapter createterminatorFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.objectFunctionDefinition <em>object Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.objectFunctionDefinition
   * @generated
   */
  public Adapter createobjectFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.stateDefinition <em>state Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.stateDefinition
   * @generated
   */
  public Adapter createstateDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.statementList <em>statement List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.statementList
   * @generated
   */
  public Adapter createstatementListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.statement <em>statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.statement
   * @generated
   */
  public Adapter createstatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.assignStatement <em>assign Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.assignStatement
   * @generated
   */
  public Adapter createassignStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.streamValue <em>stream Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.streamValue
   * @generated
   */
  public Adapter createstreamValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.streamStatement <em>stream Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.streamStatement
   * @generated
   */
  public Adapter createstreamStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.callStatement <em>call Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.callStatement
   * @generated
   */
  public Adapter createcallStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.exitStatement <em>exit Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.exitStatement
   * @generated
   */
  public Adapter createexitStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.returnStatement <em>return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.returnStatement
   * @generated
   */
  public Adapter createreturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.delayStatement <em>delay Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.delayStatement
   * @generated
   */
  public Adapter createdelayStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.deleteStatement <em>delete Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.deleteStatement
   * @generated
   */
  public Adapter createdeleteStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.eraseStatement <em>erase Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.eraseStatement
   * @generated
   */
  public Adapter createeraseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.linkStatement <em>link Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.linkStatement
   * @generated
   */
  public Adapter createlinkStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.scheduleStatement <em>schedule Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.scheduleStatement
   * @generated
   */
  public Adapter createscheduleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.cancelTimerStatement <em>cancel Timer Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.cancelTimerStatement
   * @generated
   */
  public Adapter createcancelTimerStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.generateStatement <em>generate Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.generateStatement
   * @generated
   */
  public Adapter creategenerateStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.ifStatement <em>if Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.ifStatement
   * @generated
   */
  public Adapter createifStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.elsifBlock <em>elsif Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.elsifBlock
   * @generated
   */
  public Adapter createelsifBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.elseBlock <em>else Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.elseBlock
   * @generated
   */
  public Adapter createelseBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.whileStatement <em>while Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.whileStatement
   * @generated
   */
  public Adapter createwhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.condition <em>condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.condition
   * @generated
   */
  public Adapter createconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.caseStatement <em>case Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.caseStatement
   * @generated
   */
  public Adapter createcaseStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.caseAlternative <em>case Alternative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.caseAlternative
   * @generated
   */
  public Adapter createcaseAlternativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.choiceList <em>choice List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.choiceList
   * @generated
   */
  public Adapter createchoiceListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.caseOthers <em>case Others</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.caseOthers
   * @generated
   */
  public Adapter createcaseOthersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.forStatement <em>for Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.forStatement
   * @generated
   */
  public Adapter createforStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.loopVariableSpec <em>loop Variable Spec</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.loopVariableSpec
   * @generated
   */
  public Adapter createloopVariableSpecAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.codeBlockStatement <em>code Block Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.codeBlockStatement
   * @generated
   */
  public Adapter createcodeBlockStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.codeBlock <em>code Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.codeBlock
   * @generated
   */
  public Adapter createcodeBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.variableDeclaration <em>variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.variableDeclaration
   * @generated
   */
  public Adapter createvariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.exceptionHandler <em>exception Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.exceptionHandler
   * @generated
   */
  public Adapter createexceptionHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.otherHandler <em>other Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.otherHandler
   * @generated
   */
  public Adapter createotherHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findCondition <em>find Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findCondition
   * @generated
   */
  public Adapter createfindConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findLogicalOr <em>find Logical Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findLogicalOr
   * @generated
   */
  public Adapter createfindLogicalOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findLogicalXor <em>find Logical Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findLogicalXor
   * @generated
   */
  public Adapter createfindLogicalXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findLogicalAnd <em>find Logical And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findLogicalAnd
   * @generated
   */
  public Adapter createfindLogicalAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findPrimary <em>find Primary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findPrimary
   * @generated
   */
  public Adapter createfindPrimaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findUnary <em>find Unary</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findUnary
   * @generated
   */
  public Adapter createfindUnaryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findComparison <em>find Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findComparison
   * @generated
   */
  public Adapter createfindComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findName <em>find Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findName
   * @generated
   */
  public Adapter createfindNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.expression <em>expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.expression
   * @generated
   */
  public Adapter createexpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.rangeExpression <em>range Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.rangeExpression
   * @generated
   */
  public Adapter createrangeExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.logicalOr <em>logical Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.logicalOr
   * @generated
   */
  public Adapter createlogicalOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.logicalXor <em>logical Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.logicalXor
   * @generated
   */
  public Adapter createlogicalXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.logicalAnd <em>logical And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.logicalAnd
   * @generated
   */
  public Adapter createlogicalAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.equality <em>equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.equality
   * @generated
   */
  public Adapter createequalityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.relationalExp <em>relational Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.relationalExp
   * @generated
   */
  public Adapter createrelationalExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.additiveExp <em>additive Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.additiveExp
   * @generated
   */
  public Adapter createadditiveExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.multExp <em>mult Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.multExp
   * @generated
   */
  public Adapter createmultExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.unaryExp <em>unary Exp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.unaryExp
   * @generated
   */
  public Adapter createunaryExpAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.linkExpression <em>link Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.linkExpression
   * @generated
   */
  public Adapter createlinkExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.navigateExpression <em>navigate Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.navigateExpression
   * @generated
   */
  public Adapter createnavigateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.extendedExpression <em>extended Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.extendedExpression
   * @generated
   */
  public Adapter createextendedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.createExpression <em>create Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.createExpression
   * @generated
   */
  public Adapter createcreateExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.createArgumentList <em>create Argument List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.createArgumentList
   * @generated
   */
  public Adapter createcreateArgumentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.createArgument <em>create Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.createArgument
   * @generated
   */
  public Adapter createcreateArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.findExpression <em>find Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.findExpression
   * @generated
   */
  public Adapter createfindExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.whereClause <em>where Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.whereClause
   * @generated
   */
  public Adapter createwhereClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.postfixExpression <em>postfix Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.postfixExpression
   * @generated
   */
  public Adapter createpostfixExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.postfixNoCallExpression <em>postfix No Call Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.postfixNoCallExpression
   * @generated
   */
  public Adapter createpostfixNoCallExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.primaryExpression <em>primary Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.primaryExpression
   * @generated
   */
  public Adapter createprimaryExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.typeNameExpression <em>type Name Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.typeNameExpression
   * @generated
   */
  public Adapter createtypeNameExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.parenthesisedExpression <em>parenthesised Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.parenthesisedExpression
   * @generated
   */
  public Adapter createparenthesisedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtuml.bp.ui.xtext.myDsl.argumentList <em>argument List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtuml.bp.ui.xtext.myDsl.argumentList
   * @generated
   */
  public Adapter createargumentListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslAdapterFactory
