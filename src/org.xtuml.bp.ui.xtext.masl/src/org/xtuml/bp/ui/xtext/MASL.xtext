grammar org.xtuml.bp.ui.xtext.MASL hidden(COMMENT, WHITESPACE)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

definition                    : objectServiceDefinition 
                              | objectFunctionDefinition 
                              | stateDefinition
                              | domainServiceDefinition 
                              | domainFunctionDefinition 
                              | terminatorServiceDefinition 
                              | terminatorFunctionDefinition 
                              ;

//---------------------------------------------------------
// Domain Definition
//---------------------------------------------------------

domainName                    : identifier
                              ;


//---------------------------------------------------------
// Exception Declaration
//---------------------------------------------------------

exceptionName                 : identifier
                              ;

//---------------------------------------------------------
// Type Reference
//---------------------------------------------------------

typeReference									: {typeReference}namedTypeRef
                              | {typeReference}instanceTypeRef
                              | c=collectionTypeRef
                              | {typeReference}deprecatedType
                              ;

typeReferenceWithCA           : typeReference
                              | constrainedArrayTypeRef
                              ;

deprecatedType                : INSTANCE
                              | EVENT
                              | SERVICE
                              ;


qualifiedObjectName           : (domainName SCOPE)? objectName
                              ;

instanceTypeRef               : ANONYMOUS? INSTANCE OF qualifiedObjectName
                              ;

namedTypeRef                  : ANONYMOUS? (domainName SCOPE)? typeName
                              ;

userDefinedTypeRef            : (domainName SCOPE)? typeName
                              ;

constrainedArrayTypeRef       : userDefinedTypeRef arrayBounds
                              ;

typeName                      : identifier
                              ;

arrayBounds                   : LPAREN e=expression RPAREN
                              ;



collectionTypeRef             : ANONYMOUS? SEQUENCE 
                              		(LPAREN e=expression RPAREN)? OF t=typeReference
                              | ANONYMOUS? ARRAY a=arrayBounds OF t=typeReference
                              | ANONYMOUS? SET OF t=typeReference
                              | ANONYMOUS? BAG OF t=typeReference
                              | {collectionTypeRef}ANONYMOUS? DICTIONARY 
                                ( dictKeyType? OF d=dictValueType )?
                              ;

dictKeyType                   : n=namedTypeRef
			      									| i=instanceTypeRef
			      									;

dictValueType                 : t=typeReference
			      									;

//---------------------------------------------------------
// Terminator Definition
//---------------------------------------------------------

terminatorName                : identifier
                              ;

//---------------------------------------------------------
// Object Definition
//---------------------------------------------------------

objectName                    : identifier
                              ;

attributeName                 : identifier
															;

relationshipSpec              : r+=RELATIONSHIPNAME
                                  ( DOT r+=identifier
                                    (DOT r+=objectName)?
                                  )?
                              ;


serviceType                   : (INSTANCE (DEFERRED LPAREN RELATIONSHIPNAME RPAREN)?)?
                              ;

eventName                     : identifier
                              ;

stateName                     : identifier
                              ;

stateType                     : {stateType}s=
															( ASSIGNER
                              | assignerStart
                              | CREATION
                              | TERMINAL )?
                              ;
                              
assignerStart									: ASSIGNER START
															;

//---------------------------------------------------------
// Service Declaration
//---------------------------------------------------------

parameterList                 : {parameterList}LPAREN
                                  p+=parameterDefinition? ( COMMA p+=parameterDefinition )*                          
                                RPAREN
                              ;


parameterDefinition           : parameterName COLON parameterMode parameterType
                              ;


serviceVisibility             : {serviceVisibility}v=
															( PRIVATE
                              | PUBLIC )?
                              ;
        
parameterMode                 : IN
                              | OUT
                              ;


serviceName                   : identifier
                              ;

parameterName                 : identifier
                              ;

parameterType                 : typeReference
                              ;

returnType                    : typeReference
                              ;


//---------------------------------------------------------
// Pragma Definition
//---------------------------------------------------------


pragmaList                    : (pragmaDef SEMI)*
                              ;

pragmaDef                     : PRAGMA pragmaName 
                                LPAREN
                                  (pragmaValue (COMMA pragmaValue)*)? 
                                RPAREN
                              ;

pragmaValue                   : identifier
                              | literal
                              ;

pragmaName                    : identifier
                              ;



//---------------------------------------------------------
// Dynamic Behaviour
//---------------------------------------------------------



domainServiceDefinition       : s=serviceVisibility SERVICE 
                                domainName SCOPE serviceName 
                                p=parameterList IS 
                                c=codeBlock 
                                SERVICE? SEMI pragmaList
                              ;

domainFunctionDefinition      : s=serviceVisibility FUNCTION 
                                  domainName SCOPE serviceName 
                                  p=parameterList 
                                  RETURN r=returnType IS c=codeBlock 
                                FUNCTION? SEMI pragmaList
                              ;



objectServiceDefinition       : s=serviceVisibility INSTANCE? SERVICE 
                                  domainName SCOPE objectName DOT serviceName 
                                  p=parameterList IS c=codeBlock 
                                SERVICE? SEMI pragmaList
                              ;

terminatorServiceDefinition   : s=serviceVisibility SERVICE 
                                domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName 
                                p=parameterList IS 
                                c=codeBlock 
                                SERVICE? SEMI pragmaList
                              ;

terminatorFunctionDefinition  : s=serviceVisibility FUNCTION 
                                domainName SCOPE terminatorName TERMINATOR_SCOPE serviceName 
                                p=parameterList RETURN r=returnType IS 
                                c=codeBlock 
                                FUNCTION? SEMI pragmaList
                              ;


objectFunctionDefinition      : v=serviceVisibility s=serviceType FUNCTION 
                                  domainName SCOPE objectName DOT serviceName 
                                  p=parameterList 
                                  RETURN r=returnType IS c=codeBlock 
                                FUNCTION? SEMI pragmaList
                              ;


stateDefinition               : s=stateType STATE 
                                domainName SCOPE objectName DOT stateName 
                                p=parameterList IS c=codeBlock 
                                STATE? SEMI pragmaList
                              ; 



//---------------------------------------------------------
// Statements
//---------------------------------------------------------

statementList                 : {statementList}s+=statement*
                              ;



statement                     : {statement}( c=codeBlockStatement
																/*
                                | =>( e=expression ASSIGN ) a=assignStatement
                                | =>( e=expression streamOperator ) s=streamStatement
                                | =>( NULL ) n=nullStatement
                                | =>( p=primaryExpression ( DOT | TERMINATOR_SCOPE | LBRACKET | PRIME ) ) c=callStatement
                                */
                                | =>( e=assignStatement )
                                | =>( s=streamStatement )
                                | =>( n=nullStatement )
                                | =>( c=callStatement )
                                | e=exitStatement
                                | r=returnStatement
                                | d=delayStatement
                                | raiseStatement
                                | d=deleteStatement
                                | e=eraseStatement
                                | l=linkStatement
                                | s=scheduleStatement
                                | c=cancelTimerStatement
                                | g=generateStatement
                                | i=ifStatement
                                | c=caseStatement
                                | f=forStatement
                                | w=whileStatement
                                )? /* empty statement */
                                SEMI pragmaList
                              ;

nullStatement                 : NULL
                              ;
                              
assignStatement               : lhs=expression ASSIGN rhs=expression
                              ;
                              
streamOperator                : STREAM_IN 
                              | STREAM_OUT 
                              | STREAM_LINE_IN 
                              | STREAM_LINE_OUT
                              ;
                              
streamValue                   : streamOperator expression
                              ;                             
                                
streamStatement               : e=expression s+=streamValue+
															;

callStatement                 : ( p=primaryExpression
                                )
                                ( ( DOT identifier
                                  | TERMINATOR_SCOPE identifier
                                  | LBRACKET e+=expression RBRACKET
                                  | PRIME c+=characteristic
                                  )*
                                 LPAREN a+=argumentList RPAREN
                                )+ 
                              ;

exitStatement                 : {exitStatement}EXIT (WHEN c=condition)?
                              ;

returnStatement               : RETURN expression
                              ;

delayStatement                : DELAY expression
                              ;

raiseStatement                : RAISE qualifiedExceptionName 
                              ;

deleteStatement               : DELETE expression
                              ;

eraseStatement                : ERASE expression
                              ;

linkStatement                 : linkType
                                n1=navigateExpression r=relationshipSpec 
                                ( 
                                  n2=navigateExpression 
                                  (USING n3=navigateExpression)? 
                                )?
                              ;
                              
linkType                      : LINK
                              | UNLINK
                              ;

                              
scheduleStatement	      : SCHEDULE expression 
                                g=generateStatement 
                                scheduleType e+=expression (DELTA e+=expression)?
                              ;

cancelTimerStatement          : CANCEL expression
                              ;

                              
scheduleType                  : AT 
                              | DELAY
                              ;
                                  

generateStatement             : GENERATE qualifiedEventName
                                LPAREN argumentList RPAREN (TO e=expression)?
                              ;


qualifiedEventName            : (qualifiedObjectName DOT)? eventName
                              ;


ifStatement                   : IF c=condition THEN
                                  s=statementList
                                e1+=elsifBlock*
                                e2=elseBlock?
                                END IF?
                              ;
 

elsifBlock                    : ELSIF c=condition THEN
                                  s=statementList
                              ;

elseBlock                     : ELSE statementList
                              ;


whileStatement                : WHILE c=condition
                                LOOP
                                 s=statementList
                                END LOOP?
                              ;

condition                     : expression
                              ;


caseStatement                 : CASE expression IS
                                 c1+=caseAlternative*
                                 c2=caseOthers?
                                END CASE?
                              ;

caseAlternative               : WHEN choiceList GOES_TO s=statementList
                              ;

choiceList                    : e+=expression (CASE_OR e+=expression)*
                              ;

caseOthers                    : WHEN OTHERS GOES_TO statementList
                              ;

forStatement                  : FOR loopVariableSpec
                                LOOP
                                  s=statementList
                                END LOOP?
                              ;

loopVariableSpec              : identifier IN REVERSE? expression
                              ;



//---------------------------------------------------------
// Code Blocks
//---------------------------------------------------------

codeBlockStatement            : (DECLARE                                         
                                  v+=variableDeclaration* )?
                                BEGIN
                                  s=statementList
                                (EXCEPTION
                                  e+=exceptionHandler* 
                                  p=otherHandler?)?
                                END
                              ;

codeBlock                     :   v+=variableDeclaration*
                                BEGIN
                                  s=statementList
                                (EXCEPTION
                                  e+=exceptionHandler*
                                  o=otherHandler?)?
                                END
                              ;

variableDeclaration           : variableName COLON 
                                READONLY? t=typeReferenceWithCA 
                                (ASSIGN e=expression)? 
                                SEMI pragmaList
                              ;


exceptionHandler              : WHEN qualifiedExceptionName GOES_TO statementList
                              ;

otherHandler                  : WHEN OTHERS GOES_TO statementList
                              ;

qualifiedExceptionName        : (domainName SCOPE)? exceptionName
                              ; 

variableName                  : identifier
                              ;


//---------------------------------------------------------
// Find Condition Definition
//---------------------------------------------------------

findCondition                     : f=findLogicalOr;

findLogicalOr                     : f+=findLogicalXor ( OR f+=findLogicalXor )*;

findLogicalXor                    : f+=findLogicalAnd ( XOR f+=findLogicalAnd )*;

findLogicalAnd                    : f+=findPrimary ( AND f+=findPrimary )*;


findPrimary                       : findComparison
                                  | findUnary
                                  ;

findUnary                         : NOT findUnary
                                  | LPAREN findCondition RPAREN
                                  ;

findComparison                    : f=findName ( EQUAL | NOT_EQUAL | LT | GT | LTE | GTE  ) a=additiveExp;

findName                          : ( i1=identifier
                                    )
                                    ( DOT i2+=identifier
                                    | LBRACKET e+=expression RBRACKET
                                    )*
                                  ;

//---------------------------------------------------------
// Expression Definition
//---------------------------------------------------------

expression                    : r=rangeExpression;

rangeExpression               : l+=logicalOr (RANGE_DOTS l+=logicalOr)?;

logicalOr                     : l+=logicalXor ( OR l+=logicalXor )*;

logicalXor                    : l+=logicalAnd ( XOR l+=logicalAnd )*;

logicalAnd                    : e+=equality   ( AND e+=equality )*;

equality                      : r+=relationalExp ( ( EQUAL | NOT_EQUAL ) r+=relationalExp )*; 
 
relationalExp                 : a+=additiveExp ( ( LT | GT | LTE | GTE ) a+=additiveExp )*;

additiveExp                   : m+=multExp ( ( PLUS | MINUS | CONCATENATE | UNION | NOT_IN ) m+=multExp )*;


multExp                       : u+=unaryExp (( TIMES | DIVIDE | MOD | POWER | REM | INTERSECTION | DISUNION ) u+=unaryExp )*;

unaryExp                      : unaryOperator unaryExp
                              | linkExpression                                
                              ;

unaryOperator                 : MINUS
                              | PLUS
                              | NOT
                              | ABS
                              ;

linkExpression                : n1=navigateExpression
			      									| ( linkType
                                  n2=navigateExpression r=relationshipSpec 
                                  (n3=navigateExpression)?
                                )
                              ;														  

navigateExpression            : (e+=extendedExpression
                                )
                                ( NAVIGATE r+=relationshipSpec w+=whereClause?
                                | WITH e+=extendedExpression 
                                  NAVIGATE r+=relationshipSpec
                                | ORDERED_BY sortOrder
                                | REVERSE_ORDERED_BY sortOrder
                                )*                                             
                              ;

extendedExpression            : postfixExpression
                              | createExpression
                              | findExpression
                              ;


sortOrder                     : LPAREN 
                                ( sortOrderComponent 
                                ( COMMA sortOrderComponent )* )?
                                RPAREN
                              ;

sortOrderComponent            : REVERSE? identifier
                              ;

createExpression              : CREATE UNIQUE? objectName createArgumentList
                              ;

createArgumentList            : {createArgumentList}LPAREN 
                                (c+=createArgument ( COMMA c+=createArgument )*)? 
                                RPAREN
                              ;

createArgument                : a=attributeName GOES_TO e=expression
                              | CURRENT_STATE GOES_TO s=stateName
                              ;



findExpression                : findType p=postfixNoCallExpression 
                                w=whereClause
                              ;
                              

whereClause                   : {whereClause}LPAREN findCondition? RPAREN
                              ;

findType                      : FIND 
                              | FIND_ONE 
                              | FIND_ONLY
                              ;

postfixExpression             : ( p=primaryExpression
                                )
                                ( LPAREN a+=argumentList RPAREN
                                | DOT identifier
                                | TERMINATOR_SCOPE identifier
                                | LBRACKET e+=expression RBRACKET
                                | (PRIME characteristic LPAREN)=> 
                                  PRIME characteristic LPAREN a+=argumentList RPAREN
                                | PRIME characteristic
                                )*
                              ;

postfixNoCallExpression       : ( p=primaryExpression
                                )
                                ( DOT identifier
                                | TERMINATOR_SCOPE identifier
                                | LBRACKET e+=expression RBRACKET
                                | PRIME characteristic
                                )*
                              ;

primaryExpression             : {primaryExpression}literal
                              | parenthesisedExpression
                              | {primaryExpression}nameExpression
                              | typeNameExpression
                              ;


typeNameExpression            : {typeNameExpression}instanceTypeRef
                              | collectionTypeRef
                              ;

nameExpression                : (domainName SCOPE)? identifier
                              ;

parenthesisedExpression       : LPAREN e+=expression
                                ( COMMA e+=expression )*
                                RPAREN
                              ;


argumentList                  : {argumentList}(e1+=expression ( COMMA e1+=expression )*)?
                              ;



literal                       : INTEGERLITERAL
                              | REALLITERAL
                              //| CHARACTERLITERAL
                              | STRINGLITERAL
                              | TIMESTAMPLITERAL
                              | DURATIONLITERAL
                              | TRUE
                              | FALSE
                              | NULL
                              | FLUSH
                              | ENDL
                              | THIS
                              | CONSOLE
                              | LINE_NO
                              | FILE_NAME
                              ;


identifier                    : IDENT
                              ;


characteristic                : IDENT
                              | characteristicRW
                              ;

characteristicRW              : RANGE | DELTA
			      ;

//==============================================================================================================
//==============================================================================================================
//
// Lexer 
//
//==============================================================================================================
//==============================================================================================================


// Logical Operators
terminal AND                           : 'and';
terminal OR                            : 'or';
terminal XOR                           : 'xor';

// Unary and Additive Operators (Keep in this order to 
// improve efficiency so unary and additive can be looked 
// for as ranges) 
terminal ABS                           : 'abs';
terminal NOT                           : 'not';
terminal PLUS                          : '+';
terminal MINUS                         : '-';
terminal CONCATENATE                   : '&';
terminal UNION                         : 'union';
terminal NOT_IN                        : 'not_in';

// Multiplicactive Operators
terminal DIVIDE                        : '/';
terminal TIMES                         : '*';
terminal INTERSECTION                  : 'intersection';
terminal MOD                           : 'mod';
terminal POWER                         : '**';
terminal REM                           : 'rem';
terminal DISUNION                      : 'disunion';

// Equality Operators
terminal EQUAL                         : '=';
terminal NOT_EQUAL                     : '/=';

// Comparison Operators
terminal GT                            : '>';
terminal GTE                           : '>=';
terminal LT                            : '<';
terminal LTE                           : '<=';

// Stream Operators          
terminal STREAM_LINE_IN                : '>>>';
terminal STREAM_LINE_OUT               : '<<<';
terminal STREAM_IN                     : '>>';
terminal STREAM_OUT                    : '<<';



// Special characters
terminal ASSIGN                        : ':=';
terminal COLON                         : ':';
terminal COMMA                         : ',';
terminal DOT                           : '.';
terminal LTGT                          : '<>';
terminal PRIME                         : '\'';
terminal RANGE_DOTS                    : '..';

terminal LPAREN                        : '(';
terminal RPAREN                        : ')';

terminal LBRACKET                      : '[';
terminal RBRACKET                      : ']';

terminal SCOPE                         : '::';
terminal SEMI                          : ';';
terminal GOES_TO                       : '=>';

terminal NAVIGATE                      : '->';
terminal TERMINATOR_SCOPE              : '~>';
terminal CASE_OR                       : '|';

// Keywords
terminal ARRAY                         : 'array';
terminal ANONYMOUS                     : 'anonymous';
terminal ASSIGNER                      : 'assigner';
terminal AT                            : 'at';
terminal BAG                           : 'bag';
terminal BEGIN                         : 'begin';
terminal CANNOT_HAPPEN                 : 'Cannot_Happen' | 'cannot_happen';
terminal CANCEL                        : 'cancel';
terminal CASE                          : 'case';
terminal CONDITIONALLY                 : 'conditionally';           
terminal CONSOLE                       : 'console';
terminal CREATE                        : 'create';
terminal CREATION                      : 'creation';
terminal CURRENT_STATE                 : 'Current_State' /* | 'current_state' */;
terminal DECLARE                       : 'declare';
terminal DEFERRED                      : 'deferred';  
terminal DELAY                         : 'delay';
terminal DELETE                        : 'delete';
terminal DELTA                         : 'delta';
terminal DICTIONARY                    : 'dictionary';
terminal DIGITS                        : 'digits';
terminal DOMAIN                        : 'domain';                  
terminal ELSE                          : 'else';
terminal ELSIF                         : 'elsif';
terminal END                           : 'end';                     
terminal ENUM                          : 'enum';                     
terminal ERASE                         : 'erase';
terminal EVENT                         : 'event';
terminal EXCEPTION                     : 'exception';
terminal EXIT                          : 'exit';
terminal FIND                          : 'find' | 'find_all';
terminal FIND_ONE                      : 'find_one';
terminal FIND_ONLY                     : 'find_only';
terminal FOR                           : 'for';
terminal FUNCTION                      : 'function';                
terminal GENERATE                      : 'generate';
terminal IDENTIF                    		: 'identifier';
terminal IF                            : 'if';
terminal IGNORE                        : 'Ignore' /* | 'ignore' */;
terminal IN                            : 'in';                      
terminal INSTANCE                      : 'instance'; 
terminal IS_A                          : 'is_a';  
terminal IS                            : 'is';                      
terminal LINK                          : 'link';
terminal LOOP                          : 'loop';
terminal MANY                          : 'many';                    
terminal NON_EXISTENT                  : 'Non_Existent' | 'Non_Existant' | 'non_existent';
terminal OBJECT                        : 'object';                 
terminal OF                            : 'of';
terminal ONE                           : 'one';                     
terminal ORDERED_BY                    : 'ordered_by';
terminal OTHERS                        : 'others';
terminal OUT                           : 'out';                     
terminal PRAGMA                        : 'pragma';
terminal PREFERRED                     : 'preferred';
terminal PRIVATE                       : 'private';                 
terminal PROJECT                       : 'project';
terminal PUBLIC                        : 'public';                  
terminal RAISE                         : 'raise';
terminal RANGE                         : 'range';
terminal READONLY                      : 'readonly';
terminal REFERENTIAL                   : 'referential';
terminal RELATIONSHIP                  : 'relationship';            
terminal RETURN                        : 'return';                  
terminal REVERSE                       : 'reverse';
terminal REVERSE_ORDERED_BY            : 'reverse_ordered_by';
terminal SCHEDULE                      : 'schedule';
terminal SEQUENCE                      : 'sequence';
terminal SERVICE                       : 'service';                 
terminal SET                           : 'set';
terminal START                         : 'start';
terminal STATE                         : 'state';
terminal STRUCTURE                     : 'structure';
terminal TERMINAL                      : 'terminal';
terminal TERMINATOR                    : 'terminator';
terminal THEN                          : 'then';
terminal THIS                          : 'this';
terminal TO                            : 'to';
terminal TRANSITION                    : 'transition';
terminal TYPE                          : 'type' | 'subtype';
terminal UNCONDITIONALLY               : 'unconditionally';         
terminal UNIQUE                        : 'unique';
terminal UNLINK                        : 'unlink';
terminal USING                         : 'using';  
terminal WHEN                          : 'when';
terminal WHILE                         : 'while';
terminal WITH                          : 'with';
terminal NULL                          : 'null';
terminal FLUSH                         : 'flush';
terminal ENDL                          : 'endl';
terminal TRUE                          : 'true';
terminal FALSE                         : 'false';


terminal LINE_NO                       : '#LINE#';
terminal FILE_NAME                     : '#FILE#';


// Numeric Literals
terminal INTEGERLITERAL       :  DIGIT DIGIT? '#' BASEDDIGIT+
                              |  DIGIT+
                              ;


                              // I don't think that the predicate and type setting should be 
                              // necessary - I think it's a bug in ANTLR. Given input 
                              // 123..456, the 123 should get parsed as IntegerLiteral .. 
                              // IntegerLiteral, but the '.' in RealLiteral seems to stop 
                              // the 123 getting recognised as an integer, even though it 
                              // doesn't match RealLiteral. Hack around this by adding the predicate to stop allowing 
                              // RealLiteral to match integers as well, but adjust the token type.
terminal REALLITERAL          : DIGIT+ 
                                //( ('.' DIGIT)=> '.' DIGIT+ UNBASEDEXPONENT? 
                                //| UNBASEDEXPONENT
                                //|
                                //)
                                ('.' DIGIT+)? UNBASEDEXPONENT? 
                              | '.' DIGIT+ UNBASEDEXPONENT?
                              | DIGIT DIGIT? '#' 
                                ( BASEDDIGIT+ 
                                    //( ('.' BASEDDIGIT)=>'.' BASEDDIGIT+ BASEDEXPONENT? 
                                    ( '.' BASEDDIGIT+ BASEDEXPONENT? 
                                    | BASEDEXPONENT
                                    | '#'?
                                    )
                                | '.' BASEDDIGIT+ BASEDEXPONENT?
                                )
                              ;
                              

terminal fragment UNBASEDEXPONENT : ('e'|'E')('+'|'-')? DIGIT+
                              ;


terminal fragment BASEDEXPONENT : '#' ('+'|'-')? DIGIT+
                              ;




terminal fragment DIGIT       : '0'..'9';
terminal fragment BASEDDIGIT  : '0'..'9' | 'a'..'z' | 'A'..'Z';
terminal fragment LETTER      : 'A'..'Z' | 'a'..'z';

// Character and String Literals

terminal DURATIONLITERAL      : '@P' ( !('@' | ' ' | '\t' | '\f' | '\n' | '\r') )* '@'
                              ;
                              
terminal TIMESTAMPLITERAL     : '@' ( !('@' | ' ' | '\t' | '\f' | '\n' | '\r') )* '@'
                              ;

/*
terminal CHARACTERLITERAL     : '\''
                                ( ESCAPESEQUENCE | !('\''|'\\') ) '\''
                              ;
*/

terminal STRINGLITERAL        : '"' ( ESCAPESEQUENCE | !('\\'|'"') )* '"'
                              ;

terminal fragment ESCAPESEQUENCE : '\\' ('b'|'t'|'n'|'f'|'r'|'\"'|'\''|'\\')
                              | UNICODEESCAPE
                              | OCTALESCAPE
                              ;

terminal fragment OCTALESCAPE : '\\' ('0'..'3') ('0'..'7') ('0'..'7')
                              | '\\' ('0'..'7') ('0'..'7')
                              | '\\' ('0'..'7')
                              ;

terminal fragment UNICODEESCAPE  : '\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;
terminal fragment HEXDIGIT    : ('0'..'9'|'a'..'f'|'A'..'F') ;


// identifiers
terminal RELATIONSHIPNAME     : 'R' '1'..'9' DIGIT*
                              ;

terminal IDENT                : ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*;

terminal COMMENT              : '//' !('\n'|'\r')* '\r'? '\n';       
terminal WHITESPACE           : (' ' | '\t' | '\f' | '\n' | '\r' )+;
