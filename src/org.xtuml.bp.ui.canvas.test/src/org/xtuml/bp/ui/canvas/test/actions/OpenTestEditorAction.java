package org.xtuml.bp.ui.canvas.test.actions;

//=====================================================================
//
//File:      $RCSfile: OpenTestEditorAction.java,v $
//Version:   $Revision: 1.3 $
//Modified:  $Date: 2013/01/10 22:44:33 $
//
//(c) Copyright 2004-2014 Mentor Graphics Corporation All rights reserved.
//
//=====================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the
// License for the specific language governing permissions and limitations under
// the License.
//=====================================================================
//
//This class is responsible for opening a graphics editor for the first
//time. If an editor is reopened when it is already open, Eclipse finds
//its collaborating copy of GraphicalEditorInput and compares it with the
//one it is trying to open. It recognizes them as the same and focusses
//the already open editor instead of opening a new one.
//
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.ui.IActionDelegate;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.xtuml.bp.core.Ooaofooa;
import org.xtuml.bp.core.SystemModel_c;
import org.xtuml.bp.core.common.ClassQueryInterface_c;
import org.xtuml.bp.core.common.ILogger;
import org.xtuml.bp.ui.canvas.CanvasPlugin;
import org.xtuml.bp.ui.canvas.Diagram_c;
import org.xtuml.bp.ui.canvas.ElementInModelSpecification_c;
import org.xtuml.bp.ui.canvas.ElementSpecification_c;
import org.xtuml.bp.ui.canvas.ModelSpecification_c;
import org.xtuml.bp.ui.canvas.Model_c;
import org.xtuml.bp.ui.canvas.Modeltype_c;
import org.xtuml.bp.ui.canvas.Ooaofgraphics;
import org.xtuml.bp.ui.canvas.test.model.ConnectorElement;
import org.xtuml.bp.ui.canvas.test.model.DiagramElement;
import org.xtuml.bp.ui.canvas.test.model.ShapeElement;
import org.xtuml.bp.ui.graphics.editor.SimpleGraphicalEditorInput;

public class OpenTestEditorAction implements IActionDelegate {
	public void run(IAction action) {
		final DiagramElement current = DiagramElement.getDefaultInstance();
		// create the test Model_c instance, as it will need
		// a different model type
		ModelSpecification_c spec = ModelSpecification_c
				.ModelSpecificationInstance(Ooaofgraphics.getDefaultInstance(),
						new ClassQueryInterface_c() {

							@Override
							public boolean evaluate(Object candidate) {
								return ((ModelSpecification_c) candidate)
										.getModel_type() == Modeltype_c.TestDiagram;
							}
						});
		Model_c testModel = null;
		if (spec != null) {
			spec.setRepresents(current.getClass());
			// set represents for each element spec
			ElementSpecification_c[] elemSpecs = ElementSpecification_c
					.getManyGD_ESsOnR11(ElementInModelSpecification_c
							.getManyGD_EMSsOnR11(spec));
			for (int i = 0; i < elemSpecs.length; i++) {
				if (elemSpecs[i].getSymboltype().equals("shape")) {
					elemSpecs[i].setRepresents(ShapeElement.class);
				} else {
					elemSpecs[i].setRepresents(ConnectorElement.class);
				}
			}
			testModel = Model_c.ModelInstance(Ooaofgraphics
					.getDefaultInstance(), new ClassQueryInterface_c() {

				@Override
				public boolean evaluate(Object candidate) {
					return ((Model_c) candidate).getModel_type() == Modeltype_c.TestDiagram
							&& ((Model_c) candidate).getOoa_id().equals(
									current.Get_ooa_id());
				}
			});
			if (testModel == null) {
				Ooaofgraphics.log
						.println(ILogger.OPERATION, "Model Specification",
								" Operation entered: ModelSpecification::Elementcreated");
				Ooaofgraphics modelRoot = Ooaofgraphics.getDefaultInstance();
				testModel = new Model_c(modelRoot);
				Diagram_c diagram = new Diagram_c(modelRoot);
				diagram.relateAcrossR18To(testModel);
				spec.relateAcrossR9To(testModel);
				testModel.Initialize(current);
				testModel.setComponent(SystemModel_c.SystemModelInstance(
						Ooaofooa.getDefaultInstance())
						.getPersistableComponent());
			}
		}
		if (testModel != null) {
			try {
				SimpleGraphicalEditorInput input = new SimpleGraphicalEditorInput(
						testModel);
				if (input != null) {
					PlatformUI
							.getWorkbench()
							.getActiveWorkbenchWindow()
							.getActivePage()
							.openEditor(input,
									"org.xtuml.bp.ui.graphics.editor.ModelEditor");
				}
			} catch (PartInitException e) {
				CanvasPlugin.logError(
						"Failed to initialize Diagram Editor, reason:", e);
			}
		}
	}

	public void selectionChanged(IAction action, ISelection selection) {
		// do nothing, selection is determined from core.
	}
}