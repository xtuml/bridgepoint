drawText(" 1. Idle", 556, 439, true)
drawline(555, 444, 669, 444)
drawText("entry/GRAPH::setMouseCursor(type:"default");", 556, 447, true)
drawText(" 2. Waiting for Start Symbol", 517, 493, true)
drawline(515, 499, 733, 499)
drawText("entry/GRAPH::setMouseCursor(type:"pencil");", 517, 502, true)
drawText(" 3. Determining Mouse Down Location Suitability", 517, 553, true)
drawline(515, 558, 733, 558)
drawText("entry/select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1011];select many elements related by canvas->GD_GE[R1007];isOverSymbol = false;if (self.startsWith == "symbol")  // Check only shapes  select many elements related by canvas->GD_GE[R1007]->GD_SHP[R1006]->GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      relate self to element across R1016;      generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT4:'Unsuitable Location' to self;  end if;elif (self.startsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;end if;", 517, 561, true)
drawText(" 4. Creating First Segment", 527, 741, true)
drawline(525, 747, 718, 747)
drawText("entry/select one startElem related by self->GD_GE[R1016];select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1015];// Create connector elementcreate object instance conElem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;conElem.GE_ID = cardinality elems;// id allocatedconElem.waitingForClientElement = true;select one elem_spec related by self->GD_TOOL[R1012]->GD_ES[R1014];relate conElem to elem_spec across R1010;relate conElem to canvas across R1007;create object instance connector of GD_CON;relate conElem to connector across R1006;relate connector to startElem across R1001;// Create first line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;// Prepare canvas for drawing segmentsegment.drawing = true;segment.setStart_X(newValue: (rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPo...segment.setStart_Y(newValue: (rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYP...segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 527, 750, true)
drawText(" 5. Dragging First Segment", 531, 940, true)
drawline(530, 945, 713, 945)
drawText("entry/select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 531, 948, true)
drawText(" 6. Determining Mouse Up Location", 487, 1009, true)
drawline(486, 1015, 753, 1015)
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1011];select many elements related by canvas->GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas->GD_GE[R1007]->GD_SHP[R1006]->GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem ->GD_CON[R1006];      select one startElem related by connector->GD_GE[R1001];      if (startElem == element)        // Start and end symbols are the same        generate GD_CNT4:'Unsuitable Location' to self;      else        relate connector to element across R1000;        generate GD_CNT8:'Complete' to self;      end if;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 487, 1018, true)
drawText(" 7. Creating Element", 1147, 439, true)
drawline(1145, 444, 1353, 444)
drawText("entry/select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1015];select one parent related by self->GD_TOOL[R1012];//select any segment from instances of GD_LS where (selected.drawing);if (not_empty segment)  segment.drawing = false;end if;//select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem->GD_CON[R1006];select one startElement related by connector->GD_GE[R1001];select one endElement related by connector->GD_GE[R1000];//// Create the client instance//CLIENT::invoke2(method:parent.Method, on:canvas.represents,                      p1:startElement.OOA_ID, p2:endElement.OOA_ID);//// The work is done, get ready for another connector creation//generate GD_CNT10:Done to self;", 1147, 447, true)
drawText(" 9. Preparing to Drag Subsequent Segment", 973, 821, true)
drawline(972, 826, 1085, 826)
drawText("entry/", 973, 829, true)
drawText(" 10. Dragging Subsequent Segments", 1171, 860, true)
drawline(1170, 866, 1353, 866)
drawText("entry/select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 1171, 869, true)
drawText(" 11. Tracking End Segment without Drawing", 819, 816, true)
drawline(818, 821, 937, 821)
drawText("entry/select one canvas related by self->GD_TOOL[R101...select any segment from instances of GD_LS wher...segment.setEnd_X(newValue:segment.End_X + (rc...segment.setEnd_Y(newValue:segment.End_Y + (r...", 819, 824, true)
drawText(" 12. Determining Subsequent Mouse Up Location Suitability", 1127, 598, true)
drawline(1125, 603, 1403, 603)
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1011];select many elements related by canvas->GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas->GD_GE[R1007]->GD_SHP[R1006]->GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem ->GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 1127, 606, true)
drawText(" 13. Mouse up at Beginning of Segment", 973, 910, true)
drawline(972, 916, 1085, 916)
drawText("entry/", 973, 918, true)
drawText(" 8. Creating Subsequent Segment", 864, 622, true)
drawline(863, 628, 1076, 628)
drawText("entry/select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1015];select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem ->GD_CON[R1006];// Create subsequent line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;select any lastSegment related by connector->GD_LS[R1004] where (selected.drawing);lastSegment.setEnd_X(newValue:(rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPos);lastSegment.setEnd_Y(newValue:(rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYPos);relate segment to lastSegment across R1003.'follows';lastSegment.drawing = false;// Prepare segment for drawingsegment.drawing = true;segment.Start_X = lastSegment.End_X;segment.Start_Y = lastSegment.End_Y;segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 864, 631, true)
drawText(" 14. Mouse Down Tracking End Segment without Drawing", 1171, 955, true)
drawline(1170, 960, 1328, 960)
drawText("entry/", 1171, 963, true)
drawText(" 15. Determining Mouse Up Location without Drawing", 804, 1009, true)
drawline(803, 1015, 1071, 1015)
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self->GD_TOOL[R1012]->GD_MD[R1011];select many elements related by canvas->GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas->GD_GE[R1007]->GD_SHP[R1006]->GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem ->GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // If we get here, the mouse button was pressed and released without moving,    //  create a new segment by transitioning back to Creating Subsequent Segment    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT8:Complete to self;  end if;end if;", 804, 1018, true)
drawText(" 16. Clearing Partly Drawn Connector", 303, 493, true)
drawline(302, 499, 465, 499)
drawText("entry/select many elements related by self->GD_TOOL[R1012]->GD_MD[R1...                                                where (selected.waitingForClientElem...for each element in elements  element.delete();end for;generate GD_CNT10:Done to self;", 303, 502, true)
drawText(" 17. Creating Segment without Mouse Move", 383, 707, true)
drawline(381, 712, 490, 712)
drawText("entry/generate GD_CNT4:'Unsuitable Location' to self;", 383, 715, true)
drawPolyline("585, 471, 585, 491)
drawText("GD_CNT1:", 0, 1, true)
drawText("Activate", 0, 7, true)
drawPolyline("587, 487, 585, 491, 583, 487)
drawPolyline("634, 491, 634, 471)
drawText("GD_CNT2:", 0, 1, true)
drawText("Deactivate", 0, 7, true)
drawPolyline("633, 474, 634, 471, 636, 474)
drawPolyline("585, 540, 585, 550)
drawText("GD_CNT3: Mouse", 0, 1, true)
drawText("Down(X, Y)", 0, 7, true)
drawPolyline("587, 546, 585, 550, 583, 546)
drawPolyline("634, 550, 634, 540)
drawText("GD_CNT4:", 0, 1, true)
drawText("Unsuitable Location", 0, 7, true)
drawPolyline("633, 544, 634, 540, 636, 544)
drawPolyline("1145, 515, 734, 515)
drawText("GD_CNT10:", 0, 1, true)
drawText("Done", 0, 7, true)
drawPolyline("737, 517, 734, 515, 737, 513)
drawPolyline("466, 520, 515, 520)
drawText("GD_CNT10:", 0, 1, true)
drawText("Done", 0, 7, true)
drawPolyline("512, 518, 515, 520, 512, 522)
drawPolyline("610, 724, 610, 739)
drawText("GD_CNT5: Suitable", 0, 1, true)
drawText("Location(X, Y)", 0, 7, true)
drawPolyline("611, 735, 610, 739, 608, 735)
drawPolyline("610, 917, 610, 937)
drawText("GD_CNT7: Mouse", 0, 1, true)
drawText("Move(X, Y)", 0, 7, true)
drawPolyline("611, 933, 610, 937, 608, 933)
drawPolyline("525, 843, 436, 843, 436, 773)
drawText("GD_CNT6: Mouse", 0, 1, true)
drawText("Up(X, Y)", 0, 7, true)
drawPolyline("434, 777, 436, 773, 438, 777)
drawPolyline("585, 987, 585, 1006)
drawText("GD_CNT6:", 0, 2, true)
drawText("Mouse Up(X, Y)", 0, 7, true)
drawPolyline("587, 1003, 585, 1006, 583, 1003)
drawPolyline("605, 987, 605, 1001, 664, 1001, 664, 987)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("662, 990, 664, 987, 666, 990)
drawPolyline("753, 1081, 763, 1081, 763, 555, 1145, 555)
drawText("GD_CNT8:", 0, 1, true)
drawText("Complete", 0, 7, true)
drawPolyline("1142, 553, 1145, 555, 1142, 557)
drawPolyline("753, 1175, 788, 1175, 788, 669, 863, 669)
drawText("GD_CNT5:", 0, 1, true)
drawText("Suitable", 0, 7, true)
drawText("Location(X,", 0, 13, true)
drawText("Y)", 0, 19, true)
drawPolyline("859, 667, 863, 669, 859, 671)
drawPolyline("486, 1091, 367, 1091, 367, 550)
drawText("GD_CNT4:", 0, 1, true)
drawText("Unsuitable Location", 0, 7, true)
drawPolyline("365, 554, 367, 550, 368, 554)
drawPolyline("1264, 595, 1264, 575)
drawText("GD_CNT8:", 0, 1, true)
drawText("Complete", 0, 7, true)
drawPolyline("1262, 579, 1264, 575, 1266, 579)
drawPolyline("1071, 1140, 1423, 1140, 1423, 515, 1354, 515)
drawText("GD_CNT8:", 0, 1, true)
drawText("Complete", 0, 7, true)
drawPolyline("1357, 517, 1354, 515, 1357, 513)
drawPolyline("1086, 843, 1111, 843, 1111, 887, 1170, 887)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("1166, 885, 1170, 887, 1166, 889)
drawPolyline("1051, 858, 1051, 907)
drawText("GD_CNT6:", 0, 1, true)
drawText("Mouse Up(X, Y)", 0, 7, true)
drawPolyline("1053, 903, 1051, 907, 1049, 903)
drawPolyline("1026, 758, 1026, 818)
drawText("GD_CNT3:", 0, 2, true)
drawText("Mouse", 0, 7, true)
drawText("Down(X, Y)", 0, 13, true)
drawPolyline("1028, 814, 1026, 818, 1024, 814)
drawPolyline("1001, 907, 1001, 858)
drawText("GD_CNT3:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Down(X, Y)", 0, 13, true)
drawPolyline("1000, 861, 1001, 858, 1003, 861)
drawPolyline("1304, 907, 1304, 922, 1254, 922, 1254, 907)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("1253, 911, 1254, 907, 1256, 911)
drawPolyline("1264, 858, 1264, 798)
drawText("GD_CNT6: Mouse", 0, 1, true)
drawText("Up(X, Y)", 0, 7, true)
drawPolyline("1262, 802, 1264, 798, 1266, 802)
drawPolyline("1230, 952, 1230, 907)
drawText("GD_CNT7:", 0, 2, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("1228, 911, 1230, 907, 1231, 911)
drawPolyline("907, 813, 907, 793, 858, 793, 858, 813)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("859, 809, 858, 813, 856, 809)
drawPolyline("897, 877, 897, 977, 1170, 977)
drawText("GD_CNT3:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Down(X, Y)", 0, 13, true)
drawPolyline("1166, 975, 1170, 977, 1166, 978)
drawPolyline("972, 932, 952, 932, 952, 843, 937, 843)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("941, 845, 937, 843, 941, 841)
drawPolyline("863, 719, 833, 719, 833, 813)
drawText("GD_CNT7:", 0, 1, true)
drawText("Mouse", 0, 7, true)
drawText("Move(X, Y)", 0, 13, true)
drawPolyline("835, 809, 833, 813, 831, 809)
drawPolyline("1125, 689, 1076, 689)
drawText("GD_CNT5:", 0, 1, true)
drawText("Suitable", 0, 7, true)
drawText("Location(X,", 0, 13, true)
drawText("Y)", 0, 19, true)
drawPolyline("1080, 691, 1076, 689, 1080, 687)
drawPolyline("813, 1006, 813, 699, 863, 699)
drawText("GD_CNT5:", 0, 1, true)
drawText("Suitable", 0, 7, true)
drawText("Location(X,", 0, 13, true)
drawText("Y)", 0, 19, true)
drawPolyline("859, 697, 863, 699, 859, 701)
drawPolyline("1230, 1016, 1230, 1086, 1071, 1086)
drawText("GD_CNT6: Mouse", 0, 1, true)
drawText("Up(X, Y)", 0, 7, true)
drawPolyline("1075, 1088, 1071, 1086, 1075, 1084)
drawPolyline("436, 704, 436, 550)
drawText("GD_CNT4:", 0, 1, true)
drawText("Unsuitable Location", 0, 7, true)
drawPolyline("434, 554, 436, 550, 438, 554)