GPS WATCH PROJECT STRUCTURE
----------------------------
The project consists of three executable entities:

1. A Java based GUI
2. A model running in xtUML eXecute along with some Java that handles GUI I/O 
3. A compiled program resulting from generated code plus some handwritten C that 
   does the equivalent of the Java code in 2

   
RUNNING THE PROJECT
--------------------
An execution configuration exists in order to launch the GUI. To create 
run the Watch GUI:

* Open the C/C++ Projects perspective (Window > Open Perspective > Other... > C/C++) 
* Run > Run Configurations...
* Expand the Java Application item
* Select "GPS Watch UI"
* Click Run

The GUI is designed to allow applications (xtUML eXecute sessions and generated code) 
to connect interchangeably, meaning there is no need to restart the GUI between 
various sessions. When a new connection is detected the GUI will simply drop any 
existing connection and only service the recently detected connection.

You can now run either the already generated Windows executable, Linux executable, 
or run the model in xtUML eXecute.

To run the EXE:
* Expand the Binaries item under the project
* Right-click on "GPS Watch.exe" and choose Open With > System Editor
* The application will connect to the GUI automatically.  Click the START/STOP 
  button on the watch, you will see the watch execute on the GUI and in the 
  command prompt console.  The MODE button causes GUI changes as well.

To run the model in xtUML eXecute:
* Switch to the xtUML Debugging Perspective (Window > Open Perspective > Other... > xtUML Debugging)
* Run > Debug Configurations...
* Expand the xtUML eXecute Application item
* Select "GPS Watch"
* Click Debug
* In Session Explorer, expand GPS Watch > GPS Watch::Library::UI > GPS Watch::Library::UI > UI (package) > UI
* Right-click 'connect', select Execute
* Now the GUI may be used to drive execution.

You will also notice a "GPS Watch with Initializer" launch configuration here.  This
launch does not use the interactive GUI.  Instead, it starts and automated test 
case that does its own stimulus and response.

BUILDING THE PROJECT
---------------------
The project is pre-built for Windows, so building the project on Windows is not 
necessary. To run on Linux you must rebuild.

If you want to rebuild the project for Linux or after modifying the model or a marking file:

* Switch to the C/C++ perspective
* Right-click on the project and choose 'Build Configurations > Set Active > ...
   and set the build configuration you want.
* Right-click on the project and choose 'Build Project' in the context menu

There might be warnings/errors in the project resulting from an unresolved build path.
The Java code that is used to extend xtUML eXecute depends on a BridgePoint jar file 
called core.jar. If the path to core.jar is wrong you must follow these steps to 
resolve it:

* Open the Java perspective: Window > Open Perspective > Java
* Right-click the project and select Build Path > Configure Build Path...
* In the wizard click the Libraries tab
* Select core.jar and click Edit...
* Locate core.jar:
    <BridgePoint installation folder>\eclipse_extensions\BridgePoint\eclipse\plugins\org.xtuml.bp.core_<version>\core.jar
* OK all pop-ups


Have fun!
